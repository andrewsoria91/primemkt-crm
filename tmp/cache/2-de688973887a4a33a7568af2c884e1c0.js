

GO.settings.modules = Ext.decode("{\"comments\":{\"id\":\"comments\",\"version\":13,\"sort_order\":0,\"admin_menu\":false,\"acl_id\":4,\"enabled\":true,\"url\":\"\\/modules\\/comments\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/comments\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/comments\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"email\":{\"id\":\"email\",\"version\":92,\"sort_order\":1,\"admin_menu\":false,\"acl_id\":5,\"enabled\":true,\"url\":\"\\/modules\\/email\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/email\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/email\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"users\":{\"id\":\"users\",\"version\":0,\"sort_order\":2,\"admin_menu\":true,\"acl_id\":6,\"enabled\":true,\"url\":\"\\/modules\\/users\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/users\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/users\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"modules\":{\"id\":\"modules\",\"version\":0,\"sort_order\":3,\"admin_menu\":true,\"acl_id\":7,\"enabled\":true,\"url\":\"\\/modules\\/modules\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/modules\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/modules\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"tasks\":{\"id\":\"tasks\",\"version\":55,\"sort_order\":4,\"admin_menu\":false,\"acl_id\":8,\"enabled\":true,\"url\":\"\\/modules\\/tasks\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/tasks\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/tasks\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"calendar\":{\"id\":\"calendar\",\"version\":170,\"sort_order\":5,\"admin_menu\":false,\"acl_id\":9,\"enabled\":true,\"url\":\"\\/modules\\/calendar\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/calendar\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/calendar\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"mediawiki\":{\"id\":\"mediawiki\",\"version\":0,\"sort_order\":6,\"admin_menu\":false,\"acl_id\":10,\"enabled\":true,\"url\":\"\\/modules\\/mediawiki\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/mediawiki\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/mediawiki\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"customfields\":{\"id\":\"customfields\",\"version\":99,\"sort_order\":7,\"admin_menu\":false,\"acl_id\":11,\"enabled\":true,\"url\":\"\\/modules\\/customfields\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/customfields\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/customfields\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"addressbook\":{\"id\":\"addressbook\",\"version\":296,\"sort_order\":8,\"admin_menu\":false,\"acl_id\":12,\"enabled\":true,\"url\":\"\\/modules\\/addressbook\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/addressbook\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/addressbook\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"cron\":{\"id\":\"cron\",\"version\":0,\"sort_order\":10,\"admin_menu\":true,\"acl_id\":19,\"enabled\":true,\"url\":\"\\/modules\\/cron\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/cron\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/cron\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"summary\":{\"id\":\"summary\",\"version\":17,\"sort_order\":11,\"admin_menu\":false,\"acl_id\":20,\"enabled\":true,\"url\":\"\\/modules\\/summary\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/summary\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/summary\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"sieve\":{\"id\":\"sieve\",\"version\":0,\"sort_order\":12,\"admin_menu\":false,\"acl_id\":21,\"enabled\":true,\"url\":\"\\/modules\\/sieve\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/sieve\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/sieve\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"groups\":{\"id\":\"groups\",\"version\":0,\"sort_order\":13,\"admin_menu\":true,\"acl_id\":22,\"enabled\":true,\"url\":\"\\/modules\\/groups\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/groups\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/groups\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"files\":{\"id\":\"files\",\"version\":109,\"sort_order\":14,\"admin_menu\":false,\"acl_id\":23,\"enabled\":true,\"url\":\"\\/modules\\/files\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/files\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/files\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"search\":{\"id\":\"search\",\"version\":0,\"sort_order\":15,\"admin_menu\":false,\"acl_id\":26,\"enabled\":true,\"url\":\"\\/modules\\/search\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/search\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/search\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"notes\":{\"id\":\"notes\",\"version\":27,\"sort_order\":16,\"admin_menu\":false,\"acl_id\":27,\"enabled\":true,\"url\":\"\\/modules\\/notes\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/notes\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/notes\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"tools\":{\"id\":\"tools\",\"version\":0,\"sort_order\":17,\"admin_menu\":true,\"acl_id\":29,\"enabled\":true,\"url\":\"\\/modules\\/tools\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/tools\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/tools\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true},\"bookmarks\":{\"id\":\"bookmarks\",\"version\":18,\"sort_order\":18,\"admin_menu\":false,\"acl_id\":30,\"enabled\":true,\"url\":\"\\/modules\\/bookmarks\\/\",\"path\":\"\\/home\\/primemkt\\/public_html\\/erp\\/modules\\/bookmarks\\/\",\"full_url\":\"http:\\/\\/erp.primemktstudio.com\\/modules\\/bookmarks\\/\",\"permission_level\":50,\"read_permission\":true,\"write_permission\":true}}");

Ext.ns("GO.comments");Ext.ns("GO.email");Ext.ns("GO.users");Ext.ns("GO.modules");Ext.ns("GO.tasks");Ext.ns("GO.calendar");Ext.ns("GO.mediawiki");Ext.ns("GO.customfields");Ext.ns("GO.addressbook");Ext.ns("GO.cron");Ext.ns("GO.summary");Ext.ns("GO.sieve");Ext.ns("GO.groups");Ext.ns("GO.files");Ext.ns("GO.search");Ext.ns("GO.notes");Ext.ns("GO.tools");Ext.ns("GO.bookmarks");if(GO.customfields){Ext.ns("GO.customfields.columns");Ext.ns("GO.customfields.types");}GO.users.lang={"cmdCheckColumnRead":"Lectura","cmdCheckColumnWrite":"Escritura","cmdHeaderColumnName":"Nombre de columna","cmdHeaderGridUserHasAccess":"El usuario tiene acceso a ","userIsMemberOf":"El usuario es miembro de","userVisibleTo":"El usuario es visible a","cmdPanelPersonal":"Personal","cmdPanelPassword":"Contrase\u00f1a","cmdPanelCompany":"Empresa","cmdPanelPermissions":"Permisos","cmdPanelLogin":"Acceso","cmdPanelLookFeel":"Aspecto y temas","cmdPanelSettings":"Configuraci\u00f3n","cmdPanelEnabledMail":"E-mail para nuevos usuarios","cmdPanelDisabledMail":"E-mail para nuevos usuarios con discapacidad","cmdFieldSetPersonal":"Personal","cmdUserWindowTitle":"Modificar usuario","cmdNotificationWindowTitle":"Editar el t\u00edtulo del E-mail","cmdMaskSaving":"Guardar","cmdFormLabelSubject":"Objeto","cmdFormLabelUsername":"Nombre usuario","cmdFormLabelName":"Nombre","cmdFormLabelPassword":"Contrase\u00f1a","cmdFormLabelConfirm":"Confirmaci\u00f3n","cmdBoxLabelEnabled":"Habilitado","cmdFormLabelHomepage":"P\u00e1gina inicial","cmdFormLabelRegistrationTime":"Fecha registro","cmdFormLabelLastLogin":"\u00daltimo acceso","cmdFormLabelTotalLogins":"Total accesos","numberOfLogins":"N\u00ba accesos","cmdFormLabelTheme":"Tema","cmdFormLabelStartModule":"M\u00f3dulo de inicio","cmdFormLabelMaximunRows":"N\u00famero m\u00e1ximo de filas en listas","cmdFormLabelSortNamesBy":"Agrupar nombres por","cmdFormLabelLanguage":"Idioma","cmdFormLabelTimezone":"Zona horaria","cmdFormLabelAdjustDaylight":"Ajustar hora de verano","cmdFormLabelDateFormat":"Formato fecha","cmdFormLabelDateSeperator":"Separador fecha","timeFormat":"Formato de hora","cmdFormLabelFirstWeekday":"Primer d\u00eda de la semana","cmdFormLabelThousandSeperator":"Separador miles","cmdFormLabelDecimalSeperator":"Separador decimales","cmdFormLabelCurrency":"Moneda","account":"Cuenta","companyProfile":"Perfil de Compa\u00f1\u00eda","loginInfo":"Acerca del acceso","changePassword":"Cambiar contrase\u00f1a","currentPassword":"Contrase\u00f1a actual","newPassword":"Nueva contrase\u00f1a","confirmPassword":"Confirmar contrase\u00f1a","moduleAccess":"Forma de acceso","groupMembership":"Miembro del grupo","personalProfile":"Perfil","settings":"Ajustes personales","dmy":"d\u00eda-mes-a\u00f1o","mdy":"Mes-D\u00eda-A\u00f1o","jmd":"A\u00f1o-Mes-D\u00eda","fullhourformat":"Formato 24 horas","halfhourformat":"Formato 12 horas","sunday":"Domingo","monday":"Lunes","regionalSettings":"Configuraci\u00f3n regional","userSettings":"Configuraci\u00f3n usuario","profile":"Perfil","maxUsersReached":"N\u00famero m\u00e1ximo de usuarios alcanzado. Se debe de gestionar la ampliaci\u00f3n del n\u00famero de usuarios.","group":"Grupo","muteSound":"Sin sonido","mailReminders":"Recibir mails recordatorios","downloadSampleCSV":"Descargar muestra de CSV","importText":"Esposible importar usuarios mediante un fichero CSV. Para conocer la forma en que el CSV debe ser formateado, descargar el fichero de ejemplo. <br \/> La primera l\u00ednea debe contener los nombres de columna. Los siguientes campos son obligatorios para cada usuario: <br \/> <br \/> nombre de usuario, contrase\u00f1a, nombre, apellidos, direcci\u00f3n de correo electr\u00f3nico.","useModule":"Usar","manageModule":"Administrar","numberFormat":"Formato de n\u00fameros","importExport":"Importar \/ Exportar","listSeparator":"Separador de lista","textSeparator":"Separador de texto","deleteWarning":"ATENCI\u00d3N!!! Toda la informaci\u00f3n del usuario incluyendo lista de contactos, calendarios, etc. sera eliminada","lastName":"Apellidos","firstName":"Nombre","sendInvitation":"Enviar invitaci\u00f3n","contactInfo":"Informaci\u00f3n del contacto","popupNotification":"Mostrar ventana de notificaci\u00f3n de tareas o cuando llega un e-mail nuevo","popupReminderNotification":"Show a popup window when a reminder becomes active","popupEmailNotification":"Show a popup window when an e-mail arrives","muteNewMailSound":"Silenciar sonido de aviso de nuevo mail","muteReminderSound":"Silenciar sonidos de recordatorio","showSmilies":"Mostrar smilies","autoPunctuation":"Mayuscula despues de puntuacion","name":"Gesti\u00f3n de usuarios","description":"M\u00f3dulo de administraci\u00f3n y gesti\u00f3n de los usuarios de la plataforma.","deletePrimaryAdmin":"Usted no puede elimina l'Administrador Principal","deleteYourself":"No puede eliminar su propio Usuario","error_username":"Hay caracteres no v\u00e1lidos en el nombre de usuario","error_username_exists":"Este nombre de usuario ya existe","error_email_exists":"Esta direcci\u00f3n de correo electr\u00f3nico ya est\u00e1 registrado. Puede utilizar la funci\u00f3n de contrase\u00f1a olvidada para recuperar tu contrase\u00f1a.","error_match_pass":"La contrase\u00f1a es incorrecta","error_email":"La direcci\u00f3n de correo electr\u00f3nico no es v\u00e1lida","error_user":"No se pudo crear el usuario","imported":"%s importados de usuario","failed":"Error","incorrectFormat":"El formato del fichero CSV no es correcto","register_email_subject":"Detalles de su nueva cuenta","register_email_body":"Se ha creado una cuenta de Group-Office para Ud. en la siguiente direcci\u00f3n de Internet: {url}\n\nSus datos de registro son los siguientes:\n\nUsuario: {username};\nContrase\u00f1a: {password}","max_users_reached":"Se ha alcanzado el n\u00famero m\u00e1ximo de usuarios para este sistema","dashdmy":"D\u00eda-Mes-A\u00f1o","slashmdy":"Mes\/D\u00eda\/A\u00f1o","dotdmy":"D\u00eda.Mes.A\u00f1o","slashdmy":"D\u00eda\/Mes\/A\u00f1o","slashymd":"A\u00f1o-Mes-D\u00eda","dotymd":"A\u00f1o.Mes-D\u00eda","generatePassword":"Generar contrase\u00f1a","generatedPasswordIs":"La contrase\u00f1a generada es","openContact":"Abrir contacto","showProUsers":"Mostrar usuarios pro","updateExistingOnImport":"Actualizar usuarios existentes (por nombre de usuario)","resetState":"Reiniciar estado de ventanas y listas","resetStateConfirm":"\u00bfSeguro que desea reiniciar todas las rejillas, columnas, ventanas,  paneles, etc... a los tama\u00f1os predefinidos de f\u00e1brica?","registrationEmail":"E-mail de registro","enabledSettingtabs":"Activar pesta\u00f1as de configuraci\u00f3n","explanation_cf_settingspanels":"Para poder mostrar las pesta\u00f1as de campos personalizados en el panel de configuraci\u00f3n, es necesario que el usuario tenga al menos el permiso de \"Lectura\" sobre el m\u00f3dulo de campos personalizados.","addresslist_panel":"Panel de listas de contactos","show_addresslists_panel":"Mostrar panel de listas de contactos","enabled_cf_tabs":"Activar pesta\u00f1a de campos personalizados","cmdFormLabelHolidaySet":"Plantilla de vacaciones","diskSpace":"Espacio en disco","diskQuota":"Cuota de disco","spaceUsed":"Espacio utilizado","noReminders":"No crear recordatorios para mi","transferData":"Transferir","desktopNotificationsActive":"Desktop notifications active","id":"ID","forcePasswordChange":"Force password change on next login"};GO.comments.lang={"recentComments":"Comentarios recientes","browseComments":"Ver comentarios","name":"Comentario","description":"A\u00f1adir comentarios a la funcionalidad de otros m\u00f3dulos","comment":"Comentario","comments":"Comentarios","manageCategories":"Administrar categor\u00edas","category":"Categor\u00eda","noCategory":"Sin categor\u00eda","newCommentText":"Introducir aqu\u00ed un nuevo comentario...","readMore":"Leer m\u00e1s","enableReadMore":"Activar leer m\u00e1s comentarios","actionDate":"Fecha destacada","parent":"Origen","originalCommentTabs":"Original comment tabs","disableOriginalCommentsContact":"Hide original comments tab in contact dialog","disableOriginalCommentsCompany":"Hide original comments tab in company dialog"};GO.email.lang={"forwardTo":"Reenviar e-mail a:","messages":"Mensajes","message":"Mensaje","accounts":"Cuentas","account":"Cuenta","crossAccountMove":"No es posible mover los mensajes a otra cuenta","compose":"Redactar","reply":"Responder","replyAll":"Responder a todos","markAsRead":"Marcar como le\u00eddo","markAsUnread":"Marcar como no le\u00eddo","flag":"Marcar como importante","unflag":"Quitar marca importante","flagged":"Importante","unflagged":"No importante","root":"Raiz","folders":"Carpetas","filter":"Filtro","filters":"Reglas de correo","selectFolderDelete":"Seleccione carpeta a eliminar","selectFolderAdd":"Seleccionar la ruta donde se desea a\u00f1adir la nueva carpeta y a continuaci\u00f3n pulsar sobre A\u00f1adir","selectFolderRename":"Seleccione la carpeta que quiere renombrar","forward":"Reenviar","resetSearch":"Reiniciar b\u00fasqueda","emailMessage":"Mensaje de correo electr\u00f3nico","host":"Host","field":"Campo","contains":"Contiene","moveToFolder":"Mover a carpeta","incomingMail":"Bandeja de entrada","advanced":"Avanzado","ssl":"SSL","tls":"TLS","novalidateCert":"No se puede validar el certificado","port":"Puerto","rootMailbox":"buz\u00f3n ra\u00edz","manageFolders":"Administrar carpetas","sendItemsFolder":"Carpeta de Correos enviados","trashFolder":"Papelera","draftsFolder":"Carpeta de borradores","sender":"Remitente","toField":"Campo para","ccField":"Campo CC","showCcByDefault":"Mostrar CC por defecto","showBccByDefault":"Mostrar BCC por defecto","bccField":"Campo CCO","keyword":"Palabra clave","notification":"Solicitar notificaci\u00f3n de lectura","high":"Alta","normal":"Normal","low":"Baja","sendTo":"Para","cc":"CC","bcc":"CCO","selectTemplate":"Seleccione un modelo","composeEmail":"Enviar un e-mail","send":"Enviar","extraOptions":"Opciones extra","show":"Mostrar","noAccount":"No se ha configurado ninguna cuenta de correo. Ir a Administraci\u00f3n -> Cuentas para a\u00f1adir una cuenta.","attachFiles":"Adjuntar archivos","uploadAttachments":"Adjuntar ficheros","startTransfer":"Comenzar transferencia","cantEditFolder":"No se puede editar esta carpeta","cantDeleteInboxFolder":"No se puede eliminar la Bandeja de entrada","cantRenameInboxFolder":"No se puede renombrar la carpeta de Entrada","enterFolderName":"Introduzca el nombre de la carpeta:","addFolder":"A\u00f1adir carpeta","downloadAllAsZip":"Bajar todos como archivo .zip","body":"Cuerpo","recievedBefore":"Recibido antes de","recievedSince":"Recibido desde","answered":"Respondido","unanswered":"Sin Responder","viewed":"Le\u00eddo","outgoingMail":"Mensajes enviados","encryption":"Codificaci\u00f3n","type":"Tipo","noEncryption":"Sin codificar","noAccountTitle":"Sin cuenta","priority":"Prioridad","read":"Le\u00eddo","NA":"N\/A","emptyFolder":"Vaciar carpeta","emptyFolderConfirm":"\u00bfEst\u00e1 seguro de querer VACIAR '{name}'?","markFolderReadConfirm":"\u00bfMarcar todos los mensajes de la carpeta '{name}' como le\u00eddos?","addUnknownRecipients":"A\u00f1adir destinatarios desconocidos","addUnknownRecipientsText":"Usted acaba de enviar un e-mail a uno o m\u00e1s destinatarios que no figuran en su lista de contactos. Haga click en el nombre si desea a\u00f1adir esa persona o cierre esta ventana.","addUnknownSenders":"A\u00f1adir remitentes desconocidos","addUnknownSendersText":"Estas a\u00f1adiendo los remitentes del email seleccionado a la lista de correo. Antes, los siguietnes remitentes seleccionados deben ser a\u00f1adidos a la libreta de contactos. Pincha en un nombre si quieres a\u00f1adir a esa persona o cierra la ventana.","attachFilesPC":"A\u00f1adir desde su PC","attachFilesGO":"A\u00f1adir desde Group-Office","renameFolder":"Renombrar carpeta","vacation":"Respuesta autom\u00e1tica","vacationActive":"Activar la funci\u00f3n de respuesta autom\u00e1tica","vacationSubject":"Objeto","vacationBody":"Cuerpo","addToRecipients":"A\u00f1adir a los destinatarios","addToCC":"A\u00f1adir a CC","addToBCC":"A\u00f1adir a CCO","viewSource":"Ver c\u00f3digo fuente","sendNotification":"El remitente de este mensaje ha solicitado una notificaci\u00f3n de lectura del mensaje a: %s. \u00bfDesea enviar la confirmaci\u00f3n?","searchOnSender":"Mostrar mensajes en la carpeta actual","blocked":"{blocked_images} im\u00e1genes externas fueron bloqueados por seguridad.","unblock":"Puede pulsar aqu\u00ed para desbloquearlas ","loadEmailFirst":"Para utilizar esta funci\u00f3n, se debe a\u00f1adir su direcci\u00f3n de correo en la pesta\u00f1a de e-mail","confirmEmptySubject":"El mensaje no tiene asunto (t\u00edtulo). \u00bfEst\u00e1 seguro de enviarlo sin asunto?","searchGO":"Buscar en todo Group-Office","toggleWindowPosition":"Cambiar vista","closeUploadDialog":"Cerrar ventana de adjuntos o esperar a que termine la ingesta","defaultProgram":"Gestor de correo predeterminado","htmlMarkup":"Utilizar HTML","confirmLostChanges":"Los cambios se perder\u00e1n. \u00bfEsta seguro?","accountId":"Id de cuenta","email":"Email","signature":"Firma","manageAliases":"Alias de correo","addSendersTo":"A\u00f1adir remitente a...","deleteSendersFrom":"Eliminar remitente de...","defaultTemplate":"Usar el template seleccionado por defecto","defaultEmailTemplate":"Plantilla de correo Por defecto","moving":"Moviendo...","orderFilters":"Puede modificar el orden de los filtro arrastr\u00e1ndolos.","orderAccounts":"Puede modificar el orden de las cuentas arrastra\u00e1ndolas.","groups":"Grupos","showUnread":"Mostrar no le\u00eddos","searchFrom":"Remitente","searchTo":"Destinatario","searchCC":"Destinatario (CC)","youHaveNewMails":"Han llegado {new} nuevo(s) mensaje(s) de correo","replaceEmailText":"Este contacto ya tienen 3 direcciones de mail. Puedes reemplazar una de las existentes pinchando en la direcci\u00f3n que quieras reemplazar.","skipUnknownRecipientsAction":"No mostrar esta ventana la pr\u00f3xima vez","skipUnknownRecipients":"No mostrar ventana de destinatarios desconocidos","alwaysRequestNotification":"Solicitar siempre una notificaci\u00f3n de lectura","icalendarUpdateEvent":"Actualizar Evento","icalendarOpenEvent":"Abrir Evento","icalendarDeleteEvent":"Eliminar Evento","icalendarAcceptInvitation":"Aceptar","icalendarDeclineInvitation":"Rechazar","icalendarTentativeInvitation":"Quiz\u00e1s","alwaysRespondToNotifications":"Responder siempre a una notificaci\u00f3n de lectura","anyField":"Cualquier campo","icalendarEventUpdated":"El evento ha sido actualizado.","icalendarEventCreated":"El evento ha sido creado.","icalendarEventDeleted":"El evento ha sido eliminado.","icalendarInvitationDeclined":"La invitaci\u00f3n ha sido rechazada.","icalendarDeleteEventConfirm":"\u00bfEst\u00e1s seguro de que quieres eliminar este evento?","sending":"Enviando...","defaultFontSize":"Tama\u00f1o de fuente por defecto","emailFiles":"E-mail con adjunto(s)","shareFolder":"Compartir","readPerm":"Leer","writePerm":"Escribir","deletePerm":"Eliminar","createMailboxPerm":"Crear buz\u00f3n","deleteMailboxPerm":"Eliminar buz\u00f3n","adminPerm":"Administrar","moveOldMails":"Mover mails antiguos","moveOldMailsInstructions":"Selecciona una fecha. Si despu\u00e9s pinchas en OK, todos los emails de la carpeta anteriores a la fecha seleccionada ser\u00e1n movidos a la carpeta de destino.","folder":"Carpeta","moveOldMailsSure":"\u00bfEst\u00e1s seguro de que quieres mover todos los emails anteriores a {date} desde \"{source}\" a \"{target}\"?","nMovedMailsTxt":"El n\u00famero de mensajes movidos es","deletingEmails":"Eliminando emails...","everythingBefore":"Todos los emails anteriores","alsoChildren":"Aplicar tambi\u00e9n a los emails de las subcarpetas.","name":"Email","description":"M\u00f3dulo de e-mail. Los usuarios podr\u00e1n enviar y recibir mails","feedbackNoReciepent":"Debe ingresar un destinatario","feedbackSMTPProblem":"Problema de conexi\u00f3n con el servidor SMTP:","feedbackUnexpectedError":"Error inesperado al crear el email","feedbackCreateFolderFailed":"No es posible crear la carpeta","feedbackDeleteFolderFailed":"No es posible eliminar la carpeta","feedbackSubscribeFolderFailed":"No es posible eliminar la carpeta","feedbackUnsubscribeFolderFailed":"No es posible quitar suscripci\u00f3n a la carpeta","feedbackCannotConnect":"No es posible conectar con %1$s puerto %3$s<br\/><br\/> El servidor de correos devolvi\u00f3: %2$s","inbox":"Bandeja de entrada","trash":"Papelera","sent":"Mensajes enviados","drafts":"Borradores","no_subject":"Sin asunto","to":"Para","from":"De","subject":"ASUNTO","no_recipients":"Destinatarios ocultos","original_message":"--- Mensaje original ---","attachments":"Adjuntos","notification_subject":"Leer: %s","notification_body":"Su mensaje con el asunto \"%s\" fue mostrado a las %s","errorGettingMessage":"No es posible obtener mensajes del servidor","no_recipients_drafts":"Sin destinatarios","usage_limit":"%s de %s usado","usage":"%s usado","event":"Evento","calendar":"calendario","quotaError":"Su casilla esta llena. Vac\u00ede su papelera. Si ya se encuentra vac\u00eda y su casilla sigue llena, debe deshabilitar la papelera y luego eliminar mensajes de sus otras carpetas. Puede deshabilitar la papelera en:\n\nAdministraci\u00f3n -> Cuentas -> doble click en su cuenta -> Carpetas.","draftsDisabled":"El mensaje no pudo ser guardado porque la carpeta 'Borradores' est\u00e1 deshabilitada.<br \/><br \/>Vaya a E-Mail -> Administraci\u00f3n -> Cuentas -> doble click en su cuenta -> Carpetas para configurarla","noSaveWithPop3":"El mensaje no pudo ser guardado porque las cuentas POP3 no permiten esta opci\u00f3n","goAlreadyStarted":"Group-Office ya fue cargado. El compositor de e-mail esta cargado en Group-Office. Cierre esta ventana y componga su mensaje en Group-Officei.","replyHeader":"A las %s, %s en %s %s escribi\u00f3:","alias":"Alias","aliases":"Lista de alias","noUidNext":"Su servidor de mail no soporta UIDNEXT. La carpeta 'Drafts' ser\u00e1 deshabilitada para esta cuenta","disable_trash_folder":"Fallo al mover el mail a la papelera. Esto podr\u00eda ser ocasionado porque no tiene mas espacio en su buz\u00f3n. Puede liberar espacio vaciando la papelera haciendo click sobre ella con el bot\u00f3n derecho del rat\u00f3n y eligiendo la opci\u00f3n Vaciar carpeta)","error_move_folder":"No se puede mover la carpeta","error_getaddrinfo":"Nombre de host invalido","error_authentication":"Usuario o contrase\u00f1a invalidos","error_connection_refused":"Error de conexion. Verifique el host y el puerto","iCalendar_event_invitation":"Este mensaje contiene una invitaci\u00f3n a un evento.","iCalendar_event_not_found":"Este mensaje contiene una actualizaci\u00f3n de un evento que ya no existe.","iCalendar_update_available":"Este mensaje contiene una actualizaci\u00f3n de un evento existente.","iCalendar_update_old":"Este mensaje contiene un evento que ya ha sido procesado.","iCalendar_event_cancelled":"Este mensaje contiene la cancelaci\u00f3n de un evento.","autolinked":"Este mensaje fue automaticamente enlazado a %s","iCalendar_event_invitation_declined":"Este mensaje contiene la invitaci\u00f3n a un evento que has rechazado.","untilDateError":"He intentado procesar el siguiente \"Hasta la Fecha\", pero el proceso termin\u00f3 debido a un error","defaultProgramInstructions":" ","xssDetected":"Este mensaje puede tener contenido malicioso. Pincha aqu\u00ed si quieres ver el mensaje filtrado.","xssMessageHidden":"Mensaje ocultado por razones de seguridad","failedRecipients":"Fall\u00f3 al enviar a","spam":"Spam","ignoreSentFolder":"Almacenar respuestas en la misma carpeta que el mensaje original","sourceAndTargetSame":"El buz\u00f3n de origen y de destino no pueden ser el mismo","subscribeFolders":"Suscripci\u00f3n a carpetas","imapLoginFailed":"Fallo de autenticaci\u00f3n del usuario \"%username\".","tryNewCredentials":"Por favor, intenta entrar con una contrase\u00f1a IMAP diferente.","mailbox":"Buz\u00f3n de correo","checkUnseen":"Comprobar autom\u00e1ticamente nuevos mensajes en esta carpeta","noEmailFolders":"No se han a\u00f1adido carpetas.","moveTo":"Mover a","useAccount":"Utilizar cuenta","storePassword":"Guardar contrase\u00f1a permanentemente","sieveNote":"No est\u00e1n soportadas todas las caracter\u00edsticas. Comprueba el manual.","winmailNoFiles":"El adjunto winmail no contiene ning\u00fan archivo.","attachedAppointmentInfo":"Informaci\u00f3n de evento adjunta","cantDeleteSpecialFolder":"No se puede eliminar las carpetas de mensajes enviados, papelera y borradores","copyingMessages":"Copiando mensajes...","cantMoveSpecialFolder":"No se puede mover las carpetas de mensajes enviados, papelera y borradores","copyMailTo":"Copiar a otra carpeta","copyMailToTxt":"Selecciona la carpeta donde copiar el email","copyMailToRUSure":"\u00bfSeguro que desea copiar el E-mail seleccionado a esta carpeta de correo?","copyMailsToRUSure":"\u00bfEst\u00e1s seguro de que quieres copiar los emails seleccionados a esta carpeta?","selectValidMailFolder":"Por favor, selecciona una carpeta v\u00e1lida donde copiar el email.","clickSeeWholeMessage":"El mensaje actual es muy largo y no se puede mostrar aqu\u00ed. Pincha aqu\u00ed para ver el mensaje completo.","dateReceived":"Fecha de recepci\u00f3n","dateSent":"Fecha de env\u00edo","cronEmailReminders":"Recordatorios por E-mail","cronEmailRemindersDescription":"La rutina de CRON gestiona los recordatorios mediante E-mail","appointementAlreadyProcessed":"Este mensaje contiene una invitaci\u00f3n que ya ha sido procesada.","doNotMarkAsRead":"No marcar autom\u00e1ticamente los emails como le\u00eddos","showAll":"Mostrar todos","noname":"Sin nombre","searchIn":"Buscar en...","searchRecursive":"B\u00fasqueda recursiva","currentFolder":"Carpeta actual","allFolders":"Todas las carpetas","useAuth":"Usar autentificaci\u00f3n","linkMustHavePermissionToWrite":"No se poseen los permisos de ESCRITURA requeridos sobre dicho objeto. Por tanto no es posible vincularle el mensaje de correo.","sortAddressesByMailTime":"Ordenar direcciones de destinatarios por hora del \u00faltimo env\u00edo de correo electr\u00f3nico","permissionDelegated":"S\u00f3lo lectura y delegaci\u00f3n","label":"Etiqueta","labels":"Etiquetas","labelsLimit":"L\u00edmite de etiquetas alcanzado. El n\u00famero m\u00e1ximo son %d","saveToItem":"Guardar como \u00edtem","saveAttachmentTo":"Guardar adjunto(s) como \u00edtem(s)","saveToPersonal":"Guardar en carpeta personal","saveAllToPersonal":"Save all to personal folder","saveAllToItem":"Save all to item","thisIsSpam1":"El mensaje ha sido identificado como SPAM. Pulsar","thisIsSpam2":"aqu\u00ed","thisIsSpam3":"si es un error y el mensaje NO ES SPAM.","thisIsNotSpam1":"Pulsar","thisIsNotSpam2":"aqu\u00ed","thisIsNotSpam3":"si el mensaje es realmente SPAM.","moveToSpamTitle":"\u00bfMover a la carpeta SPAM?","moveToSpamMsg":"\u00bfEsta seguro de querer clasificar el mensaje como SPAM?","moveToInboxTitle":"\u00bfQuitar de la carpeta de SPAM?","moveToInboxMsg":"\u00bfEsta seguro de eliminar la clasificaci\u00f3n como SPAM del mensaje y moverlo de nuevo a la carpeta de entrada (INBOX)?","fts":"S\u00f3lo en cuerpo","placeSignatureBelowReply":"En responder\/reenviar situar siempre la firma al final del correo.","linkeditems":"This mail is linked to %s item(s): %s","addEmailAsAttachment":"Forward as attachment ","showFlagged":"Show flagged","moveToSpamFolder":"Move to spam folder","allowSelfSignedText":"Allow the use of a self signed certificate when using SSL or TLS","fullReplyHeaders":"Show full reply headers"};GO.modules.lang={"modules":"Gesti\u00f3n de M\u00f3dulos","cmdSaveChanges":"Guardar cambios","cmdInstall":"Instalar","cmdUninstall":"Desinstalar","cmdAvailableModules":"M\u00f3dulos disponibles","cmdModuleName":"Nombre de m\u00f3dulo","cmdModuleDescription":"Descripci\u00f3n","cmdGridColumnModuleName":"Nombre de m\u00f3dulo","cmdUninstallMessage":"\u00a1ATENCI\u00d3N! Toda la informac\u00f3n del m\u00f3dulo ser\u00e1 eliminada! \u00bfEst\u00e1 seguro de querer desinstalar el m\u00f3dulo \"{0}\"?","cmdModulesCannotBeDeleted":"\u00a1El componente \"M\u00f3dulos\" no puede ser eliminado!.","name":"Gesti\u00f3n de M\u00f3dulos","description":"Componente para la administraci\u00f3n de los diferentes M\u00f3dulos de la plataforma.","deleteModule":"\u00a1\"M\u00f3dulos\" no puede ser eliminado!","enabled":"Activado","sort_order":"Orde de pedido","buyLicenses":"Comprar licencias","addToCart":"A\u00f1adir a carro de la compra","selectUsersForPackage":"Seleccionar usuarios para paquete {package}","trialLicense":"Licencia de prueba de 30 d\u00edas","trialLicenseTitle":"Licencia de prueba de 30 d\u00edas","trialLicenseText":"Puede conseguir una licencia gratuita de 30 d\u00edas con ilimitado n\u00famero de usuarios y todos los m\u00f3dulos disponibles. Confirmar en el boton siguiente para enlazar con nuestra tienda de compra y conseguir su licencia de pruebas. NOTA: Es necesario registrarse."};GO.tasks.lang={"noTask":"No hay tareas a mostrar","tasks":"Tareas","addTask":"A\u00f1adir tarea...","tasklist":"Lista de tareas","tasklists":"Listas de tareas","showCompletedTasks":"Mostrar tareas completadas","filter":"Filtro","dueDate":"Vecimiento","dueAt":"Vencimiento","needsAction":"Intervenci\u00f3n necesaria","accepted":"Aceptada","declined":"Rechazada","tentative":"Propuesta","delegated":"Delegada","completed":"Completada","inProcess":"En proceso","repeatEvery":"Repetir cada","atDays":"D\u00eda de semana","repeatUntil":"Repetir hasta","repeatForever":"Repetir indefinidamente","recurrence":"Repetici\u00f3n","remindMe":"Recordatorio","options":"Opciones","createLink":"Crear v\u00ednculo","startsAt":"Inicio","completedAt":"Completada el","showInactiveTasks":"Mostrar tareas inactivas","scheduleCall":"Llamada telef\u00f3nica","taskDefaults":"Configuraci\u00f3n por defecto para las tareas","daysBeforeStart":"Dias antes del inicio","defaultTasklist":"Lista de tareas por defecto","visibleTasklists":"Listas de tareas visibles","visible":"Visible","selectIcalendarFile":"Seleccionar archivo icalendar (*.ics)","continueTask":"Modificar vencimiento","categories":"Categor\u00edas","category":"Categor\u00eda","selectCategory":"Seleccionar categor\u00eda","noTasklistSelected":"Se debe seleccionar al menos una lista de tareas.","selectAllTasklists":"Seleccionar todas las listas de tareas","globalCategory":"Categor\u00eda global","showFutureTasks":"Mostrar tareas futuras","incompleteTasks":"Tareas incompletas","completedTasks":"Tareas completadas","dueInSevenDays":"Que caduquen los pr\u00f3ximos 7 d\u00edas","overDue":"Retrasadas","futureTasks":"Tareas futuras","all":"Todas","active":"Activas","globalsettings_templatelabel":"Plantilla de tareas","globalsettings_allchangelabel":"\u00bfCambiar todas las existentes?","globalsettings_renameall":"\u00bfRenombrar todas?","name":"Tareas","description":"Por favor, introduzcir descripci\u00f3n","task":"Tarea","status":"Estado","scheduled_call":"Llamada programada para %s","statuses":{"NEEDS-ACTION":"Intervenci\u00f3n necesaria","ACCEPTED":"Aceptada","DECLINED":"Rechazada","TENTATIVE":"Propuesta","DELEGATED":"Delegada","COMPLETED":"Completada","IN-PROCESS":"En proceso"},"import_success":"%s tareas fueron importadas","call":"Llamada","dueAtdate":"Vence el %s","list":"Lista de tareas","tasklistChanged":"* La lista de tareas ha sido modificada de '%s' a '%s'","statusChanged":"* El estado ha sido modificado de '%s' a '%s'","multipleSelected":"Varias listas de tareas seleccionadas","incomplete_delete":"No se poseen permisos para eliminar todas las tareas seleccionadas","taskName":"Nombre","taskCtime":"Creada","taskMtime":"Modificada","taskDue_time":"Vencida","taskStatus":"Estado","taskCompletion_time":"Completada","taskProject_name":"Proyecto","taskPercentage_complete":"% realizado","phoneNr":"N\u00ba telefono","savePhoneNr":"Guardar n\u00ba tel\u00e9fono en","scheduleCallTaskName":"Llamar a {name} al {number}","overwritePhoneNumber":"Sobreescribir {field} ({number})","addToPhoneNumber":"A\u00f1adir a {field}","id":"ID"};GO.calendar.lang={"addressbook":"Contactos","appointments":"Eventos","recurrence":"Recurrencia","options":"Opciones","rangeRecurrence":"Range of recurrence","repeatForever":"Repetir indefinidamente","repeatUntilDate":"repeat until date","repeatCount":"repeat count","repeatEvery":"Repetir cada","repeatUntil":"Repetir hasta","busy":"Mostrar como ocupado","allDay":"Todo el d\u00eda","navigation":"Navegaci\u00f3n","oneDay":"1 D\u00eda","fiveDays":"5 D\u00edas","sevenDays":"7 D\u00edas","month":"Mes","recurringEvent":"Evento recurrente","deleteRecurringEvent":"\u00bfDesea eliminar s\u00f3lamente \u00e9ste o todos los eventos de la serie?","singleOccurence":"S\u00f3lamente \u00e9ste","entireSeries":"Toda la serie","calendar":"Calendario","views":"Vistas","administration":"Administraci\u00f3n","needsAction":"Deben intervenir","accepted":"Aceptado","declined":"Rechazado","confirmed":"Confirmado","tentative":"Probable","delegated":"Delegado","noRecurrence":"No se repite","notRespondedYet":"A\u00fan no respondido","days":"D\u00edas","weeks":"Semanas","monthsByDate":"Meses (mismo d\u00eda de mes)","monthsByDay":"Meses (mismo d\u00eda de semana)","years":"A\u00f1os","months":"meses","atDays":"D\u00eda de semana","noReminder":"No recordatorio","reminder":"Recordatorio","participants":"Participantes","checkAvailability":"Comprobar disponibilidad","sendInvitation":"Enviar invitaci\u00f3n","emailSendingNotConfigured":"El env\u00edo de E-mails no est\u00e1 configurado","privateEvent":"Privado","noInformationAvailable":"No se dispone de informaci\u00f3n","noParticipantsToDisplay":"No hay participante para mostrar","previousDay":"D\u00eda anterior","nextDay":"D\u00eda siguiente","noAppointmentsToDisplay":"No hay eventos para mostrar","selectCalendar":"Seleccione un calendario","selectCalendarForAppointment":"Seleccione el calendario en donde incluir este evento","closeWindow":"El evento fue aceptado y agendado. Puede cerrar esta ventana.","list":"Lista","editRecurringEvent":"\u00bfQuiere editar este evento o toda la serie?","selectIcalendarFile":"Seleccion un archivo de icalendar (*.ics)","eventDefaults":"Configuraci\u00f3n por defecto para eventos","importToCalendar":"A\u00f1adir evento al calendario","default_calendar":"Calendario por defecto","resource_groups":"Grupos de recursos","resource_group":"Grupo de recursos","resources":"Recursos","resource":"Recurso","calendar_group":"Calendario grupal","admins":"Administradores","no_group_selected":"Tiene errores en su formulario. Necesita seleccionar un grupo para este recurso.","visibleCalendars":"Calendarios visibles","visible":"Visible","group":"Grupo","no_status":"Nuevo","no_custom_fields":"No hay opciones extras.","show_bdays":"Mostrar los cumplea\u00f1os de mis contactos","show_tasks":"Mostrar actividades de lista de actividades","myCalendar":"Mi calendario","merge":"Unir","ownColor":"Cada calendario con su color","ignoreConflictsTitle":"\u00bfIgnorar conflicto?","ignoreConflictsMsg":"Este evento coincide con otro en su calendario. \u00bfDesea guardarlo de todas formas?","resourceConflictTitle":"Conflicto con el recurso","resourceConflictMsg":"Uno o mas recursos de este evento ya estan siendo utilizados a la misma hora: <\/br>","view":"Ver","calendarsPermissions":"Permisos de los calendarios","resourcesPermissions":"Permisos de los recursos","categories":"Categor\u00edas","category":"Categor\u00eda","globalCategory":"Categor\u00eda global","globalCategories":"Categor\u00edas globales","selectCategory":"Selecciona una categor\u00eda","duration":"Duraci\u00f3n","move":"Mover","showInfo":"Detalles","copyEvent":"Copiar evento","moveEvent":"Mover evento","eventInfo":"Detalles del evento","isOrganizer":"Organizador","sendInvitationInitial":"\u00bfDeseas enviar invitaciones a los participantes?","sendInvitationUpdate":"\u00bfDeseas notificar la actualizaci\u00f3n del evento a los participantes?","sendCancellation":"\u00bfDeseas notificar la cancelaci\u00f3n del evento a los participantes?","forthcomingAppointments":"Pr\u00f3ximos eventos","pastAppointments":"Eventos ya vencidos","quarterShort":"Q","globalsettings_templatelabel":"Plantilla","globalsettings_allchangelabel":"Renombrar todos los existentes","globalsettings_renameall":"\u00bfEst\u00e1s seguro de que quieres renombrar todos los calendarios por defecto de los usuarios?","publishICS":"Publicar el fichero iCalendar del \u00faltimo mes y de los eventos futuros. \u00a1Cuidado! El calendario podr\u00e1 ser leido por todo el mundo.","addTimeRegistration":"Importa en el tiempo de registro","showNotBusy":"No mostrar nuevas reservas como ocupado","sendEmailParticipants":"Redactar email para los participantes","name":"Calendario","description":"M\u00f3dulo de calendario; Cada usuario puede a\u00f1adir, editar o eliminar eventos. Incluso los usuarios puede ver y modificar (de ser necesario) los eventos de otros usuarios","groupView":"Mostrar en grupos","event":"Evento","startsAt":"Desde las","endsAt":"Hasta las","exceptionNoCalendarID":"ERROR: No calendario ID!","appointment":"Evento","allTogether":"Todos juntos","invited":"Usted est\u00e1 invitado al siguiente evento","acccept_question":"\u00bfAceptar este evento?","accept":"Aceptar","decline":"Rechazar","bad_event":"El evento ya no existe","subject":"ASUNTO","status":"Estado","statuses":{"NEEDS-ACTION":"Debe intervenir","ACCEPTED":"Aceptada","DECLINED":"Rechazada","TENTATIVE":"Tentativa","DELEGATED":"Delegado","COMPLETED":"Completo","IN-PROCESS":"Transformaci\u00f3n","CONFIRMED":"Confirmado","CANCELLED":"CANCELADO"},"accept_mail_subject":"Invitaci\u00f3n para '%s' aceptada","accept_mail_body":"%s ha aceptado su invitaci\u00f3n a:","decline_mail_subject":"Invitaci\u00f3n para '%s' rechazada","decline_mail_body":"%s ha rechazado su invitaci\u00f3n a:","location":"Lugar","not_invited":"Usted no ha sido invitado a este evento. Puede que necesite acceder con un usuario diferente.","accept_title":"Aceptado","accept_confirm":"El propietario ser\u00e1 notificado de que ha aceptado el evento","decline_title":"Rechazado","decline_confirm":"El propietario ser\u00e1 notificado de que ha rechazado el evento","cumulative":"Regla de repetici\u00f3n no v\u00e1lida. La pr\u00f3xima recurrencia no puede empezar antes de que haya terminado la anterior.","already_accepted":"Usted ya acept\u00f3 este evento.","private":"Privado","import_success":"%s eventos fueron importados","printTimeFormat":"Desde %s hasta %s","printLocationFormat":" en lugar \"%s\"","printPage":"P\u00e1gina %s de %s","printList":"Listado de eventos","printAllDaySingle":"Todo el d\u00eda","printAllDayMultiple":"Todo el d\u00eda desde %s hasta %s","calendars":"Calendarios","open_resource":"Recurso abierto","resource_mail_subject":"Recurso '%s' reservado para '%s' el '%s'","resource_confirmed_mail_body":"%s ha realizado una reserva para el recurso '%s' y la ha confirmado. Como mantenedor y responsable de dicho recurso, debe usar el enlace siguiente si desea rechazar la reserva.","resource_mail_body":"%s ha reservado el recurso '%s'. Ud. es el administrador de este recurso. Por favor abra la reserva para aprobar o denegar el pedido.","resource_modified_mail_subject":"Recurso '%s' reservado para '%s' el '%s' fue modificado","resource_modified_mail_body":"'%s' modific\u00f3 el recurso '%s'. Ud es el administrador de este recurso. Por favor abra la reserva para aprobar o rechazar el pedido.","your_resource_modified_mail_subject":"Su reserva del recurso '%s' para el '%s' con estado '%s' esta modificada","your_resource_modified_mail_body":"%s modific\u00f3 su reserva del recurso '%s'.","your_resource_accepted_mail_subject":"Su reserva del recurso '%s' para el '%s' fue aceptada.","your_resource_accepted_mail_body":"%s ha aceptado su reserva para el recurso '%s'.","your_resource_declined_mail_subject":"Su reserva del recurso '%s' para el '%s' fue rechazada","your_resource_declined_mail_body":"%s ha rechazado su reserva del recurso '%s'.","birthday_name":"Cumplea\u00f1os: {NAME}","birthday_desc":"{NAME} cumple {AGE} hoy","unauthorized_participants_write":"Ud. no tiene permisos suficientes para a\u00f1adir eventos en los calendarios de: <br \/><br \/>{NAMES}<br \/><br \/>Envie una invitaci\u00f3n para que ellos la acepten.","noCalSelected":"Ning\u00fan calendario fue seleccionado para esta vista. Seleccion al menos un clendario en el menu de Administraci\u00f3n","rightClickToCopy":"Click con el bot\u00f3n derecho para copiar el enlace de localizaci\u00f3n","invitation":"Invitaci\u00f3n","invitation_update":"Invitaci\u00f3n actualizada","cancellation":"Cancelaci\u00f3n","cancelMessage":"El siguiente evento al que fuiste invitado ha sido cancelado.","non_selected":"en un calendario no seleccionado","linkIfCalendarNotSupported":"Utiliza el enlace de abajo solo si tu cliente de correo no soporta funciones de calendario.","eventAccepted":"Has aceptado el evento.","eventScheduledIn":"El evento ha sido planificado en el calendario %s con estado %s.","eventDeclined":"Has rechazado el evento.","eventUpdatedIn":"El evento en el calendario %s ha sido actualizado con estado %s","updateReponses":{"ACCEPTED":"%s ha aceptado el evento %s","DECLINED":"%s ha rechazado el evento %s","TENTATIVE":"%s intentar\u00e1 asistir al evento %s","NEEDS-ACTION":"%s ha marcado el evento %s como no cerrado todav\u00eda"},"directUrl":"URL directa","errorOrganizerOnly":"No tiene autorizaci\u00f3n para modificar el evento ya que no es el organizador del mismo.","errorOrganizerOnlyTitle":"Usted no es el organizador","cantRemoveOrganizer":"No se puede quitar al organizador","calendarColor":"Color del calendario","eventDeleted":"El evento ha sido borrado de tu calendario","attendance":"Asistencia","organizer":"Organizador","notifyOrganizer":"Notificar por e-mail mi decisi\u00f3n al organizador","iWillAttend":"Asistir\u00e9","iMightAttend":"Posiblemente asista","iWillNotAttend":"No Asistir\u00e9","iWillDecideLater":"No lo he decidido todav\u00eda","eventUpdated":"El evento siguiente ha sido actualizado por el organizador","notifyCancelParticipants":"\u00bfDeseas notificar la cancelaci\u00f3n del evento a los participantes?","notifyCancelOrganizer":"\u00bfDeseas notificar al organizador que no asistir\u00e1s al evento?","notifyParticipants":"\u00bfNotificar a los participantes?","sendNotificationTitle":"\u00bfNotificar a los participantes?","sendNotification":"\u00bfDeseas enviar una notificaci\u00f3n a los participantes por e-mail?","sendUpdateNotification":"\u00bfDesea que los parcicipantes sean notificados sobre los cambios  mediante E-mail?","openCalendar":"Abrir calendario","createPermission":"Permiso de creaci\u00f3n","show_holidays":"Mostrar vacaciones","participant":"Participantes","clickForAttendance":"Pincha aqu\u00ed para establecer tu estado de asistencia","viewDay":"D\u00eda","viewMorning":"Ma\u00f1ana","viewAfternoon":"Mediod\u00eda","viewEvening":"Tarde","cronEventAndTaskReportMailer":"E-mail informativo de eventos y tareas de hoy","cronEventAndTaskReportMailerDescription":"Programar en el CRON el env\u00edo de E-mail con el informe de tareas y eventos diarios de cada usuario","cronEventAndTaskReportMailerPdfSubtitle":"Eventos y tareas para hoy","cronEventAndTaskReportMailerSubject":"Reporte de eventos y tareas para hoy","cronEventAndTaskReportMailerContent":"Se puede consultar la lista de eventos y tareas programadas para el d\u00eda de hoy en el fichero PDF adjunto.","eventPrivateChecked":"Tener en cuenta que so un evento se marca como provado, los ficheros de dicho evento s\u00f3lo ser\u00e1n accesibles a los usuarios que tengan permisos sobre dicho calendario.","show_completed_tasks":"Mostrar Tareas Completadas","showStatuses":"Mostrar el estado de los eventos en las vistas","cantMoveRecurringByDay":"No es posible mover eventos peri\u00f3dicos. Abrir evento y ajustar las propiedades de repetici\u00f3n","eventNotSavedSubject":"Evento no guardado en %event calendario \"%cal\"","eventNotSavedBody":"Mensaje desde el calendario %goname. Se ha intentado importar un evento denominado \"%event\" con fecha de inicio %starttime desde un calendario externo en el calendario \"%cal\", pero no ha sido posible debido a que el evento contiene errores. Dicho evento puede todav\u00eda ser consultado en el calendario externo.Todos los participantes juntos","allTogetherForParticipants":"Todos los participantes juntos","allTogetherForResources":"Todos los recursos juntos","usedResources":"Recursos utilizados","shareCalendarsCron":"Actualizar ficheros de calendario compartidos","shareCalendarsCronDescription":"Actualiza ficheros de calendario de los calendarios que se encuentran publicados","cmdPrintView":"Imprimir vista actual","cmdPrintCategoryCount":"Imprimir por categoria","startDate":"Primer d\u00eda","endDate":"\u00daltimo d\u00eda","eventsPerCategoryCount":"N\u00famero de eventos por categor\u00eda","nextMonth":"P\u0155oximo mes","previousMonth":"Mes anterior","till":"hasta","total":"Total","sendNotificationToNewParticipants":"\u00bfDesea notificar mediante E-mail s\u00f3lo a los nuevos participantes que se acaban de a\u00f1adir?","newParticipants":"Nuevos participantes","allParticipants":"Todos los participantes","noParticipants":"Ning\u00fan participante","cannotHandleInvitation":"El calendario asociado con la cuenta de correo es \"%s\" y no se poseen permisos de escritura sobre \u00e9l. Debido a que el evento va sobre dicho calendario, su estado no ha podido ser modificado.","cannotHandleInvitation2":"No es posible actualizar el evento debido a que no se poseen suficientes permisos de acceso al calendario asociado con la cuenta de correo (Calendario: \"%s\"). Debido a que el evento va sobre dicho calendario, su estado no ha podido ser modificado.","tooltip":"Descripci\u00f3n emergente","moveEventResourceError":"No es posible desplazar el evento debido a que los recursos siguiente no se encuentran disponibles:","resourceUsedIn":"Recurso utilizado en ","exportAsIcs":"Exportar como ICS","noDefaultCalendar":"No se ha configurado un calendario predeterminado. Por favor, se debe seleccionar alguno en los ajustes.","calNotDeletedDefault":"Not deleted!\nThis is the default calendar of user :username","last":"Last","clearHolidayCache":"Clear calendar holiday cache","clearHolidayCacheDescription":"Clears calendar holiday cache so they will be rebuilded through the holiday files. (On first view)","useReminder":"Enable reminder for this event"};GO.mediawiki.lang={"name":"Mediawiki","description":"This module integrates Mediawiki with Group-Office and automatically logs Group-Office users in. See modules\/mediawiki\/INSTALL.TXT for more information.","externalUrl":"Mediawiki url","title":"Module title"};GO.customfields.lang={"customfields":"Personalizaci\u00f3n de Campos","category":"Categor\u00eda","categories":"Categor\u00edas de campos personalizados","manageCategories":"Administrar categor\u00edas","numberField":"<br \/>Puede utilizar cualquier n\u00famero de campo. Introduzcir los nombres de campos entre () y poner un espacio entre cada palabra (por ejemplo, Number1) (+) y (Number2 no Number1 + Number2): <br \/> <br \/>","selectOptions":"Seleccionar Opciones","noOptions":"No hay opciones definidas","enterText":"Introduzcir el texto de la opci\u00f3n","functionProperties":"Propiedades de la funci\u00f3n","restart":"Los cambios entrar\u00e1n en vigor despu\u00e9s de re-ingresar en la plataforma.","noFields":"No hay campos personalizados para mostrar.","createCategoryFirst":"Se debe crear promero una categor\u00eda","required":"Campo obligatorio","validationRegexp":"Validaci\u00f3n Regexp.","helpText":"Texto de ayuda","importText":"Ingestar fivhero CSV con tan s\u00f3lo una columna para el valor, o bien con el valor en cada l\u00ednea.","multiselect":"Multiselecci\u00f3n","maxOptions":"Ma\u00e1ximo n\u00famero de opciones","zeroMeansUnlimited":"0 = ilimitadas","multiselectForLastSlaveOnly":"S\u00f3lo la \u00faltima rama seleccionada puede ser un combo multiselecci\u00f3n","clickApplyFirst":"Por favor, pulsar sobre \"aplicar\" antes de realizar la importaci\u00f3n","treeImportText":"Se puede importar un fichero CSV en el que cada columna representa una rama (nivel) del \u00e1rbol. Por ej. <br \/>\"opci\u00f3n 1\",\"opci\u00f3n 1.1\", \"opci\u00f3n 1.1.1\"<br \/>\"opci\u00f3n 1\",\"opci\u00f3n 1.2\", \"opci\u00f3n 1.2.1\". Por favor, reemplazar la coma seg\u00fan sus ajustes personales de Group-Office.","usableOperators":"Se pueden utilizar los siguientes operadores: \/ , * , + y - :<br \/><br \/>","excludeFromGrid":"Excluir de la tabla","height":"Altura","bulkEdit":"Editar selecci\u00f3n","applyToSelectionInstructions":"Usar las cajas de selecci\u00f3n de la derecha para aplicar los valores del campo a todos los ficheros seleccionados.","applyCategoryChanges":"Aplicar los cambios siguientes a la selecci\u00f3n","success":"Completado","appliedToSelection":"Los cambios han sido aplicados a los campos personalizados de los ficheros seleccionados.","noFileSelected":"Se deben seleccionar primero algunos ficheros.","name":"Campos personalizados","description":"A\u00f1adis campos extra a los m\u00f3dulos de Contactos y de Proyectos.","enabledCustomFields":"Activar campos personalizados","enableSelectedCategories":"Activar visualizaci\u00f3n s\u00f3lo de las categor\u00edas seleccionadas","defaultValidationError":"El valor no se encuntra en el formato correcto","numberValidationError":"El valos debe de ser num\u00e9rico","invalidRegex":"Le expresi\u00f3n regular es inv\u00e1lida.","nDecimals":"N\u00famero de decimales","block":"Bloque","blocks":"Bloques","cfDatatype":"Tipo de datos del campo personalizado","cfUsedIn":"Campo personalizado utilizado en","GO\\Addressbook\\Model\\Contact":"Contacto","GO\\Addressbook\\Model\\Company":"Empresa","GO\\Base\\Model\\User":"Usuario","GO\\Projects\\Model\\Project":"Proyecto","GO\\Addressbook\\Customfieldtype\\Contact":"Contacto","GO\\Addressbook\\Customfieldtype\\Company":"Empresa","manageBlocks":"Gestionar bloques","customfieldID":"ID. de campo personalizado","cfName":"Nombre de campo personalizado","customfield":"Campo personalizado","enableBlocks":"Activar bloques","enabled":"Activado","modelTypeListed":"Tipo de modelo listado","listedUnder":"Listado bajo","uniqueValues":"Valores \u00fanicos","makeUnique":"Crear campo personalizado con valores \u00fanicos","duplicateExistsFeedback":"El valor \"%val\" introducido para el campo \"%cf\" ya existe en la base de datos, y el campo desde de ser \u00fanico. Por favor, introducir un valor diferente.","maxLength":"M\u00e1ximo numero de caracteres","tooManyCustomfields":"El tama\u00f1o total de datos reservado para los campos personalizados (pertenecientes a objetos de tipo %s) ha sobrepasado el l\u00edmite. Para corregirlo se debe reducir el n\u00famero m\u00e1ximo de caracteres de algunos campos. El campo personalizado actual no ser\u00e1 guardado.","customfieldTooLarge":"El campo personalizado a guardar excede el n\u00famero permitido de caracteres (%s). Por favor, reducir el m\u00e1ximo numero de caracteres del campo extra e intentar guardarlo de nuevo.","GO\\Tasks\\Model\\Task":"Tarea","GO\\Notes\\Model\\Note":"Nota","GO\\Projects\\Model\\Hour":"Registro de tiempo","GO\\Tickets\\Model\\Ticket":"Ticket","GO\\Files\\Model\\Folder":"Carpeta","GO\\Files\\Model\\File":"Fichero","GO\\Calendar\\Model\\Event":"Actividad","GO\\Billing\\Model\\Product":"Producto","GO\\Billing\\Model\\Order":"Factura\/Presupuesto","GO\\Site\\Model\\Site":"Sitio","GO\\Site\\Model\\Content":"Contenido","addressbookIds":"S\u00f3lo desde las libretas de contactos siguientes (IDs)","prefix":"Prefijo","suffix":"Sufijo"};GO.addressbook.lang={"name":"Contactos","description":"M\u00f3dulo para gestionar libretas de contactos.","addresslists":"Lista de correo","newSearch":"Nueva busqueda","executeQuery":"Ejecutar b\u00fasqueda","savedQueries":"B\u00fasquedas guardadas","selectField":"Elija campo","cmdFormLabelAddressBooks":"Libreta contactos","alphabet":"A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z","cmdAllFields":"Todos los campos","btnAddContact":"Crear contacto","btnAddCompany":"Crear empresa","btnManage":"Administrar","btnDownload":"Descargar archivo","cmdFormSearchFirst":"Buscar en= ","cmdFormSearchSecond":" on= ","cmdFormSearchThird":" por= ","cmdFormSearchFourth":"(Utilizar '%' como comod\u00edn) ","cmdFormLabelTitleInitials":"Tratamiento \/ Iniciales","cmdFormLabelSalutation":"Saludo","cmdFormLabelComment":"Nota","cmdFormCompanyEmptyText":"Seleccionar empresa","cmdFieldsetSelectAddressbook":"Seleccionar libreta de contactos","cmdFieldsetPersonalDetails":"Datos Personales","cmdFieldsetAddress":"Direcci\u00f3n Contacto","cmdFieldsetContact":"Datos Contacto","cmdFieldsetCompany":"Detalles Empresa","cmdFieldsetWork":"Datos Empleo","cmdPanelContact":"Datos Contacto","cmdPanelComments":"Notas","cmdSalutation":"Estimado\/a","cmdMadam":"Se\u00f1ora","cmdSir":"Se\u00f1or","btnDownloadTextDocument":"Descargar documento de texto","cmdContactDetailsFor":"Datos personales","cmdLInkFieldset":"Vinculo","cmdCompanyDetailsFor":"Detalles","cmdPanelCompany":"Detalles de empresa","cmdFormLabelBankNo":"N\u00ba cuenta corriente","bankBicNo":"N\u00famero BIC","cmdFormLabelVatNo":"VAT Number (CIF)","cmdFormLabelInvoiceEmail":"E-mail facturaci\u00f3n","cmdFieldsetCompanyDetails":"Detalles de empresa","cmdCompanyDialog":"Editar la empresa","cmdPanelEmployees":"Empleados","cmdPanelEmployee":"Empleado","cmdAllEmployeesForThisCompany":"Todos los empleados en esta empresa","cmdFieldsetVisitAddress":"Direcci\u00f3n Empresa","cmdFieldsetPostAddress":"Direcci\u00f3n Env\u00edo","cmdManageDialog":"Administrar","cmdAddAddressBook":"A\u00f1adir libreta de contactos","cmdDeleteAddressbook":"Eliminar libreta de contactos","cmdOwner":"Propietario","cmdPanelAddressbook":"Libretas de contactos","cmdPanelProperties":"Propiedades","cmdContactDialog":"Editar contacto","cmdFormLabelFileType":"Tipo de archivo","cmdFormLabelFile":"Archivo","cmdFormLabelValueSeperated":"Valores separados","cmdFormLabelValueIncluded":"Encapsulados por los valores","cmdFormLabelLinesEnded":"Lineas finalizadas por","cmdUpload":"Subir","cmdImport":"Importar","cmdExport":"Exportar","users":"Usuarios","strSelectContact":"Seleccionar contacto","strSelectCompany":"Seleccionar empresa","noAddressbooks":"No hay r\u00fabricas","moveAll":"La empresa y todos los empleados ser\u00e1n movidos a la nueva lista de contactos. Est\u00e1 seguro de querer hacerlo?","addressbook":"Contactos","addressbooks":"Libreta de contactos","sendMailing":"Env\u00edar un correo ","importSuccessCount":"Registros importados satisfactoriamente:","importSuccess":"Los datos fueron importados con \u00e9xito","searchOnSender":"Buscar","confirmCreate":"El contacto no existe. Quiere crear un nuevo contacto?","matchFields":"Coincidir los campos","advancedSearch":"B\u00fasqueda avanzada","defaultAddressFormat":"Formato de direcci\u00f3n por defecto","defaultSalutation":"Estimado\/a [Sr.\/Sra.] {middle_name} {last_name}","explanationVariables":"Referencia de etiquetas para configurar saludo por defecto","explanationSex":"Saludo para hombre y mujer","searchQueryName":"Nombre a buscar","enterSearchQueryName":"Ingrese el nombre a buscar:","photo":"Foto","deleteImage":"Eliminar foto","addAllSearchResults":"A\u00f1adir todos los resultados de la b\u00fasqueda","confirmAddAllSearchResults":"\u00bfEsta seguro que quiere a\u00f1adir todos los resultados de la b\u00fasqueda a la lista de contactos?","moveEmployees":"Mover empleados","emailAdded":"La direcci\u00f3n de E-mail ha sido a\u00f1adida al contacto","exportWithCompanies":"Con compa\u00f1ias","id":"ID","exportPermission":"Exportar permisos","crn":"C\u00f3digo CRN","iban":"C\u00f3digo IBAN","unknownEmail":"Direcci\u00f3n de E-mail desconocida","strUnknownEmail":"Esta direcci\u00f3n de E-mail es desconocida. \u00bfDeseas a\u00f1adirla como nuevo contacto, integrarla en uno existente o cancelar?","newContact":"Nuevo Contacto","existingContact":"Contacto existente","globalsettings_templatelabel":"Plantilla","globalsettings_allchangelabel":"\u00bfCambiar todo?","globalsettings_renameall":"\u00bfRenombrar todo?","createEmailSelected":"Redactar E-mail para los seleccionados","allAddressbooks":"Todas las libretas","notIncluded":"No importar","comment":"Comentarios","bankNo":"N\u00ba cuenta bancaria","vatNo":"VAT Number (CIF)","contactsGroup":"Grupo","contact":"Contacto","company":"Compa\u00f1ia","customers":"Clientes","suppliers":"Proveedores","prospects":"Prospectos","contacts":"Contactos","companies":"Empresas","newContactAdded":"A\u00f1adido contacto nuevo","newContactFromSite":"Un nuevo contacto fue agregado a trav\u00e9s del formulario web","clickHereToView":"Haga click aca para ver el contacto","contactFromAddressbook":"Contacto de %s","companyFromAddressbook":"Empresa de %s","defaultSalutationTpl":"Querido [Sr.\/Sra.] {first_name} {last_name}","multipleSelected":"Varias libretas de contactos seleccionadas","incomplete_delete_contacts":"No tienes permiso para eliminar todos los contactos seleccionados","incomplete_delete_companies":"No tienes permiso para eliminar todas las empresas seleccionadas","emailAlreadyExists":"La direcci\u00f3n de E-mail ya estaba a\u00f1adida a este contacto","emailDoesntExists":"No se ha encontrado la direcci\u00f3n de E-mail","imageNotSupported":"La imagen que has subido tiene un formato no soportado. Solo se aceptan imagenes gif, png y jpg.","no_addressbook_id":"\u00a1Se ha seleccionado una libreta de direcciones inv\u00e1lida!","undefined":"-","addresslistContact":"Lista de correo","companyId":"ID","companyAddressbook_id":"Libreta de contactos","companyName":"Nombre","companyName2":"Nombre 2","companyAddress":"Direcci\u00f3n Empresa","companyAddress_no":"N\u00famero","companyZip":"C\u00f3digo Postal","companyCity":"Poblaci\u00f3n","companyState":"Provincia","companyCountry":"Pa\u00eds","companyPost_address":"Direcci\u00f3n Env\u00edo","companyPost_address_no":"N\u00famero","companyPost_city":"Poblaci\u00f3n","companyPost_state":"Provincia","companyPost_country":"Pa\u00eds","companyPost_zip":"C\u00f3digo Postal","companyPhone":"Tel\u00e9fono","companyFax":"Fax","companyEmail":"E-mail empresa","companyHomepage":"P\u00e1gina web","companyComment":"Commentarios","companyBank_no":"N\u00ba cuenta corriente","companyVat_no":"VAT Number (CIF)","companyIban":"C\u00f3digo IBAN","companyCrn":"C\u00f3digo CRN","companyCtime":"Fecha creaci\u00f3n","companyMtime":"Fecha modificaci\u00f3n","companyEmail_allowed":"E-mail permitido","companyFiles_folder_id":"Carpeta","contactId":"ID","contactAddressbook_id":"Libreta de contactos","contactFirst_name":"Nombre","contactMiddle_name":"2\u00ba nombre","contactLast_name":"Apellidos","contactInitials":"Iniciales","contactTitle":"Tratamiento","contactSex":"Sexo","contactBirthday":"Cumplea\u00f1os","contactEmail":"E-mail contacto","contactEmail2":"E-mail particular","contactEmail3":"E-mail trabajo","contactCompany_id":"Empresa","contactDepartment":"Departamento","contactFunction":"Cargo \/ Funci\u00f3n","contactHome_phone":"Tel\u00e9fono particular","contactWork_phone":"Tel\u00e9fono trabajo","contactFax":"Fax particular","contactWork_fax":"Fax trabajo","contactCellular":"Tel\u00e9fono m\u00f3vil","contactCellular2":"M\u00f3vil trabajo","contactCountry":"Pa\u00eds","contactState":"Provincia","contactCity":"Poblaci\u00f3n","contactZip":"C\u00f3digo Postal","contactAddress":"Address","contactAddress_no":"N\u00famero","contactComment":"Comentarios","contactCtime":"Fecha creaci\u00f3n","contactMtime":"Fecha modificaci\u00f3n","contactSalutation":"Saludo","contactEmail_allowed":"E-mail permitido","contactFiles_folder_id":"Carpeta","contactGo_user_id":"Usuario","contactSuffix":"Sufijo","contactHomepage":"P\u00e1gina Web","mailingStatus":["Esperando para comenzar","Enviando...","Terminado","Pausado"],"createUser":"Crear usuario","cmdPanelTemplate":"Plantillas","cmdAddEmailTemplate":"A\u00f1adir plantilla de E-mail","cmdAddOpenOfficeTemplate":"A\u00f1adir plantilla de OpenOffice.org","cmdType":"Tipo","cmdTemplateDialog":"Editar plantilla","cmdFormLabelReadNotification":"Solicitar al destinatario una notificaci\u00f3n de lectura","cmdAddMailing":"A\u00f1adir lista de correo","cmdDeleteMailing":"Eliminar lista de correo","cmdPanelMailings":"Listas de correo","cmdEditMailingWindow":"Editar lista de correo","SelectOODocument":"Seleccionar una plantilla","SelectOODocumentWindowTitle":"Seleccionar documento OpenOffice","autoDataMyName":"Mi Nombre","autoDataBeginning":"Empezando","emailTemplate":"Plantilla de E-mail","sendingEmailAllowed":"Permitir env\u00edo de correos a esta direcci\u00f3n de E-mail","enabledMailingGroups":"Habilitar listas de correo:","autoData":"Autodata","selectMailingGroup":"Seleccionar grupo de mailing","noMailingGroups":"No tienes ninguna lista de correo","sentMailings":"Boletines enviados","subject":"Asunto","status":"Estado","sent":"Enviado","total":"Total","errors":"Errores","addEntireAddressbook":"A\u00f1adir toda la libreta de contactos","selectAddressbook":"Seleccionar libreta de contactos","defaultSalutationText":"Introducir un saludo por defecto cuando el destinatario es desconocido","filterMailings":"Listas de correo","enterName":"Introducir el nombre del fichero","pleaseEnterName":"Por favor, introduce el nombre del nuevo documento","noAddressLists":"Sin lista de correo","confirmAddEntireAddressbook":"\u00bfEst\u00e1s seguro de que quieres a\u00f1adir a toda la libreta de contactos en esta lista de correo?","noTemplate":"Sin plantilla","customContactFields":"Campos de contacto personalizados","customCompanyFields":"Campos de empresa personalizados","customUserFields":"Campos de usuario personalizados","newsletters":"Boletines","addresslist":"Lista de correo","viewLog":"Ver log","viewMessage":"Ver mensaje","pauseMailing":"Pausar env\u00edo","resumeMailing":"Continuar env\u00edo","unsubscribeLink":"Unsubscribe link","unsubscribeHref":"Unsubscribe href","addDocumentTemplate":"A\u00f1adir plantilla de documento","documentTemplate":"Plantilla de documento","templateAlreadyExists":"La plantilla que est\u00e1s intentado crear ya existe","mailingAlreadyExists":"El env\u00edo que est\u00e1s intentado crear ya existe","greet":"Saludos cordiales","unsubscribe":"Darse de baja","unsubscription":"Pincha aqu\u00ed para darte de baja de esta lista de correo.","r_u_sure":"\u00bfEst\u00e1s seguro de que quieres darte de baja de esta lista de correo?","delete_success":"Has sido dado de baja de la lista de correo.","setCurrentTemplateAsDefault":"Poner la plantilla actual como por defecto","contactCustomFields":"Campos personalizados de contactos","companyCustomFields":"Campos personalizados de empresas","editUser":"Editar usuario","templateContent":"Documento","addresslistIdMustBePositive":"This panel expects an addresslist ID that is positive, but did not receive one. Please contact the administrator.","male":"Hombre","female":"Mujer","importing":"Importando","contactUuid":"UUID","nRemovedFromAddresslist":"%n contactos han sido identificados y eliminados de la lista de correo seleccionada.","addToAddresslist":"A\u00f1adir a la lista de correo %s","addToAddresslistPrompt":"Vas a a\u00f1adir los elementos seleccionados a la lista de correo %s. \u00bfQuieres que estos elementos lo existan en %s?","addAddresslistSuccess":"Los elementos han sido a\u00f1adidos a la lista de correo","addContactsSuccess":"%i contactos han sido a\u00f1adidos a la lista de correo.","searchForImages":"Buscar foto en Internet","downloadPhotoUrl":"Direcci\u00f3n URL para descargar la foto","orBrowseComputer":"Ingestar foto desde el equipo","currentImage":"Foto actual","downloadFullImage":"Descargar foto","upcomingBirthdays":"Pr\u00f3ximos Cumplea\u00f1os","age":"Edad","actionDate":"Fecha seguimiento","selectCurrentActions":"S\u00f3lo con fecha seguimiento","showActieveToolTip":"Mostrar s\u00f3lo contactos que tengan fecha de seguimiento","linkedinUrl":"LinkedIn URL","facebookUrl":"Facebook URL","twitterUrl":"Twitter URL","skypeName":"Nombre Skipe","cmdPanelSocialMedia":"Redes Sociales","setCurrentTemplateAsDefaultEAccount":"Configurar esta plantilla por defecto para mi cuenta","callOnSkype":"Nombre Skype","userDefaultTemplate":"Usar plantilla por defecto","exportContacts":"Informaci\u00f3n particular","exportContactsWithCompanies":"Contacto con Compa\u00f1ia","privateAddress":"Direcci\u00f3n Contacto","mustBeSameAddressbook":"\u00a1Atenci\u00f3n! La empresa y el contacto debe estar en la misma libreta de contactos. El contacto no ha sido guardado.","exportContactsAsVcard":"Exportar contactos como Vcard","addEmployee":"Crear nuevo","addExistingEmployee":"A\u00f1adir existente","deleteWarningAdderessList":"WARNING!!! The address list including sent newsletters will be deleted!","copyToPostAddress":"Copy to post address","addressbookDefaults":"Defaults settings for address book","defaultAddressbook":"Default address book"};GO.cron.lang={"name":"Gesti\u00f3n de CRON","description":"M\u00f3dulo para gestionar tareas de sistema autom\u00e1ticas (CRON) dentro de Group-Office.","cronManager":"Gesti\u00f3n de CRON","cronName":"Nombre","minutes":"Minutos","hours":"Horas","monthdays":"D\u00eda de mes","months":"Meses","weekdays":"D\u00eda de semana","years":"A\u00f1os","active":"Activar","runonce":"Ejecutar s\u00f3lo una vez","job":"Tarea","minutesExample":"(0-59)","hoursExample":"(0-23)","monthdaysExample":"(1-31)","monthsExample":"(1-12)","weekdaysExample":"(0-6)","yearsExample":"(2013-2015)","minutesNotMatch":"Los minutos no se ajustan al formato requerido.","hoursNotMatch":"Las horas no se ajustan al formato requerido.","monthdaysNotMatch":"Los d\u00edas de mes no se ajustan al formato requerido.","monthsNotMatch":"Los meses no se ajustan al formato requerido.","weekdaysNotMatch":"Los d\u00edas de semana no se ajustan al formato requerido.","yearsNotMatch":"Los a\u00f1os dno se ajustan al formato requerido.","example":"Ejemplo","exampleFormat1Explanation":"(Todos)","exampleFormat2Explanation":"(S\u00f3lo los primeros)","exampleFormat3Explanation":"(Todos entre 1 y 5)","exampleFormat4Explanation":"(Cada 2 entre 0 y 23)","exampleFormat5Explanation":"(S\u00f3lo en los n\u00fameros indicados)","exampleFormat6Explanation":"(Entre 0 y 4 y entre 8 y 12)","exampleFormats":"Por favor, usar uno de los siguientes formatos (ej. hora, sin espacios):","timeFieldSetTitle":"Tiempo","cronSettings":"Ajustes del Cron","period":"Per\u00edodo","runUpcoming":"Pr\u00f3ximas tareas de Cron","lastrun":"\u00daltima ejecuci\u00f3n","nextrun":"Pr\u00f3xima ejecuci\u00f3n","completedat":"Completada el","running":"Ejecutando","parameters":"Par\u00e1metros","usersAndGroups":"Usuarios y Grupos","limitUserGroups":"Limitar a Usuarios y Grupos seleccionados","groups":"Grupos","group":"Grupo","users":"Usuarios","user":"Usuario"};GO.summary.lang={"summary":"Sumario","noItems":"No se han configurado \u00edtems en la p\u00e1gina Sumario.","selectPortlet":"Seleccionar \u00edtem","hotTopics":"Canales RSS","enterRssFeed":"Introducir URL del feed RSS:","notes":"Notas","loadingFeed":"Cargando Feed...","goToPost":"Ir a la p\u00e1gina","today":"Hoy","dueTime":"Fecha l\u00edmite","title":"T\u00edtulo","manageAnnouncements":"Gestionar Comunicados","webFeeds":"Administrar Feeds RSS","type":"Tipo","summaryType":"Sumario","rssFeeds":"Canales RSS","noRssFeeds":"No ha sido configurado ning\u00fan feed RSS.<br\/>Pulsar en bot\u00f3n de configuraci\u00f3n de la esquina superior derecha de esta ventana para a\u00f1adir canales RSS","name":"Sumario","description":"Por favor, introducir una descripci\u00f3n","default_rss_url":"http:\/\/newsrss.bbc.co.uk\/rss\/newsonline_world_edition\/front_page\/rss.xml","default_rss_title":"Novedades","announcement":"Comunicaci\u00f3n","announcements":"Comunicaciones","latestReadAnnouncementRecord":"Registro de \u00faltimo comunicado le\u00eddo"};GO.sieve.lang={"name":"Sieve","scriptname":"Nombre del script","index":"Indice","test":"Test","not":"No","type":"Tipo","arg":"Argumento","arg1":"Argumento1","arg2":"Argumento2","copy":"Copia","target":"Objetivo","sieverules":"Reglas","activatedrules":"Reglas activadas","field":"Campo","operator":"Operador","rules":"Mensaje","actions":"Acciones","editsieve":"Editar regla","action":"Acci\u00f3n","ruletext":"Aplicar a correos entrantes","actiontext":"Aplicar las siguientes acciones:","clear":"Limpiar","active":"Activo","activate":"Activar grupo de reglas","filterset":"Filtro de reglas:","days":"Responder cada x d\u00edas","sendToAddresses":"Enviar email a las siguientes direcciones","addressesLabel":"Enviar email a las siguientes direcciones (separadas por comas)","addressesLabelOptional":"(opcional) No enviar respuesta a las siguientes direcciones (separados por comas)","reason":"Mensaje","allfollowingrules":"que cumplan todas las condiciones","somefollowingrules":"que cumplan al menos una de las condiciones","allmessages":"para todos los correos entrantes","disablefilter":"Deshabilitar regla","newsieverule":"Crear regla","checksieveerror":"Se produjo un error chequeando el soporte de sieve","erroremptygrids":"Uno o dos rejillas estan vac\u00edas.","errorineditmode":"Actualmente est\u00e1s editando un elemento!\\n Por favor, Por favor, finaliza esta acci\u00f3n primero.","subject":"Asunto","from":"Remitente","to":"Destinatario","size":"Tama\u00f1o","contains":"contiene","notcontains":"no contiene","is":"igual","notis":"no es igual","exists":"existe","notexists":"no existe","fileinto":"Mover email a otra carpeta","fileintoLabel":"Mover email a la carpeta seleccionada","copyto":"Copiar email a la carpeta","copytoLabel":"Copiar email a la carpeta seleccionada","redirect_to":"Redireccionar a","redirect_copy_to":"Enviar copia al e-mail","vacation":"Autorespuesta","reject":"Rechazar con mensaje","toFolder":"A la carpeta","discard":"Descartar","stop":"Parar","under":"Menor que","over":"Mayor que","disabled":"Deshabilitado","subjectcontainsnot":"El asunto no contiene","bodycontainsnot":"El cuerpo no contiene","fromcontainsnot":"El remitente no contiene","tocontainsnot":"El destinatario no contiene","subjectcontains":"El asunto contiene","bodycontains":"El cuerpo contiene","fromcontains":"El remitente contiene","tocontains":"El destinatario contiene","subjectexistsnot":"No tienen asunto","fromexistsnot":"No tiene remitente","toexistsnot":"No tiene destinatario","subjectexists":"Tiene asunto","fromexists":"Tiene remitente","toexists":"Tiene destinatario","markedasspam":"Marcado como SPAM","sizesmallerthan":"El tama\u00f1o es menor que","sizebiggerthan":"El tama\u00f1o es mayor que","errorshowtext":"Se produjo un error al mostrar la l\u00ednea de test","sendcopyto":"Enviar copia a","forwardto":"Redireccionar a","vacsendevery":"Responder cada","vacsendevery2":"d\u00eda(s)","vacAlsoMailTo":"La autorespuesta est\u00e1 activa para","vacationmessage":"Mensaje:","refusewithmesssage":"Rechazar con mensaje:","spamflag":"Marcar como SPAM","custom":"Campo de la cabecera","custommailheader":"Cabecera del mail:","replyToMessage":"Responder al mensaje","subjectequals":"Asunto igual a","subjectequalsnot":"Asunto no es igual a","fromequals":"Remitente igual a","fromequalsnot":"Remitente no es igual a","toequals":"Destinatario igual a","toequalsnot":"Destinatario no es igual a","description":"Gesti\u00f3n de reglas para filtrado autom\u00e1tico de correos","standardvacation":"Regla est\u00e1ndar de autorespuesta","standardvacationmessage":"Estoy de vacaciones","standardvacationsubject":"Mensaje de Ausente de Oficina","setAction":"Establecer acci\u00f3n","setFilter":"Establecer criterio","sievePort":"N\u00famero de puerto del filtro Sieve","useTLS":"Usar conexi\u00f3n segura para filtros de email (Sieve)","cmdSaveChanges":"Guardar cambios","pleaseAddCriterium":"Por favor, pincha en 'a\u00f1adir' para a\u00f1adir un criterio","pleaseAddAction":"Por favor, pincha en 'a\u00f1adir' para a\u00f1adir una acci\u00f3n","meetingTheseCriteria":"Condiciones","pleaseSelectOne":"Por favor, selecciona uno","vacationStart":"Primer d\u00eda de este mensaje","vacationEnd":"Ultimo d\u00eda de este mensaje","activateFilter":"Activar esta regla","sieveWarning":"Si tu servidor IMAP soporta filtros sieve es recomendado utilizarlos. Por favor, prueba la pesta\u00f1a 'Filtros sieve' primero.","setRead":"Marcar mensaje como leido","stopEndError":"\u00a1Se debe detener al finalizar!","body":"Cuerpo","outOfOffice":"Fuera de oficina","message":"Mensaje","aliasses":"Alias","schedule":"Agendar","activateAt":"Activar el","deactivateAt":"Desactivar tras","scheduleText":"Ajustes de programaci\u00f3n de la activaci\u00f3n del mensaje \"Ausente de la Oficina\"","messageText":"Introducir mensaje en el campo siguiente.","subjectText":"Introducir Asunto del E-mail de respuesta en el campo siguiente.","aliassesText":"Introducir los alias a los que este mensaje tambi\u00e9n debe aplicarse. Si existen m\u00faltiples alias deben de separarse con comas (,).","activateText":"Activar el filtro chequeando en el siguiente campo.","advancedOptions":"Opciones avanzadas","currentdate":"Fecha actual","before":"antes","after":"despu\u00e9s"};GO.groups.lang={"group":"Grupo","groups":"Grupos","owner":"Propietario","lblNew":"Crear","newGroupName":"Introducir nombre del nuevo grupo","searchAllUsers":"B\u00fascar todos los usuarios","adminOnly":"Administrar s\u00f3lo","adminOnlyLabel":"S\u00f3lo un administrador puede utilizar este grupo para dar permisos (Por ejemplo a calendarios).","groupMembers":"Miembros del grupo","managePermissions":"Gestionar permisos","name":"Gesti\u00f3n de grupos","description":"M\u00f3dulo para administraci\u00f3n y gesti\u00f3n de grupos de usuarios.","noDeleteAdmins":"No se puede eliminar el grupo Administradores","noDeleteEveryone":"No se puede eliminar el grupo Todos","groupNameAlreadyExists":"El grupo que est\u00e1 intentando crear ya existe","dontRemoveAdmin":"No es posible eliminar al administrador principal","modulePermissions":"Permisos del m\u00f3dulo","use":"Usar"};GO.files.lang={"template":"Plantilla","manageTemplates":"Administrar plantillas","downloadTemplate":"Descargar plantilla","enterName":"Ingrese un nombre","pleaseEnterName":"Por favor ingrese un nombre","pleaseEnterNameArchive":"Por favor ingrese un nombre de fichero","startTransfer":"Empezar la transferencia","addFolder":"A\u00f1adir carpeta","errorOneItem":"Seleccione solamente un fichero","activateSharing":"Activar modo compartido","notifyChanges":"Notificarme cambios en esta carpeta","comments":"Comentarios","downloadGOTA":"Descargar con G.O.T.A.","fileBrowser":"Explorador de ficheros","thumbnails":"Iconos","saveFile":"Guardar fichero","confirmOverwrite":"El fichero {filename} ya existe, \u00bfdesea sobreescribirlo?","emptyList":"Vaciar lista","newFiles":"Nuevos","olderVersions":"Versiones anteriores","uploadProperties":"Las siguientes propiedades ser\u00e1n aplicadas a todos los ficheros subidos que tengan la opcion \"Small file\" chequeada","selectFiles":"Seleccione ficheros","fitImage":"Ajustar imagen","normalSize":"Tama\u00f1o normal","imageViewer":"Visor de imagen","emailDownloadLink":"E-mail con enlace(s)","expireTime":"Caducidad del enlace de descarga","newFolder":"Nueva carpeta","applyState":"Aplicar la configuraci\u00f3n de la carpeta a todo el mundo.","stateLocked":"Visualizaci\u00f3n de la carpeta bloqueada por el due\u00f1o\/administrador","strDownloadActive":"Enlaces de descarga habilitados","downloadExpireTime":"El enlace caduca despu\u00e9s de","downloadUrl":"URL","categoriesFiles":"Campos personalizados para ficheros","applyToCurrentFolder":"Aplicar los cambios de abajo solo al contenido de la carpeta actual","applyRecursively":"Aplicar los cambios de abajo al contenido de la carpeta actual y sus subcarpetas","applyRecursivelyRUSure":"\u00bfEst\u00e1s seguro de que deseas aplicar la confituraci\u00f3n de campos personalizados al contenido de TODAS las subcarpetas? Esto puede tener gran impacto si muchas subcarpetas en este \u00e1rbol de carpetas.","pleaseConfirm":"Por favor, confirma","applyLimits":"No mostrar todas los campos personalizados de categor\u00edas","undef":"-","name":"Ficheros","description":"Modulo de ficheros; Permite compartir documentos y archivos","folderExists":"La carpeta ya existe","filenameExists":"El nombre del fichero ya existe","uploadedSucces":"Ingesta de fichero completada","ootextdoc":"Documento Open-Office Writer","wordtextdoc":"Documento Microsoft Word","personal":"Carpeta Personal","shared":"Carpeta Compartida","general":"General","folder_modified_subject":"Cambios a su carpeta de Group-Office","folder_modified_body":"Ud. pidi\u00f3 ser notificado cuando se realicen cambioes a:\n%s\nLos siguientes cambios fueron realizados por %s:\n%s;\n","modified":"Modificado","new":"Nuevo","deleted":"Eliminados","file":"Fichero","folder":"Carpeta","files":"Ficheros","emptyFile":"Fichero vac\u00edo","downloadLink":"Enlace de descarga","deletedDownloadLink":"Eliminar enlace","deleteDownloadLink":"Vas a eliminar este enlace, \u00bfest\u00e1s seguro?","clickHereToDownload":"Pulsar sobre el enlace para descargar el fichero","copyPasteToDownload":"Pulsar sobre el enlace seguro o copialo en la barra de direcciones de tu navegador para descargar el fichero.","possibleUntil":"posible hasta","fileNotFound":"El fichero no se encuentra","no_folder_id":"ID de carpeta inv\u00e1lida pasada con la petici\u00f3n al servidor!","path":"Ruta","selectFolder":"Selecciona una carpeta...","notifyRecursiveTitle":"\u00bfConfigurar notificaci\u00f3n en subcarpetas?","removeNotifyRecursiveTitle":"\u00bfEliminar notificaci\u00f3n en subcarpetas?","notifyRecursiveQuestion":"\u00bfQuieres aplicar esto a todas las subcarpetas?","unlock":"Desbloquear","lockedBy":"Bloqueado por","lock":"Bloquear","shortVersion":"Ver.","fileIsLocked":"El fichero est\u00e1 bloqueado","fileId":"ID. de fichero","fileFolder_id":"ID. de carpeta","fileName":"Nombre","fileLocked_user_id":"Bloqueado por","fileCtime":"Creado el","fileMtime":"Modificado el","fileSize":"Tama\u00f1o","fileUser_id":"Usuario","fileComment":"Comentario","fileExtension":"Extensi\u00f3n","fileExpire_time":"Caducidad","fileRandom_code":"C\u00f3digo Aleatorio","createDownloadLink":"Crear enlace(s) de descarga","notifyFolderAdd":"La carpeta %s fue a\u00f1adida a %s por %s","notifyFolderRename":"La carpeta %s fue renombrada como %s por %s","notifyFolderMove":"La carpeta %s fue movida a %s por %s","notifyFolderDelete":"La carpeta %s fue eliminada por %s","notifyFileAdd":"El fichero %s fue a\u00f1adido a %s por %s","notifyFileRename":"El fichero %s fue renombrado a %s por %s","notifyFileMove":"El fichero %s fue movido a %s por %s","notifyFileDelete":"El fichero %s fue eliminado por %s","notifyFileUpdate":"El fichero %s fue actualizado por %s","notificationEmailSubject":"Actualizaciones en la carpeta","downloadLinkExpired":"Perd\u00f3n, el enlace de descarga para este fichero ha caducado","recentFiles":"Ficheros modificados en los \u00faltimos 7 d\u00edas","bookmarkFolder":"A\u00f1adir a favoritas","bookmarks":"Favoritas","bookmarkAlreadyExists":"La carpeta '%fn' ya es favorita del usuario actual.","removeBookmark":"Eliminar de favoritas","removeBookmarkQuestion":"\u00bfEliminar carpeta '%fn' de la lista de favoritas?","notInSearchMode":"No se puede hacer en modo de b\u00fasqueda.","openInBrowser":"Abrir en el navegador","selectApplication":"Seleccionar aplicaci\u00f3n para abrir el fichero...","rememberFileHandler":"Recordar mi elecci\u00f3n para este tipo de fichero","alwaysAsk":"Preguntar siempre","openWith":"Abrir con...","dontDeleteSystemFolder":"No puede eliminarse una carpeta de sistema","open":"Abrir","rightClickToCopy":"Boton derecho para copiar","deleteExpiredLabel":"Eliminar enlaces de descarga de ficheros ya expirados","deleteExpiredDescription":"Eliminar enlaces de descarga que ya no son v\u00e1lidos","deleteWhenExpired":"Eliminar autom\u00e1ticamente fichero al expirar el enlace de descarga","automaticallyDeleted":"El fichero ser\u00e1 autom\u00e1ticamente eliminado al expirar el enlace de descarga","downloadSelected":"Descargar selecci\u00f3n","editSelection":"Edit selection","dontEditFolder":"You can't edit this folder","contentExpiresAt":"Content expires at","clear":"Clear","expiredFilesPortlet":"Expired files","folderBrowserPortlet":"Show folder","applyCFRecursively":"Apply these custom field settings to current folder and it's sub folders recursively","uploadFailed":"The upload failed! Ask the server manager for what wrong"};GO.search.lang={"title":"Herramienta de b\u00fasqueda","name":"B\u00fasqueda","description":"Barra de b\u00fasqueda a trav\u00e9s de todos los \u00edtems introducidos en GO. La barra se situar\u00e1 junto al bot\u00f3n de Men\u00fa principal y ser\u00e1 accesible a cualquier usuario con permisos de lectura."};GO.notes.lang={"category_id":"Categor\u00eda","content":"Contenido","manageCategories":"Administrar Categorias","name":"Notas","description":"M\u00f3dulo para agregar notas","category":"Categor\u00eda","categories":"Categor\u00edas","note":"Nota","notes":"Notas","general":"General","incomplete_delete":"No tienes permisos para eliminar todas las notas seleccionadas","multipleCategoriesSelected":"Varios libros de notas seleccionados","encryptedContent":"Contenido encriptado"};GO.tools.lang={"tools":"Tareas de Mantenimiento","scripts":"Scripts","scriptOutput":"Script de salida","name":"Tareas de Mantenimiento","description":"M\u00f3dulo para realizar algunas tareas administrativas de mantenimiento espec\u00edficas.","dbcheck":"Comprobar base de datos","rm_duplicates":"Eliminar contactos y eventos duplicados","backupdb":"Copia de seguridad de base de datos","index_files":"Indexar todos los archivos","buildsearchcache":"Crear indice de b\u00fasqueda","checkmodules":"Verificar m\u00f3dulos","resetState":"Reiniciar estado de ventanas, grids, etc.","systemCheck":"Chequear sistema"};GO.bookmarks.lang={"bookmarks":"Marcadores","bookmark":"Marcador","category":"Categor\u00eda","title":"T\u00edtulo","description":"Descripci\u00f3n","logo":"Icono","extern":"Abrir en una nueva pesta\u00f1a del navegador","administrateCategories":"Administrar categor\u00edas","thumbnails":"Miniaturas","chooseIcon":"Elige un icono para el enlace","clearLogo":"Quitar Icono","uploadLogo":"Subir Icono","showAll":"Mostrar todo","sharedCategory":"Categor\u00eda compartida","behaveAsModule":"Comportarse como un m\u00f3dulo (requiere recargar el navegador)","confirmDelete":"Are you sure you want to delete this bookmark?","name":"Bookmarks","general":"General","googleDescription":"Search the web","toggle":"Toggle view","showCategoryInStartMenu":"Group bookmarks in main start menu (Browser reload required)"};

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: CommentPanel.js 19019 2015-04-22 09:46:46Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.comments.CommentPanel = Ext.extend(GO.DisplayPanel,{
	
	model_name : "GO\\Comments\\Model\\Comment",

	stateId : 'co-comment-panel',

	editGoDialogId : 'comment',
	
	editHandler : function(){
		GO.comments.showCommentDialog(this.model_id, {model_name:this.data.model_name,model_id:this.data.model_id,action_date:this.actionDate});
	},	
	
	initComponent : function(){	
		
		this.loadUrl=('comments/comment/display');
		
		
		
		this.template = 
				'{[this.collapsibleSectionHeader(GO.comments.lang.comment+": "+ values.short, "commentpane-"+values.panelId, "name")]}'+
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="commentpane-{panelId}">'+
					'<tr>'+
						'<td valign="top">'+GO.comments.lang.comment+'</td>'+
						'<td valign="top" colspan="2">{comments}</td>'+
					'</tr>' +
					
					'<tpl if="!GO.util.empty(category_name)">'+
					'<tr>'+
						'<td valign="top">'+GO.comments.lang.category+'</td>'+
						'<td valign="top" colspan="2">{category_name}</td>'+
					'</tr>' +
					'</tpl>'+
					
					'<tr>'+
						'<td valign="top">'+GO.lang.strDate+'</td>'+
						'<td valign="top" colspan="2">{ctime}</td>'+
					'</tr>' +
					'<tr>'+
						'<td valign="top">'+GO.comments.lang.parent+'</td>'+
						//'<td valign="top"><a href="#" onclick="GO.linkHandlers[\'{values.parent.model_type}\'].call(this, {values.parent.model_id});">{values.parent.name}</a></td>'+
						'<td style="width:16px;"><div class="display-panel-link-icon go-model-icon-{[this.replaceWithUnderscore(values.parent.model_type)]}"></div></td>'+
						'<td valign="top"><a href="#" onclick="GO.linkHandlers[\'{[this.addSlashes(values.parent.model_type)]}\'].call(this, {values.parent.model_id});">{values.parent.name}</a></td>'+
					'</tr>' +
				'</table>';
			
		Ext.apply(this.templateConfig, {
			addSlashes : function(str)
			{
				str = GO.util.html_entity_decode(str, 'ENT_QUOTES');
				str = GO.util.add_slashes(str);
				return str;
			},
			
			replaceWithUnderscore: function(str){
				if(!GO.util.empty(str)){
					str = str.replace(/\\/g,"_");
				}
				return str;
			}
			
		});
		
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);

		GO.comments.CommentPanel.superclass.initComponent.call(this);

	},
	
	createTopToolbar : function(){
		var tbar = GO.comments.CommentPanel.superclass.createTopToolbar.call(this);
		return tbar;
	},
	
	setData : function(data)
	{
		GO.comments.CommentPanel.superclass.setData.call(this, data);
//		this.newMenuButton.menu.taskShowConfig= {comment_id:this.data.id};
	}	
});			

GO.comments.categoriesStore = new GO.data.JsonStore({
	url: GO.url('comments/category/store'),
	fields: ['id','name'],
	remoteSort: true
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: CommentDialog.js 17206 2014-03-26 12:43:55Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.comments.CommentDialog = function(config){
	if(!config)
	{
		config={};
	}
	this.buildForm();
	var focusFirstField = function(){
		this.formPanel.items.items[0].focus();
	};
	config.collapsible=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=630;
	config.autoHeight=true;
	
	config.closeAction='hide';
	config.title= GO.comments.lang.comment;					
	config.items= this.formPanel;
	config.focus= focusFirstField.createDelegate(this);
	config.buttons=[{
			text: GO.lang['cmdOk'],
			handler: function(){
				this.submitForm(true);
			},
			scope: this
		},{
			text: GO.lang['cmdClose'],
			handler: function(){
				this.hide();
			},
			scope:this
		}					
	];
	GO.comments.CommentDialog.superclass.constructor.call(this, config);
	this.addEvents({'save' : true});	
}
Ext.extend(GO.comments.CommentDialog, Ext.Window,{
	show : function (comment_id, config) {
		if(!this.rendered)
		{
			this.render(Ext.getBody());
		}
		if(!comment_id)
		{
			comment_id=0;			
		}
		this.setCommentId(comment_id);
		
		if (!GO.util.empty(config) && !GO.util.empty(config.link_config))
			this.toggleActionDate(config.link_config['model_name']);
		else if (!GO.util.empty(config) && !GO.util.empty(config['model_name']))
			this.toggleActionDate(config['model_name']);
		
		delete this.link_config;
		
		if(this.comment_id>0)
		{
			this.formPanel.load({
				url : GO.url('comments/comment/load'),
				waitMsg:GO.lang['waitMsgLoad'],
				success:function(form, action)
				{
					GO.comments.CommentDialog.superclass.show.call(this);
					var response = Ext.decode(action.response['responseText']);
					if (response.data['category_id']==0)
						this.categoriesCB.setValue('');
				},
				failure:function(form, action)
				{
					GO.errorDialog.show(action.result.feedback)
				},
				scope: this
			});
		}else 
		{
			this.formPanel.form.reset();
			GO.comments.CommentDialog.superclass.show.call(this);
			if (config && config.link_config && !this.actionDateField.disabled) {
				this.actionDateField.setValue(config.link_config['action_date']);
			}
		}
		
		if(config)
		{
			if (config.link_config) {
				this.link_config=config.link_config;

				this.formPanel.baseParams.model_id=config.link_config.model_id;
				this.formPanel.baseParams.model_name=config.link_config.model_name;
			} else {
				if(config.model_name)
					this.formPanel.baseParams.model_name=config.model_name;
				if(config.model_id)
					this.formPanel.baseParams.model_id=config.model_id;
				if(!this.actionDateField.disabled && config.action_date)
					this.actionDateField.setValue(config.action_date);
			}
		}
	},
	toggleActionDate : function(modelName) {
		var withActionDate = modelName == 'GO\\Addressbook\\Model\\Contact';
		this.actionDateField.setDisabled(!withActionDate);
		this.actionDateField.setVisible(withActionDate);
	},
	setCommentId : function(comment_id)
	{
		this.formPanel.form.baseParams['id']=comment_id;
//		this.formPanel.form.baseParams['comment_id']=comment_id;
		this.comment_id=comment_id;
	},
	submitForm : function(hide){
		this.formPanel.form.submit(
		{
			url:GO.url('comments/comment/submit'),
//			params: {'task' : 'save_comment'},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				if(hide)
				{
					this.hide();	
				}else
				{
					if(action.result.comment_id)
					{
						this.setCommentId(action.result.comment_id);
					}
				}
				
				if(this.link_config && this.link_config.callback)
				{					
					this.link_config.callback.call(this);					
				}
								
				if (!GO.util.empty(this.formPanel.baseParams['model_name']) && this.formPanel.baseParams['model_name']=='GO\\Addressbook\\Model\\Contact' && !GO.util.empty(GO.addressbook.contactsGrid)) {
					GO.addressbook.contactsGrid.store.reload();
				}
				
				this.fireEvent('save', this);				
			},		
			failure: function(form, action) {
				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});
	},
	buildForm : function () {
		    
    this.formPanel = new Ext.form.FormPanel({
	    waitMsgTarget:true,
			url: GO.settings.modules.comments.url+'action.php',
			border: false,
			autoHeight: true,
			cls:'go-form-panel',
			baseParams: {id:0, model_name:''},				
			items:[{
					xtype: 'textarea',
					name: 'comments',
					anchor: '100%',
					height: 200,
					hideLabel:true
				},
				this.categoriesCB = new GO.comments.CategoriesComboBox(),
				this.actionDateField = new Ext.form.DateField({
					name: 'action_date',
					fieldLabel: GO.comments.lang['actionDate'],
					format : GO.settings['date_format'],
					disabled: true
				})
			]				
		});
	}
});


GO.comments.showCommentDialog = function(comment_id, config){

	if(!GO.comments.commentDialog)
		GO.comments.commentDialog = new GO.comments.CommentDialog();

	if(GO.comments.commentDialogListeners){
		GO.comments.commentDialog.on(GO.comments.commentDialogListeners);
		delete GO.comments.commentDialogListeners;
	}

	GO.comments.commentDialog.show(comment_id, config);
}

GO.comments.browseComments= function (model_id, model_name, action_date)
{
	if(!GO.comments.commentsBrowser)
	{
		GO.comments.commentsBrowser = new GO.comments.CommentsBrowser();
	}
	if(GO.comments.commentDialogListeners){
		GO.comments.commentsBrowser.on(GO.comments.commentDialogListeners);
	}
	
	if (!GO.util.empty(action_date))
		GO.comments.commentsBrowser.show({model_id: model_id, model_name:model_name, action_date: action_date});
	else
		GO.comments.commentsBrowser.show({model_id: model_id, model_name:model_name});
};


GO.newMenuItems.push({
	text: GO.comments.lang.comment,
	iconCls: 'go-menu-icon-comments',
	handler:function(item, e){				
		GO.comments.showCommentDialog(0, {
			link_config: item.parentMenu.link_config			
		});
	}
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: CommentsGrid.js 18977 2015-04-02 08:47:13Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.comments.CommentsGrid = function(config){
	if(!config)
	{
		config = {};
	}
	config.layout='fit';
	config.autoScroll=true;
	config.stateI='comments-Grid';
	config.split=true;
	config.border=false;
	config.store = new GO.data.JsonStore({
	    url: GO.url('comments/comment/store'),
	    baseParams: {
	    	task: 'comments'
	    	},
	    fields: ['id','model_id','category_id','category_name','model_name','user_name','ctime','mtime','comments'],
	    remoteSort: true
	});
	
	
	config.store.on('load', function(){		
		this.setWritePermission(this.store.reader.jsonData.write_permission);
		
	}, this);
	
	
	config.paging=true;
	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[{
			header: GO.lang.strOwner, 
			dataIndex: 'user_name',
		  sortable: false,
		  renderer: function(v){
		  	return '<i>'+v+'</i>';
		  }
		},{
			header: GO.comments.lang['category'], 
			dataIndex: 'category_name',
			width:50
		 },{
			header: GO.lang.strCtime, 
			dataIndex: 'ctime',
			width:50,
			align:'right',
		  renderer: function(v){
		  	return '<b>'+v+'</b>';
		  }
		}]
	});
		
	
	config.cm=columnModel;
	config.viewConfig={
      forceFit:true,
      enableRowBody:true,
      showPreview:true,
      getRowClass : this.applyRowClass
  };
	
	config.disabled=true;
	
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
		
		
		
	config.tbar=[{
			iconCls: 'btn-add',							
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			handler: function(){
				GO.comments.showCommentDialog(0,{model_name:this.store.baseParams['model_name'],model_id:this.store.baseParams.model_id,action_date:this.actionDate});
//				GO.comments.commentDialog.formPanel.baseParams.model_id=this.store.baseParams.model_id;
// 		 		GO.comments.commentDialog.formPanel.baseParams.model_name=this.store.baseParams.model_name;
			},
			scope: this
		},{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function(){
				this.deleteSelected();
			},
			scope: this
		}];
		
	GO.comments.CommentsGrid.superclass.constructor.call(this, config);
	
	this.on('rowdblclick', function(grid, rowIndex){		
		if(this.writePermission)
		{
			var record = grid.getStore().getAt(rowIndex);			
			GO.comments.showCommentDialog(record.data.id, {model_name:this.store.baseParams.model_name,model_id:this.store.baseParams.model_id,action_date:this.actionDate});
		}
	}, this);
};
Ext.extend(GO.comments.CommentsGrid, GO.grid.GridPanel,{
	writePermission : false,
	
	actionDate: false,
	
	setWritePermission : function(writePermission){
		this.writePermission=writePermission;
		this.getTopToolbar().setDisabled(!writePermission);
	},
	
	afterRender : function(){
		
		GO.comments.commentDialogListeners={
			save:function(){
				if(this.store.baseParams.model_id && this.store.baseParams.model_name){
					this.store.reload();
				}
			},
			scope:this
		};

		
		GO.comments.CommentsGrid.superclass.afterRender.call(this);
	},
	
	applyRowClass: function(record, rowIndex, p, ds) {
      if (this.showPreview) {
          p.body = '<p class="description">' +record.data.comments + '</p>';
          return 'x-grid3-row-expanded';
      }
      return 'x-grid3-row-collapsed';
  },
  setLinkId :  function(model_id, model_name){
  	this.store.baseParams.model_id=model_id;
  	this.store.baseParams.model_name=model_name;
  	
  	
  	this.store.loaded=false;
  	
  	this.setDisabled(model_id<1);
  },
  onShow : function(){
		GO.grid.LinksPanel.superclass.onShow.call(this);
		
		if(!this.store.loaded)
			this.store.load();
  }
});


GO.comments.displayPanelTemplate =
	//'{[this.collapsibleSectionHeader(GO.comments.lang.recentComments+\' (<a href="#" onclick="GO.comments.browseComments(\'+values.id+\', \'+values.link_type+\');" class="normal-link">\'+GO.comments.lang.browseComments+\'</a>)\', "comments-"+values.panelId, "comments")]}'+
'<tpl if="values.comments && values.comments.length">'+
'{[this.collapsibleSectionHeader(GO.comments.lang.recentComments, "comments-"+values.panelId, "comments")]}'+
	
			'<table cellpadding="0" cellspacing="0" border="0" class="display-panel" id="comments-{panelId}">'+
				'<tr><td colspan="2"><div id="newCommentForModelDiv_{model_name_underscores}_{id}"></div></td></tr>'+
				'<tr><td colspan="2"><hr /></td></tr>'+
				'<tpl if="!comments.length">'+
					'<tr><td colspan="3">'+GO.lang.strNoItems+'</td></tr>'+
				'</tpl>'+
				'<tpl for="comments">'+					
					'<tr>'+
						'<td><i>{user_name}</i> ({categoryName})</td>'+										
						'<td style="text-align:right"><b>{ctime}</b></td>'+
					'</tr>'+
					'<tr>'+
						'<td colspan="2" style="padding-left:5px" id="comment-td-{id}">'+
							'{[GO.comments.commentsAccordion(values.id,values.comments)]}'+
							'<hr />'+
						'</td>'+
					'</tr>'+
				'</tpl>'+

				'<tr><td colspan="4"><a class="display-panel-browse" href="#" onclick="GO.comments.browseComments({id}, \'{model_name}\',\'{action_date}\');">'+GO.lang.browse+'</a></td></tr>'+

			'</table>'+
	'</tpl>';

GO.comments.closeComment = function(commentId) {
	Ext.get('comment-'+commentId).setDisplayed(false);
	Ext.get('shortComment-'+commentId).setDisplayed(true);
}

GO.comments.openComment = function(commentId) {
	Ext.get('comment-'+commentId).setDisplayed(true);
	Ext.get('shortComment-'+commentId).setDisplayed(false);
}

GO.comments.commentsAccordion = function(id,commentsText) {
	
	var maxLength = 200;
	if (commentsText.length<maxLength || GO.comments.enableReadMore == "0") {
		return '<div id="comment-'+id+'" class="comment-div print-always">'+commentsText+'</div>';
	} else {
		return '<div id="comment-'+id+'" class="comment-div print-always" style="display:none;">'+
//				'<a href="javascript:GO.comments.closeComment('+id+');"><img src="views/Extjs3/themes/Default/images/elbow-end-minus-nl.gif" style="margin-bottom:-4px;margin-right:3px;" /></a>'+
					commentsText+'</div>'+
					'<div id="shortComment-'+id+'" class="shortComment-div print-never">'+				
					cutHtmlString(commentsText,maxLength)+'...'+
//					Ext.util.Format.ellipsis(commentsText,maxLength)+
					'&nbsp;<a href="javascript:GO.comments.openComment('+id+');">'+GO.comments.lang.readMore+'</a>'+
					'</div>';
					
	}
}

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: CommentsBrowser.js 18546 2014-12-04 10:22:30Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.comments.CommentsBrowser = function(config){
	
	Ext.apply(this, config);


	this.commentsGrid = new GO.comments.CommentsGrid();

	
	GO.comments.CommentsBrowser.superclass.constructor.call(this, {
   	layout: 'fit',
		modal:false,
		minWidth:300,
		minHeight:300,
		height:500,
		width:700,
		plain:true,
		maximizable:true,
		closeAction:'hide',
		title:GO.comments.lang.browseComments,
		items: this.commentsGrid,
		buttons: [			
			{				
				text: GO.lang['cmdClose'],
				handler: function(){this.hide();},
				scope: this
			}
		]
    });
    
   this.addEvents({'link' : true});
	 
	 this.on('hide', function(){
		GO.dialog.TabbedFormDialog.prototype.refreshActiveDisplayPanels.call(this);
	}, this);
};

Ext.extend(GO.comments.CommentsBrowser, GO.Window, {
	
	show : function(config)
	{
		if (!GO.util.empty(config['action_date'])) {
			this.commentsGrid.actionDate = config['action_date'];
		} else {
			this.commentsGrid.actionDate = false;
		}
		this.commentsGrid.setLinkId(config.model_id, config.model_name);
		this.commentsGrid.store.load();
		
		GO.comments.CommentsBrowser.superclass.show.call(this);
	}
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 *
 */
 

GO.comments.ManageCategoriesGrid = Ext.extend(GO.grid.GridPanel,{
	changed : false,
	
	initComponent : function(){
		
		Ext.apply(this,{
			standardTbar:true,
			standardTbarDisabled:!GO.settings.modules.comments.write_permission,
			store: GO.comments.categoriesStore,
			border: false,
			paging:true,
			view:new Ext.grid.GridView({
				autoFill: true,
				forceFit: true,
				emptyText: GO.lang['strNoItems']		
			}),
			cm:new Ext.grid.ColumnModel({
				defaults:{
					sortable:true
				},
				columns:[
				{
					header: GO.lang.strName, 
					dataIndex: 'name'
				}
				]
			})
		});
		
		GO.comments.ManageCategoriesGrid.superclass.initComponent.call(this);

	},
	
	dblClick : function(grid, record, rowIndex){
		this.showCategoryDialog(record.id);
	},
	
	btnAdd : function(){				
		this.showCategoryDialog();	  	
	},
	showCategoryDialog : function(id){
		if(!this.categoryDialog){
			this.categoryDialog = new GO.comments.CategoryDialog();

			this.categoryDialog.on('save', function(){   
				this.store.load();
				this.changed=true;	    			    			
			}, this);	
		}
		this.categoryDialog.show(id);	  
	}
//	,
//	deleteSelected : function(){
//		GO.comments.ManageCategoriesGrid.superclass.deleteSelected.call(this);
//	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 */
 
GO.comments.ManageCategoriesDialog = function(config){
	
	
	if(!config)
	{
		config={};
	}
		
	this.categoriesGrid = new GO.comments.ManageCategoriesGrid();

	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=true;
	config.width=600;
	config.height=400;
	config.closeAction='hide';
	config.title= GO.comments.lang.manageCategories;					
	config.items= [this.categoriesGrid];
	config.buttons=[{
			text: GO.lang['cmdClose'],
			handler: function(){				
				this.hide();				
			},
			scope:this
		}					
	];
	
	GO.comments.ManageCategoriesDialog.superclass.constructor.call(this, config);

	this.addEvents({'change':true});

	this.on('hide', function(){
		if(this.categoriesGrid.changed)
		{
			this.fireEvent('change');
			this.categoriesGrid.changed=false;
		}
	}, this);
	
}

Ext.extend(GO.comments.ManageCategoriesDialog, GO.Window,{
	show : function() {
		this.categoriesGrid.store.load();
		GO.comments.ManageCategoriesDialog.superclass.show.call(this);
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 */
 
GO.comments.CategoryDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	initComponent : function(){
		
		Ext.apply(this, {
			titleField:'name',
			title:GO.comments.lang.category,
			formControllerUrl: 'comments/category',
			height:440
		});
		
		GO.comments.CategoryDialog.superclass.initComponent.call(this);	
	},
	buildForm : function () {

		this.propertiesPanel = new Ext.Panel({
//			url: GO.settings.modules.notes.url+'action.php',
			border: false,
//			baseParams: {task: 'category'},			
//			title:GO.lang['strProperties'],			
			cls:'go-form-panel',waitMsgTarget:true,			
			layout:'form',
			autoScroll:true,
			items:[{
				xtype: 'textfield',
			  name: 'name',
				anchor: '100%',
			  allowBlank:false,
			  fieldLabel: GO.lang.strName
			}]
				
		});

		this.addPanel(this.propertiesPanel);	 
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 */

GO.comments.CategoriesComboBox = Ext.extend(GO.form.ComboBox, {
	initComponent : function(){
		Ext.apply(this, {
			fieldLabel : GO.comments.lang.category,	
//			hideTrigger : !GO.settings.modules.comments.write_permission,
			hiddenName : 'category_id',
			store:GO.comments.categoriesStore,
			valueField:'id',
			displayField:'name',
			mode: 'remote',
			triggerAction: 'all',
			editable: false,
			selectOnFocus:true,
			forceSelection: GO.comments.categoryRequired,
			allowBlank: !GO.comments.categoryRequired
//					,
//					pageSize: parseInt(GO.settings.max_rows_list),
//					disabled:!GO.settings.modules.projects.write_permission
		});

		Ext.form.TwinTriggerField.prototype.initComponent.call(this);
		
	},
	
	render : function( container, position ) {
		GO.comments.CategoriesComboBox.superclass.render.call(this,container,position);
		if (!GO.settings.modules.comments.write_permission)
			this.triggers[0].hide();
	},
	
	getTrigger : Ext.form.TwinTriggerField.prototype.getTrigger,
	initTrigger : Ext.form.TwinTriggerField.prototype.initTrigger,
	trigger1Class : 'x-form-edit-trigger',
	//hideTrigger1 : true,
	onViewClick : Ext.form.ComboBox.prototype.onViewClick.createSequence(function() {
		//this.triggers[0].setDisplayed(true);
	}),
	onTrigger2Click : function() {
		this.onTriggerClick();
	},
	onTrigger1Click : function() {
		if(!this.disabled) {//} && GO.settings.modules.comments.write_permission){

			if(!GO.comments.manageCategoriesDialog){
				GO.comments.manageCategoriesDialog = new GO.comments.ManageCategoriesDialog();
				GO.comments.manageCategoriesDialog.on('save', function(){
						GO.comments.categoriesStore.reload();
					}, this);
			}

			GO.comments.manageCategoriesDialog.show();
		}
	},
	setValue : function(v){
		GO.form.ComboBoxReset.superclass.setValue.call(this, v);
		if(this.rendered)
		{
			//this.triggers[0].setDisplayed(v!='');
		}
	},
	afterRender:function(){
		GO.form.ComboBoxReset.superclass.afterRender.call(this);
		if (Ext.isIE8) this.el.setTop(1);
	}
});

GO.comments.SettingsPanel = function(config) {
	if (!config) 
		config = {};

	config.autoScroll = true;
	config.border = false;
	config.hideLabel = true;
	config.title = GO.comments.lang.comments;
	config.hideMode = 'offsets';
	config.layout = 'form';
	config.bodyStyle = 'padding:5px';
	config.labelWidth=150;
	
	config.items=[
		{
			xtype:'fieldset',
			title:GO.comments.lang.readMore,
			autoHeight:true,
			items:[
				this.useReadmore = new Ext.ux.form.XCheckbox({
					boxLabel:GO.comments.lang.enableReadMore,
					hideLabel:true,
					checked:GO.comments.enableReadMore,
					name:'comments_enable_read_more'
				})
			]
		},{
			xtype:'fieldset',
			title:GO.comments.lang.originalCommentTabs,
			autoHeight:true,
			items:[
				this.disableOrigContact = new Ext.ux.form.XCheckbox({
					boxLabel:GO.comments.lang.disableOriginalCommentsContact,
					hideLabel:true,
					checked:GO.comments.disableOriginalCommentsContact,
					name:'comments_disable_orig_contact',
					disabled:GO.comments.disabledOriginalCommentsContactInConfig
				}),
				this.disableOrigCompany = new Ext.ux.form.XCheckbox({
					boxLabel:GO.comments.lang.disableOriginalCommentsCompany,
					hideLabel:true,
					checked:GO.comments.disableOriginalCommentsCompany,
					name:'comments_disable_orig_company',
					disabled:GO.comments.disabledOriginalCommentsCompanyInConfig
				})
			]
		}
		
	];

	GO.comments.SettingsPanel.superclass.constructor.call(this, config);
};

Ext.extend(GO.comments.SettingsPanel, Ext.Panel, {
	onLoadSettings : function(action) {		
		this.useReadmore.setValue(action.result.data.comments_enable_read_more);
		this.disableOrigContact.setValue(action.result.data.comments_disable_orig_contact);
		this.disableOrigCompany.setValue(action.result.data.comments_disable_orig_company);
	}
});

GO.mainLayout.onReady(function() {
	GO.moduleManager.addSettingsPanel('comments',
		GO.comments.SettingsPanel);
});

GO.linkPreviewPanels["GO\\Comments\\Model\\Comment"]=function(config){
	config = config || {};
	return new GO.comments.CommentPanel(config);
}

/**
 * Returns if the original tab needs to be hidden or not.
 * True = hide, False = show
 * 
 * @param string panelId
 * @returns {Boolean}
 */
GO.comments.hideOriginalTab = function(panelId){

	if(panelId == 'contact' && GO.comments.disableOriginalCommentsContact && GO.comments.disableOriginalCommentsContact == "1"){
		 return true;
	}

	if(panelId == 'company' &&  GO.comments.disableOriginalCommentsCompany && GO.comments.disableOriginalCommentsCompany == "1"){
		 return true;
	}

	return false;
};


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AliasesDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.email.AliasesDialog = function(config){	
	if(!config)
	{
		config={};
	}
	
	this.aliasesGrid = new GO.email.AliasesGrid();
		
	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=500;
	config.height=400;
	config.closeAction='hide';
	config.title= GO.email.lang.aliases;					
	config.items=this.aliasesGrid;
	config.buttons=[{
		text: GO.lang.cmdClose,
		handler: function(){this.hide();},
		scope:this
	}];
	
	GO.email.AliasesDialog.superclass.constructor.call(this, config);	
}
Ext.extend(GO.email.AliasesDialog, Ext.Window,{
	show : function(account_id){		
		
		this.aliasesGrid.setAccountId(account_id);
		
		GO.email.AliasesDialog.superclass.show.call(this);
	}

});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AliasDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 

GO.email.AliasDialog = Ext.extend(GO.dialog.TabbedFormDialog,{
	
	initComponent : function(){
		Ext.apply(this, {
			titleField:'email',
			title: GO.email.lang.alias,
			formControllerUrl: 'email/alias',
			width:700,
			height:500
		});
		
		GO.email.AliasDialog.superclass.initComponent.call(this);
	},
		
	buildForm : function () {
		
		this.propertiesPanel = new Ext.Panel({
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',
			waitMsgTarget:true,			
			layout:'form',
			autoScroll:true,
			items:[{
				xtype : 'textfield',
				name : 'name',
				anchor : '100%',
				allowBlank:false,
				fieldLabel : GO.lang.strName
			}, {
				xtype : 'textfield',
				name : 'email',
				anchor : '100%',
				allowBlank:false,
				fieldLabel : GO.email.lang.email
			}, {
				xtype : 'textarea',
				name : 'signature',
				anchor : '100%',
				height:150,
				fieldLabel : GO.email.lang.signature
			}]
		});
		
		this.addPanel(this.propertiesPanel);
	}
	

});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AliasesGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.email.AliasesGrid = function(config){
	if(!config)
	{
		config = {};
	}
	config.layout='fit';
	config.autoScroll=true;
	config.store = new GO.data.JsonStore({
	    url: GO.url("email/alias/store"),
	    fields: ['id','account_id','name','email','signature'],
	    remoteSort: true
	});

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
		{
			header: GO.lang.strName, 
			dataIndex: 'name'
		},{
			header: GO.email.lang.email, 
			dataIndex: 'email'
		}]
	});
	
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']		
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	this.aliasDialog = new GO.email.AliasDialog();
		this.aliasDialog.on('save', function(){   
			this.store.reload();	  
			if(GO.email.aliasesStore.loaded)
			{
				GO.email.aliasesStore.reload();
			}
		}, this);
	config.tbar=[{
			iconCls: 'btn-add',							
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			handler: function(){
				this.aliasDialog.formPanel.baseParams.account_id=this.account_id;
				this.aliasDialog.show();
			},
			scope: this
		},{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function(){
				this.deleteSelected({
					callback: function(){										 
						if(GO.email.aliasesStore.loaded)
						{
							GO.email.aliasesStore.reload();
						}
						this.fireEvent('delete', this);
					},
					scope: this
				});
			},
			scope: this
		}];
	GO.email.AliasesGrid.superclass.constructor.call(this, config);
	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);	
		this.aliasDialog.show(record.data.id);
		}, this);
};
Ext.extend(GO.email.AliasesGrid, GO.grid.GridPanel,{
	setAccountId : function(account_id)
	{
		if(this.store.baseParams.account_id != account_id)
		{
			this.store.baseParams.account_id=account_id;
			if(account_id==0)
			{
				this.store.removeAll();
			}else
			{
				this.store.load();
			}
		}
		
		this.setDisabled(account_id==0);		
		this.account_id=account_id;
	}
});


GO.email.LinkAttachmentDialog = Ext.extend(GO.dialog.LinksDialog,{

	attachmentItem : null, // If this is set to null, then it saves all attachments of the message.
	messagePanel : null,
	
	constructor : function(config){
		
		config = config || {};
		
		Ext.apply(config, {
			title:GO.email.lang.saveAttachmentTo,
			singleSelect:true,
			filesupport:true
		});

		GO.email.LinkAttachmentDialog.superclass.constructor.call(this,config);
	},
	
	linkItems : function()	{
		
		var selectionModel = this.grid.searchGrid.getSelectionModel();
		var record = selectionModel.getSelected();

		GO.request({
			url:'files/folder/checkModelFolder',
			params:{								
				mustExist:true,
				model:record.data.model_name,
				id:record.data.model_id
			},
			success:function(response, options, result){
				
				if(GO.util.empty(this.attachmentItem)){
					this.saveAllToItem(record, result.files_folder_id);
				} else {
					this.saveToItem(record, result.files_folder_id);
				}
			},
			scope:this
		});
	},
	
	show : function(attachmentItem,messagePanel){
		this.attachmentItem = attachmentItem;
		this.messagePanel = messagePanel;
		GO.email.LinkAttachmentDialog.superclass.show.call(this);
	},

	saveToItem : function(record,files_folder_id){

		if(!GO.files.saveAsDialog){
			GO.files.saveAsDialog = new GO.files.SaveAsDialog();
		}

		GO.files.saveAsDialog.show({
			folder_id : files_folder_id,
			filename: this.attachmentItem.name,
			handler:function(dialog, folder_id, filename){

				GO.request({
					maskEl:dialog.el,
					url: 'email/message/saveAttachment',
					params:{
						uid: this.messagePanel.uid,
						mailbox: this.messagePanel.mailbox,
						number: this.attachmentItem.number,
						encoding: this.attachmentItem.encoding,
						type: this.attachmentItem.type,
						subtype: this.attachmentItem.subtype,
						account_id: this.messagePanel.account_id,
						uuencoded_partnumber: this.attachmentItem.uuencoded_partnumber,
						folder_id: folder_id,
						filename: filename,
						charset:this.attachmentItem.charset,
						sender:this.messagePanel.data.sender,
						tmp_file: this.attachmentItem.tmp_file ? this.attachmentItem.tmp_file : 0,
						filepath:this.messagePanel.data.path//smime message are cached on disk
					},
					success: function(options, response, result)
					{
						dialog.hide();
						this.hide();
					},
					scope:this
				});
			},
			scope:this
		});
	},
	
	saveAllToItem: function(record,files_folder_id){

		GO.request({
			url: 'email/message/saveAllAttachments',
			params:{
				uid: this.messagePanel.uid,
				mailbox: this.messagePanel.mailbox,
				account_id: this.messagePanel.account_id,
				folder_id: files_folder_id
			},
			success: function(options, response, result){
				// Successfully saved all attachments
				this.hide();
			},
			scope:this
		});
	}

});

/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: FoldersDialog.js 20871 2017-02-21 10:53:37Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.email.FoldersDialog = function(config) {
	Ext.apply(this, config);

	this.foldersTree = new Ext.tree.TreePanel({
		animate : true,
		border : false,
		autoScroll : true,
		height : 200,
		loader : new GO.base.tree.TreeLoader({
			dataUrl : GO.url("email/account/subscribtionsTree"),
			baseParams : {
				list_all : 1,
				account_id : 0
			},
			preloadChildren : true,
			listeners : {
				beforeload : function() {
					this.body.mask(GO.lang.waitMsgLoad);
				},
				load : function() {
					this.body.unmask();
				},
				scope : this
			}
		})
	});
	
	this.foldersTree.on('load', function(node) {
		if(node.attributes.mailbox == "INBOX") {
			node.disable();
		}
	});

	// set the root node
	this.rootNode = new Ext.tree.AsyncTreeNode({
		text : GO.email.lang.root,
		draggable : false,
		id : 'root',
		expanded : false
	});
	this.foldersTree.setRootNode(this.rootNode);

	this.rootNode.on('load', function() {
		this.rootNode.select();

	}, this);

	this.foldersTree.on('checkchange', function(node, checked) {
		
		
		var route = checked ? 'email/folder/subscribe' : 'email/folder/unsubscribe';
		var mailboxs = [];
		mailboxs.push(node.attributes.mailbox);
		
		GO.request({
			maskEl:this.body,
			url : route,
			params : {
				account_id : this.account_id,
				mailboxs : Ext.util.JSON.encode(mailboxs) 
			},
			fail: function(response, options, result) {
				Ext.Msg.alert(GO.lang.strError, result.feedback);
				this.foldersTree.getRootNode().reload();
			},
			scope : this
		});

	}, this);

	var treeEdit = new Ext.tree.TreeEditor(this.foldersTree, {
		ignoreNoChange : true
	});

	treeEdit.on('beforestartedit', function(editor, boundEl, value) {
		if (editor.editNode.attributes.folder_id == 0
			|| editor.editNode.attributes.mailbox == 'INBOX') {
			alert(GO.email.lang.cantEditFolder);
			return false;
		}
	});

	treeEdit.on('beforecomplete', function(editor, text, value) {
		
		var mailboxs = [];
		mailboxs.push(editor.editNode.attributes.mailbox);
		
		GO.request({
			url : 'email/folder/rename',
			params : {
				account_id: editor.editNode.attributes.account_id,
				mailboxs: Ext.util.JSON.encode(mailboxs),
				name: text
			},
			fail : function() {
				this.foldersTree.getRootNode().reload();
			}
		});

	});

	GO.email.FoldersDialog.superclass.constructor.call(this, {
		layout : 'fit',
		modal : false,
		shadow : false,
		minWidth : 300,
		minHeight : 300,
		height : 400,
		width : 500,
		plain : true,
		closeAction : 'hide',
		title : GO.email.lang.folders,

		items : this.foldersTree,

		tbar : [{
			iconCls : 'btn-delete',
			text : GO.lang.cmdDelete,
			cls : 'x-btn-text-icon',
			scope : this,
			handler : function() {
				var sm = this.foldersTree.getSelectionModel();
				var node = sm.getSelectedNode();

				if(!node|| node.attributes.folder_id<1)
				{
					Ext.MessageBox.alert(GO.lang.strError, GO.email.lang.selectFolderDelete);
				}else if(node.attributes.mailbox=='INBOX')
				{
					Ext.MessageBox.alert(GO.lang.strError, GO.email.lang.cantDeleteInboxFolder);
				}else
				{
					GO.deleteItems({
						url: GO.url("email/folder/delete"),
						params: {						
							account_id:this.account_id,
							mailbox: node.attributes.mailbox
						},
						callback: function(responseParams)
						{
							if(responseParams.success)
							{
								node.remove();								
							}else
							{
								Ext.MessageBox.alert(GO.lang.strError,responseParams.feedback);
							}
						},
						count: 1,
						scope: this
					});
				}
			}
		}, {
			iconCls : 'btn-add',
			text : GO.lang.cmdAdd,
			cls : 'x-btn-text-icon',
			handler : function() {

				var sm = this.foldersTree.getSelectionModel();
				var node = sm.getSelectedNode();

				if (!node) {
					Ext.MessageBox.alert(GO.lang.strError,
						GO.email.lang.selectFolderAdd);
				} else {
					Ext.MessageBox.prompt(GO.lang.strName,
						GO.email.lang.enterFolderName, function(button,
							text) {

							if (button == 'ok') {
								GO.request({
									url: "email/folder/create",
									maskEl: Ext.getBody(),
									params: {
										parent: node.attributes.mailbox,
										account_id: this.account_id,
										name: text
									},
									success: function(options, response, result)
									{								
										delete node.attributes.children;
										node.reload();
									},
									fail : function(){
										this.rootNode.reload();
									},
									scope: this
								});
						
							}
						}, this);
				}
			},
			scope : this
		}, {
			iconCls : 'btn-refresh',
			text : GO.lang.cmdRefresh,

			cls : 'x-btn-text-icon',
			handler : function() {
				this.rootNode.reload();
			},
			scope : this
		},
		'->' 
		,{
			iconCls : 'btn-add',
			text : GO.lang.selectAll,
			cls : 'x-btn-text-icon',
			handler : function() {

				var list = this.treeToMailboxList(this.rootNode);


				GO.request({
					maskEl:this.body,
					url : 'email/folder/subscribe',
					params : {
						account_id : this.account_id,
						mailboxs : Ext.util.JSON.encode(list)
					},
					success:function(){
						this.foldersTree.getRootNode().reload();
					},
					fail:function(){
						this.foldersTree.getRootNode().reload();
					},
					scope : this
				});



				this.rootNode.reload();
				
			},
			scope : this
		},{
			iconCls : 'btn-add',
			text : GO.lang.deselectAll,
			cls : 'x-btn-text-icon',
			handler : function() {
				
				var list = this.treeToMailboxList(this.rootNode);


				GO.request({
					maskEl:this.body,
					url : 'email/folder/unsubscribe',
					params : {
						account_id : this.account_id,
						mailboxs : Ext.util.JSON.encode(list)
					},
					success:function(){
						this.foldersTree.getRootNode().reload();
					},
					fail:function(){
						this.foldersTree.getRootNode().reload();
					},
					scope : this
				});



				this.rootNode.reload();
			},
			scope : this
		}

		],
		buttons : [{
			text : GO.lang.cmdClose,
			handler : function() {
				this.hide();
			},
			scope : this
		}]
	});
}

Ext.extend(GO.email.FoldersDialog, Ext.Window, {

	show : function(account_id) {

		this.render(Ext.getBody());

		this.account_id = account_id;
		this.foldersTree.loader.baseParams.account_id = account_id;

		if (!this.rootNode.isExpanded())
			this.rootNode.expand();
		else
			this.rootNode.reload();

		GO.email.FoldersDialog.superclass.show.call(this);

	},

	getSubscribtionData : function() {
		var data = [];
		for (var i = 0; i < this.allFoldersStore.data.items.length; i++) {
			data[i] = {
				id : this.allFoldersStore.data.items[i].get('id'),
				subscribed : this.allFoldersStore.data.items[i]
				.get('subscribed'),
				name : this.allFoldersStore.data.items[i].get('name')
			};
		}
		return data;
	},
	
	treeToMailboxList: function(node, list) {
		if(!list){
			list = [];
		}
		node.eachChild(function(subNode) {
			
			list.push(subNode.attributes.mailbox)
			this.treeToMailboxList(subNode, list);
		}, this)
		return list;
		
	}
	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: AccountDialog.js 20843 2017-02-13 14:27:25Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.email.AccountDialog = function(config) {
	Ext.apply(this, config);

//	var sslCb;

	var advancedItems = [ new Ext.form.TextField({
		fieldLabel : GO.email.lang.port,
		name : 'port',
		value : '143',
		allowBlank : false
	}), new Ext.form.TextField({
		fieldLabel : GO.email.lang.rootMailbox,
		name : 'mbroot'
	}) ];

	if (GO.sieve) {
		advancedItems.push(
			new Ext.form.NumberField({
				fieldLabel : GO.sieve.lang.sievePort,
				name : 'sieve_port',
				decimals : 0,
				allowBlank : false,
				value:GO.sieve.sievePort
			})
		);
		advancedItems.push(
			new Ext.ux.form.XCheckbox({
				boxLabel: GO.sieve.lang.useTLS,
				checked:GO.sieve.sieveTls,
				name: 'sieve_usetls',
				allowBlank: true,
				hideLabel:true
			})
		);
	}

	if(GO.addressbook){
				
		this.templatesCombo = new GO.form.ComboBox({
			fieldLabel : GO.email.lang['defaultEmailTemplate'],
			hiddenName : 'default_account_template_id',
			width: 300,
			store : new GO.data.JsonStore({
				url : GO.url("addressbook/template/accountTemplatesStore"),
				baseParams : {
					'type':"0"
				},
				root : 'results',
				totalProperty : 'total',
				id : 'id',
				fields : ['id', 'name', 'group', 'text','template_id','checked'],
				remoteSort : true
			}),
			value : '',
			valueField : 'id',
			displayField : 'name',
			typeAhead : true,
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true
		});
		
//		this.templatesBtn = new Ext.Button({
//
//			iconCls:'ml-btn-mailings',
//			text:GO.addressbook.lang.emailTemplate,
//			menu:this.templatesMenu = new GO.menu.JsonMenu({
//				store:this.templatesStore,
//				listeners:{
//					scope:this,
//					itemclick : function(item, e ) {
//						if(item.template_id=='default'){
//							this.templatesStore.baseParams.default_template_id=this.lastLoadParams.template_id;
//							this.templatesStore.load();
//							delete this.templatesStore.baseParams.default_template_id;
//						}else if(!this.emailEditor.isDirty() || confirm(GO.email.lang.confirmLostChanges))
//						{							
//							this.lastLoadParams.template_id=item.template_id;
//							this.lastLoadParams.keepHeaders=1;
//							this.loadForm(this.lastLoadUrl, this.lastLoadParams);							
//						}else
//						{
//							return false;							
//						}
//					}
//				}
//			})
//		});
		
	}

	this.imapAllowSelfSignedCheck = new Ext.ux.form.XCheckbox({
		boxLabel: GO.email.lang.allowSelfSignedText,
		name: 'imap_allow_self_signed',
		hideLabel:false,
		fieldLabel:''
	});
		

	var incomingTab = {
		title : GO.email.lang.incomingMail,
		layout : 'form',
		defaults : {
			anchor : '100%'
		},
		defaultType : 'textfield',
		autoHeight : true,
		cls : 'go-form-panel',
		waitMsgTarget : true,
		labelWidth : 120,
		items : [/*typeField = new Ext.form.ComboBox({
			fieldLabel : GO.email.lang.type,
			hiddenName : 'type',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [['imap', 'IMAP'],
				['pop3', 'POP-3']]

			}),
			value : 'imap',
			valueField : 'value',
			displayField : 'text',
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true,
			listeners : {
				change : function() {
					this.refreshNeeded = true;
				},
				scope : this
			}
		}),*/ new Ext.form.TextField({
			fieldLabel : 'IMAP '+GO.email.lang.host,
			name : 'host',
			allowBlank : false,
			listeners : {
				change : function() {
					this.refreshNeeded = true;
				},
				scope : this
			}
		}), new Ext.form.TextField({
			fieldLabel : GO.lang.strUsername,
			name : 'username',
			allowBlank : false,
			listeners : {
				change : function() {
					this.refreshNeeded = true;
				},
				scope : this
			}
		}),
		new Ext.ux.form.XCheckbox({
			boxLabel: GO.email.lang.storePassword,
			checked: true,
			name: 'store_password',
			allowBlank: true,
			hideLabel:true,
			hidden: true //this function only works with imap auth at the moment.
		}),
		new Ext.form.TextField({
			fieldLabel : GO.lang.strPassword,
			name : 'password',
			inputType : 'password',
//			allowBlank : false,
			listeners : {
				change : function() {
					this.refreshNeeded = true;
				},
				scope : this
			}
		}),
		this.ImapEncryptionField = new Ext.form.ComboBox({
			fieldLabel : GO.email.lang.encryption,
			hiddenName : 'imap_encryption',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [
				['', GO.email.lang.noEncryption],
				['tls', 'TLS'], ['ssl', 'SSL']]
			}),
			value : '',
			valueField : 'value',
			displayField : 'text',
			typeAhead : true,
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true
		}),
		this.imapAllowSelfSignedCheck,
//		sslCb = new Ext.ux.form.XCheckbox({
//			fieldLabel : GO.email.lang.ssl,
//			name : 'use_ssl',
//			checked : false
//		}), 
		{
			xtype : 'fieldset',
			title : GO.email.lang.advanced,
			collapsible : true,
			forceLayout:true,
			collapsed : true,
			autoHeight : true,
			autoWidth : true,
			// defaults: {anchor: '100%'},
			defaultType : 'textfield',
			labelWidth : 75,
			labelAlign : 'left',

			items : advancedItems
		}]
	};

	// end incomming tab

	var properties_items = [
	this.selectUser = new GO.form.SelectUser({
		fieldLabel : GO.lang.strUser,
		disabled : !GO.settings.has_admin_permission,
		anchor : '100%'
	}),
	{
		fieldLabel : GO.lang.strName,
		name : 'name',
		allowBlank : false,
		anchor : '100%'
	}, {
		fieldLabel : GO.lang.strEmail,
		name : 'email',
		vtype: 'emailAddress',
		allowBlank : false,
		disabled:!GO.settings.modules.email.write_permission && GO.email.disableAliases,
		listeners : {
			change : function() {
				this.refreshNeeded = true;
			},
			scope : this
		},
		anchor : '100%'
	}, {
		xtype : 'textarea',
		name : 'signature',
		fieldLabel : GO.email.lang.signature,
		height : 100,
		anchor : '100%'
	}
	];

	this.aliasesButton = new Ext.Button({
		text : GO.email.lang.manageAliases,
		handler : function() {
			if (!this.aliasesDialog) {
				this.aliasesDialog = new GO.email.AliasesDialog();
			}
			this.aliasesDialog.show(this.account_id);
		},
		scope : this
	})

	this.doNotMarkAsReadCbx = new Ext.ux.form.XCheckbox({
		boxLabel: GO.email.lang.doNotMarkAsRead,
		fieldLabel: '',
		checked:false,
		name: 'do_not_mark_as_read',
		allowBlank: true
	});
	
	this.fullReplyHeadersCbx = new Ext.ux.form.XCheckbox({
		boxLabel: GO.email.lang.fullReplyHeaders,
		fieldLabel: '',
		checked:false,
		name: 'full_reply_headers',
		allowBlank: true
	});
	
	this.placeSignatureBelowReplyCbx = new Ext.ux.form.XCheckbox({
		boxLabel: GO.email.lang.placeSignatureBelowReply,
		fieldLabel: '',
		checked:false,
		name: 'signature_below_reply',
		allowBlank: true
	});
	
	properties_items.push(this.placeSignatureBelowReplyCbx);
	properties_items.push(this.doNotMarkAsReadCbx);
	properties_items.push(this.fullReplyHeadersCbx);

	if (GO.addressbook)
		properties_items.push(this.templatesCombo);

	if(GO.settings.modules.email.write_permission || !GO.email.disableAliases)
		properties_items.push(this.aliasesButton);
	
	var propertiesTab = {
		title : GO.lang.strProperties,
		layout : 'form',
		anchor : '100% 100%',
		defaultType : 'textfield',
		autoHeight : true,
		cls : 'go-form-panel',
		labelWidth : 100,
		items :properties_items
	};

	this.smtpAllowSelfSignedCheck = new Ext.ux.form.XCheckbox({
		boxLabel: GO.email.lang.allowSelfSignedText,
		name: 'smtp_allow_self_signed',
		hideLabel:false,
		fieldLabel:''
	});

	var outgoingTab = {
		title : GO.email.lang.outgoingMail,
		layout : 'form',
		defaults : {
			anchor : '100%'
		},
		defaultType : 'textfield',
		autoHeight : true,
		cls : 'go-form-panel',
		labelWidth : 120,
		items : [new Ext.form.TextField({
			fieldLabel : GO.email.lang.host,
			name : 'smtp_host',
			allowBlank : false,
			value : GO.email.defaultSmtpHost
		}), this.encryptionField = new Ext.form.ComboBox({
			fieldLabel : GO.email.lang.encryption,
			hiddenName : 'smtp_encryption',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [
				['', GO.email.lang.noEncryption],
				['tls', 'TLS'], ['ssl', 'SSL']]
			}),
			value : '',
			valueField : 'value',
			displayField : 'text',
			typeAhead : true,
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true
		}),
		this.smtpAllowSelfSignedCheck,
		new Ext.form.TextField({
			fieldLabel : GO.email.lang.port,
			name : 'smtp_port',
			value : '25',
			allowBlank : false
		}),
		{
			xtype:'xcheckbox',
			checked: false,
			name: 'smtp_auth',
			hideLabel:true,
			boxLabel:GO.email.lang.useAuth,
			listeners:{
				check:function(cb, checked){
					this.smtpUsername.setDisabled(!checked);
					this.smtpPassword.setDisabled(!checked);
				},
				scope:this
			}
		},this.smtpUsername= new Ext.form.TextField({
			fieldLabel : GO.lang.strUsername,
			name : 'smtp_username',
			disabled:true
		}),
		this.smtpPasswordStore = new Ext.ux.form.XCheckbox({
			checked: true,
			name: 'store_smtp_password',
			allowBlank: true,
			hideLabel:true,
			hidden: true
		}),
		this.smtpPassword = new Ext.form.TextField({
			fieldLabel : GO.lang.strPassword,
			name : 'smtp_password',
			inputType : 'password',
			disabled:true
		})]
	};

	GO.email.subscribedFoldersStore = new GO.data.JsonStore({
		url : GO.url("email/folder/store"),
		baseParams : {
			task : 'subscribed_folders',
			account_id : 0
		},
		fields : ['name']
	});

	this.foldersTab = new Ext.Panel({
		listeners:{
			show:function(){
				if(!GO.email.subscribedFoldersStore.loaded)
					GO.email.subscribedFoldersStore.load();
			}
		},
		title : GO.email.lang.folders,
		autoHeight : true,
		layout : 'form',
		cls : 'go-form-panel',
		defaults : {
			anchor : '100%'
		},
		defaultType : 'textfield',
		labelWidth : 150,
		tbar : [{
			iconCls : 'btn-add',
			text : GO.email.lang.manageFolders,
			cls : 'x-btn-text-icon',
			scope : this,
			handler : function() {

				if (!this.foldersDialog) {
					this.foldersDialog = new GO.email.FoldersDialog();
				}
				this.foldersDialog.show(this.account_id);

			}
		}],

		items : [new GO.form.ComboBoxReset({
			fieldLabel : GO.email.lang.sendItemsFolder,
			hiddenName : 'sent',
			store : GO.email.subscribedFoldersStore,
			valueField : 'name',
			displayField : 'name',
			value:'Sent',
			typeAhead : true,
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true,
			emptyText : GO.lang.disabled
		}), new GO.form.ComboBoxReset({
			fieldLabel : GO.email.lang.trashFolder,
			hiddenName : 'trash',
			value:'Trash',
			store : GO.email.subscribedFoldersStore,
			valueField : 'name',
			displayField : 'name',
			typeAhead : true,
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true,
			emptyText : GO.lang.disabled
		}), new GO.form.ComboBoxReset({
			fieldLabel : GO.email.lang.draftsFolder,
			hiddenName : 'drafts',
			value:'Drafts',
			store : GO.email.subscribedFoldersStore,
			valueField : 'name',
			displayField : 'name',
			typeAhead : true,
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true,
			emptyText : GO.lang.disabled
		}), new Ext.ux.form.XCheckbox({
			boxLabel : GO.email.lang.ignoreSentFolder,
			name : 'ignore_sent_folder',
			checked : false,
			hideLabel : true
		})]
	});
	
	var levelLabels={};
	levelLabels[GO.permissionLevels.create]=GO.email.lang.useAccount;
	levelLabels[GO.email.permissionLevels.delegated]=GO.email.lang['permissionDelegated'];

	this.permissionsTab = new GO.grid.PermissionsPanel({levels:[
			GO.permissionLevels.read,
			GO.email.permissionLevels.delegated,
			GO.permissionLevels.create,
			GO.permissionLevels.manage
	  ],
	  levelLabels:levelLabels
	});

	//this.permissionsTab.disabled = false;
	
	
	this.filterGrid = new GO.email.FilterGrid();

	var items = [propertiesTab,

	this.foldersTab, this.permissionsTab,this.filterGrid];

	this.labelsTab = new GO.email.LabelsGrid();

	items.push(this.labelsTab);

	if (GO.settings.modules.email.write_permission) {
		items.splice(1, 0, incomingTab, outgoingTab);
	}

	this.propertiesPanel = new Ext.form.FormPanel({
		url : GO.url("email/account/submit"),
		// labelWidth: 75, // label settings here cascade unless
		// overridden,
		baseParams:{
			ajax:true
		},
		defaults:{forceLayout:true},
		defaultType : 'textfield',
		waitMsgTarget : true,
		labelWidth : 120,
		border : false,
		items : [this.tabPanel = new Ext.TabPanel({
			hideLabel : true,
			deferredRender : false,
			activeTab : 0,
			border : false,
			anchor : '100% 100%',
			items : items,
			enableTabScroll:true
		})]

	});

	/*typeField.on('select', function(combo, record, index) {

		var value = index == 1 ? '110' : '143';

		this.propertiesPanel.form.findField('port').setValue(value);
	}, this);*/

	this.encryptionField.on('select', function(combo, record, index) {
		var value = record.data.value == '' ? '25' : '465';
		this.propertiesPanel.form.findField('smtp_port')
		.setValue(value);
	}, this);
	
	this.ImapEncryptionField.on('select', function(combo, record, index) {
		var value = record.data.value == 'ssl' ? '993':'143';
		this.propertiesPanel.form.findField('port')
		.setValue(value);
	}, this);
	
	

//	sslCb.on('check', function(checkbox, checked) {
//		//if (typeField.getValue() == 'imap') {
//			var port = checked ? 993 : 143;
//			this.propertiesPanel.form.findField('port').setValue(port);
//		/*} else {
//			var port = checked ? 995 : 110;
//			this.propertiesPanel.form.findField('port').setValue(port);
//		}*/
//	}, this);

	this.selectUser.on('select', function(combo, record, index) {
		if(GO.util.empty(this.account_id)){
			this.propertiesPanel.form.findField('email')
			.setValue(record.data.email);
			this.propertiesPanel.form.findField('username')
			.setValue(record.data.username);
			this.propertiesPanel.form.findField('name')
			.setValue(record.data.name);
		}
	}, this);

	GO.email.AccountDialog.superclass.constructor.call(this, {
		layout : 'fit',
		modal : false,
		height: 600,
		width : 900,
		closeAction : 'hide',
		title : GO.email.lang.account,

		items : this.propertiesPanel,

		buttons : [{

			text : GO.lang.cmdOk,
			handler : function() {
				this.save(true);
			},
			scope : this
		}, {

			text : GO.lang.cmdApply,
			handler : function() {
				this.save(false);
			},
			scope : this
		}, {

			text : GO.lang.cmdClose,
			handler : function() {
				this.hide();
			},
			scope : this
		}]
	});

	this.addEvents({
		'save' : true
	});

}

Ext.extend(GO.email.AccountDialog, GO.Window, {

	save : function(hide) {
		this.propertiesPanel.form.submit({

			url : GO.url("email/account/submit"),
			params : {
				'id' : this.account_id
			},
			waitMsg : GO.lang['waitMsgSave'],
			success : function(form, action) {

				action.result.refreshNeeded = this.refreshNeeded
				|| this.account_id == 0;
				if (action.result.id) {
					//this.account_id = action.result.account_id;
					// this.foldersTab.setDisabled(false);
					this.loadAccount(action.result.id);
				}
				
				//This will reload the signature when it is changed
				if(GO.email.composers && GO.email.composers[0]) {
					GO.email.composers[0].fromCombo.store.reload();
				}
				this.refreshNeeded = false;
				this.fireEvent('save', this, action.result);

				if (hide) {
					this.hide();
				}

			},

			failure : function(form, action) {
				var error = '';
				if (action.failureType == 'client') {
					error = GO.lang.strErrorsInForm;
				} else if (action.result) {
					error = action.result.feedback;
				} else {
					error = GO.lang.strRequestError;
				}

				Ext.MessageBox.alert(GO.lang.strError, error);
				
				if(action.result.validationErrors){
					for(var field in action.result.validationErrors){
						form.findField(field).markInvalid(action.result.validationErrors[field]);
					}
				}
			},
			scope : this

		});

	},
	show : function(account_id) {
		GO.email.AccountDialog.superclass.show.call(this);

		this.tabPanel.setActiveTab(0);

		this.aliasesButton.setDisabled(true);
		if (account_id) {
			this.loadAccount(account_id);
			GO.email.subscribedFoldersStore.baseParams.account_id = account_id;
//			GO.email.subscribedFoldersStore.load();

			GO.email.subscribedFoldersStore.loaded=false;
		} else {

			this.propertiesPanel.form.reset();
			this.setAccountId(0);
			this.foldersTab.setDisabled(true);
			this.permissionsTab.setAcl(0);

			// default values

			// this.selectUser.setValue(GO.settings['user_id']);
			// this.selectUser.setRawValue(GO.settings['name']);
			// this.selectUser.lastSelectionText=GO.settings['name'];

			this.propertiesPanel.form.findField('name')
			.setValue(GO.settings['name']);
			this.propertiesPanel.form.findField('email')
			.setValue(GO.settings['email']);
			this.propertiesPanel.form.findField('username')
			.setValue(GO.settings['username']);

		}
	},

	loadAccount : function(account_id) {
		this.propertiesPanel.form.load({
			url : GO.url("email/account/load"),
			params : {
				id : account_id
			},
			waitMsg : GO.lang.waitMsgLoad,
			success : function(form, action) {
				this.refreshNeeded = false;

				this.setAccountId(account_id);

				this.selectUser.setRemoteText(action.result.remoteComboTexts.user_id);

				this.aliasesButton.setDisabled(false);

				this.foldersTab.setDisabled(false);

				if(!action.result.data.email_enable_labels) {
					this.tabPanel.hideTabStripItem(this.labelsTab);
				} else {
					this.tabPanel.unhideTabStripItem(this.labelsTab);
				}

				this.permissionsTab.setAcl(action.result.data.acl_id);
				
				if (this.templatesCombo) {
					this.templatesCombo.store.load();
					this.templatesCombo.setRemoteText(action.result.remoteComboTexts['default_template_id']);
				}
			},
			scope : this
		});
	},

	setAccountId : function(account_id){
		this.account_id = account_id;
		this.filterGrid.setAccountId(account_id);
		this.labelsTab.setAccountId(account_id);
	}
});


GO.email.SearchDialog = function(config){

	//Ext.apply(config);

	return {
		hasSearch : false,
		show :  function(){
		
			if(!this.dialog)
			{
				
				this.formPanel = new Ext.FormPanel({
					defaults: {
						anchor: '96%'
					},
					defaultType: 'textfield',
					autoHeight:true,
					bodyStyle:'padding:5px',
					labelWidth:125,
			        
					items: [{
						fieldLabel: GO.email.lang.subject,
						name: 'subject'
					},
					{
						fieldLabel: GO.email.lang.searchFrom,
						name: 'from'
					},
					{
						fieldLabel: GO.email.lang.searchTo,
						name: 'to'
					},
					{
						fieldLabel: GO.email.lang.searchCC,
						name: 'cc'
					},
					{
						fieldLabel: GO.email.lang.body,
						name: 'body'
					},
					new Ext.form.DateField({
						fieldLabel: GO.email.lang.recievedBefore,
						name: 'before',
						format: GO.settings['date_format']
					}),
					new Ext.form.DateField({
						fieldLabel: GO.email.lang.recievedSince,
						name: 'since',
						format: GO.settings['date_format']
					}),
					new Ext.form.ComboBox({
						fieldLabel: GO.email.lang.flagged,
						name:'flagged',
						store: new Ext.data.SimpleStore({
							fields: ['value', 'text'],
							data : [
							['', GO.email.lang.NA],
							['FLAGGED', GO.lang.cmdYes],
							['UNFLAGGED', GO.lang.cmdNo]
							]
				                    
						}),
						value:'',
						valueField:'value',
						displayField:'text',
						mode: 'local',
						triggerAction: 'all',
						editable: false,
						selectOnFocus:true,
						forceSelection: true
					}),
					new Ext.form.ComboBox({
						fieldLabel: GO.email.lang.answered,
						name:'answered',
						store: new Ext.data.SimpleStore({
							fields: ['value', 'text'],
							data : [
							['', GO.email.lang.NA],
							['ANSWERED', GO.lang.cmdYes],
							['UNANSWERED', GO.lang.cmdNo]
							]
				                    
						}),
						value:'',
						valueField:'value',
						displayField:'text',
						mode: 'local',
						triggerAction: 'all',
						editable: false,
						selectOnFocus:true,
						forceSelection: true
					}),
					new Ext.form.ComboBox({
						fieldLabel: GO.email.lang.read,
						name:'seen',
						store: new Ext.data.SimpleStore({
							fields: ['value', 'text'],
							data : [
							['', GO.email.lang.NA],
							['SEEN', GO.lang.cmdYes],
							['UNSEEN', GO.lang.cmdNo]
							]
				                    
						}),
						value:'',
						valueField:'value',
						displayField:'text',
						typeAhead: true,
						mode: 'local',
						triggerAction: 'all',
						editable: false,
						selectOnFocus:true,
						forceSelection: true
					}),{
						xtype: 'radiogroup',
						//hideLabel: true,
						name: 'searchInGroup',
						fieldLabel: GO.email.lang['searchIn'],
						itemCls: 'x-check-group-alt',
						columns: 1,
						items: [
							{
								boxLabel: GO.email.lang['currentFolder'],
								name: 'searchIn',
								inputValue: 'current',
								checked: true
							},{
								boxLabel: GO.email.lang['searchRecursive'],
								name: 'searchIn',
								inputValue: 'recursive'
							},{
								boxLabel: GO.email.lang['allFolders'],
								name: 'searchIn',
								inputValue: 'all'
							}
						]	
					}
					]
				});
				
				
				this.dialog = new Ext.Window({
					layout: 'fit',
					title: GO.lang.strSearch,
					modal:false,
					autoHeight:true,
					width:500,
					closeAction:'hide',				
					items: this.formPanel,
					buttons:[{
						text: GO.lang.cmdOk,
						handler: this.doSearch,
						scope:this					
					},{
						text: GO.lang.cmdReset,
						handler: function(){
							this.formPanel.form.reset();			
						},
						scope:this					
					},{
						text: GO.lang.cmdClose,
						handler: function(){
							this.dialog.hide();					
						},
						scope:this					
					}],
					keys: [{
						key: Ext.EventObject.ENTER,
						fn: this.doSearch,
						scope:this
					}],
					focus: function(){
						this.formPanel.form.findField('subject').focus(true);
					}.createDelegate(this)
				}
				);	
				
		
			}

			this.dialog.show();

			if(GO.email.search_query)
			{
				var search_query = GO.email.search_query;
				var search_type = (GO.email.search_type) ? GO.email.search_type : GO.email.search_type_default;

				this.formPanel.form.findField('from').setValue(
					(search_type == 'from') ? search_query : '');
				this.formPanel.form.findField('subject').setValue(
					(search_type == 'subject') ? search_query : '');
				this.formPanel.form.findField('to').setValue(
					(search_type == 'to') ? search_query : '');
				this.formPanel.form.findField('cc').setValue(
					(search_type == 'cc') ? search_query : '');
                                
			}
		},
		
		doSearch : function(){

			this.hasSearch = true;
			config.store.baseParams['query']=this.buildQuery();
			config.store.baseParams['searchIn']=this.formPanel.form.findField('searchInGroup').getValue().inputValue;
			config.store.load();

			this.dialog.hide();					
		},
		
		
		buildQuery : function() {
			var query = '';

			var months=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
			
			var form = this.formPanel.form;
			
			var subject = form.findField('subject').getValue();
			var from = form.findField('from').getValue();
			var to = form.findField('to').getValue();
			var cc = form.findField('cc').getValue();
			var body = form.findField('body').getValue();
			
			var before = form.findField('before').getValue();
			var since = form.findField('since').getValue();
			
			var flagged = form.findField('flagged').getValue();
			var seen = form.findField('seen').getValue();
			var answered = form.findField('answered').getValue();
			
			if (subject != '') {
				query += 'SUBJECT "'+subject+'" ';
			}
			
			if (from != '') {
				query += 'FROM "'+from+'" ';
			}
			
			if (to != '') {
				query += 'TO "'+to+'" ';
			}
			
			if (cc != '') {
				query += 'CC "'+cc+'" ';
			}
			if (body != '') {
				query += 'BODY "'+body+'" ';
			}
			
			if(before!='')
			{
				query += 'BEFORE '+before.format('j')+'-'+months[before.format('n')-1]+'-'+before.format('Y')+' ';
			}
			
			if(since!='')
			{
				query += 'SINCE '+since.format('j')+'-'+months[since.format('n')-1]+'-'+since.format('Y');
			}
			
			if (flagged != '') {
				query += ' '+flagged;
			}
			
			if (seen != '') {
				query += ' '+seen;
			}
			
			if (answered != '') {
				query += ' '+answered;
			}

			
			return query;
		}
		
		
	}
}

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 * @version $Id: MessagePanel.js 21140 2017-05-02 14:17:11Z devdevilnl $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 * @since Group-Office 1.0
 */


GO.email.MessagePanel = Ext.extend(Ext.Panel, {

	uid : 0,

	mailbox:  "",

	account_id: 0,

	initComponent : function(){

		GO.email.MessagePanel.superclass.initComponent.call(this);

		this.attachmentContextMenu = new GO.email.AttachmentContextMenu();
		this.allAttachmentContextMenu = new GO.email.AllAttachmentContextMenu();
		
		this.addEvents({
			attachmentClicked : true,
			linkClicked : true,
			emailClicked : true,
			load : true,
			reset : true
		});

		this.bodyId = Ext.id();
		this.attachmentsId = Ext.id();

		this.contactImageId = Ext.id();

		this.linkMessageId = Ext.id();
		this.downloadAllMenuId = Ext.id();


		var templateStr =
		'<div class="message-header">'+
			'<table class="message-header-table">'+
			'<tr>'+

			'<td rowspan="99"><img id="'+this.contactImageId+'" src="{contact_thumb_url}" style="height:60px;border:1px solid #d0d0d0;margin-right:10px;cursor:pointer" /></td>'+


			'<td style="width:70px"><b>'+GO.email.lang.from+'</b></td>'+

			'<td>: {from} &lt;<a class="normal-link" href="#" onclick="GO.email.showAddressMenu(event, \'{sender}\', \'{[this.addSlashes(values.from)]}\');">{sender}</a>&gt;</td>'+
//			'<td rowspan="99"><span id="'+this.linkMessageId+'" class="em-contact-link"></span></td>'+

			'</tr>'+
			'<tr><td><b>'+GO.email.lang.subject+'</b></td><td>: {subject}</td></tr>'+
			'<tr><td><b>'+GO.lang.strDate+'</b></td><td>: {date}</td></tr>'+
			//'<tr><td><b>'+GO.lang.strSize+'</b></td><td>: {size}</td></tr>'+
			'<tr><td><b>'+GO.email.lang.to+'</b></td><td>: '+
			'<tpl for="to">'+
			'{personal} <tpl if="email.length">&lt;<a class="normal-link" href="#" onclick="GO.email.showAddressMenu(event, \'{email}\', \'{[this.addSlashes(values.personal)]}\');">{email}</a>&gt;; </tpl>'+
			'</tpl>'+
			'</td></tr>'+
			'<tpl if="cc.length">'+
			'<tr><td><b>'+GO.email.lang.cc+'</b></td><td>: '+
			'<tpl for="cc">'+
			'{personal} <tpl if="email.length">&lt;<a class="normal-link" href="#" onclick="GO.email.showAddressMenu(event, \'{email}\', \'{[this.addSlashes(values.personal)]}\');">{email}</a>&gt;; </tpl>'+
			'</tpl>'+
			'</td></tr>'+
			'</tpl>'+
			'<tpl if="bcc.length">'+
			'<tr><td><b>'+GO.email.lang.bcc+'</b></td><td>: '+
			'<tpl for="bcc">'+
			'{personal} <tpl if="email.length">&lt;<a class="normal-link" href="#" onclick="GO.email.showAddressMenu(event, \'{email}\', \'{[this.addSlashes(values.name)]}\');">{email}</a>&gt;; </tpl>'+
			'</tpl>'+
			'</td></tr>'+
			'</tpl>'+
			'</table>'+
			'<div class="em-contact-link-container"><span id="'+this.linkMessageId+'" class="em-contact-link"></span></div>'+
			'<tpl if="attachments.length">'+
			'<div style="clear:both;"></div>'+
			'<table>'+
			'<tr><td><b>'+GO.email.lang.attachments+':</b></td></tr><tr><td id="'+this.attachmentsId+'">'+
			'<tpl for="attachments">'+
				'<tpl if="extension==\'vcf\'">';
				if (GO.addressbook)
					templateStr += '<a class="filetype-link filetype-{extension}" id="'+this.attachmentsId+'_{[xindex-1]}" href="javascript:GO.email.readVCard(\'{url}&importVCard=1\');">{name:htmlEncode} ({human_size})</a> ';
				else
					templateStr += '<a class="filetype-link filetype-{extension}" id="'+this.attachmentsId+'_{[xindex-1]}" href="#">{name:htmlEncode} ({human_size})</a> ';
				templateStr += '</tpl>'+
				'<tpl if="extension!=\'vcf\'">'+
				'<a class="filetype-link filetype-{extension}" id="'+this.attachmentsId+'_{[xindex-1]}" href="#">{name:htmlEncode} ({human_size})</a> '+
				'</tpl>'+
			'</tpl>'+
//			ORIGINAL
//			'<tpl if="attachments.length&gt;1 && zip_of_attachments_url!=\'\'">'+
//			'<a class="filetype-link filetype-zip" href="{zip_of_attachments_url}" target="_blank">'+GO.email.lang.downloadAllAsZip+'</a>'+
//			'</tpl>'+
			
			'<tpl if="attachments.length&gt;1">'+
//				'<a class="filetype-link btn-menu" id="downloadAllMenu" href="#"></a>'+
				'<a class="filetype-link btn-more-vert" id="downloadAllMenu-'+this.downloadAllMenuId +'" href="#"></a>'+
//				'<a class="filetype-link btn-expand-more" id="downloadAllMenu" href="#"></a>'+
			'</tpl>'+
			
			'</td></tr>'+
			'</table>'+
			'</tpl>'+
			'<div style="clear:both;"></div>'+
			'<tpl if="blocked_images&gt;0">'+
			'<div class="go-warning-msg em-blocked">'+GO.email.lang.blocked+' <a id="em-unblock-'+this.bodyId+'" href="#" class="normal-link">'+GO.email.lang.unblock+'</a></div>'+
			'</tpl>'+
			'<tpl if="xssDetected">'+
			'<div class="go-warning-msg em-blocked"><a id="em-filterxss-'+this.bodyId+'" href="#" class="normal-link">'+GO.email.lang.xssDetected+'</a></div>'+
			'</tpl>'+

			'<tpl if="labels.length">' +
				'<div class="em-message-labels-container">' +
				'<tpl for="labels">'+
					'<span style="background-color: #{color}">{name}</span>' +
				'</tpl>'+
				'</div>' +
				'<div style="clear: both"></div>' +
			'</tpl>' +
		'</div>';

		if(GO.calendar){

			templateStr += '<tpl if="!GO.util.empty(values.iCalendar)">'+
				'<tpl if="iCalendar.feedback">'+
				'<div class="message-icalendar">'+



				'<tpl if="iCalendar.invitation">'+

					'<tpl if="!GO.util.empty(iCalendar.invitation.is_processed)">'+
						'<a id="em-icalendar-open-'+this.bodyId+'" class="go-model-icon-GO_Calendar_Model_Event normal-link" style="padding-left:20px;background-repeat:no-repeat;" href="#" class="go-model-icon-GO\\Calendar\\Model\\Event message-icalendar-icon">'+GO.email.lang.appointementAlreadyProcessed+'</a>'+
					'</tpl>'+
					'<tpl if="iCalendar.invitation.is_invitation">'+

								'<a id="em-icalendar-accept-invitation-'+this.bodyId+'" class="go-model-icon-GO_Calendar_Model_Event normal-link" style="padding-left:20px;background-repeat:no-repeat;" href="#" class="go-model-icon-GO\\Calendar\\Model\\Event message-icalendar-icon">'+GO.calendar.lang.clickForAttendance+'</a>'+

					'</tpl>'+

					'<tpl if="iCalendar.invitation.is_cancellation">'+
						'<div class="go-model-icon-GO_Calendar_Model_Event message-icalendar-icon ">'+
						'{[values.iCalendar.feedback]}</div>'+
						'<div class="message-icalendar-actions">'+
							'<a class="normal-link" id="em-icalendar-delete-event-'+this.bodyId+'" href="#">'+GO.email.lang.icalendarDeleteEvent+'</a>'+
							'</div>'+
					'</tpl>'+

					'<tpl if="iCalendar.invitation.is_update">'+
						'<div class="go-model-icon-GO_Calendar_Model_Event message-icalendar-icon ">'+
						'{[values.iCalendar.feedback]}</div>'+
						'<div class="message-icalendar-actions">'+
						'<a id="em-icalendar-open-'+this.bodyId+'" class="normal-link" style="padding-right:20px;" href="#">'+GO.email.lang.icalendarOpenEvent+'</a>'+
							'<a class="normal-link" id="em-icalendar-update-event-'+this.bodyId+'" href="#">'+GO.email.lang.icalendarUpdateEvent+'</a>'+
							'</div>'+
					'</tpl>'+

				'</tpl>'+
				'<div style="clear:both"></div>'+
				'</div>'+
				'</tpl>'+
				'</tpl>';
		}

		templateStr += '<tpl if="values.isInSpamFolder==\'1\';">'+
				'<div class="message-move">'+
					GO.email.lang['thisIsSpam1']+' <a id="em-move-mail-link-'+this.bodyId+'" class="go-model-icon-GO\\Email\\Model\\Message normal-link" style="background-repeat:no-repeat;" href="javascript:GO.email.moveToInbox(\'{values.uid}\',\'{values.account_id}\');" >'+GO.email.lang['thisIsSpam2']+'</a> '+GO.email.lang['thisIsSpam3']+
				'</div>'+
			'</tpl>'+
			'<tpl if="values.isInSpamFolder==\'0\';">'+
				'<div class="message-move">'+
					GO.email.lang['thisIsNotSpam1']+' <a id="em-move-mail-link-'+this.bodyId+'" class="go-model-icon-GO\\Email\\Model\\Message normal-link" style="background-repeat:no-repeat;" href="javascript:GO.email.moveToSpam(\'{values.uid}\',\'{values.mailbox}\',\'{values.account_id}\');" >'+GO.email.lang['thisIsNotSpam2']+'</a> '+GO.email.lang['thisIsNotSpam3']+
				'</div>'+
			'</tpl>';

		templateStr += '<div id="'+this.bodyId+'" class="message-body go-html-formatted">{htmlbody}'+
			'<tpl if="body_truncated">'+
			'<br /><a href="javascript:GO.email.showMessageDialog({uid},\'{[this.addSlashes(values.mailbox)]}\',{account_id},true);" class="normal-link">'+GO.email.lang.clickSeeWholeMessage+'</a>'+
			'</tpl>'+
			'</div>';

		this.template = new Ext.XTemplate(templateStr,{

			addSlashes : function(str)
			{
				str = GO.util.html_entity_decode(str, 'ENT_QUOTES');
				str = GO.util.add_slashes(str);
				return str;
			}

		});
		this.template.compile();
	},

	lookupContact : function(){
		if(this.data.sender_contact_id){
			GO.linkHandlers["GO\\Addressbook\\Model\\Contact"].call(this, this.data.sender_contact_id);
		}else{
			GO.addressbook.searchSender(this.data.sender, this.data.from);
		}
	},

	data: null,


	popup : function(){

		if(this.loading){
			this.on('load', function(){this.popup()}, this, {single:true});
		}else{

				this.messageDialog = new GO.email.MessageDialog({
					 closeAction:"close"
				});
				this.messageDialog.messagePanel.on('attachmentClicked', GO.email.openAttachment, this);

			this.messageDialog.showData(this.data);
			this.messageDialog.messagePanel.uid=this.uid;
			this.messageDialog.messagePanel.account_id=this.account_id;
			this.messageDialog.messagePanel.mailbox=this.mailbox;
			this.messageDialog.messagePanel.params=this.params;
		}

	},

	loadMessage : function(uid, mailbox, account_id, password, no_max_body_size)
	{
		if(uid)
		{
			this.uid=uid;
			this.account_id=account_id;
			this.mailbox=mailbox;

			this.params = {
				uid: uid,
				mailbox: mailbox,
				account_id: account_id
			};
			if(password)
			{
				this.params.password=password;
			}
		}

		this.params['no_max_body_size'] = GO.util.empty(no_max_body_size) ? false : true;


		this.loading=true;
		this.el.mask(GO.lang.waitMsgLoad);
		GO.request({
			url: "email/message/view",
			params: this.params,
			scope: this,
			success: function(options, response, data)
			{
				this.setData(data);
				this.loading=false;
				this.fireEvent('load', options, true, response, data, password);
			},
			fail: function(response, options, result) {
				Ext.Msg.alert(GO.lang.strError, result.feedback);
				this.loading=false;
			}
		});
	},

	setData : function (data){
		this.data=data;



//				if(this.updated)
//				{
//					data.iCalendar.feedback = GO.email.lang.icalendarEventUpdated;
//					this.updated = false;
//				}else
//				if(this.created)
//				{
//					data.iCalendar.feedback = GO.email.lang.icalendarEventCreated;
//					this.created = false;
//				}else
//				if(this.deleted)
//				{
//					data.iCalendar.feedback = GO.email.lang.icalendarEventDeleted;
//					this.deleted = false;
//				}else
//				if(this.declined)
//				{
//					data.iCalendar.feedback = GO.email.lang.icalendarInvitationDeclined;
//					this.declined = false;
//				}

		if(data.iCalendar && this.icalendarFeedback){
			data.iCalendar.feedback = this.icalendarFeedback;
			delete this.icalendarFeedback;
		}

		data.mailbox=this.mailbox;

		if(data.askPassword)
		{
			if(!this.passwordDialog)
			{
				this.passwordDialog = new GO.dialog.PasswordDialog({
					title:GO.smime ? GO.smime.lang.enterPassword : GO.gnupg.lang.enterPassword,
					fn:function(button, password, passwordDialog){
						if(button=='cancel')
						{
							this.reset();
							this.el.unmask();
						}else
						{
							this.loadMessage(passwordDialog.data.uid, passwordDialog.data.mailbox, passwordDialog.data.account_id, password);
						}
					},
					scope:this
				});
			}
			this.passwordDialog.data={
				uid:this.uid,
				mailbox:this.mailbox,
				account_id:this.account_id
			};
			this.passwordDialog.show();
		}else
		{
			this.setMessage(data);
			this.el.unmask();
		}

		if(data.feedback)
		{
			GO.errorDialog.show(data.feedback);
		}
	},

	reset : function(){
		this.data=false;
		this.uid=0;

		if(this.contactImageEl)
		{
			this.contactImageEl.removeAllListeners();
		}

		if(this.messageBodyEl)
		{
			this.messageBodyEl.removeAllListeners();
		}
		if(this.attachmentsEl)
		{
			this.attachmentsEl.removeAllListeners();
		}

		if(this.unblockEl)
		{
			this.unblockEl.removeAllListeners();
		}

		this.body.update('');

		this.fireEvent('reset', this);
	},

	setMessage : function(data)
	{
		this.data = data;

		//remove old listeners
		if(this.messageBodyEl)
		{
			this.messageBodyEl.removeAllListeners();
		}
		if(this.attachmentsEl)
		{
			this.attachmentsEl.removeAllListeners();
		}

		if(this.unblockEl)
		{
			this.unblockEl.removeAllListeners();
		}

		if(this.contactImageEl)
		{
			this.contactImageEl.removeAllListeners();
		}

		this.template.overwrite(this.body, data);


		this.unblockEl = Ext.get('em-unblock-'+this.bodyId);
		if(this.unblockEl)
		{
			this.unblockEl.on('click', function(){
				this.params.unblock='true';
				this.loadMessage();
			}, this);
		}

		this.filterXssEl = Ext.get('em-filterxss-'+this.bodyId);
		if(this.filterXssEl)
		{
			this.filterXssEl.on('click', function(){
				this.params.filterXSS='true';
				this.params.unblock='true';
				this.loadMessage();
			}, this);
		}

		var acceptInvitationEl = Ext.get('em-icalendar-accept-invitation-'+this.bodyId);
		if(acceptInvitationEl)
		{
			acceptInvitationEl.on('click', function()
			{
				this.processInvitation();
			}, this);
		}
//		var declineInvitationEl = Ext.get('em-icalendar-decline-invitation');
//		if(declineInvitationEl)
//		{
//			declineInvitationEl.on('click', function()
//			{
//				this.processInvitation("DECLINED");
//			}, this);
//		}
//		var tentativeInvitationEl = Ext.get('em-icalendar-tentative-invitation');
//		if(tentativeInvitationEl)
//		{
//			tentativeInvitationEl.on('click', function()
//			{
//				this.processInvitation("TENTATIVE");
//			}, this);
//		}
		var icalDeleteEventEl = Ext.get('em-icalendar-delete-event-'+this.bodyId);
		if(icalDeleteEventEl)
		{
			icalDeleteEventEl.on('click', function()
			{
				this.processInvitation();
			}, this);
		}
		var icalUpdateEventEl = Ext.get('em-icalendar-update-event-'+this.bodyId);
		if(icalUpdateEventEl)
		{
			icalUpdateEventEl.on('click', function()
			{
				//this.processResponse();
				this.processInvitation();
			}, this);
		}

		var icalUpdateOpenEl = Ext.get('em-icalendar-open-'+this.bodyId);
		if(icalUpdateOpenEl)
		{
			icalUpdateOpenEl.on('click', function()
			{
				if(this.data.iCalendar.invitation.is_organizer){
					GO.calendar.showEventDialog({event_id:this.data.iCalendar.invitation.event_id})
				}else
				{
					GO.email.showAttendanceWindow(this.data.iCalendar.invitation.event_id);
				}
			}, this);
		}

		this.messageBodyEl = Ext.get(this.bodyId);
		this.messageBodyEl.on('click', this.onMessageBodyClick, this);
		this.messageBodyEl.on('contextmenu', this.onMessageBodyContextMenu, this);

		if(data.attachments.length)
		{
			this.attachmentsEl = Ext.get(this.attachmentsId);
			this.attachmentsEl.on('click', this.openAttachment, this);
			if(this.attachmentContextMenu)
			{
				this.attachmentContextMenu.messagePanel = this;
				this.attachmentsEl.on('contextmenu', this.onAttachmentContextMenu, this);
			}
		}
		
		if(data.attachments.length > 1 && this.allAttachmentContextMenu)	{
			this.allAttachmentsMenuEl = Ext.get('downloadAllMenu-'+this.downloadAllMenuId);
			
			this.allAttachmentsMenuEl.on('click', this.onAllAttachmentContextMenu, this);
			this.allAttachmentContextMenu.messagePanel = this;
			this.allAttachmentsMenuEl.on('contextmenu', this.onAllAttachmentContextMenu, this);
		}

		this.contactImageEl = Ext.get(this.contactImageId);
		this.contactImageEl.on('click', this.lookupContact, this);

		this.body.scrollTo('top',0);

		if(GO.savemailas && this.data.sender_contact_id){
			this.linkMessageCB = new Ext.form.Checkbox({
				name:'link',
				boxLabel:GO.savemailas.lang.linkToContact.replace('%s', this.data.contact_name),
				hideLabel:true,
				renderTo:this.linkMessageId,
				checked:this.data.contact_linked_message_id>0,
				listeners:{
					scope:this,
					check:function(cb, checked){
						if(checked){
							GO.request({
								url:'savemailas/linkedEmail/linkContact',
								params:{
									account_id:this.account_id,
									mailbox:this.mailbox,
									uid:this.uid,
									contact_id:this.data.sender_contact_id
								},
								maskEl:Ext.getBody(),
								success: function(options, response, result) {
									if (result.success) {
										this.data.contact_linked_message_id = result.linked_email_id;
									}
									this.getEl().unmask();
								},
								scope:this
							});
						}else{
							GO.request({
								url:'core/unlink',
								params:{
									model_name1:'GO\\Addressbook\\Model\\Contact',
									id1:this.data.sender_contact_id,
									model_name2:'GO\\Savemailas\\Model\\LinkedEmail',
									id2:this.data.contact_linked_message_id
								},
								maskEl:Ext.getBody(),
								success: function(options, response, result) {
									if (result.success) {
										this.data.company_linked_message_id = result.linked_email_id;
									}
									this.getEl().unmask();
								},
								scope:this
							});
						}
					}
				}
			});
		}

		if(GO.savemailas && this.data.sender_company_id){
			this.linkCompanyMessageCB = new Ext.form.Checkbox({
				name:'link',
				boxLabel:GO.savemailas.lang.linkToCompany.replace('%s', this.data.company_name),
				hideLabel:true,
				renderTo:this.linkMessageId,
				checked:this.data.company_linked_message_id>0,
				listeners:{
					scope:this,
					check:function(cb, checked){
						if(checked){
							GO.request({
								url:'savemailas/linkedEmail/linkCompany',
								params:{
									account_id:this.account_id,
									mailbox:this.mailbox,
									uid:this.uid,
									company_id:this.data.sender_company_id
								},
								maskEl:Ext.getBody()
							});
						}else{
							GO.request({
								url:'core/unlink',
								params:{
									model_name1:'GO\\Addressbook\\Model\\Company',
									id1:this.data.sender_company_id,
									model_name2:'GO\\Savemailas\\Model\\LinkedEmail',
									id2:this.data.company_linked_message_id
								},
								maskEl:Ext.getBody()
							});
						}
					}
				}
			});
		}

	},

	onAttachmentContextMenu : function (e, target){


		if(target.id.substr(0,this.attachmentsId.length)==this.attachmentsId)
		{
			var attachment_no = target.id.substr(this.attachmentsId.length+1);

			e.preventDefault();
			var attachment = this.data.attachments[attachment_no];
			this.attachmentContextMenu.showAt(e.getXY(), attachment);
		}

	},
	
	onAllAttachmentContextMenu : function (e, target){
		e.preventDefault();
		this.allAttachmentContextMenu.showAt(e.getXY());
	},

	openAttachment :  function(e, target)
	{
		if(target.id.substr(0,this.attachmentsId.length)==this.attachmentsId)
		{
			var attachment_no = target.id.substr(this.attachmentsId.length+1);

			var attachment = this.data.attachments[attachment_no];
			this.fireEvent('attachmentClicked', attachment, this);
		}
	},

	launchAddressContextMenu : function(e, href){
		var queryString = '';
		var email = '';
		var indexOf = href.indexOf('?');
		if(indexOf>-1)
		{
			email = href.substr(7, indexOf-7);
			queryString = href.substr(indexOf+1);
		}else
		{
			email = href.substr(7);
		}

		e.preventDefault();

		GO.email.addressContextMenu.showAt(e.getXY(), email, '', queryString);
	},

	onMessageBodyContextMenu :  function(e, target){

		if(target.tagName!='A')
		{
			target = Ext.get(target).findParent('A', 10);
			if(!target)
				return false;
		}

		if(target.tagName=='A')
		{
			var href=target.attributes['href'].value;

			if(href.substr(0,6)=='mailto')
			{
				this.launchAddressContextMenu(e, href);
			}
		}
	},

	onMessageBodyClick :  function(e, target){
		if(target.tagName!='A')
		{
			target = Ext.get(target).findParent('A', 10);
			if(!target)
				return false;
		}

		if(target.tagName=='A')
		{

			var href=target.attributes['href'].value;

			if(href.substr(0,6)=='mailto')
			{
				this.launchAddressContextMenu(e, href);
			}else if(href.substr(0,3)=='go:')
			{
				e.preventDefault();

				var cmd = 'GO.mailFunctions.'+href.substr(3);
				eval(cmd);
			}else
			{
//				if (target.href && target.href.indexOf('#') != -1 && target.pathname == document.location.pathname){
//				//internal link, do default
//
//				}else
//				{
//					e.preventDefault();
//					this.fireEvent('linkClicked', href);
//				}
			}
		}
	},

	cal_id:0,
	status_id:0,
	created:false,
	updated:false,
	deleted:false,
	declined:false,
	processInvitation : function()
	{
//		this.status_id = status_id || 0;

		GO.request({
			url: 'calendar/event/acceptInvitation',
			params: {
//				status: this.status_id,
				account_id: this.account_id,
				mailbox: this.mailbox,
				uid: this.uid
			},
			scope: this,
			success: function(options, response, data)
			{
				this.icalendarFeedback = data.feedback;

				if(data.attendance_event_id){
					GO.email.showAttendanceWindow(data.attendance_event_id);
				}

				this.loadMessage();
			}
		});
	}
});


GO.email.readVCard = function(url) {
	if (GO.addressbook)
		Ext.Ajax.request({
			url: url,
			callback: function(options, success, response)
			{
				var responseData = Ext.decode(response.responseText);
				if(!success || !responseData.success)
				{
					Ext.MessageBox.alert(GO.lang['strError'], responseData['feedback']);
				} else {
					if (!GO.util.empty(responseData.contacts[0])) {
						GO.addressbook.showContactDialog(0,{contactData : responseData.contacts[0]});
					}
				}
			},
			scope: this
		});
}


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AccountsDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.email.AccountsDialog = function(config){
	
	
	if(!config)
	{
		config={};
	}
	
	this.accountsGrid = new GO.email.AccountsGrid({
		region:'center'
	});
	
	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=true;
	
	config.width=600;
	config.height=400;
	config.closeAction='hide';
	config.title=GO.email.lang.accounts;	


	
	config.buttons=[{
		text: GO.lang.cmdClose,
		handler: function(){this.hide();},
		scope: this
	}];

	config.items=this.accountsGrid;

	

	config.listeners={
		render:function(){
			this.accountsGrid.store.load();
		},
		scope:this
	}

	GO.email.AccountsDialog.superclass.constructor.call(this, config);	

}
Ext.extend(GO.email.AccountsDialog, Ext.Window,{
	
	

});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AccountsGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.email.AccountsGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
	
	config.layout='fit';
	config.border=false;
	config.autoScroll=true;
	config.store = new GO.data.JsonStore({
		url: GO.url("email/account/store"),
		fields:['id','email','host', 'user_name', 'username','smtp_host'],
		remoteSort: true,
		baseParams:{permissionLevel:GO.permissionLevels.write},
		sortInfo:{field: 'email', direction: "ASC"}
	});	
	config.paging=true;
	
	var columnModel = new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
		{
			header:GO.lang.strEmail,
			dataIndex: 'email'
		},{
			header:GO.lang.strUsername,
			dataIndex: 'username'
		},{
			header:GO.lang.strOwner,
			dataIndex: 'user_name',
			sortable: false
		},{
			header:GO.email.lang.host,
			dataIndex: 'host'
		},{
			header:'SMTP',
			dataIndex: 'smtp_host'
		}]
	});
	
	config.cm=columnModel;
	
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']		
	});

	this.searchField = new GO.form.SearchField({
		store: config.store,
		width:320
	});
	config.tbar = [{
		iconCls: 'btn-add',
		text: GO.lang.cmdAdd,
		cls: 'x-btn-text-icon',
		handler: function(){
			
			this.showAccountDialog();
		},
		scope: this,
		disabled: !GO.settings.modules.email.write_permission
	},{
		iconCls: 'btn-delete',
		text: GO.lang.cmdDelete,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.deleteSelected({
				callback: function(){
					if(GO.email.aliasesStore.loaded)
					{
						GO.email.aliasesStore.reload();
					}
					this.fireEvent('delete', this);
				},
				scope: this
			});
		},
		scope:this,
		disabled: !GO.settings.modules.email.write_permission
	},'-',GO.lang['strSearch'] + ':', this.searchField];
	
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	this.accountDialog = new GO.email.AccountDialog();
	this.accountDialog.on('save', function(){
	this.store.reload();
		if(GO.email.aliasesStore.loaded)
		{
			GO.email.aliasesStore.reload();
		}
	}, this);
	
	GO.email.AccountsGrid.superclass.constructor.call(this, config);	

	this.addEvents({'delete':true});

	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);
	
		this.showAccountDialog(record.data.id);

	}, this);

};

Ext.extend(GO.email.AccountsGrid, GO.grid.GridPanel,{
	showAccountDialog : function(account_id){

		
		this.accountDialog.show(account_id);
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: MessagesGrid.js 20289 2016-07-25 13:35:05Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.email.MessagesGrid = function(config){

	if(!config)
	{
		config = {};
	}

	config.layout='fit';
	config.autoScroll=true;
	config.paging=true;

	config.hideMode='offsets';

	if(config.region=='north')
	{
		this.searchtypeWidth = 150;
		this.searchfieldWidth = 320;
		config.cm = new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
			},
			columns:[
			{
				header:"&nbsp;",
				width:50,
				dataIndex: 'icon',
				renderer: this.renderIcon,
				hideable:false,
				sortable:false
			},{
				id: 'labels',
				header: GO.email.lang.labels,
				width:50,
				xtype: 'templatecolumn',
				tpl: new Ext.XTemplate('<div class="em-messages-grid-labels-container"><tpl for="labels"><div ext:qtip="{name}" style="background-color: #{color}">&nbsp;</div></tpl></div>'),
				hideable:true,
				sortable:false
			},{
				header: GO.email.lang.from,
				dataIndex: 'from',
				renderer:this.renderNorthMessageRow,
				id:'from',
				width:200
			},{
				header: GO.email.lang.to,
				dataIndex: 'to',
				renderer:this.renderNorthMessageRow,
				id:'to',
				width:200,
				hidden: true
			},{
				header: GO.email.lang.subject,
				dataIndex: 'subject',
				renderer:this.renderNorthMessageRow,
				width:200
			},{
				header: GO.lang.strDate,
				dataIndex: 'arrival',
				width:120,
				renderer:this.renderNorthArrival,
				align:'right',
				hidden:true
			},{
				header: GO.email.lang.dateSent,
				dataIndex: 'date',
				width:120,
				renderer:this.renderNorthDate,
				align:'right'
			},{
				header: GO.lang.strSize,
				dataIndex: 'size',
				width:65,
				align:'right',
				hidden:true,
				renderer:Ext.util.Format.fileSize
			}]
		});
//		config.view=new Ext.grid.GridView({
//			emptyText: GO.lang['strNoItems'],
//			getRowClass:function(row, index) {
//				if (row.data.seen == '0') {
//					return 'ml-unseen-row';
//				} else {
//					return 'ml-seen-row';
//				}
//			}
//		});

	}else
	{
		this.searchtypeWidth = 120;
		this.searchfieldWidth = 150;
		config.cm =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
		{
			id:'icon',
			header:"&nbsp;",
			width:46,
			dataIndex: 'icon',
			renderer: this.renderIcon,
			hideable:false,
			sortable:false
		},{
			id: 'labels',
			header: GO.email.lang.labels,
			width:50,
			xtype: 'templatecolumn',
			tpl: new Ext.XTemplate('<div class="em-messages-grid-labels-container"><tpl for="labels"><div ext:qtip="{name}" style="background-color: #{color}">&nbsp;</div></tpl></div>'),
			hideable:true,
			sortable:false
		},{
			header: GO.email.lang.message,
			dataIndex: 'from',
			renderer: this.renderMessage,
			css: 'white-space:normal;',
			id:'message'

		},{
			id:'arrival',
			header: GO.lang.strDate,
			dataIndex:'arrival',
			renderer: this.renderArrival,
			width:80,
			align:'right',
			hidden:true
		},{
			id:'date',
			header: GO.email.lang.dateSent,
			dataIndex:'date',
			renderer: this.renderDate,
			width:80,
			align:'right'
		},{
			id:'size',
			header: GO.lang.strSize,
			dataIndex: 'size',
			width:65,
			align:'right',
			hidden:true,
			renderer:Ext.util.Format.fileSize
		}]
		});
		config.bbar = new Ext.PagingToolbar({
			cls: 'go-paging-tb',
			store: config.store,
			pageSize: parseInt(GO.settings['max_rows_list']),
			displayInfo: true,
			displayMsg: GO.lang.displayingItemsShort,
			emptyMsg: GO.lang['strNoItems']
		});
		
		config.autoExpandColumn='message';

//		config.view=new Ext.grid.GridView({
//			emptyText: GO.lang['strNoItems']
//		});
	}

	config.view=new Ext.grid.GridView({
			holdPosition: true,
			emptyText: GO.lang['strNoItems'],
			getRowClass:function(row, index) {
				if (row.data.seen == '0') {
					return 'ml-unseen-row';
				} else {
					return 'ml-seen-row';
				}
			},
			onLoad : function(){
					if (!this.holdPosition) { 
						this.scrollToTop();
					}
					this.holdPosition = false;
			}
			
		});

	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	config.border=false;
	config.split= true;
	config.header=false;
	config.enableDragDrop= true;
	config.ddGroup = 'EmailDD';
	config.animCollapse=false;

	this.searchType = new GO.form.ComboBox({
		width:this.searchtypeWidth,
		store: new Ext.data.SimpleStore({
			fields: ['value', 'text'],
			data : [
			['any', GO.email.lang.anyField],
			['fts', GO.email.lang.fts],
			['from', GO.email.lang.searchFrom],
			['subject', GO.email.lang.subject],
			['to', GO.email.lang.searchTo],
			['cc', GO.email.lang.searchCC]
			]
		}),
		value:GO.email.search_type_default,
		valueField:'value',
		displayField:'text',
		mode:'local',
		triggerAction:'all',
		editable:false,
		selectOnFocus:true,
		forceSelection:true
	});

	this.searchField = new GO.form.SearchField({
		store: config.store,
		paramName:'search',
		emptyText:GO.lang['strSearch'],
		width:this.searchfieldWidth
	});

	this.showUnreadButton = new Ext.Button({
		iconCls: 'btn-email',
		enableToggle:true,
		toggleHandler:this.toggleUnread,
		pressed:false,
		style:'margin-left:10px',
		tooltip: GO.email.lang.showUnread +' / '+GO.email.lang.showAll
	});
	this.showFlaggedButton = new Ext.Button({
		iconCls: 'btn-flag',
		enableToggle:true,
		toggleHandler:this.toggleFlagged,
		pressed:false,
		style:'margin-left:10px',
		tooltip: GO.email.lang.showFlagged +' / '+GO.email.lang.showAll
	});

	if(!config.hideSearch)
	{
		config.tbar = [this.searchType, this.searchField, this.showUnreadButton, this.showFlaggedButton];
	}

	GO.email.MessagesGrid.superclass.constructor.call(this, config);

	var origRefreshHandler = this.getBottomToolbar().refresh.handler;

	this.getBottomToolbar().refresh.handler=function(){
		this.store.baseParams.refresh=true;
		origRefreshHandler.call(this);
		delete this.store.baseParams.refresh;
	};

	//stop/start drag and drop when store loads when account is readOnly
	this.store.on('load', function(store, records, options) {
		if(this.getView().dragZone){
			if(store.reader.jsonData.permission_level <= GO.permissionLevels.read)
			this.getView().dragZone.lock();
			else
			this.getView().dragZone.unlock();
		}
	}, this);

	this.searchType.on('select', function(combo, record)
	{
		GO.email.search_type = record.data.value;
		
		if(localStorage){
			localStorage.email_search_type = GO.email.search_type;
		}

		if(this.searchField.getValue())
		{
			GO.email.messagesGrid.store.baseParams['search'] = this.searchField.getValue();
			this.searchField.hasSearch = true;

			GO.email.messagesGrid.store.reload();
		}

	}, this);

};

Ext.extend(GO.email.MessagesGrid, GO.grid.GridPanel,{
	
	show : function()
	{
		if(GO.email.messagesGrid.store.baseParams['unread'] === 1 || GO.email.messagesGrid.store.baseParams['unread'] === true){
			this.showUnreadButton.pressed=true;
		} else {
			this.showUnreadButton.pressed=false;
		}

		if(!GO.email.search_type)
		{
			GO.email.search_type = GO.email.search_type_default;
		}
		this.setSearchFields(GO.email.search_type, GO.email.search_query);

		GO.email.MessagesGrid.superclass.show.call(this);
	},
	resetSearch : function()
	{
		GO.email.search_type = GO.email.search_type_default;
		GO.email.search_query = '';

		this.setSearchFields(GO.email.search_type, GO.email.search_query);
	},
	setSearchFields : function(type, query)
	{
		this.searchType.setValue(type);
		this.searchField.setValue(query);

		this.searchField.hasSearch = (query) ? true : false;
	},
	toggleUnread : function(item, pressed)
	{
		GO.email.messagesGrid.store.baseParams['unread']=pressed ? 1 : 0;

		GO.email.messagesGrid.store.load();
	},
	toggleFlagged : function(item, pressed)
	{
		GO.email.messagesGrid.store.baseParams['flagged']=pressed ? 1 : 0;
		
		GO.email.messagesGrid.store.load();
	},

	renderNorthMessageRow : function(value, p, record){
		if(record.data['seen']=='0')
			return String.format('<div id="sbj_'+record.data['uid']+'" class="ml-unseen-mail">{0}</div>', value);
		else
			return String.format('<div id="sbj_'+record.data['uid']+'" class="ml-seen-mail">{0}</div>', value);
	},

	renderMessageSmallRes : function(value, p, record){

		if(record.data['seen']=='0')
		{
			return String.format('<div id="sbj_'+record.data['uid']+'" class="ml-unseen-from">{0}</div><div class="ml-unseen-subject">{1}</div>', value, record.data['subject']);
		}else
		{
			return String.format('<div id="sbj_'+record.data['uid']+'" class="ml-seen-from">{0}</div><div class="ml-seen-subject">{1}</div>', value, record.data['subject']);
		}
	},

	renderMessage : function(value, p, record){
		
		var deletedCls = record.data.deleted ? 'ml-deleted' : '';
		
		if(record.data['seen']=='0')
		{
			return String.format('<div id="sbj_'+record.data['uid']+'" class="ml-unseen-from '+deletedCls+'">{0}</div><div class="ml-unseen-subject '+deletedCls+'">{1}</div>', value, record.data['subject']);
		}else
		{
			return String.format('<div id="sbj_'+record.data['uid']+'" class="ml-seen-from '+deletedCls+'">{0}</div><div class="ml-seen-subject '+deletedCls+'">{1}</div>', value, record.data['subject']);
		}
	},

	renderNorthDate : function(value, p, record){
		return value+' '+record.data.date_time;
	},

	renderNorthArrival : function(value, p, record){
		return value+' '+record.data.arrival_time;
	},

	renderArrival : function(value, p, record){
		if(record.data['seen']=='0')
		{
			return String.format('<div id="arr_'+record.data['uid']+'" class="ml-unseen-from">{0}</div><div class="ml-unseen-subject">{1}</div>', value, record.data['arrival_time']);
		}else
		{
			return String.format('<div id="arr_'+record.data['uid']+'" class="ml-seen-from">{0}</div><div class="ml-seen-subject">{1}</div>', value, record.data['arrival_time']);
		}
	},

	renderDate : function(value, p, record){
		if(record.data['seen']=='0')
		{
			return String.format('<div id="date_'+record.data['uid']+'"  class="ml-unseen-from">{0}</div><div class="ml-unseen-subject">{1}</div>', value, record.data['date_time']);
		}else
		{
			return String.format('<div id="date_'+record.data['uid']+'" class="ml-seen-from">{0}</div><div class="ml-seen-subject">{1}</div>', value, record.data['date_time']);
		}
	},

	renderIcon : function(src, p, record){
		var str = '';

		var cls = "email-grid-icon ";

		if(record.data.answered=='1' && record.data.forwarded=='1')
		{
			cls += "btn-message-answered-and-forwarded";
		}else if(record.data.answered=='1'){
			cls += "btn-message-answered";
		}else if(record.data.forwarded=='1'){
			cls += "btn-message-forwarded";
		}else
		{
			if(record.data.seen=='1')
				cls += "btn-message-seen";
			else
				cls += "btn-message";
		}
		str += '<div class="'+cls+'"></div>';

		if(record.data['has_attachments']=='1')
		{
			str += '<div class="email-grid-icon ml-icon-attach"></div>';
		//str += '<img src=\"' + GOimages['attach'] +' \" style="display:block" />';
		}else
		{
		//str += '<br />';
		}

		if(record.data['x_priority'])
		{
			if(record.data['x_priority'] < 3)
			{
				str += '<div class="email-grid-icon btn-high-priority"></div>';
			}

			if(record.data['x_priority'] > 3)
			{
				str += '<div class="email-grid-icon btn-low-priority"></div>';
			}
		}

		if(record.data['flagged']==1)
		{
			//str += '<img src=\"' + GOimages['flag'] +' \" style="display:block" />';
			str += '<div class="email-grid-icon btn-flag"></div>';
		}

		return str;

	},



	renderFlagged : function(value, p, record){

		var str = '';

		if(record.data['flagged']==1)
		{
			//str += '<img src=\"' + GOimages['flag'] +' \" style="display:block" />';
			str += '<div class="go-icon btn-flag"></div>';
		}
		if(record.data['attachments'])
		{
			str += '<div class="go-icon btn-attach"></div>';
		//str += '<img src=\"' + GOimages['attach'] +' \" style="display:block" />';
		}
		return str;

	}
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AccountsTree.js 19873 2016-03-01 10:55:30Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.email.AccountsTree = function(config){
	if(!config)
	{
		config = {};
	}
	config.layout='fit';
  config.split=true;
	config.autoScroll=true;
	config.width=200;
	
	config.animate=true;
	config.loader=new GO.base.tree.TreeLoader(
	{
		baseParams:{
			expandedNodes:""
		},
		dataUrl:GO.url("email/account/tree"),
		preloadChildren:true
	});
	
	config.loader.on('beforeload', function(loader, node){
		loader.baseParams.expandedNodes = Ext.encode(this.getExpandedNodes());
	}, this);

	config.loader.on('load',function(loader,node,response){
		
		var result = Ext.decode(response.responseText);
		
		if(result.success===false){
//			GO.errorDialog.show(result.feedback);
			node.setText(node.text+' ('+GO.lang.strError+')');
			node.setTooltip(result.feedback, GO.lang.strError);
			
			if(result.exceptionClass && result.exceptionClass=='GO\\Base\\Mail\\ImapAuthenticationFailedException'){
				this._errorNodes.push(node.attributes);
			}
		}
	  
//		this._setErrorNodes(Ext.decode(response.responseText));
		this._nodeId = 0;
		this._handleFailedIMAPConnections();
	},this);
	
	
//	config.loader.on("load", function(treeLoader, node)
//	{
//		node.attributes.parentExpanded=true;
//	}, this);

	config.containerScroll=true;
	config.rootVisible=false;
	config.collapseFirst=false;
	config.collapsible=true;
	config.collapseMode='mini';
	config.header=false;
	config.ddAppendOnly=true;
	config.containerScroll=true;	
	config.enableDD=true;
	config.ddGroup='EmailDD';
	
	config.bbar=new Ext.Toolbar({cls:'go-paging-tb',items:[this.statusBar = new Ext.Panel({height:20, baseCls:'em-statusbar',border:false, plain:true})]});

	GO.email.AccountsTree.superclass.constructor.call(this, config);	
	
	
	// set the root node
//	var rootNode = new Ext.tree.AsyncTreeNode({
//		text: 'Root',
//		id:'bs-folder-0',
//		draggable:false,
//		iconCls : 'folder-default',
//		expanded:false
//	});
//	this.setRootNode(rootNode);
	
	// set the root node
	var root = new Ext.tree.AsyncTreeNode({
		text: GO.email.lang.accounts,
		draggable:false,
		id:'root'
	});
	
	root.on("beforeload", function(){
		//stop state saving when loading entire tree
		this.disableStateSave();
	}, this);
	
	this.setRootNode(root);
	
	
	this.on('collapsenode', function(node)
	{		
		if(this.saveTreeState && node.childNodes.length)
			this.updateState();		
	},this);

	this.on('expandnode', function(node)
	{		
		if(node.id!="root" && this.saveTreeState && node.childNodes.length)
			this.updateState();
		
		
		//if root node is expanded then we are done loading the entire tree. After that we must start saving states
		if(node.id=="root"){			
			this.enableStateSave();
		}
	},this);

	this.on('nodedragover', function(e)
	{		
		if(e.dropNode)
		{
			var dragId = GO.util.Base64.decode(e.source.dragData.node.id);
			var targetId = GO.util.Base64.decode(e.target.id);
			//drag within tree
			if(dragId.indexOf('account')>-1 && targetId.indexOf('account')>-1){
				if(e.point!='append')
					return true;
				else
					e.target.collapse();
			}
			if(e.point!='append'){
				return false;
			}
			return ((this.getNodeById(e.dropNode.id).parentNode.id != e.target.id) &&
					(e.source.dragData.node.attributes.account_id == e.target.attributes.account_id));
		}else
		{
			//drag from grid
			if(e.point!='append'){
				return false;
			}else
			{
				return true;
			}
		}		
	}, this);	
	
	
	
	
	this.mailboxContextMenu = new GO.email.MailboxContextMenu({		
		treePanel:this,
		messagesGrid:this.messagesGrid
	});
	
	
	this.accountContextMenu = new GO.email.AccountContextMenu({		
		treePanel:this,
		messagesGrid:this.messagesGrid
	});
	
	this.on('beforeclick', function(node){
		if(node.attributes.noselect==1)
			return false;
	});
	
	this.on('contextmenu', function(node, e){
		e.stopEvent();
		
		if(node.attributes.noselect==1)
			return false;
		
		//no content menu for read only mail accounts
		if(node.attributes.permission_level < GO.permissionLevels.create)
		  return false;

		var selModel = this.getSelectionModel();
		
		if(!selModel.isSelected(node))
		{
			selModel.clearSelections();
			selModel.select(node);
		}
		
		var coords = e.getXY();

		if(node.attributes.isAccount){
			this.accountContextMenu.setNode(node);
			this.accountContextMenu.showAt([coords[0], coords[1]]);
		}else
		{
			this.mailboxContextMenu.setNode(node);
			this.mailboxContextMenu.showAt([coords[0], coords[1]]);
		}
		
	}, this);
	
	
	
	
	
	
	
	this.on('startdrag', function(tree, node, e){
		var dragId = GO.util.Base64.decode(node.id);
		if(dragId.indexOf('account')>-1){
			tree.dropZone.appendOnly=false;
		}else
		{
			tree.dropZone.appendOnly=true;
		}
	}, this);

	this.on('beforenodedrop', function(e){
		if(!e.dropNode)
		{
			var s = e.data.selections, messages = [];

			for(var i = 0, len = s.length; i < len; i++){
				messages.push(s[i].id);
			}

			if(messages.length>0)
			{
				
				var firstDraggedMessage = s[0].data;
			
				if(e.rawEvent.ctrlKey){
					return this.copyDroppedNodes(e);
				}
				
				
				

				if(firstDraggedMessage["account_id"] != e.target.attributes['account_id'])
				{
					var params = {
						task:'move',
						from_account_id:this.mainPanel.messagesGrid.store.baseParams.account_id,
						to_account_id:e.target.attributes['account_id'],
						from_mailbox:this.mainPanel.messagesGrid.store.baseParams.mailbox,
						to_mailbox:e.target.attributes['mailbox'],
						messages:Ext.encode(messages)
					}
					Ext.MessageBox.progress(GO.email.lang.moving, '', '');
					Ext.MessageBox.updateProgress(0, '0%', '');

				

					var moveRequest = function(newMessages){

						if(!newMessages)
						{
							params.total=messages.length;
						}else
						{
							params.messages=Ext.encode(newMessages);
						}

						GO.request({
							timeout:300000,
							url:"email/message/move",
							params:params,
							success:function(options, response, result){
								if(result.messages && result.messages.length>0)
								{
									Ext.MessageBox.updateProgress(result.progress, (result.progress*100)+'%', '');
									moveRequest.call(this, result.messages);
								}else
								{
									this.mainPanel.messagesGrid.getView().holdPosition = true;
									this.mainPanel.messagesGrid.store.reload({
										callback:function(){

											if(this.mainPanel.messagePanel.uid && !this.mainPanel.messagesGrid.store.getById(this.mainPanel.messagePanel.uid))
											{
												this.mainPanel.messagePanel.reset();
											}

											Ext.MessageBox.hide();
										},
										scope:this
									});
								}

							},
							scope:this
						});
					}
					moveRequest.call(this);

				}else	if(firstDraggedMessage.mailbox == e.target.mailbox)
				{
					return false;
				}else
				{
					this.mainPanel.messagesGrid.store.baseParams['action']='move';
//					this.messagesGrid.store.baseParams['from_account_id']=this.account_id;
//					this.messagesGrid.store.baseParams['to_account_id']=e.target.attributes['account_id'];
//					this.messagesGrid.store.baseParams['from_mailbox']=this.mailbox;
					this.mainPanel.messagesGrid.store.baseParams['to_mailbox']=e.target.attributes['mailbox'];
					this.mainPanel.messagesGrid.store.baseParams['messages']=Ext.encode(messages);
					
					this.mainPanel.messagesGrid.getView().holdPosition = true;
					this.mainPanel.messagesGrid.store.reload({
						callback:function(){
							if(this.mainPanel.messagePanel.uid && !this.mainPanel.messagesGrid.store.getById(this.mainPanel.messagePanel.uid))
							{
								this.mainPanel.messagePanel.reset();
							}
						},
						scope:this
					});

					delete this.mainPanel.messagesGrid.store.baseParams['action'];
//					delete this.messagesGrid.store.baseParams['from_mailbox'];
					delete this.mainPanel.messagesGrid.store.baseParams['to_mailbox'];
					delete this.mainPanel.messagesGrid.store.baseParams['messages'];
//					delete this.messagesGrid.store.baseParams['to_account_id'];
//					delete this.messagesGrid.store.baseParams['from_account_id'];
				}

			}
		}
	},
	this);

	this.on('nodedrop', function(e){
		if(e.dropNode)
		{
			var dragId = GO.util.Base64.decode(e.source.dragData.node.id);
			var targetId = GO.util.Base64.decode(e.target.id);
			
			if(dragId.indexOf('account')>-1 && targetId.indexOf('account')>-1 && e.point!='append'){
				var sortorder=[];
				var c = this.getRootNode().childNodes;

				for(var i=0;i<c.length;i++){
					sortorder.push(c[i].attributes.account_id);
				}
				GO.request({
					url: "email/account/saveSort",
					params: {
						sort_order: Ext.encode(sortorder)
					}
				});
			}else
			{
				this.moveFolder(e.target.attributes['account_id'], e.target , e.data.node);
			}
		}

		this.dropZone.appendOnly=true;
	},
	this);
	
	

	
	
	
//	this.treeEditor = new Ext.tree.TreeEditor(
//		this,
//		new Ext.form.TextField({
//			cancelOnEsc:true,
//			completeOnEnter:true,
//			maskRe:/[^:]/
//		}),
//		{
//			listeners:{
//				complete  : this.afterEdit,
//				startedit : function( editor, boundEl, value )
//				{
//					editor.setValue(editor.editNode.attributes.mailbox);
//				},
//				beforecomplete  : function( editor, value, startValue){
//					value=value.trim();
//					if(GO.util.empty(value)){
//						editor.focus();
//						return false;
//					}
//				},
//				scope:this
//			}
//		});
}

Ext.extend(GO.email.AccountsTree, Ext.tree.TreePanel, {	
	
	saveTreeState : false,
	
	_nodeId : 0,
	_errorNodes : [],
	
	enableStateSave : function(){
		if(Ext.Ajax.isLoading(this.getLoader().transId)){
			this.enableStateSave.defer(100, this);
			this.loadingDone=false;
		}else
		{
			if(!this.loadingDone){
				this.loadingDone=true;
				this.enableStateSave.defer(100, this);
			}else{
				this.saveTreeState=true;
			}
		}
	},
	
	disableStateSave : function(){
		this.loadingDone=false;
		this.saveTreeState=false;
	},
	
	updateState : function(){
		GO.request({
			url:"email/account/saveTreeState",
			params:{
				expandedNodes:Ext.encode(this.getExpandedNodes())
			}
		});
	},
	setUsage : function(usage){		
			this.statusBar.body.update(usage);
	},
	
	findInboxNode : function(node){
		
		if(node.attributes.isAccount){
			accountNode=node;
		}else
		{
			var p = node.parentNode;
			var accountNode=false;
			while(p){
					if(p.attributes.isAccount){
							accountNode=p;
							break;
					}
					p = p.parentNode;
			}
		}
		
		if(!accountNode)
			return false;
		
		return accountNode.findChild('mailbox','INBOX');
	},
	
	getExpandedNodes : function(){
		var expanded = new Array();
		this.getRootNode().cascade(function(n){
			if(n.expanded){
			expanded.push(n.attributes.id);
			}
		});
		
		return expanded;
	},
	
	moveFolder : function(account_id, targetNode, node)
	{
		if(node.attributes['mailbox'] === 'INBOX') { // Disable moveing the inbox folder.
			this.refresh();
			return false;
		}
		
		GO.request({
			url:"email/folder/move",
			params:{				
				account_id:account_id,
				sourceMailbox:node.attributes.mailbox,
				targetMailbox:targetNode.attributes.mailbox
			},
			fail : function(){
				this.refresh();
			},
			success:function(options, response, result)
			{
				
				this.refresh(node.parentNode);
				
//				var responseParams = Ext.decode(response.responseText);
//				if(responseParams.success)
//				{
//					//remove preloaded children otherwise it won't request the server
//					delete node.parentNode.attributes.children;
//					node.parentNode.reload();
//				}else
//				{
//					var accountNode = this.getNodeById('account_'+account_id)
//					if(accountNode)
//						accountNode.reload();
//					
//					Ext.MessageBox.alert(GO.lang.strError,responseParams.feedback);
//				}								
			},
			scope:this
		});
	},
	
	refresh : function(node){
		//todo only reload current node.
		if(node){
			//remove preloaded children otherwise it won't request the server
			delete node.attributes.children;
			node.reload();
		}else
		{
			this.getRootNode().reload();
		}
	},
	
	_handleFailedIMAPConnections : function() {
		var errorNode=this._errorNodes.shift();
//		if(typeof(errorNode)!='Object' && errorNode!==false)
//			errorNode=this._errorNodes.shift();
//		
		if(errorNode){
			
			this.accountId =errorNode['account_id'];
			if (!this.imapLoginFailedDialog)
				this.imapLoginFailedDialog = new GO.Window({
					title: GO.lang['strError'],
					layout: 'fit',
					width: 320,
					height: 220,
					cls : 'go-form-panel',
					items: [this.imapLoginFailedFormPanel = new Ext.form.FormPanel({
						items: [this.imapLoginFailedInfoField = new GO.form.PlainField({
							value: GO.email.lang['imapLoginFailed'],
							hideLabel: true,
							//							height: 80,
							anchor: '-20'
						}), this.passwordField = new Ext.form.TextField({
							fieldLabel : GO.lang.strPassword,
							name : 'password',
							inputType : 'password',
							allowBlank : false,
							anchor: '-20'
						}),new Ext.ux.form.XCheckbox({
							boxLabel: GO.email.lang.storePassword,
							checked: false,
							name: 'store_password',
							allowBlank: true,
							hideLabel:true
						})],
						buttons: [{
							text : GO.lang.cmdOk,
							handler : function() {
								this.imapLoginFailedFormPanel.form.submit({
									url: GO.url('email/account/savePassword'),
									params: {
										id: this.accountId
									},
									success : function(form, action) {
										this.imapLoginFailedDialog.hide();
										this.imapLoginFailedFormPanel.form.reset();
										this.root.reload();
									},
									failure : function(form, action) {
										var error = '';
										if (action.failureType == 'client') {
											error = GO.lang.strErrorsInForm;
										} else if (action.result) {
											error = action.result.feedback;
										} else {
											error = GO.lang.strRequestError;
										}
											
										Ext.MessageBox.alert(GO.lang.strError, error);
									},
									scope: this
								});
							},
							scope : this
						}, {
							text : GO.lang.cmdClose,
							handler : function() {
								this.imapLoginFailedDialog.hide();
								this.imapLoginFailedFormPanel.form.reset();
								this._handleFailedIMAPConnections();								
							},
							scope : this
						}]
					})]
				});
			this.imapLoginFailedInfoField.setValue(GO.email.lang['imapLoginFailed'].replace('%username',errorNode.name)+' '+GO.email.lang['tryNewCredentials']);
			this.imapLoginFailedDialog.show();
		}
	
	},
	
	
	copyDroppedNodes : function(e){
		
		
		var srcMessages=[];
		for (var i=0; i<e.data.selections.length;i++) {
			srcMessages.push({
				accountId :e.data.selections[i].data.account_id,
				mailboxPath : e.data.selections[i].data.mailbox,
				mailUid : e.data.selections[i].data.uid,
				seen : e.data.selections[i].data.seen
			});
		}
		
		var params = {
			targetAccountId:e.target.attributes['account_id'],
			targetMailboxPath:e.target.attributes['mailbox'],
			srcMessages: Ext.encode(srcMessages)
		}

		GO.request({
			maskEl:GO.mainLayout.getModulePanel('email').getEl(),
			timeout:300000,
			url:"email/account/copyMailTo",
			params:params,
			success:function(options, response, result){
				this.mainPanel.messagesGrid.store.load();		
			},
			scope:this
		});
					
	}

//	_setErrorNodes : function (nodes) {
//		this._errorNodes = [];
//		for (var nodeId in nodes) {
//			if (!nodes[nodeId].isAccount && !GO.util.empty(nodes[nodeId].hasError))
//				this._errorNodes.push(nodes[nodeId]);
//		}
//	}
//	
//	afterEdit : function(editor, text, oldText ){
//
//		GO.request({
//			url:'email/folder/submit',
//			params:{				
//				parent:editor.editNode.parentNode.id=='root' ? "" : editor.editNode.parentNode.attributes.mailbox,
//				account_id:editor.editNode.parentNode.attributes.account_id,
//				oldmailbox:oldText,
//				newmailbox:text
//			},
//			success: function(response, options, result)
//			{
//				if(!result.success)
//				{					
//					editor.editNode.destroy();
//					alert(result.feedback);
//				}				
//			},
//			scope:this
//		});
//	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: UnknownRecipientsDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 		
GO.email.UnknownRecipientsDialog = Ext.extend(Ext.Window, {
	
	initComponent : function(){
		
		this.store = new GO.data.JsonStore({
			root: 'recipients',
			fields:['email','name', 'first_name', 'middle_name', 'last_name']
		});


		var action = new Ext.ux.grid.RowActions({
			header:'',
			hideMode:'display',
			keepSelection:true,
			actions:[{
				iconCls:'btn-add',
				qtip:GO.lang.cmdAdd
			},{
				iconCls:'btn-edit',
				qtip:GO.lang.cmdEdit
			}],
			width: 50
		});

		action.on({
			action:function(grid, record, action, row, col) {

				var email = record.data.email;
				var tldi = email.lastIndexOf('.');
				if(tldi)
				{
					var tld = email.substring(tldi+1, email.length).toUpperCase();
					if(GO.lang.countries[tld])
					{
						record.data.country=tld;
					}
				}
	
				if(action == 'btn-add')
				{
					this.addContactToAddresslistAtSaveContactEvent = true;
					GO.addressbook.showContactDialog(0, {
						values: record.data,
						addresslistIds: new Array(this.addresslistId),
						first_name: record.data.first_name,
						middle_name: record.data.middle_name,
						last_name: record.data.last_name
					});
					//GO.addressbook.contactDialog.formPanel.form.setValues(record.data);
				}else
				{
					if(!GO.email.findContactDialog)
					{
						GO.email.findContactDialog = new GO.email.FindContactDialog();
						
						if (!GO.util.empty(this.addresslistId)) {
								GO.email.findContactDialog.on('email_merged', function(contactId) {
								if (this.addresslistId>0) {
									this.addToAddressbook(contactId,this.addresslistId);
								} else {
									alert(GO.addressbook.lang.addresslistIdMustBePositive);
								}
								}, this);
						}
					}
		     
					GO.email.findContactDialog.show(record.data);
				}

				var store = grid.getStore();
				store.remove(record);

				if(store.getCount()==0)
				{
					this.hide();
				}
			},
			scope:this
		});
				
		this.grid = new GO.grid.GridPanel({
			store: this.store,
			plugins:action,
			border:false,
			region:'center',
			loadMask:true,
			columns : [{
				header : GO.lang.strName,
				dataIndex : 'name'
			}, {
				header : GO.lang.strEmail,
				dataIndex : 'email'
			},
			action],
			sm : new Ext.grid.RowSelectionModel({
				singleSelect : false
			}),
			view : new Ext.grid.GridView({
				forceFit : true,
				autoFill : true
			})
		});

		var items = [
			this.descriptionTextPanel = new Ext.Panel({
				border: false,
				region:'north',
				html: this.descriptionText  ? this.descriptionText : GO.email.lang.addUnknownRecipientsText,
				cls:'go-form-panel'
			}),
			this.grid
		];
		
		if (GO.util.empty(this.disableSkipUnknownCheckbox)) {
			items.push(new Ext.Panel({
				border: false,
				items: this.skipUnknownRecipients = new Ext.form.Checkbox({
					boxLabel:GO.email.lang.skipUnknownRecipientsAction,
					hideLabel:true,
					checked:false,
					name:'skip_unknown_recipients',
					listeners : {
						check : function(field, checked)
						{
							GO.email.skipUnknownRecipients = checked;

							GO.request({
								url: "core/saveSetting",
								params: {
									value: checked ? 1 : 0,
									name:"email_skip_unknown_recipients",
									user_id:GO.settings.user_id
								},				
								scope: this
							});
						},
						scope : this
					}
				}),
				region:'south',
				autoHeight:true,
				cls:'go-form-panel'
			}))
		}
		
		this.title= !GO.util.empty(this.title) ? this.title : GO.email.lang.addUnknownRecipients;
		this.layout='fit';
		this.modal=false;
		this.height=400;
		this.width=600;
		this.closable=true;
		this.closeAction='hide';
		this.items= new Ext.Panel({
			autoScroll:true,
			layout:'border',
			items: items
		});	
		
		GO.email.UnknownRecipientsDialog.superclass.initComponent.call(this);
		
	},
	
	addToAddressbook : function(contactId,addresslistId) {
		Ext.Ajax.request({
			url: GO.url('addressbook/addresslist/addContactsToAddresslist'),
			params: {
				contactIds: Ext.encode(new Array(contactId)),
				addresslistId : addresslistId
			}
//			,
//			callback: function(options, success, response)
//			{
//
//			}
		});
	}
	
});


/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AddressbookDialog.js 20726 2016-12-16 10:04:54Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 * 
 * 
 * Params:
 * 
 * linksStore: store to reload after items are linked gridRecords: records from
 * grid to link. They must have a link_id and link_type fromLinks: array with
 * link_id and link_type to link
 */

/**
 * @class GO.dialog.SelectEmail
 * @extends Ext.Window A window to select a number of User-Office user Users.
 * 
 * @cfg {Function} handler A function called when the Add or Ok button is
 *      clicked. The grid will be passed as argument.
 * @cfg {Object} scope The scope of the handler
 * 
 * @constructor
 * @param {Object}
 *            config The config object
 */

GO.email.AddressbookDialog = function(config) {

	Ext.apply(this, config);

	var items = Array();
	
	if (GO.addressbook) {
		this.contactsGrid = new GO.email.ContactsGrid({
			title:GO.addressbook.lang.contacts,
			id: 'em-contacts-grid-tab'
		});

//		this.contactsGrid.on('show', function() {			
//			//this.contactsGrid.store.load();
//		}, this);

		this.companiesStore = new GO.data.JsonStore({
			url : GO.url("addressbook/company/store"),
			baseParams : {
				//task : 'companies',
				require_email:true				
			},
//			root : 'results',
//			id : 'id',
//			totalProperty : 'total',
			fields : ['id', 'name', 'city', 'email', 'phone',
			'homepage', 'address', 'zip'],
			remoteSort : true
		});

		this.companySearchField = new GO.form.SearchField({
			store : this.companiesStore,
			width : 320
		});
		
		this.companySearchField.on("search", function(){
			this.companyGrid.getView().emptyText=GO.lang['strNoItems'];
		}, this);

		this.companySearchField.on("reset", function(){
			this.companyGrid.getView().emptyText=GO.lang.pleaseEnterQuery;
			
			this.companyGrid.store.removeAll();
			//cancel store load
			return false;
		}, this);

		this.companyGrid = new GO.grid.GridPanel({
			title : GO.addressbook.lang.companies,
			id: 'em-companies-grid-tab',
			paging : true,
			border : false,
			store : this.companiesStore,
			view : new Ext.grid.GridView({
				autoFill : true,
				forceFit : true,
				deferEmptyText: false,
				emptyText: GO.lang.pleaseEnterQuery
			}),
			columns : [{
				header : GO.lang['strName'],
				dataIndex : 'name',
				css : 'white-space:normal;',
				sortable : true
			}, {
				header : GO.lang['strEmail'],
				dataIndex : 'email',
				css : 'white-space:normal;',
				sortable : true
			}],
			sm : new Ext.grid.RowSelectionModel(),
			tbar : [GO.lang['strSearch'] + ': ', ' ',
			this.companySearchField]
		});

//		this.companyGrid.on('show', function() {
//			this.companiesStore.load();
//		}, this);

		items.push(this.contactsGrid);
		items.push(this.companyGrid);

	}
		
	
	this.usersStore = new GO.data.JsonStore({
		url : GO.url("core/users"),
		baseParams:{
			queryRequired:true
		},
		fields : ['id', 'username', 'name',  'email'],
		remoteSort : true
	});

	this.usersSearchField = new GO.form.SearchField({
		store : this.usersStore,
		width : 320
	});
	
	this.usersSearchField.on("search", function(){
		this.usersGrid.getView().emptyText=GO.lang['strNoItems'];
	}, this);

	this.usersSearchField.on("reset", function(){
		this.usersGrid.getView().emptyText=GO.lang.pleaseEnterQuery;
		
		this.usersGrid.store.removeAll();
		//cancel store load
		return false;
	}, this);

	this.usersGrid = new GO.grid.GridPanel({
		title : GO.addressbook.lang.users,
		id: 'em-users-grid-tab',
		paging : true,
		border : false,
		store : this.usersStore,
		view : new Ext.grid.GridView({
			autoFill : true,
			forceFit : true,
			deferEmptyText: false,
			emptyText: GO.lang.pleaseEnterQuery
		}),
		columns : [{
			header : GO.lang['strName'],
			dataIndex : 'name',
			css : 'white-space:normal;',
			sortable : true
		}, {
			header : GO.lang['strUsername'],
			dataIndex : 'username',
			css : 'white-space:normal;',
			sortable : true
		},{
			header : GO.lang['strEmail'],
			dataIndex : 'email',
			css : 'white-space:normal;',
			sortable : true
		}],
		sm : new Ext.grid.RowSelectionModel(),
		tbar : [GO.lang['strSearch'] + ': ', ' ', this.usersSearchField]
	});

//	this.usersGrid.on('show', function() {
//		this.usersStore.load();
//	}, this);
	items.push(this.usersGrid);
	
	

	if (GO.addressbook) {
		
		this.mailingsStore = new GO.data.JsonStore({
				url: GO.url("addressbook/addresslist/store"),
				baseParams: {
						permissionLevel: GO.permissionLevels.read
				},
				fields: ['id', 'name', 'user_name','acl_id', 'checked'],
				remoteSort: true
		});
		
		this.mailingsSearchField = new GO.form.SearchField({
			store : this.mailingsStore,
			width : 320
		});

//		this.mailingsSearchField.on("search", function(){
//			this.mailingsGrid.getView().emptyText=GO.lang['strNoItems'];
//		}, this);
//
//		this.mailingsSearchField.on("reset", function(){
//			this.mailingsGrid.getView().emptyText=GO.lang.pleaseEnterQuery;
//
//			this.mailingsGrid.store.removeAll();
//			//cancel store load
//			return false;
//		}, this);

		this.mailingsGrid = new GO.grid.GridPanel({
			title : GO.addressbook.lang.cmdPanelMailings,
			id: 'em-addresslists-grid-tab',
			paging : true,
			border : false,
			store : this.mailingsStore,
			view : new Ext.grid.GridView({
				autoFill : true,
				forceFit : true
			}),
			columns : [{
				header : GO.lang['strName'],
				dataIndex : 'name',
				css : 'white-space:normal;',
				sortable : true
			}],
			sm : new Ext.grid.RowSelectionModel(),
			tbar : [GO.lang['strSearch'] + ': ', ' ', this.mailingsSearchField]
		});
		this.mailingsGrid.on('show', function() {
			if(!GO.addressbook.readableAddresslistsStore.loaded)
				GO.addressbook.readableAddresslistsStore.load();
		}, this);
		
		this.mailingsGrid.on('show', function() {			
			this.mailingsGrid.store.load();
		}, this);

		items.push(this.mailingsGrid);
	}
	
	/*
	 * this.usersGrid.on('afterRender', function(){
	 * if(this.usersGrid.isVisible()) { this.onShow(); } }, this);
	 */

	this.userGroupsStore = new GO.data.JsonStore({
		url : GO.url('core/groups'),
		baseParams : {
			for_mail : 1
		},
		id : 'id',
		root : 'results',
		fields: ['id', 'name', 'user_id', 'user_name'],
		totalProperty : 'total',
		remoteSort : true
	});

	this.userGroupsGrid = new GO.grid.GridPanel({
		title : GO.email.lang.groups,
			id: 'em-usergroups-grid-tab',
		paging : true,
		border : false,
		store : this.userGroupsStore,
		tbar : [GO.lang['strSearch'] + ': ', ' ',
			new GO.form.SearchField({
			store : this.userGroupsStore,
			width : 320
		})],
		view : new Ext.grid.GridView({
			autoFill : true,
			forceFit : true
		}),
		columns : [{
			header : GO.lang['strName'],
			dataIndex : 'name',
			css : 'white-space:normal;',
			sortable : true
		}, {
			header : GO.lang['strOwner'],
			dataIndex : 'user_name',
			css : 'white-space:normal;',
			sortable : true
		}],
		sm : new Ext.grid.RowSelectionModel()
	});

	this.userGroupsGrid.on('show', function() {
		this.userGroupsStore.load();
	}, this);
	
	items.push(this.userGroupsGrid);

	

	this.tabPanel = new Ext.TabPanel({
		activeTab : 0,
		items : items,
		border : false
	});

	GO.email.AddressbookDialog.superclass.constructor.call(this, {
		layout : 'fit',
		modal : false,
		height : 400,
		width : 600,
		closeAction : 'hide',
		title : GO.addressbook.lang.addressbook,
		items : this.tabPanel,
		buttons : [{
			text : GO.email.lang.addToRecipients,
			handler : function() {
				this.addRecipients('to');
			},
			scope : this
		}, {
			text : GO.email.lang.addToCC,
			handler : function() {
				this.addRecipients('cc');
			},
			scope : this
		}, {
			text : GO.email.lang.addToBCC,
			handler : function() {
				this.addRecipients('bcc');
			},
			scope : this
		}, {
			text : GO.lang['cmdClose'],
			handler : function() {
				this.hide();
			},
			scope : this
		}]
	});

	this.addEvents({
		addrecipients : true
	});
};

Ext.extend(GO.email.AddressbookDialog, GO.Window, {
	focus : function(){
		var panel = this.tabPanel.getActiveTab();
		var tb = panel.getTopToolbar();
		if(tb){
			var components =tb.findByType("searchfield");
			if(components.length)
				components[0].focus();
		}
		
	},
	addRecipients : function(field) {
		var str="";
		var activeGrid = this.tabPanel.getLayout().activeItem;
		var selections = activeGrid.selModel.getSelections();
				
		if (this.mailingsGrid && activeGrid == this.mailingsGrid) {
					
			var addresslists = [];
					
			for(var i=0;i<selections.length;i++)
			{
				addresslists.push(selections[i].data.id);
			}					

			GO.request({
				maskEl: this.getEl(),
				url: "addressbook/addresslist/getRecipientsAsString",
				params: {					
					addresslists: Ext.encode(addresslists)
				},
				success: function(options, response, result)
				{					
					this.fireEvent('addrecipients', field, result.recipients);
				},
				scope:this
			});

		}else
		if(activeGrid == this.userGroupsGrid)
		{
			var user_groups = [];

			for(var i=0;i<selections.length;i++)
			{
				user_groups.push(selections[i].data.id);
			}

			this.el.mask(GO.lang.waitMsgLoad);
			GO.request({
				url: "groups/group/getRecipientsAsString",
				params: {
					groups: Ext.encode(user_groups)
				},
				success: function(options, response, result)
				{
					this.fireEvent('addrecipients', field, result.recipients);
					this.el.unmask();
				},
				scope:this
			});
		}else
		{
			var emails = [];

			for (var i = 0; i < selections.length; i++) {
				emails.push('"' + selections[i].data.name + '" <'
					+ selections[i].data.email + '>');
			}
					
			str=emails.join(', ');
			this.fireEvent('addrecipients', field, str);
		}
				
	}
});


/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: EmailComposer.js 21155 2017-05-08 11:25:22Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.email.EmailComposer = function(config) {
	Ext.apply(config);

	this.cls='em-composer';
	
	var priorityGroup = Ext.id();
	
	var optionsMenuItems = [
	this.notifyCheck = new Ext.menu.CheckItem({
		text : GO.email.lang.notification,
		checked : false,
		checkHandler : function(check, checked) {
			this.sendParams['notification'] = checked
			? 1
			: 0;
		},
		scope : this
	}),
	'-',
	'<div class="menu-title">'
	+ GO.email.lang.priority + '</div>', {
		text : GO.email.lang.high,
		checked : false,
		group : priorityGroup,
		checkHandler : function() {
			this.sendParams['priority'] = '1';
		},
		scope : this
	}, this.normalPriorityCheck = new Ext.menu.CheckItem({
		text : GO.email.lang.normal,
		checked : true,
		group : priorityGroup,
		checkHandler : function() {
			this.sendParams['priority'] = '3';
		},
		scope : this
	}), {
		text : GO.email.lang.low,
		checked : false,
		group : priorityGroup,
		checkHandler : function() {
			this.sendParams['priority'] = '5';
		},
		scope : this
	},'-',this.htmlCheck = new Ext.menu.CheckItem({
		text:GO.email.lang.htmlMarkup,
		disabled:GO.util.isIpad(),
		checked:GO.email.useHtmlMarkup && !GO.util.isIpad(),
		listeners : {
			checkchange: function(check, checked) {
								 	
				if(!this.emailEditor.isDirty() || confirm(GO.email.lang.confirmLostChanges))
				{
					this.emailEditor.setContentTypeHtml(checked);
					this.lastLoadParams.keepHeaders=1;
					this.loadForm(this.lastLoadUrl, this.lastLoadParams);
				}else
				{
					check.setChecked(!checked, true);
				}
			},
			scope:this
		}
	})];
						
//	if(GO.gnupg)
//	{
//		optionsMenuItems.push('-');
//			
//		optionsMenuItems.push(this.encryptCheck = new Ext.menu.CheckItem({
//			text:GO.gnupg.lang.encryptMessage,
//			checked: false,
//			listeners : {
//				checkchange: function(check, checked) {
//					if(this.formPanel.baseParams.content_type=='html')
//					{
//						if(!confirm(GO.gnupg.lang.confirmChangeToText))
//						{
//							check.setChecked(!checked, true);
//							return false;
//						}else
//						{
//							this.emailEditor.setContentTypeHtml(false);
//							this.htmlCheck.setChecked(false, true);
//							this.showConfig.keepEditingMode=true;
//							this.show(this.showConfig);
//						}
//					}
//						
//					this.htmlCheck.setDisabled(checked);
//						
//					this.sendParams['encrypt'] = checked
//					? '1'
//					: '0';
//								
//					return true;
//				},
//				scope:this
//			}
//		}));
//	}

	this.optionsMenu = new Ext.menu.Menu({
		items : optionsMenuItems
	});

	this.showMenu = new Ext.menu.Menu({
				
		items : [this.formFieldCheck = new Ext.menu.CheckItem({
			text : GO.email.lang.sender,
			checked : true,
			checkHandler : this.onShowFieldCheck,
			scope : this
		}),
		this.ccFieldCheck = new Ext.menu.CheckItem({
			text : GO.email.lang.ccField,
			checked : GO.email.showCCfield,
			checkHandler : this.onShowFieldCheck,
			scope : this
		}),
		this.bccFieldCheck = new Ext.menu.CheckItem({
			text : GO.email.lang.bccField,
			checked : GO.email.showBCCfield,
			checkHandler : this.onShowFieldCheck,
			scope : this
		})
		]
	});




	var items = [
	this.fromCombo = new Ext.form.ComboBox({
		store : GO.email.aliasesStore,
		editable:false,
		fieldLabel : GO.email.lang.from,
		name : 'alias_name',
		anchor : '100%',
		displayField : 'from',
		valueField : 'id',
		hiddenName : 'alias_id',
		forceSelection : true,
		triggerAction : 'all',
		mode : 'local',
		tpl: '<tpl for="."><div class="x-combo-list-item">{from:htmlEncode}</div></tpl>',
		listeners:{
			beforeselect: function(cb, newAccountRecord){
				this._checkLoadTemplate(cb,newAccountRecord);
			},
			scope:this
		}
	}),

	this.toCombo = new GO.form.ComboBoxMulti({
		sep : ',',
		fieldLabel : GO.email.lang.sendTo,
		name : 'to',
		anchor : '100%',
		height : 50,
		store : new GO.data.JsonStore({
			url : GO.url("search/email"),
			fields : ['full_email','info']
		}),
		valueField : 'full_email',
		displayField : 'info'
	}),

	this.ccCombo = new GO.form.ComboBoxMulti({
		sep : ',',
		fieldLabel : GO.email.lang.cc,
		name : 'cc',
		anchor : '100%',
		height : 50,
		store : new GO.data.JsonStore({
			url : GO.url("search/email"),
			fields : ['full_email','info']
		}),
		displayField : 'info',
		valueField : 'full_email',
		hideTrigger : true,
		minChars : 2,
		triggerAction : 'all',
		selectOnFocus : false

	}),

	this.bccCombo = new GO.form.ComboBoxMulti({
		sep : ',',
		fieldLabel : GO.email.lang.bcc,
		name : 'bcc',
		anchor : '100%',
		height : 50,
		store : new GO.data.JsonStore({
			url : GO.url("search/email"),
			fields : ['full_email','info']
		}),
		displayField : 'info',
		valueField : 'full_email',
		hideTrigger : true,
		minChars : 2,
		triggerAction : 'all',
		selectOnFocus : false

	})];
								
	var anchor = -113;
						
	if(GO.settings.modules.savemailas && GO.settings.modules.savemailas.read_permission)
	{		
		if (!this.selectLinkField) {
			this.selectLinkField = new GO.form.SelectLink({
				anchor : '100%'
			});
			anchor+=26;
			items.push(this.selectLinkField);
			
			this.selectLinkField.on('change',function(){
				this.replaceTemplateLinkTag();
			},this);	
		}
	}

	try {
		if(config && config.links)
		{
			if (!this.selectLinkField) {
				this.selectLinkField = new GO.form.SelectLink({
					anchor : '100%'
				});
				anchor+=26;
				items.push(this.selectLinkField);
				
				this.selectLinkField.on('change',function(){
					this.replaceTemplateLinkTag();
				},this);
			}
		}
	} catch(e) {}

	items.push(this.subjectField = new Ext.form.TextField({
		fieldLabel : GO.email.lang.subject,
		name : 'subject',
		anchor : '100%'
	}));
	this.emailEditor = new GO.base.email.EmailEditorPanel({
		maxAttachmentsSize:parseInt(GO.settings.config.max_attachment_size),
		region:'center',
		listeners:{
			submitshortcut:function(){
				this.sendMail(false, false);
			},
			scope:this
		}
	});
	
	this.formPanel = new Ext.form.FormPanel({
		border : false,		
		waitMsgTarget : true,
		cls : 'go-form-panel',		
		layout:"border",
		items : [{
			region:"north",
			layout:'form',
			labelWidth : 100,
			defaultType : 'textfield',
			autoHeight:true,
			border:false,
			items: items
		},this.emailEditor],
		keys:[{
			key: Ext.EventObject.ENTER,
			ctrl:true,
			fn: function(key, e){
				this.sendMail(false,false);
			},
			scope:this
		}]
	});

	//Set a long timeout for large attachments
	this.formPanel.form.timeout=3000;
	
	var tbar = [this.sendButton = new Ext.Button({
		text : GO.email.lang.send,
		iconCls : 'btn-send',
		tooltip:'CTRL+ENTER',
		handler : function() {
			this.sendMail();
		},
		scope : this
	}), this.saveButton = new Ext.Button({
		iconCls : 'btn-save',
		text : GO.lang.cmdSave,
		handler : function() {
			this.sendMail(true);
		},
		scope : this
	}), {
		text : GO.email.lang.extraOptions,
		iconCls : 'btn-settings',
		menu : this.optionsMenu
	}	, this.showMenuButton = new Ext.Button({
		text : GO.email.lang.show,
		iconCls : 'btn-show',
		menu : this.showMenu
	})];

	tbar.push(this.emailEditor.getAttachmentsButton());

	if (GO.addressbook) {
		
		this.btnAddressbook = new Ext.Button({
			text : GO.addressbook.lang.addressbook,
			iconCls : 'btn-addressbook',
			handler : function() {
				if (!this.addressbookDialog) {
					this.addressbookDialog = new GO.email.AddressbookDialog();
					this.addressbookDialog.on('addrecipients',
						function(fieldName, selections) {
							this.addRecipients(fieldName,selections);
						}, this);
				}

				this.addressbookDialog.show();
			},
			scope : this
		});
		
		tbar.push(this.btnAddressbook);
		
	}

	if(GO.addressbook){
		
		this.templatesStore = new GO.data.JsonStore({
			url : GO.url("addressbook/template/emailSelection"),
			baseParams : {
				'type':"0"
			},
			root : 'results',
			totalProperty : 'total',
			id : 'id',
			fields : ['id', 'name', 'group', 'text','template_id','checked'],
			remoteSort : true
		});
		
		tbar.push(this.templatesBtn = new Ext.Button({

			iconCls:'ml-btn-mailings',
			text:GO.addressbook.lang.emailTemplate,
			menu:this.templatesMenu = new GO.menu.JsonMenu({
				store:this.templatesStore,
				listeners:{
					scope:this,
					itemclick : function(item, e ) {
						if(item.template_id=='default' || item.template_id=='default_for_account'){
							this.templatesStore.baseParams.default_template_id=this.lastLoadParams.template_id;
							this.templatesStore.baseParams.type = item.template_id;
							if (item.template_id=='default_for_account') {
								var fromAccountRecord = this.fromCombo.store.getById(this.fromCombo.getValue());
								this.templatesStore.baseParams.account_id = fromAccountRecord['data']['account_id'];
							}
							this.templatesStore.load();
							delete this.templatesStore.baseParams.default_template_id;
							delete this.templatesStore.baseParams.type;
							delete this.templatesStore.baseParams.account_id;
							var fromComboValue = this.fromCombo.getValue();
							this.fromCombo.store.load();
							this.fromCombo.setValue(fromComboValue);
						}else if(!this.emailEditor.isDirty() || confirm(GO.email.lang.confirmLostChanges))
						{							
							this._changeTemplate(item.template_id);			
						}else
						{
							return false;							
						}
					}
				},
				setChecked: function(template_id) {
					this.store.each(function(record){
						if (record.data['template_id']==template_id) {
							this.store.getById(record.id).set('checked',true);
							this.store.getById(record.id).json.checked = true;
						} else if(record.data['template_id']>=0) {
							this.store.getById(record.id).set('checked',false);
							this.store.getById(record.id).json.checked = false;
						}
					});
					if (!this.rendered)
						this.render();
					this.updateMenuItems();
				}
			})
		}));
	}

	var focusFn = function() {
		this.toCombo.focus();
	};

	GO.email.EmailComposer.superclass.constructor.call(this, {
		title : GO.email.lang.composeEmail,
		width : 750,
		height : 500,
		minWidth : 300,
		minHeight : 200,
		layout : 'fit',
		maximizable : true,
		collapsible : true,
		animCollapse : false,
		//plain : true,
		closeAction : 'hide',
		buttonAlign : 'center',
		focus : focusFn.createDelegate(this),
		tbar : tbar,
		items : this.formPanel
	});

	if (GO.addressbook) {
		this.templatesStore.on('load',function(combo,records){
			if (this.isVisible()) {
				if(!this.emailEditor.isDirty() || confirm(GO.email.lang.confirmLostChanges))
				{
					var recordId = this.templatesStore.findBy( function(record,id){
						return record.data['checked'];
					}, this, 0);
					var template_id = this.templatesStore.getAt(recordId).get('template_id');
					this._changeTemplate(template_id);
				}
			}
		}, this);
	}

	this.addEvents({
		'dialog_ready' :true,
		//		attachmentDblClicked : true,
		//zipOfAttachmentsDblClicked : true,
		'send' : true,
		'reset' : true,
		afterShowAndLoad:true,
		beforesendmail:true

	});
};

Ext.extend(GO.email.EmailComposer, GO.Window, {

	stateId : 'email-composer',
	
	showConfig : {},

	autoSaveTask : {},
	
	lastAutoSave : false,
	
	defaultSendParams : {
		priority : 3,
		notification : 0,
		draft_uid : 0,
		reply_uid : 0,
		reply_mailbox : "",
		in_reply_to : "",
		forward_uid : 0,
		forward_mailbox : ""
	},
	
	sendParams : {},
	
	_checkLoadTemplate : function(cb,newAccountRecord) {
		if (GO.addressbook) {
//			GO.request({
//				url: 'addressbook/template/defaultTemplateId',
//				params:{
//					account_id: newAccountRecord.data['account_id']
//				},
//				success: function(options, response, result)
//				{

			var previousAccountRecord = cb.store.getById(cb.getValue());
			if (this.templatesBtn.disabled == true) {
				//console.log('disable template changing');
				// do not switch template when switching From addres
			} else if (newAccountRecord.get('template_id')!=previousAccountRecord.get('template_id')){
					this.templatesMenu.setChecked(newAccountRecord.get('template_id'));
					if (!this.emailEditor.isDirty() || confirm(GO.email.lang['confirmLostChanges']))
						this._changeTemplate(newAccountRecord.get('template_id'));
			}
			this._setSignature(cb,newAccountRecord);
//				},
//				scope:this
//			});
		} else {
			this._setSignature(cb,newAccountRecord);
		}
	},
	
	_setSignature : function(cb,newAccountRecord) {
		var oldAccountRecord = cb.store.getById(cb.getValue());

		var oldSig = oldAccountRecord.get(this.emailEditor.getContentType()+"_signature");
		var newSig = newAccountRecord.get(this.emailEditor.getContentType()+"_signature");

		var editorValue = this.emailEditor.getActiveEditor().getValue();

		/*
		 *GO returns <br /> but the browse turns this into <br> so replace those
		 */
		if(this.emailEditor.getContentType()=='html'){
			editorValue = editorValue.replace(/<br>/g, '<br />');
			oldSig=oldSig.replace(/<br>/g, '<br />')
			newSig=newSig.replace(/<br>/g, '<br />')
		}
		if(GO.util.empty(oldSig))
		{
			this.addSignature(newAccountRecord);
		}else
		{
			this.emailEditor.getActiveEditor().setValue(editorValue.replace(oldSig,newSig));
		}
	},
	
	addSignature : function(accountRecord){
		accountRecord = accountRecord || this.fromCombo.store.getById(this.fromCombo.getValue());
			
		if(!accountRecord) {
			return false;
		}
		
		var signature_below_reply = accountRecord.get("signature_below_reply");
	
		var sig = accountRecord.get(this.emailEditor.getContentType()+"_signature");
		
		if(!GO.util.empty(sig))
		{
			if(this.emailEditor.getContentType()=='plain')
			{
				sig = "\n"+sig+"\n";
			}else
			{
				sig = '<br /><div id="EmailSignature">'+sig+'</div><br />';
			}
		}
		
		if(signature_below_reply){
			this.emailEditor.getActiveEditor().setValue(this.emailEditor.getActiveEditor().getValue()+sig);
		} else {
			this.emailEditor.getActiveEditor().setValue(sig+this.emailEditor.getActiveEditor().getValue());
		}
	},

	/*
	 *handles ctrl+enter from html editor
	 */
	fireSubmit : function(e) {
		if (e.ctrlKey && Ext.EventObject.ENTER == e.getKey()) {
			//e.stopEvent();
			this.sendMail(false, false);
		}
	},
	
	autoSave : function(){
		if(GO.util.empty(this.sendParams.addresslist_id) && this.lastAutoSave && this.lastAutoSave!=this.emailEditor.getActiveEditor().getValue())
		{
			this.sendMail(true,true);
		}
		this.lastAutoSave=this.emailEditor.getActiveEditor().getValue();
	},
	
	startAutoSave : function(){
		this.lastAutoSave=false;
		Ext.TaskMgr.start(this.autoSaveTask);
	},
	
	stopAutoSave : function(){
		Ext.TaskMgr.stop(this.autoSaveTask);
	},
	
	afterRender : function() {
		GO.email.EmailComposer.superclass.afterRender.call(this);

		this.autoSaveTask={
			run: this.autoSave,
			scope:this,
			interval:120000
		//interval:5000
		};
		
		this.on('hide', this.stopAutoSave, this);
	},

	toComboVisible : true,

	reset : function() {

		this.sendParams = {};
		Ext.apply(this.sendParams, this.defaultSendParams);

//		GO.email.showCCfield = true;
//		GO.email.showBCCfield = false;

		this.showCC(GO.email.showCCfield===1);
		this.showBCC(GO.email.showBCCfield===1);			
		this.ccFieldCheck.setChecked(GO.email.showCCfield);
		this.bccFieldCheck.setChecked(GO.email.showBCCfield);

		if (this.defaultAcccountId) {
			this.fromCombo.setValue(this.defaultAcccountId);
		}
		this.notifyCheck.setChecked(false);
		this.normalPriorityCheck.setChecked(true);

		this.formPanel.form.reset();
		this.emailEditor.reset();
		
		this.fireEvent("reset", this);
	},

	showCC : function(show){
		this.ccCombo.getEl().up('.x-form-item').setDisplayed(show);
		if(show)
		{
			this.ccCombo.onResize();
		}		
		this.doLayout();
	},
	
	showBCC : function(show){
		this.bccCombo.getEl().up('.x-form-item').setDisplayed(show);		
		if(show)
		{
			this.bccCombo.onResize();
		}
		this.doLayout();
	},

	addRecipients : function(fieldName,selections) {
		var field = this.formPanel.form.findField(fieldName);

		var currentVal = field.getValue();
		if (currentVal != '' && currentVal.substring(currentVal.length-1,currentVal.length) != ',' && currentVal.substring(currentVal.length-2,currentVal.length-1)!=',')
			currentVal += ', ';

		currentVal += selections;

		field.setValue(currentVal);

		if (fieldName == 'cc') {
			this.ccFieldCheck.setChecked(true);
		} else if (fieldName == 'bcc') {
			this.bccFieldCheck.setChecked(true);
		}
	},

	initTemplateMenu :  function(config){
		config = config||{};
		
//		if (typeof(config.template_id) == 'undefined' && this.templatesStore){
//			var templateRecordIndex = this.templatesStore.findBy(function(record,id){
//				return record.get('checked');
//			});
//
//			if(templateRecordIndex>-1)
//				config.template_id=this.templatesStore.getAt(templateRecordIndex).get('template_id');
//		}

		//check the right template menu item.
		if(this.templatesStore && this.templatesMenu.items){
			var templateId = config.template_id || this.getDefaultTemplateId();
			var item = this.templatesMenu.items.find(function(item){
				return item.template_id==templateId;
			});
			if(item){
				item.setChecked(true);
			}
		}
		if(GO.addressbook){
			if(config.disableTemplates){
				this.templatesBtn.setDisabled(config.disableTemplates);
			} else {
				this.templatesBtn.setDisabled(false);
			}
		}
		
	},
					
					
	getDefaultTemplateId : function(){
		var fromRecord = this.fromCombo.store.getById(this.fromCombo.getValue());
		if (fromRecord)
			return fromRecord.data['template_id'];
		else
			return null;
	},
	
	initFrom : function(config){
		var index=-1;
		if (config.account_id) {
			index = this.fromCombo.store.findBy(function(record, id){
				return record.get('account_id')==config.account_id;
			});
		}

		//find by e-mail
		if(config.from){
			index = this.fromCombo.store.findBy(function(record, id){
				return record.get('email')==config.from;
			});
		}
		if(index==-1)
		{
			index=0;
		}
		this.fromCombo.setValue(this.fromCombo.store.data.items[index].id);
//		this._checkLoadTemplate(this.fromCombo,this.fromCombo.store.getAt(0));
	},

	show : function(config) {

		Ext.getBody().mask(GO.lang.waitMsgLoad);

		delete this.link_config;

		this.showConfig=config;
		
		if (!this.rendered) {
			
			var requests = {				
				aliases:{r:'email/alias/store','limit':0}
			};
			
			if(GO.addressbook){
				requests.templates={r:'addressbook/template/emailSelection'};
				if (!GO.util.empty(config.account_id))
					requests.templates['account_id'] = config.account_id;
			}
				
			GO.request({
				url: 'core/multiRequest',
				params:{
					requests:Ext.encode(requests)
				},
				success: function(options, response, result)
				{
					this.fromCombo.store.loadData(result.aliases);

					if(this.templatesStore)
						this.templatesStore.loadData(result.templates);              
					
					Ext.getBody().unmask();

					var records = this.fromCombo.store.getRange();
					if (records.length) {
						if (!config.account_id) {
							this.showConfig.account_id = records[0].data.account_id;
						}

						this.render(Ext.getBody());
						this.show(this.showConfig);

						return;

					} else {
						Ext.getBody().unmask();
						Ext.Msg.alert(GO.email.lang.noAccountTitle,
							GO.email.lang.noAccount);
					}
					
				},
				scope:this
			});
			
			//this.htmlEditor.SpellCheck = false;
		} else {

			this.initTemplateMenu(config);
			
			//keep attachments when switchting from text <> html
			this.reset();
			
			//save the mail to a file location
			if(config.saveToPath){
				this.sendParams.save_to_path=config.saveToPath;
				this.sendButton.hide();
			}else
			{
				this.sendButton.show();
			}

			this.initFrom(config);

			if (config.values) {
				this.formPanel.form.setValues(config.values);
			}

			//this will be true when swithing from html to text or vice versa
			if(!config.keepEditingMode)
			{
				//remove attachments if not switching edit mode
				this.emailEditor.setAttachments();				
				this.emailEditor.setContentTypeHtml(GO.email.useHtmlMarkup && !GO.util.isIpad());
				
				this.htmlCheck.setChecked(GO.email.useHtmlMarkup && !GO.util.isIpad(), true);
				if(this.encryptCheck)
					this.encryptCheck.setChecked(false, true);
			}			

			this.toComboVisible = true;
			this.showMenuButton.setDisabled(false);
			this.toCombo.getEl().up('.x-form-item').setDisplayed(true);
			this.sendURL = GO.url('email/message/send');
			this.saveButton.setDisabled(false);
		
			this.notifyCheck.setChecked(GO.email.alwaysRequestNotification);
			
			if(config.move)
			{
				var pos = this.getPosition();
				this.setPagePosition(pos[0]+config.move, pos[1]+config.move);
			}			
			
			// for mailings plugin
			if (config.addresslist_id > 0) {
				this.sendURL = GO.url("addressbook/sentMailing/send");

				if (GO.addressbook) {
					// Disable the addressbook button when creating newsletters
					this.btnAddressbook.setDisabled(true);
				}

				this.toComboVisible = false;
				this.showMenuButton.setDisabled(true);
				this.toCombo.getEl().up('.x-form-item').setDisplayed(false);
				this.showCC(false);
				this.showBCC(false);

				this.sendParams.addresslist_id = config.addresslist_id;
				this.sendParams.campaign_id = config.campaign_id;

				this.saveButton.setDisabled(true);
			}else
			{
				
				if (GO.addressbook) {
					// Enable the addressbook button when not creating newsletters
					this.btnAddressbook.setDisabled(false);
				}
//				this.ccFieldCheck.setChecked(GO.email.showCCfield == '1');
//				this.bccFieldCheck.setChecked(GO.email.showBCCfield == '1');
			}
			
			var params = config.loadParams ? config.loadParams : {
				uid : config.uid,					
				task : config.task,
				mailbox : config.mailbox
			};
			
			//for directly loading a contact in a template
			if(config.contact_id)
				params.contact_id=config.contact_id;
			
			//for directly loading a company in a template
			if(config.company_id)
				params.company_id=config.company_id;

			params.to = this.toCombo.getValue();		
			params.cc = this.ccCombo.getValue();		
			params.bcc = this.bccCombo.getValue();		
			params.subject = this.subjectField.getValue();	
			
			if (config.addresslist_id > 0) {
				// so that template loading won't replace fields
				params.addresslist_id = config.addresslist_id;
			}
			
			
			if(typeof(config.template_id)=='undefined'){
				config.template_id=this.getDefaultTemplateId();
			}

			if (config.uid || config.template_id!='undefined' || config.loadUrl || config.loadParams) {
		
//				if(config.task=='opendraft')
//					this.sendParams.draft_uid = config.uid;
//				
				var fromRecord = this.fromCombo.store.getById(this.fromCombo.getValue());

				
				if (!GO.util.empty(config.account_id))
					params.account_id = config.account_id;
				else
					params.account_id =fromRecord.get('account_id');
				
				params.alias_id=fromRecord.get('id');					
				
				params.template_id=config.template_id;
				
				if(config.addEmailAsAttachmentList) {
					params.addEmailAsAttachmentList = Ext.encode(config.addEmailAsAttachmentList);
				}
				
				var url;
				
				if(!config.task)
					config.task='template';
				
				if(config.loadUrl)
				{
					url = config.loadUrl;
				}else if(config.task=='reply_all'){
					url = GO.url("email/message/reply");				
					params.replyAll=true;
				}else
				{
					url = GO.url("email/message/"+config.task);				
				}

				//sometimes this is somehow copied from the baseparams
				params.content_type = this.emailEditor.getContentType();

				if (typeof(config.values)!='undefined' && typeof(config.values.body)!='undefined')
					params.body = config.values.body;
				
				this.lastLoadUrl = url;
				this.lastLoadParams = params;

				this.formPanel.form.load({
					url : url,
					params : params,
					waitMsg : GO.lang.waitMsgLoad,
					failure:function(form, action)
					{
						Ext.getBody().unmask();
						GO.errorDialog.show(action.result.feedback)
					},
					success : function(form, action) {

						if(action.result.sendParams)
							Ext.apply(this.sendParams, action.result.sendParams);

						this.afterShowAndLoad(config);
						
						if(action.result.data.link_value){
							this.selectLinkField.setValue(action.result.data.link_value);
							this.selectLinkField.setRemoteText(action.result.data.link_text);
						}
						if(action.result.data.account_id) {
							this.lastLoadParams.account_id = action.result.data.account_id
//							this.fromCombo.setValue(this.lastLoadParams.account_id);
						}
						if(action.result.data.alias_id)
							this.lastLoadParams.alias_id = action.result.data.alias_id
						if(action.result.data.template_id) {
							this.lastLoadParams.template_id = action.result.data.template_id
							this.initTemplateMenu(); // set template menu 
//							this.initTemplateMenu({template_id: this.lastLoadParams.template_id}); // set template menu 
						}
							
//						action.result.data.account_id
						
						this.fireEvent('dialog_ready', this);
					},
					scope : this
				});

			}else
			{
				//in case users selects new default template.
				this.lastLoadUrl = GO.url("email/message/template");
				this.lastLoadParams = params;
				this.afterShowAndLoad(config);
				
			}
			if (config.link_config && this.selectLinkField) {
				this.link_config = config.link_config;
				if (config.link_config.modelNameAndId) {
					this.selectLinkField.setValue(config.link_config.modelNameAndId);
					this.selectLinkField.setRemoteText(config.link_config.text);
				}
			}
			
			if (!GO.util.empty(config['delegated_cc_enabled'])) {
				
				GO.request({
					url: 'email/account/loadAddress',
					params: {
						id: config.account_id
					},
					success: function( options, response, result ) {
						var name = result.data['name'];
						var email = result.data['email'];
						this.ccCombo.setValue('"'+name+'" <'+email+'>');
					},
					scope: this
				});
				
			}
				
		}
	},
	
	
	_changeTemplate : function(template_id) {
		if (GO.addressbook && !GO.util.empty(this.lastLoadParams) && this.lastLoadParams.template_id>=0 && this.lastLoadParams.template_id!=template_id) {
			this.lastLoadParams.template_id=template_id;
			this.lastLoadParams.keepHeaders=1;
			this.loadForm(this.lastLoadUrl, this.lastLoadParams);
		}
	},
	
	loadForm : function(url, params){
		
		params.content_type = this.emailEditor.getContentType();
		
//		var ctFieldVal = this.emailEditor.hiddenCtField.getValue();
//		var inlineImgVal = this.emailEditor.hiddenInlineImagesField.getValue();
//		var attachVal = this.emailEditor.hiddenAttachmentsField.getValue(); // remember attachment
		var attachmentmentsData=[];
		var attachments = this.emailEditor.attachmentsView.store.getRange(); 
		for(var i=0;i<attachments.length;i++)
			attachmentmentsData.push(attachments[i].data);
		
		this.formPanel.form.load({
					url : url,
					params : params,
					waitMsg : GO.lang.waitMsgLoad,
					failure:function(form, action)
					{
						Ext.getBody().unmask();
						GO.errorDialog.show(action.result.feedback)
					},
					success : function(form, action) {
						
						this.addSignature();

						if(action.result.sendParams)
							Ext.apply(this.sendParams, action.result.sendParams);
						
						//add existing attachments to result so emailEditor will set this after form load.
						if(action.result.data.attachments)
							attachmentmentsData=attachmentmentsData.concat(action.result.data.attachments);						
						
						action.result.data.attachments=attachmentmentsData;
					},
					scope : this
				});
	},

	
	afterShowAndLoad : function(config){
		
		if(config.task!='opendraft')
			this.addSignature();

		this.startAutoSave();

		this.ccFieldCheck.setChecked(GO.email.showCCfield || this.ccCombo.getValue()!=='');
		this.bccFieldCheck.setChecked(GO.email.showBCCfield || this.bccCombo.getValue()!=='');
	
		if(config.afterLoad)
		{
			if(!config.scope)
				config.scope=this;
			config.afterLoad.call(config.scope);
		}

		Ext.getBody().unmask();
		GO.email.EmailComposer.superclass.show.call(this);


		if (this.toCombo.getValue() == '') {
			this.toCombo.focus();
		} else {
			this.emailEditor.focus();
		}
		
		this.fireEvent('afterShowAndLoad',this);
		
		if(this.selectLinkField){
			this.replaceTemplateLinkTag();
		}
	},
	

	HandleResult : function (btn){
		if (btn == 'yes'){
			//this.htmlEditor.SpellCheck = true;
			this.sendMail();
		}else{
			//this.editor.plugins[1].spellcheck();
		}
	},

	submitForm : function(hide){
		this.sendMail(false, false);
	},

	sendMail : function(draft, autoSave) {
		//prevent double send with ctrl+enter
		if(this.sendButton.disabled){
			return false;
		}		
		
		if(!draft && !autoSave && !this.fireEvent('beforesendmail', this))
			return false;
		
		if(this.emailEditor.attachmentsView.maxSizeExceeded()){
			GO.errorDialog.show(this.emailEditor.attachmentsView.getMaxSizeExceededErrorMsg());
			return false;
		}
		
		this.saveButton.setDisabled(true);
		this.sendButton.setDisabled(true);

		if (autoSave || this.subjectField.getValue() != ''
			|| confirm(GO.email.lang.confirmEmptySubject)) {
			

			// extra sync to make sure all is in there.
			//this.htmlEditor.syncValue();

			var waitMsg=null;
			if(!autoSave){
				waitMsg = draft ? GO.lang.waitMsgSave : GO.email.lang.sending;
			}
			
			//make sure autosave doesn't trigger at the same time we're sending it.
			if(!autoSave && !draft)
				this.stopAutoSave();
			
			var sendUrl = this.sendURL;
			if(this.sendParams.save_to_path)
				sendUrl = GO.url("email/message/saveToFile");
			else if(draft || autoSave)
				sendUrl = GO.url("email/message/save");

			this.formPanel.form.submit({
				url : sendUrl,
				params : this.sendParams,
				waitMsg : waitMsg,
				waitMsgTarget : autoSave ? null : this.formPanel.body,
				success : function(form, action) {
					
					this.saveButton.setDisabled(false);
					this.sendButton.setDisabled(false);
					
					if (action.result.account_id) {
						this.account_id = action.result.account_id;
					}
					
					if(action.result.sendParams)
						Ext.apply(this.sendParams, action.result.sendParams);

					if(!draft && !autoSave)
					{
						if (this.callback) {
							if (!this.scope) {
								this.scope = this;
							}
	
							var callback = this.callback.createDelegate(this.scope);
							callback.call();
						}
	
						if (GO.addressbook && action.result.unknown_recipients
							&& action.result.unknown_recipients.length) {
							if (!GO.email.unknownRecipientsDialog)
								GO.email.unknownRecipientsDialog = new GO.email.UnknownRecipientsDialog();
	
							GO.email.unknownRecipientsDialog.store.loadData({
								recipients : action.result.unknown_recipients
							});
	
							GO.email.unknownRecipientsDialog.show();
						}

						if (this.link_config && this.link_config.callback) {
							this.link_config.callback.call(this);
						}
	
						this.fireEvent('send', this);
					
						this.hide();
					}else
					{	
						this.fireEvent('save', this);
					}
				},

				failure : function(form, action) {
					if(!autoSave)
					{
						var fb = action.result && action.result.feedback ? action.result.feedback : GO.lang.strRequestError;
						
						GO.errorDialog.show(fb);						
					}
					this.saveButton.setDisabled(false);
					this.sendButton.setDisabled(false);
				},
				scope : this

			});
		} else {
			this.subjectField.focus();
			this.saveButton.setDisabled(false);
			this.sendButton.setDisabled(false);
		}
	},

	onShowFieldCheck : function(check, checked) {
		
		switch (check.id) {
			case this.formFieldCheck.id :
				this.fromCombo.getEl().up('.x-form-item').setDisplayed(checked);
				this.doLayout();
				break;

			case this.ccFieldCheck.id :
				this.showCC(checked);				
				break;

			case this.bccFieldCheck.id :
				this.showBCC(checked);
				break;
		}
	},
	
	replaceTemplateLinkTag: function() {

		var editorValue = this.emailEditor.getActiveEditor().getValue();
		var linkValue = '';

		if (!GO.util.empty(this.selectLinkField.getValue())) {
			var linkValue = this.selectLinkField.getRawValue();
			var nValue = this.selectLinkField.getValue();
			
			GO.request({
				url: 'core/createModelUrl',
				params: {
					modelTypeAndKey: nValue
				},
				success: function(response,options,result) {
					var newValue = editorValue.replace(/<span class="go-composer-link">(.*?)<\/span>/g, function(match, contents, offset, s) {
						// onclick="GO.linkHandlers[\''+nParts[0]+'\'].call(this, '+nParts[1]+');"
						return '<span class="go-composer-link"><a href="' + result.url + '">' + linkValue + '</a></span>';
					});

					this.emailEditor.getActiveEditor().setValue(newValue);
				},
				scope: this
			});
		}
	}
});

//GO.email.TemplatesList = function(config) {
//
//	Ext.apply(config);
//	var tpl = new Ext.XTemplate(
//		'<div id="template-0" class="go-item-wrap">'+GO.addressbook.lang.noTemplate+'</div>',
//		'<tpl for=".">',
//		'<div id="template-{id}" class="go-item-wrap"">{name}</div>',
//		'<tpl if="!GO.util.empty(default_template)"><div class="ml-template-default-spacer"></div></tpl>',
//		'</tpl>');
//
//	GO.email.TemplatesList.superclass.constructor.call(this, {
//		store : config.store,
//		tpl : tpl,
//		singleSelect : true,
//		autoHeight : true,
//		overClass : 'go-view-over',
//		itemSelector : 'div.go-item-wrap',
//		selectedClass : 'go-view-selected'
//	});
//}

//Ext.extend(GO.email.TemplatesList, Ext.DataView, {
//	onRender : function(ct, position) {
//		this.el = ct.createChild({
//			tag : 'div',
//			cls : 'go-select-list'
//		});
//
//		GO.email.TemplatesList.superclass.onRender.apply(this,
//			arguments);
//	}
//
//});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: AddressContextMenu.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.email.AddressContextMenu = function(config)
{
	if(!config)
	{
		config = {};
	}
	config['shadow']='frame';
	config['minWidth']=180;
	
	
				
	this.composeButton = new Ext.menu.Item({
		iconCls: 'btn-compose',
		text: GO.email.lang.compose,
		cls: 'x-btn-text-icon',
		handler: function(){

			var values = {
				to: this.address
				};
			this.queryString = decodeURI(this.queryString);
			var pairs = this.queryString.split('&');
			var pair;
			for(var i=0;i<pairs.length;i++){
				pair = pairs[i].split('=');
							
				if(pair.length==2){
					values[pair[0]]=pair[1];
				}
			}
			
			var composerConfig = {
				values : values
			};
			
			//if we're on the e-mail panel use the currently active account.			
			var ep = GO.mainLayout.getModulePanel("email");			
			if(ep && ep.isVisible())
				composerConfig.account_id=ep.account_id;			

			GO.email.showComposer(composerConfig);
		},
		scope: this
	});
	this.searchButton = new Ext.menu.Item({
		iconCls: 'btn-search',
		text: GO.email.lang.searchGO.replace('{product_name}', GO.settings.config.product_name),
		cls: 'x-btn-text-icon',
		handler: function(){
			var searchPanel = new GO.grid.SearchPanel(
			{
				query: this.address
				}
			);
			GO.mainLayout.tabPanel.add(searchPanel);
			searchPanel.show();
		},
		scope: this
	});
				
	this.searchMessagesButton = new Ext.menu.Item({
		iconCls: 'btn-search',
		text: GO.email.lang.searchOnSender,
		cls: 'x-btn-text-icon',
		handler: function(){
			GO.email.searchSender(this.address);
		},
		scope: this
	});
				
	config.items=[this.composeButton,
	this.searchButton,
	this.searchMessagesButton];
	
	if(GO.addressbook)
	{
		this.lookUpButton = new Ext.menu.Item({
			iconCls: 'btn-addressbook',
			text: GO.addressbook.lang.searchOnSender,
			cls: 'x-btn-text-icon',
			handler: function(){
				GO.addressbook.searchSender(this.address, this.personal);
			},
			scope: this
		});
	
		config.items.push(this.lookUpButton);
	}

					
	GO.email.AddressContextMenu.superclass.constructor.call(this, config);	
}

Ext.extend(GO.email.AddressContextMenu, Ext.menu.Menu,{
	personal : '',
	address : '',
	showAt : function(xy, address, personal, queryString)
	{
		this.queryString=queryString || '';
		this.address = address || '';
		this.personal= personal || '';
		
		GO.email.AddressContextMenu.superclass.showAt.call(this, xy);
	}	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: AttachmentContextMenu.js 17572 2014-05-28 13:32:01Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.email.AttachmentContextMenu = function(config)
{
	if(!config)
		config = {};

	config['shadow']='frame';
	config['minWidth']=180;
	
	this.downloadButton = new Ext.menu.Item({
					iconCls: 'btn-download',
					text: GO.lang.download,
					cls: 'x-btn-text-icon',
					handler: function(){						
						GO.email.openAttachment(
							this.attachment,
							this.messagePanel,
							true);
					},
					scope: this
				});
	config.items=[this.downloadButton];
	if(GO.files && !config.removeSaveButton)
	{
		this.saveButton = new Ext.menu.Item({
					iconCls: 'btn-save',
					text: GO.email.lang.saveToPersonal,
					cls: 'x-btn-text-icon',
					handler: function(){
						GO.email.saveAttachment(this.attachment,this.messagePanel);
					},
					scope: this
				});
		config.items.push(this.saveButton);
	
		// Save to item button.
		// Shows the link dialog so you can select an item to add the attachment to.
		this.saveToItemButton = new Ext.menu.Item({
			iconCls: 'btn-save',
			text: GO.email.lang.saveToItem,
			cls: 'x-btn-text-icon',
			handler: function(){

				if(!GO.email.linkAttachmentDialog){
					GO.email.linkAttachmentDialog = new GO.email.LinkAttachmentDialog();
				}

				GO.email.linkAttachmentDialog.show(this.attachment,this.messagePanel);
			},
			scope: this
		});
		config.items.push(this.saveToItemButton);
	}		
	
	GO.email.AttachmentContextMenu.superclass.constructor.call(this, config);	
}

Ext.extend(GO.email.AttachmentContextMenu, Ext.menu.Menu,{
	attachment : false,

	showAt : function(xy, attachment)
	{ 	
		this.attachment = attachment;
		
		GO.email.AttachmentContextMenu.superclass.showAt.call(this, xy);
	}	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: AllAttachmentContextMenu.js 20914 2017-03-07 13:05:13Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.email.AllAttachmentContextMenu = Ext.extend(Ext.menu.Menu, {
	
	messagePanel:false,
	allZipFileUrl:false,
	
	initComponent : function(){
		
		var mnuItems = [];
		
		this.downloadButton = new Ext.menu.Item({
			iconCls: 'btn-download',
			text: GO.email.lang.downloadAllAsZip,
			cls: 'x-btn-text-icon',
			handler: function(){						
				window.open(this.allZipFileUrl);
			},
			scope: this
		});
				
		mnuItems.push(this.downloadButton);
		
		if(GO.files){
			this.saveButton = new Ext.menu.Item({
				iconCls: 'btn-save',
				text: GO.email.lang.saveAllToPersonal,
				cls: 'x-btn-text-icon',
				handler: function(){
					GO.email.saveAllAttachments(this.messagePanel);
				},
				scope: this
			});
			
			mnuItems.push(this.saveButton);

			// Save to item button.
			// Shows the link dialog so you can select an item to add the attachment to.
			this.saveToItemButton = new Ext.menu.Item({
				iconCls: 'btn-save',
				text: GO.email.lang.saveAllToItem,
				cls: 'x-btn-text-icon',
				handler: function(){

					if(!GO.email.linkAttachmentDialog){
						GO.email.linkAttachmentDialog = new GO.email.LinkAttachmentDialog();
					}

					GO.email.linkAttachmentDialog.show(null,this.messagePanel);
				},
				scope: this
			});
			
			mnuItems.push(this.saveToItemButton);
		}
		
		Ext.apply(this, {
			shadow:'frame',
			minWidth:180,
			items: mnuItems			
		});
		
		GO.email.AllAttachmentContextMenu.superclass.initComponent.call(this);	
	},
	
	showAt : function(xy) {
		
		// Reset the value, so we don't get the url of the previous email
		this.allZipFileUrl = false;
		
		if(this.messagePanel){
			// Check if there is a "zip_of_attachments_url" given, if so then enable the downloadButton and set the url
			this.allZipFileUrl = this.messagePanel.data.zip_of_attachments_url;
			this.downloadButton.setVisible(!GO.util.empty(this.allZipFileUrl));
		}
		
		GO.email.AllAttachmentContextMenu.superclass.showAt.call(this,xy);
	}
	
});

GO.email.SettingsPanel = function(config) {
	if (!config) {
		config = {};
	}


	config.autoScroll = true;
	config.border = false;
	config.hideLabel = true;
	config.title = GO.lang.strEmail;
	config.hideMode = 'offsets';
	config.layout = 'form';
	config.bodyStyle = 'padding:5px';
	config.labelWidth=150;
	
	config.items=[{
		xtype:'fieldset',
		title:GO.email.lang.defaultProgram,
		autoHeight:true,		
		html:GO.email.lang.defaultProgramInstructions.replace('{url}', GO.url("email/register/downloadWin7")).replace('{product_name}', GO.settings.config.product_name)
	},
	this.sortBySendMailTime = new Ext.form.Checkbox({
		boxLabel:GO.email.lang.sortAddressesByMailTime,
		hideLabel:true,
		checked:GO.email.sortBySendMailTime,
		name:'sort_email_addresses_by_time'
	}),
	this.useHtml = new Ext.form.Checkbox({
		boxLabel:GO.email.lang.htmlMarkup,
		hideLabel:true,
		checked:GO.email.useHtmlMarkup,
		name:'use_html_markup'
	}),this.showCC = new Ext.form.Checkbox({
		boxLabel:GO.email.lang.showCcByDefault,
		hideLabel:true,
		checked:GO.email.showCCfield,
		name:'email_show_cc'
	}),this.showBCC = new Ext.form.Checkbox({
		boxLabel:GO.email.lang.showBccByDefault,
		hideLabel:true,
		checked:GO.email.showBCCfield,
		name:'email_show_bcc'
	}),this.skipUnknownRecipients = new Ext.form.Checkbox({
		boxLabel:GO.email.lang.skipUnknownRecipients,
		hideLabel:true,
		checked:GO.email.skipUnknownRecipients,
		name:'skip_unknown_recipients'
	}),this.alwaysRequestNotification = new Ext.form.Checkbox({
		boxLabel:GO.email.lang.alwaysRequestNotification,
		hideLabel:true,
		checked:GO.email.alwaysRequestNotification,
		name:'always_request_notification'
	}),this.alwaysRespondToNotifications = new Ext.form.Checkbox({
		boxLabel:GO.email.lang.alwaysRespondToNotifications,
		hideLabel:true,
		checked:GO.email.alwaysRespondToNotifications,
		name:'always_respond_to_notifications'
	}),this.fontSize = new GO.form.ComboBox({
			fieldLabel:GO.email.lang.defaultFontSize,
			name:'font_size',
			store : new Ext.data.SimpleStore({
				fields : ['value'],
				data : [
					['10px'],
					['11px'],
					['12px'],
					['13px'],
					['14px'],
					['15px'],
					['16px'],
					['17px'],
					['18px'],
					['19px'],
					['20px'],
					['21px'],
					['22px'],
					['23px'],
					['24px']
				]
			}),
			width:70,
			value : GO.email.fontSize,
			valueField : 'value',
			displayField : 'value',
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			forceSelection : true

	})];


	GO.email.SettingsPanel.superclass.constructor.call(this, config);
};

Ext.extend(GO.email.SettingsPanel, Ext.Panel, {
	onLoadSettings : function(action) {

	},

	onSaveSettings : function() {
		GO.email.useHtmlMarkup=this.useHtml.getValue();
		GO.email.showCCfield=this.showCcByDefault.getValue();
		GO.email.showBCCfield=this.showBccByDefault.getValue();
		GO.email.skipUnknownRecipients=this.skipUnknownRecipients.getValue();
		GO.email.alwaysRequestNotification=this.alwaysRequestNotification.getValue();
		GO.email.alwaysRespondToNotifications=this.alwaysRespondToNotifications.getValue();
	}

});

GO.mainLayout.onReady(function() {
			GO.moduleManager.addSettingsPanel('email',
					GO.email.SettingsPanel);
		});

GO.email.LinkedMessagePanel = Ext.extend(GO.email.MessagePanel,{
	initComponent : function(){
		this.tbar=[{
					iconCls: 'btn-print',
					text: GO.lang.cmdPrint,
					cls: 'x-btn-text-icon',
					handler: function(){
						this.body.print();
					},
					scope: this
				},
				'-',
				{
					iconCls: 'btn-reply',
					text: GO.email.lang.reply,
					cls: 'x-btn-text-icon',
					handler: function(){
						GO.email.showComposer({
							task:'reply',
							loadParams : {
								is_tmp_file:this.data.is_tmp_file,
								path:this.data.path
							}
						});
					},
					scope: this
				},
				{
					iconCls: 'btn-reply-all',
					text: GO.email.lang.replyAll,
					cls: 'x-btn-text-icon',
					handler: function(){
						GO.email.showComposer({
							task:'reply_all',
							loadParams : {
								is_tmp_file:this.data.is_tmp_file,
								path:this.data.path
							}
						});
					},
					scope: this
				},
				{
					iconCls: 'btn-forward',
					text: GO.email.lang.forward,
					cls: 'x-btn-text-icon',
					handler: function(){						
						GO.email.showComposer({
							task:'forward',
							loadParams : {
								is_tmp_file:this.data.is_tmp_file,
								path:this.data.path
							}
						});
					},
					scope: this
				},
//				{
//					iconCls: 'btn-edit',
//					text: GO.lang.cmdEdit,
//					handler: function(){
//						var composer = GO.email.showComposer({
//							task:'opendraft',
//							loadParams : {
//								is_tmp_file:this.data.is_tmp_file,
//								path:this.data.path
//							},
//							saveToPath:this.data.path
//						});
//						
//						composer.on('hide', this.reload, this, {single:true});
//					},
//					scope: this
//				},
				this.linkButton = new Ext.Button({
					iconCls: 'btn-link',
					text: GO.lang.cmdLink,
					hidden:true,
					handler: function(){
						if(!this.linksDialog)
						{
							this.linksDialog = new GO.dialog.LinksDialog();							
						}

						this.linksDialog.setSingleLink(this.data.id, "GO\\Savemailas\\Model\\LinkedEmail");
						this.linksDialog.show();
								},
					scope: this
				})];

		GO.email.LinkedMessagePanel.superclass.initComponent.call(this);
	},
	border:false,
	autoScroll:true,
	editHandler : function(){
		//needed because it needs to be compatible with javascript/DisplayPanel.js
	},
	loadUrl: '',
	reload : function (){
		this.load(this.lastId, this.lastConfig);	
	},
	load : function(id, config){

	 config = config || {};
	 
	 this.lastConfig=config;
	 this.lastId=id;
		
		if(!this.remoteMessage)
			this.remoteMessage={};

		this.messageId=id;		
		this.remoteMessage.id=this.messageId;

		this.loadUrl = '';
		switch(config.action){
			
			case 'path':
				this.loadUrl=("savemailas/linkedEmail/loadPath");
			break;
			
			case 'attachment':
				this.loadUrl = ("email/message/messageAttachment");
				break;
				
			case 'file':
				this.loadUrl=("savemailas/linkedEmail/loadFile");
				break;
				
			default:
				this.loadUrl=("savemailas/linkedEmail/loadLink");
				
				break;
			
		}

		GO.request({
			maskEl:this.el,
			url: this.loadUrl,
			params: this.remoteMessage,
			scope: this,
			success: function(options, response, data)
			{				
				this.setMessage(data);
				
				
				if(this.data.is_linked_message)
					this.linkButton.show();
				else
					this.linkButton.hide();
			}
		});
	},
	listeners:{
		scope:this,
		linkClicked: function(href){
			var win = window.open(href);
			win.focus();
		},
		attachmentClicked: function(attachment, panel){
			if(attachment.mime=='message/rfc822')
			{
				GO.email.showMessageAttachment(0, {
					action:'path',
					path:attachment.tmp_file,
					isTempFile:true
				});
//			} else if(attachment.extension == 'vcf') {
//			// Not possible at the moment
//				GO.url('/addressbook/contact/handleAttachedVCard')
//				GO.email.readVCard(attachment.url+'&importVCard=1');
			} else {
				window.open(attachment.url);
			}
		}
	}

});



/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 * @version $Id: EmailClient.js 20965 2017-03-20 13:16:43Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */


Ext.namespace("GO.email");

GO.email.EmailClient = function(config){

	if(!config)
	{
		config = {};
	}

	this.messagesStore = new GO.data.JsonStore({
		url: GO.url("email/message/store"),
		root: 'results',
		totalProperty: 'total',
		id: 'uid',
		fields:['uid','icon','deleted','flagged','labels','has_attachments','seen','subject','from','to','sender','size','date', 'x_priority','answered','forwarded','account_id','mailbox','arrival','arrival_time','date_time'],
		remoteSort: true
	});

	this.messagesStore.setDefaultSort('arrival', 'DESC');
	
	this.messagesStore.on('load', function(){

			this.isManager = this.messagesGrid.store.reader.jsonData.permission_level == GO.permissionLevels.manage;

			this.readOnly = this.messagesGrid.store.reader.jsonData.permission_level < GO.permissionLevels.create || this.messagesGrid.store.reader.multipleFolders;
			this._permissionDelegated = this.messagesGrid.store.reader.jsonData.permission_level == GO.email.permissionLevels.delegated;

			this.permissionLevel = this.messagesGrid.store.reader.jsonData.permission_level;
			
			this.deleteButton.setDisabled(this.readOnly);
			this.propertiesButton.setDisabled(!this.isManager);
		}, this);		
		
		

	var messagesAtTop = Ext.state.Manager.get('em-msgs-top');
	if(messagesAtTop)
	{
		messagesAtTop = Ext.decode(messagesAtTop);
	}else
	{
		messagesAtTop =screen.width<1024;
	}

	var deleteConfig = {
		callback:function(){
			if(this.messagePanel.uid && !this.messagesGrid.store.getById(this.messagePanel.uid))
			{
				this.messagePanel.reset();
			}
		},
		scope: this
	};

	this.leftMessagesGrid = new GO.email.MessagesGrid({
		id:'em-pnl-west',
		store:this.messagesStore,
		width: 420,
		region:'west',
		hidden:messagesAtTop,
		deleteConfig : deleteConfig,
		floatable:false,
		header:false,
		collapsible:true,
		collapseMode:'mini',
		split:true
	});
	this.addGridHandlers(this.leftMessagesGrid);

	this.topMessagesGrid = new GO.email.MessagesGrid({
		id:'em-pnl-north',
		store:this.messagesStore,
		height: 250,
		region:'north',
		hidden:!messagesAtTop,
		deleteConfig : deleteConfig,
		floatable:false,
		collapsible:true,
		collapseMode:'mini',
		split:true
	});
	this.addGridHandlers(this.topMessagesGrid);

	if(!this.topMessagesGrid.hidden)
	{
		this.messagesGrid=this.topMessagesGrid;
	}else
	{
		this.messagesGrid=this.leftMessagesGrid;
	}

	//for global access by composers
	GO.email.messagesGrid=this.messagesGrid;


	this.messagesGrid.store.on("beforeload", function()
	{	
		this.messagesGrid.getView().holdPosition = true;

		if(this.messagesGrid.store.baseParams['search'] != undefined)
		{
			GO.email.search_query = this.messagesGrid.store.baseParams['search'];
			this.searchDialog.hasSearch = false;
			delete(this.messagesGrid.store.baseParams['search']);
		}else
		if(this.searchDialog.hasSearch)
		{
			this.messagesGrid.resetSearch();
		}

		if(GO.email.search_query)
		{
			this.searchDialog.hasSearch = false;
			var search_type = (GO.email.search_type)
			? GO.email.search_type : GO.email.search_type_default;

			var query;

			if(search_type=='any'){
				query='OR OR OR FROM "' + GO.email.search_query + '" SUBJECT "' + GO.email.search_query + '" TO "' + GO.email.search_query + '" CC "' + GO.email.search_query + '"';
				
//				query='OR OR FROM "' + GO.email.search_query + '" SUBJECT "' + GO.email.search_query + '" TO "' + GO.email.search_query + '"';
			}else if(search_type=='fts'){
				query='TEXT ' + GO.email.search_query;
			}else
			{
				query=search_type.toUpperCase() + ' "' + GO.email.search_query + '"';
			}

			this.messagesGrid.store.baseParams['query'] = query;
		}else
		if(!this.searchDialog.hasSearch && this.messagesGrid.store.baseParams['query'])
		{
			this.messagesGrid.resetSearch();
			delete(this.messagesGrid.store.baseParams['query']);
			delete(this.messagesGrid.store.baseParams['searchIn']);
		}

	}, this);

	this.messagesGrid.store.on('load',function(){

		var cm = this.topMessagesGrid.getColumnModel();
		var header = this.messagesGrid.store.reader.jsonData.sent || this.messagesGrid.store.reader.jsonData.drafts ? GO.email.lang.to : GO.email.lang.from;
		var header2 = this.messagesGrid.store.reader.jsonData.sent || this.messagesGrid.store.reader.jsonData.drafts ? GO.email.lang.from : GO.email.lang.to;
		cm.setColumnHeader(cm.getIndexById('from'), header);
		cm.setColumnHeader(cm.getIndexById('to'), header2);

		var unseen = this.messagesGrid.store.reader.jsonData.unseen;
		for(var mailbox in unseen)
			this.updateFolderStatus(mailbox,unseen[mailbox]);

		if(this.messagesGrid.store.baseParams['query'] && this.messagesGrid.store.baseParams['query']!='' && this.searchDialog.hasSearch){
			this.resetSearchButton.setVisible(true);
		}else
		{
			this.resetSearchButton.setVisible(false);
		}

//		var selModel = this.treePanel.getSelectionModel();
//		if(!selModel.getSelectedNode())
//		{
//			var node = this.treePanel.getNodeById('folder_'+this.messagesGrid.store.reader.jsonData.mailbox);
//			if(node)
//			{
//				selModel.select(node);
//			}
//		}

		/*
		 *This method is annoying when searching for unread mails
		if(this.messagePanel.uid && !this.messagesGrid.store.getById(this.messagePanel.uid))
		{
			this.messagePanel.reset();
		}*/

		//don't confirm delete to trashfolder
		this.messagesGrid.deleteConfig.noConfirmation=!this.messagesGrid.store.reader.jsonData.deleteConfirm;
	}, this);

	GO.email.saveAsItems = GO.email.saveAsItems || [];

	for(var i=0;i<GO.email.saveAsItems.length;i++)
	{
		GO.email.saveAsItems[i].scope=this;
	}

	var addSendersItems = [{
		text:GO.email.lang.to,
		field:'to',
		handler:this.addSendersTo,
		scope:this
	},{
		text:'CC',
		field:'cc',
		handler:this.addSendersTo,
		scope:this
	},{
		text:'BCC',
		field:'bcc',
		handler:this.addSendersTo,
		scope:this
	}];

	if (GO.addressbook) {
		addSendersItems.push({
			text: GO.addressbook.lang.addresslist,
			cls: 'x-btn-text-icon',
			menu: this.addresslistsMenu = new GO.menu.JsonMenu({
				store: new GO.data.JsonStore({
					url: GO.url("addressbook/addresslist/store"),
					baseParams: {
						permissionLevel: GO.permissionLevels.write,
						forContextMenu: true
					},
					fields: ['addresslist_id', 'text'],
					remoteSort: true
				}),
				listeners:{
					scope:this,
					itemclick : function(item, e ) {
						this.addSendersToAddresslist(item.addresslist_id);
						return false;
					}
				}
			}),
			multiple:true,
			scope: this
		});
	}

	var deleteSendersItems = [];

	if (GO.addressbook) {
		deleteSendersItems.push({
			text: GO.addressbook.lang.addresslist,
			cls: 'x-btn-text-icon',
			menu: this.addresslistsMenu = new GO.menu.JsonMenu({
				store: new GO.data.JsonStore({
					url: GO.url("addressbook/addresslist/store"),
					baseParams: {
						permissionLevel: GO.permissionLevels.write,
						forContextMenu: true
					},
					fields: ['addresslist_id', 'text'],
					remoteSort: true
				}),
				listeners:{
					scope:this,
					itemclick : function(item, e ) {
						this.deleteSendersFromAddresslist(item.addresslist_id);
						return false;
					}
				}
			}),
			multiple:true,
			scope: this
		});
	}

	  var contextItems = [
	  this.contextMenuMarkAsRead = new Ext.menu.Item({
		  text: GO.email.lang.markAsRead,
		  handler: function(){
			  this.flagMessages('Seen', false);
		  },
		  scope:this,
		  multiple:true
	  }),
	  this.contextMenuMarkAsUnread = new Ext.menu.Item({
		  text: GO.email.lang.markAsUnread,
		  handler: function(){
			  this.flagMessages('Seen', true);
		  },
		  scope: this,
		  multiple:true
	  }),
	  this.contextMenuFlag = new Ext.menu.Item({
		  text: GO.email.lang.flag,
		  handler: function(){
			  this.flagMessages('Flagged', false);
		  },
		  scope: this,
		  multiple:true
	  }),
	  this.contextMenuUnflag = new Ext.menu.Item({
		  text: GO.email.lang.unflag,
		  handler: function(){
			  this.flagMessages('Flagged', true);
		  },
		  scope: this,
		  multiple:true
	  }),
	  '-',
	  this.contextMenuSource = new Ext.menu.Item ({
		  text: GO.email.lang.viewSource,
		  handler: function(){

			  var record = this.messagesGrid.selModel.getSelected();
			  if(record)
			  {
				  //var win = window.open(GO.url("email/message/source",{account_id:this.account_id,mailbox:this.mailbox,uid:record.data.uid}));
				  var win = window.open(GO.url("email/message/source",{account_id:this.account_id,mailbox:record.data.mailbox,uid:record.data.uid}));
				  win.focus();
			  }

		  },
		  scope: this
	  }),'-',
	  this.contextMenuCopyTo = new Ext.menu.Item ({
		  iconCls: 'btn-copy',
		  text: GO.email.lang['copyMailTo'],
		  cls: 'x-btn-text-icon',
		  handler: function(a,b,c){
			  var selectedEmails = this.messagesGrid.getSelectionModel().getSelections();
			  this.showCopyMailToDialog(selectedEmails);
		  },
		  scope: this,
		  multiple:true
	  }),
		this.addEmailButton = new Ext.menu.Item({
				iconCls: 'btn-email',
				text: GO.email.lang.addEmailAsAttachment,
				handler: function(){
					var records = this.messagesGrid.selModel.getSelections();
					if(records) {
						
						var addEmailAsAttachmentList = [];
						
						
						Ext.each(records, function(record) {
							addEmailAsAttachmentList.push({
								uid: record.get('uid'), 
								mailbox: record.get('mailbox')
							})
						});
						
						GO.email.showComposer({
							account_id: this.account_id,
							addEmailAsAttachmentList: addEmailAsAttachmentList
						});
					}
				},
				scope:this,
				multiple:true
			}),
		'-',
	  this.contextMenuDelete = new Ext.menu.Item({
		  iconCls: 'btn-delete',
		  text: GO.lang.cmdDelete,
		  cls: 'x-btn-text-icon',
		  handler: function(){
			  this.messagesGrid.deleteSelected();
		  },
		  scope: this,
		  multiple:true
	  }),
		this.contextMoveToSpamFolder = new Ext.menu.Item({
		  
		  text: GO.email.lang.moveToSpamFolder,
		  cls: 'x-btn-text-icon',
		  handler: function(){
				var records = this.messagesGrid.selModel.getSelections();
				if(records) {
						Ext.each(records, function(record) {
								
								
							GO.email.moveToSpam(record.get('uid'), record.get('mailbox'), this.account_id);
							
						}, this);
				}
				
		  },
		  scope: this,
		  multiple:true
	  })
		,'-',{
		  iconCls: 'btn-add',
		  text: GO.email.lang.addSendersTo,
		  cls: 'x-btn-text-icon',
		  menu: {
			  items: addSendersItems
		  },
		  multiple:true
	  },{
		  iconCls: 'btn-delete',
		  text: GO.email.lang.deleteSendersFrom,
		  cls: 'x-btn-text-icon',
		  menu: {
			  items: deleteSendersItems
		  },
		  multiple:true
	  }];

	if(GO.email.saveAsItems && GO.email.saveAsItems.length)
	{
		this.saveAsMenu = new Ext.menu.Menu({
			items:GO.email.saveAsItems
		});

		this.saveAsMenu.on('show', function(menu){
			var sm = this.messagesGrid.getSelectionModel();
			var multiple = sm.getSelections().length>1;
			var none = sm.getSelections().length==0;

			for(var i=0;i<menu.items.getCount();i++)
			{
				var item = menu.items.get(i);
				item.setDisabled(none || (!item.multiple && multiple));
			}
		}, this);

		contextItems.push({
			iconCls: 'btn-save',
			text:GO.lang.cmdSaveAs,
			menu:this.saveAsMenu,
			multiple:true
		});
	}

	this.setCheckStateOnLabelsMenu = function(onload) {
		if (this.labelsContextMenu.store.loaded || onload) {

			var flags = [];

			this.labelsContextMenu.items.each(function(item) {
				flags[item.flag] = item;
				item.setChecked(false);
			});

			var selectedRows = this.messagesGrid.selModel.selections.keys, record;

			Ext.each(selectedRows, function(id) {
				record = this.messagesGrid.store.getById(id);

				Ext.each(record.get('labels'), function(label) {
					if (Ext.isDefined(flags[label.flag])) {
						flags[label.flag].setChecked(true);
					}
				});
			}, this);
		}
	};

	contextItems.push(
		this.contextMenuLabels = new Ext.menu.Item ({
			iconCls: 'btn-labels',
			text: GO.email.lang.labels,
			menu: this.labelsContextMenu = new GO.menu.JsonMenu({
				id: 'email-messages-labels-menu',
				store: new GO.data.JsonStore({
					url: GO.url("email/label/store"),
					baseParams: {
						account_id: 0,
						forContextMenu: true
					},
					fields: ['flag', 'text'],
					remoteSort: true			
				}),
				listeners:{
					scope:this,
					load: function() {
						this.setCheckStateOnLabelsMenu();
					},

					beforeshow: function() {
						var isDefined = Ext.isDefined(this.labelsContextMenu.store.baseParams.account_id) && this.labelsContextMenu.store.baseParams.account_id !== null;
						if (!isDefined || (isDefined && this.labelsContextMenu.store.baseParams.account_id != this.messagesStore.baseParams.account_id)) {
							this.labelsContextMenu.store.loaded = true; //hack - ignore initial store load
							this.labelsContextMenu.store.baseParams.account_id = this.messagesStore.baseParams.account_id;
							this.labelsContextMenu.store.load();
						}
					},

					show: function() {
						this.setCheckStateOnLabelsMenu();
					},

					itemclick : function(item, e) {
						this.flagMessages(item.flag, item.checked);
						if (this.messagePanel.uid) {
							this.messagePanel.loadMessage();
						}
						var recs = this.messagesGrid.getSelectionModel().getSelections();
						
						Ext.each(recs, function (rec) {
							var isRemovet = false;
							for(var i=0; i<rec.data.labels.length; i++) {
								 var label = rec.data.labels[i];

								 if(label.flag == item.flag) {
									 rec.data.labels.splice(i);
									 isRemovet = true;
								 }
							}

							if(!isRemovet) {
								rec.data.labels.push(item);
							}
						})
					}
				}
			}),
			multiple:true
		})
	);
	
	

	this.gridContextMenu = new GO.menu.RecordsContextMenu({
		shadow: "frame",
		minWidth: 180,
		items: contextItems
	});

	
	this.gridContextMenu.on("show", function(){
		this.contextMenuMarkAsUnread.setDisabled(this.permissionLevel<GO.permissionLevels.create);
		this.contextMenuMarkAsRead.setDisabled(this.permissionLevel<GO.email.permissionLevels.delegated);

		this.contextMenuFlag.setDisabled(this.permissionLevel<GO.email.permissionLevels.delegated);
		this.contextMenuUnflag.setDisabled(this.permissionLevel<GO.email.permissionLevels.delegated);

		this.contextMenuDelete.setDisabled(this.readOnly);
	}, this);
	
	this.gridReadOnlyContextMenu = new GO.menu.RecordsContextMenu({
		shadow: "frame",
		minWidth: 180,
		items: [
		  new Ext.menu.Item ({
		  text: GO.email.lang.viewSource,
		  handler: function(){

			  var record = this.messagesGrid.selModel.getSelected();
			  if(record)
			  {
				  //var win = window.open(GO.url("email/message/source",{account_id:this.account_id,mailbox:this.mailbox,uid:record.data.uid}));
				  var win = window.open(GO.url("email/message/source",{account_id:this.account_id,mailbox:record.data.mailbox,uid:record.data.uid}));
				  win.focus();
			  }

		  },
		  scope: this
	  }),
		  '-',
		 new Ext.menu.Item ({
		  iconCls: 'btn-copy',
		  text: GO.email.lang['copyMailTo'],
		  cls: 'x-btn-text-icon',
		  handler: function(a,b,c){
			  var selectedEmails = this.messagesGrid.getSelectionModel().getSelections();
			  this.showCopyMailToDialog(selectedEmails);
		  },
		  scope: this,
		  multiple:true
	  })
		]
	});

	GO.email.treePanel = this.treePanel = new GO.email.AccountsTree({
		id:'email-tree-panel',
		region:'west',
		mainPanel:this
	});




	//select the first inbox to be displayed in the messages grid
	this.treePanel.getRootNode().on('load', function(node)
	{
		this.body.unmask();
		if(node.childNodes[0])
		{
			var firstAccountNode=false;

//			this.updateNotificationEl();

			for(var i=0;i<node.childNodes.length;i++){
				firstAccountNode = node.childNodes[i];

				if(firstAccountNode.expanded){

					firstAccountNode.on('load', function(node){

						if(node.childNodes[0])
						{
							//don't know why but it doesn't work without a 10ms delay.
							this.treePanel.getSelectionModel().select.defer(10,this.treePanel.getSelectionModel(), [node.childNodes[0]]);


//							var firstInboxNode = node.childNodes[0];
//							this.setAccount(
//								firstInboxNode.attributes.account_id,
//								firstInboxNode.attributes.mailbox,
//								firstInboxNode.parentNode.attributes.usage
//								);
						//if(!this.checkMailStarted)
						//this.checkMail.defer(this.checkMailInterval, this);
						}
					},this, {
						single: true
					});
					break;
				}
			}


		}
	}, this);

//	this.treePanel.on('beforeclick', function(node){
//		if(node.attributes.mailbox==0)
//			return false;
//	}, this);



	this.treePanel.getSelectionModel().on('selectionchange', function(sm, node)	{
//		if(node.attributes.mailbox>0)
//		{
			if(node){
				var usage='';

				var inboxNode =this.treePanel.findInboxNode(node);
				if(inboxNode)
					usage=inboxNode.attributes.usage;

				this.setAccount(
					node.attributes.account_id,
					node.attributes.mailbox,
					usage
					);

		// Commented out the lines below because this sometimes hides the label tag
//				var labelsColumnIndex = this.messagesGrid.getColumnModel().getIndexById('labels');
//				if (!this.messagesGrid.getColumnModel().isHidden(labelsColumnIndex) && !node.attributes.permittedFlags) {
//					this.messagesGrid.getColumnModel().setHidden(labelsColumnIndex, true);
//				}				
			}
//		}
	}, this);

	this.treePanel.on('click',function(node){
		var selectedNode = this.treePanel.getSelectionModel().getSelectedNode();



		


		if(selectedNode && node.id==selectedNode.id){
			var usage='';

				var inboxNode =this.treePanel.findInboxNode(node);
				if(inboxNode)
					usage=inboxNode.attributes.usage;

			this.setAccount(
				node.attributes.account_id,
				node.attributes.mailbox,
				usage
				);
		}
	}, this);

	this.searchDialog = new GO.email.SearchDialog({
		store:this.messagesGrid.store
	});

	this.settingsMenu = new Ext.menu.Menu({
		items:[{
			iconCls: 'btn-accounts',
			text: GO.email.lang.accounts,
			cls: 'x-btn-text-icon',
			handler: function(){
				this.showAccountsDialog();
			},
			scope: this
		},{
			iconCls:'btn-toggle-window',
			text: GO.email.lang.toggleWindowPosition,
			cls: 'x-btn-text-icon',
			handler: function(){
				this.moveGrid();
			},
			scope: this
		}
		]
	});

	if(GO.gnupg)
	{
		this.settingsMenu.add('-');
		this.settingsMenu.add({
			iconCls:'gpg-btn-settings',
			cls: 'x-btn-text-icon',
			text:GO.gnupg.lang.encryptionSettings,
			handler:function(){
				if(!this.securityDialog)
				{
					this.securityDialog = new GO.gnupg.SecurityDialog();
				}
				this.securityDialog.show();
			},
			scope:this
		});
	}

	var tbar =[{
				xtype:'htmlcomponent',
			html:GO.email.lang.name,
			cls:'go-module-title-tbar'
		},this.composerButton = new Ext.Button({
		iconCls: 'btn-compose',
		text: GO.email.lang['compose'],
		cls: 'x-btn-text-icon',
		handler: function(){

			GO.email.showComposer({
				account_id: this.account_id
			});
		},
		scope: this
	}),this.deleteButton = new Ext.Button({
		iconCls: 'btn-delete',
		text: GO.lang.cmdDelete,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.messagesGrid.deleteSelected();
			this.messagesGrid.expand();
		},
		scope: this
	}),new Ext.Toolbar.Separator(),
	// This button goes to the settings of the account that is selected in the tree
	this.propertiesButton = new Ext.Button({
		iconCls: 'btn-edit',
		text: GO.lang['strProperties'],
		handler:function(a,b){
			if(!this.accountDialog){
				this.accountDialog = new GO.email.AccountDialog();
				this.accountDialog.on('save', function(){
					GO.mainLayout.getModulePanel("email").refresh();
				}, this);
			}
			this.accountDialog.show(this.account_id);
		},
		scope:this
	}),
	new Ext.Toolbar.Separator(),
	{
		iconCls: 'btn-settings',
		text:GO.lang.administration,
		menu: this.settingsMenu
	},{
		iconCls: 'btn-refresh',
		text: GO.lang.cmdRefresh,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.refresh(true);
		},
		scope: this
	},
	{
		iconCls: 'btn-search',
		text: GO.lang.strSearch,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.searchDialog.show();
		},
		scope: this
	},
	this.resetSearchButton = new Ext.Button({
		iconCls: 'btn-delete',
		text: GO.email.lang.resetSearch,
		cls: 'x-btn-text-icon',
		hidden:true,
		handler: function(){
			this.searchDialog.hasSearch = false;
			this.messagesGrid.store.baseParams['query']='';
			this.messagesGrid.store.baseParams['searchIn']='';
			this.messagesGrid.store.load({
				params:{
					start:0
				}
			});
		},
		scope: this
	})
	,
	'-',
	this.replyButton=new Ext.Button({
		disabled:true,
		iconCls: 'btn-reply',
		text: GO.email.lang.reply,
		cls: 'x-btn-text-icon',
		handler: function(){

			if (!this._permissionDelegated) {
				GO.email.showComposer({
					uid: this.messagePanel.uid,
					task: 'reply',
					mailbox: this.messagePanel.mailbox,
					account_id: this.account_id
				});
			} else {
				GO.email.showComposer({
					uid: this.messagePanel.uid,
					task: 'reply',
					mailbox: this.messagePanel.mailbox,
					account_id: this.account_id,
					delegated_cc_enabled: true
				});
			}
		},
		scope: this
	}),this.replyAllButton=new Ext.Button({
		disabled:true,
		iconCls: 'btn-reply-all',
		text: GO.email.lang.replyAll,
		cls: 'x-btn-text-icon',
		handler: function(){
			GO.email.showComposer({
				uid: this.messagePanel.uid,
				task: 'reply_all',
				mailbox: this.messagePanel.mailbox,
				account_id: this.account_id
			});
		},
		scope: this
	}),this.forwardButton=new Ext.Button({
		disabled:'true',
		iconCls: 'btn-forward',
		text: GO.email.lang.forward,
		cls: 'x-btn-text-icon',
		handler: function(){
			if (!this._permissionDelegated) {
				GO.email.showComposer({
					uid: this.messagePanel.uid,
					task: 'forward',
					mailbox: this.messagePanel.mailbox,
					account_id: this.account_id
				});
			} else {
				GO.email.showComposer({
					uid: this.messagePanel.uid,
					task: 'forward',
					mailbox: this.messagePanel.mailbox,
					account_id: this.account_id,
					delegated_cc_enabled: true
				});
			}
		},
		scope: this
	}),

	this.printButton = new Ext.Button({
		disabled: true,
		iconCls: 'btn-print',
		text: GO.lang.cmdPrint,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.messagePanel.body.print();
		},
		scope: this
	})];


	if(GO.email.saveAsItems && GO.email.saveAsItems.length)
	{
		tbar.push({
			iconCls: 'btn-save',
			text:GO.lang.cmdSaveAs,
			menu:this.saveAsMenu
		});
	}

	tbar.push(new Ext.Toolbar.Separator());


	tbar.push(this.closeMessageButton = new Ext.Button({
		hidden:true,
		iconCls: 'btn-close',
		text: GO.lang.cmdClose,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.messagesGrid.expand();

		},
		scope: this
	}));


	config.layout='border';
	config.tbar=new Ext.Toolbar({
		cls:'go-head-tb',
		items: tbar
	});

	this.messagePanel = new GO.email.MessagePanel({
		id:'email-message-panel',
		region:'center',
		autoScroll:true,
		titlebar: false,
		border:true,
		attachmentContextMenu: new GO.email.AttachmentContextMenu()
	});

	config.items=[
	this.treePanel,
	{
		region:'center',
		titlebar: false,
		layout:'border',
		items: [
		this.messagePanel,
		this.topMessagesGrid,
		this.leftMessagesGrid
		]
	}];
	

	this.messagePanel.on('load', function(options, success, response, data, password){
		if(!success)
		{
			this.messagePanel.uid=0;
		}else
		{
			this.messagePanel.do_not_mark_as_read = 0;
			if(!GO.util.empty(data.do_not_mark_as_read))
				this.messagePanel.do_not_mark_as_read = data.do_not_mark_as_read;
			//this.messagePanel.uid=record.data['uid'];	
			
			
			this.replyAllButton.setDisabled(this.readOnly && !this._permissionDelegated);
			this.replyButton.setDisabled(this.readOnly && !this._permissionDelegated);
			this.forwardButton.setDisabled(this.readOnly && !this._permissionDelegated);
			this.printButton.setDisabled(this.readOnly && !this._permissionDelegated);

			var record = this.messagesGrid.store.getById(this.messagePanel.uid);

			if(!record.data.seen && data.notification)
			{
				if(GO.email.alwaysRespondToNotifications || confirm(GO.email.lang.sendNotification.replace('%s', data.notification)))
				{
					GO.request({
						url: "email/message/notification",
						params: {
							account_id: this.messagePanel.account_id,
							message_to:data.to_string,
							notification_to: data.notification,
							subject: data.subject
						}
					});
				}
			}
		}

	}, this);

	this.messagePanel.on('reset', function(){
		this.replyAllButton.setDisabled(true);
		this.replyButton.setDisabled(true);
		this.forwardButton.setDisabled(true);
		this.printButton.setDisabled(true);
	}, this);


//	this.messagePanel.on('linkClicked', function(href){
//		var win = window.open(href);
//		win.focus();
//	}, this);

	this.messagePanel.on('attachmentClicked', GO.email.openAttachment, this);
	//this.messagePanel.on('zipOfAttachmentsClicked', this.openZipOfAttachments, this);


	/*this.messagePanel.on('emailClicked', function(email){
	this.showComposer({to: email});
  }, this);*/

	/*
   * for email seaching on sender from message panel
   */
	GO.email.searchSender=function(sender)
	{
		if(this.rendered)
		{
			GO.email.search_type = 'from';
			this.messagesGrid.showUnreadButton.toggle(false, true);
			this.messagesGrid.store.baseParams['search'] = sender;
			GO.email.messagesGrid.store.baseParams['unread']=0;
			this.messagesGrid.setSearchFields('from', sender);

			this.messagesGrid.store.load({
				params:{
					start:0
				}
			});

			if(GO.mainLayout.tabPanel)
				GO.mainLayout.tabPanel.setActiveTab(this.id);
		}else
		{
			alert(GO.email.lang.loadEmailFirst);
		}
	}
	GO.email.searchSender = GO.email.searchSender.createDelegate(this);

	GO.email.EmailClient.superclass.constructor.call(this, config);
	
	GO.email.emailClient = this;
};

Ext.extend(GO.email.EmailClient, Ext.Panel,{

	_permissionDelegated : false,

	moveGrid : function(){
		if(this.topMessagesGrid.isVisible())
		{
			this.messagesGrid=this.leftMessagesGrid;
			this.topMessagesGrid.hide();

		}else
		{
			this.messagesGrid=this.topMessagesGrid;
			this.leftMessagesGrid.hide();
		}
		//this.messagesGridContainer.add(this.messagesGrid);
		this.messagesGrid.show();
		this.messagesGrid.ownerCt.doLayout();

		Ext.state.Manager.set('em-msgs-top', Ext.encode(this.topMessagesGrid.isVisible()));
	},

	addGridHandlers : function(grid)
	{
		grid.on("rowcontextmenu", function(grid, rowIndex, e) {
			var coords = e.getXY();

			var selectedMailboxFolder = this.treePanel.getSelectionModel().getSelectedNode();
			// show the labels context menu when
			this.contextMenuLabels.setVisible(selectedMailboxFolder.attributes.permittedFlags || selectedMailboxFolder.attributes.isAccount);

			if(this.messagesGrid.store.reader.jsonData.permission_level <= GO.permissionLevels.read || this.messagesGrid.store.reader.jsonData.multipleFolders)
			  this.gridReadOnlyContextMenu.showAt([coords[0], coords[1]], grid.getSelectionModel().getSelections());
			else
			  this.gridContextMenu.showAt([coords[0], coords[1]], grid.getSelectionModel().getSelections());
		},this);

		grid.on('collapse', function(){
			this.closeMessageButton.setVisible(true);
		}, this);

		grid.on('expand', function(){
			this.closeMessageButton.setVisible(false);
		}, this);

		grid.on("rowdblclick", function(){
			if(this.messagesGrid.store.reader.jsonData.drafts || this.messagesGrid.store.reader.jsonData.sent)
			{
				GO.email.showComposer({
					uid: this.messagePanel.uid,
					task: 'opendraft',
					template_id: 0,
					mailbox: this.mailbox,
					account_id: this.account_id
				});
			}else
			{
				this.messagePanel.popup();
				//this.messagesGrid.collapse();
			}
		}, this);

		//this.messagesGrid.getSelectionModel().on("rowselect",function(sm, rowIndex, r){
		grid.on("delayedrowselect",function(grid, rowIndex, r){
			if(r.data['uid']!=this.messagePanel.uid)
			{
				//this.messagePanel.uid=r.data['uid'];
				//this.messagePanel.loadMessage(r.data.uid, this.mailbox, this.account_id);
				this.messagePanel.loadMessage(r.data.uid, r.data['mailbox'], this.account_id);

				if(!r.data.seen && this.messagesGrid.store.reader.jsonData.permission_level > GO.permissionLevels.read){
					//set read with 2 sec delay.
					//this.markAsRead.defer(2000, this, [r.data.uid, this.mailbox, this.account_id]);
					this.markAsRead.defer(2000, this, [r.data.uid, r.data['mailbox'], this.account_id]);
				}
			}
		}, this);
	},

	markAsRead : function(uid, mailbox, account_id){
		if(this.messagePanel.uid==uid && this.messagePanel.mailbox==mailbox && this.messagePanel.account_id==account_id && !this.messagePanel.do_not_mark_as_read){
				GO.request({
				url: "email/message/setFlag",
				params: {
					account_id: account_id,
					mailbox: mailbox,
					flag: "Seen",
					clear: 0,
					messages: Ext.encode([uid])
				},
				success: function(options, response,result)
				{
					var record = this.messagesGrid.store.getById(uid);
					if(record){
						record.set("seen", 1);
						record.commit();
					}

					this.updateFolderStatus(this.mailbox, result.unseen);

				},
				scope:this
			});
		}
	},

	afterRender : function(){
		GO.email.EmailClient.superclass.afterRender.call(this);

//		GO.email.notificationEl.setDisplayed(false);

		this.body.mask(GO.lang.waitMsgLoad);
	},

	onShow : function(){

//		GO.email.notificationEl.setDisplayed(false);

		GO.email.EmailClient.superclass.onShow.call(this);
	},

//	updateNotificationEl : function(){
//		var node = this.treePanel.getRootNode();
//
//		GO.email.totalUnseen=0;
//		for(var i=0;i<node.childNodes.length;i++)
//		{
//			GO.email.totalUnseen += node.childNodes[i].attributes.inbox_new;
//		}
//
//	},

	showComposer : function(values)
	{
		GO.email.showComposer(
		{
			account_id: this.account_id,
			values : values
		});
	},

	setAccount : function(account_id,mailbox, usage)
	{
		if(account_id!=this.account_id || this.mailbox!=mailbox)
		{
			this.messagePanel.reset();
			this.messagesGrid.getSelectionModel().clearSelections();
			this.messagesGrid.getView( ).scrollToTop();
		}

		this.messagesGrid.expand();
		
		this.account_id = account_id;
		this.mailbox = mailbox;

		//messagesPanel.setTitle(mailbox);
		this.messagesGrid.store.baseParams['task']='messages';
		this.messagesGrid.store.baseParams['account_id']=account_id;
		this.messagesGrid.store.baseParams['mailbox']=mailbox;
		this.messagesGrid.store.load({
			params:{
				start:0
			}
		});
		//this.messagesGrid.store.load();

		this.treePanel.setUsage(usage);
	},

	getFolderNodeId : function (account_id, mailbox){

		return GO.util.Base64.encode("f_"+account_id+"_"+mailbox);
	},
	/**
	 * Returns true if the current folder needs to be refreshed in the grid
	 */
	updateFolderStatus : function(mailbox, unseen, account_id)
	{
		if(!account_id)
			account_id=this.messagesGrid.store.baseParams.account_id;
		var nodeId = this.getFolderNodeId(account_id, mailbox);
		var statusElId = "status_"+nodeId;
		var statusEl = Ext.get(statusElId);



//		var node = this.treePanel.getNodeById('folder_'+mailbox);
//		if(node && node.attributes.mailbox=='INBOX')
//		{
//			node.parentNode.attributes.inbox_new=unseen;
//		}

		if(statusEl && statusEl.dom)
		{
			var node = this.treePanel.getNodeById(nodeId);

			if(unseen)
				node.getUI().addClass('ml-folder-unseen');
			else
				node.getUI().removeClass('ml-folder-unseen');

			var statusText = statusEl.dom.innerHTML;
			var current = statusText=='' ? 0 : parseInt(statusText.substring(1, statusText.length-1));

			if(current != unseen)
			{
				if(unseen>0)
				{
					statusEl.dom.innerHTML = "("+unseen+")";
				}else
				{
					statusEl.dom.innerHTML = "";
				}
				return true;
			}
		}
		return false;
	},

	incrementFolderStatus : function(mailbox, increment)
	{
		var statusElId = "status_"+this.getFolderNodeId(this.account_id, mailbox);
		var statusEl = Ext.get(statusElId);

		var statusText = statusEl.dom.innerHTML;

		var status = 0;
		if(statusText!='')
		{
			status = parseInt(statusText.substring(1, statusText.length-1));
		}
		status+=increment;

//		GO.email.totalUnseen+=increment;

		this.updateFolderStatus(mailbox, status);
//		this.updateNotificationEl();
	},




	refresh : function(refresh)
	{
		if(refresh)
			this.treePanel.loader.baseParams.refresh=true;

		this.treePanel.root.reload();
		this.messagesStore.removeAll();

		if(refresh)
			delete this.treePanel.loader.baseParams.refresh;
	},

	showAccountsDialog : function()
	{
		if(!this.accountsDialog)
		{
			this.accountsDialog = new GO.email.AccountsDialog();
			this.accountsDialog.accountsGrid.accountDialog.on('save', function(dialog, result){
				if(result.refreshNeeded){
					this.refresh();
				}
			}, this);

			this.accountsDialog.accountsGrid.on('delete', function(){
				this.refresh();
				if(GO.emailportlet)
					GO.emailportlet.foldersStore.load();
			}, this);
		}
		this.accountsDialog.show();
	},

	showCopyMailToDialog : function(selectedEmailMessages) {
		if (!this._copyMailToDialog) {
			this._copyMailToDialog = new GO.email.CopyMailToDialog();
			this._copyMailToDialog.on('copy_email',function(){
				this.messagesGrid.store.reload();
			},this);
		}

		this._copyMailToDialog.show(selectedEmailMessages);
	},

	flagMessages : function (flag, clear){
		var selectedRows = this.messagesGrid.selModel.selections.keys;

		if(selectedRows.length)
		{

			GO.request({
				url: "email/message/setFlag",
				maskEl:this.getEl(),
				params: {
					account_id: this.account_id,
					mailbox: this.mailbox,
					flag: flag,
					clear: clear ? 1 : 0,
					messages: Ext.encode(selectedRows)
				},
				success: function(options, response,result)
				{
					var field;
					var value;

					var records = this.messagesGrid.selModel.getSelections();

					switch(flag)
					{
						case 'Seen':
							field='seen';
							value=!clear;

//							for(var i=0;i<records.length;i++){
//								if(records[i].get('seen')!=clear)
//									GO.email.totalUnseen-=clear;
//							}

							break;
						case 'Flagged':
							field='flagged';
							value=!clear;
							break;
					}


					for(var i=0;i<records.length;i++)
					{
						records[i].set(field, value);
						records[i].commit();
					}

					this.updateFolderStatus(this.mailbox, result.unseen);
//					this.updateNotificationEl();


				},
				scope:this
			});

		}
	},

	addSendersTo : function(menuItem){
		var records = this.messagesGrid.getSelectionModel().getSelections();

		var emails=[];
		for(var i=0;i<records.length;i++)
		{
			emails.push('"'+records[i].get('from')+'" <'+records[i].get('sender')+'>');
		}

		var activeComposer=false;
		if(GO.email.composers)
		{
			for(var i=GO.email.composers.length-1;i>=0;i--)
			{
				if(GO.email.composers[i].isVisible())
				{
					activeComposer=GO.email.composers[i];
					break;
				}
			}
		}

		if(activeComposer)
		{
			var f = activeComposer.formPanel.form.findField(menuItem.field);
			var v = f.getValue();
			if(v!='')
			{
				v+=', ';
			}
			v+=emails.join(', ');
			f.setValue(v);
			activeComposer.focus();
		}else
		{
			var config={
				values:{}
			}
			config.values[menuItem.field]=emails.join(', ');
			GO.email.showComposer(config);
		}
	},

	addSendersToAddresslist : function(addresslistId) {
		var records = this.messagesGrid.getSelectionModel().getSelections();
		var senderNames = new Array();
		var senderEmails = new Array();
		for (var i=0;i<records.length;i++) {
			senderNames.push(records[i].data.from);
			senderEmails.push(records[i].data.sender);
		}

		Ext.Ajax.request({
			url: GO.url('addressbook/addresslist/addContactsToAddresslist'),
			params: {
				senderNames: Ext.encode(senderNames),
				senderEmails: Ext.encode(senderEmails),
				addresslistId: addresslistId
			},
			callback: function(options, success, response)
			{
				if(!success)
				{
					Ext.MessageBox.alert(GO.lang.strError, response.result.errors);
				}else
				{
					var responseParams = Ext.decode(response.responseText);
					if(responseParams.success)
					{
						Ext.MessageBox.alert(GO.lang['strSuccess'],GO.addressbook.lang['addContactsSuccess'].replace('%i',responseParams['addedSenders']));
					}else
					{
						if (!GO.util.empty(responseParams.unknownSenders)) {

							if (!this.unknownRecipientsDialogForAddresslist) {
								this.unknownRecipientsDialogForAddresslist = new GO.email.UnknownRecipientsDialog();
								this.unknownRecipientsDialogForAddresslist.on('hide',function(){
									if (!GO.util.empty(this.unknownRecipientsDialogForAddresslist.addresslistId))
										delete this.unknownRecipientsDialogForAddresslist.addresslistId;
								},this);
							}

							this.unknownRecipientsDialogForAddresslist.store.loadData({
								recipients : Ext.decode(responseParams.unknownSenders)
							});

							this.unknownRecipientsDialogForAddresslist.addresslistId = addresslistId;

							this.unknownRecipientsDialogForAddresslist.show({
								title : GO.email.lang.addUnknownSenders,
								descriptionText : GO.email.lang.addUnknownSendersText,
								disableSkipUnknownCheckbox : true
							});

						} else {
							Ext.MessageBox.alert(GO.lang.strError,responseParams.feedback);
						}
					}
				}
			},
			scope: this
		});
	},

	deleteSendersFromAddresslist : function(addresslistId) {
		if (GO.addressbook) {
			var records = this.messagesGrid.getSelectionModel().getSelections();
			var senderEmails = new Array();
			for (var i=0;i<records.length;i++) {
				senderEmails.push(records[i].data.sender);
			}

			Ext.Ajax.request({
				url: GO.url('addressbook/addresslist/deleteContactsFromAddresslist'),
				params: {
					senderEmails: Ext.encode(senderEmails),
					addresslistId: addresslistId
				},
				callback: function(options, success, response)
				{
					var responseData = Ext.decode(response.responseText);
					if(!success) {
						Ext.MessageBox.alert(GO.lang.strError, responseData.feedback);
					} else {
						Ext.MessageBox.alert(GO.lang.strSuccess, GO.addressbook.lang['nRemovedFromAddresslist'].replace('%n',responseData.nRemoved));
					}
				},
				scope: this
			});
		}
	}
});

GO.mainLayout.onReady(function(){
	//GO.email.Composer = new GO.email.EmailComposer();

	//contextmenu when an e-mail address is clicked
	GO.email.addressContextMenu=new GO.email.AddressContextMenu();

	GO.email.search_type_default = localStorage && localStorage.email_search_type  ? localStorage.email_search_type : 'any';




	//GO.checker is not available in some screens like accept invitation from calendar
	if(true){
		//create notify icon
//		var notificationArea = Ext.get('notification-area');
//		if(notificationArea)
//		{
//			GO.email.notificationEl = notificationArea.createChild({
//				id: 'ml-notify',
//				tag:'a',
//				href:'#',
//				style:'display:none'
//			});
//			GO.email.notificationEl.on('click', function(){
//				GO.mainLayout.openModule('email');
//			}, this);
//		}

			//register a new request to the checker. It will poll unseen tickets every two minutes
		GO.checker.registerRequest("email/account/checkUnseen",{},function(checker, result, data){

				var ep = GO.mainLayout.getModulePanel('email');

			//	var totalUnseen = result.email_status.total_unseen;
				if(ep){
					for(var i=0;i<result.email_status.unseen.length;i++)
					{
						var s = result.email_status.unseen[i];

						var changed = ep.updateFolderStatus(s.mailbox, s.unseen,s.account_id);
						if(changed && ep.messagesGrid.store.baseParams.mailbox==s.mailbox && ep.messagesGrid.store.baseParams.account_id==s.account_id)
						{
							ep.messagesGrid.store.reload();
						}
					}
				}

				if(result.email_status.has_new)
				{
					data.getParams={
						unseenEmails:result.email_status.total_unseen
					}

//					if(!ep || !ep.isVisible()){
//						GO.email.notificationEl.setDisplayed(true);

						data.popup=true;

						if(GO.util.empty(GO.settings.mute_new_mail_sound))
							data.alarm=true;
//					}

					//GO.email.notificationEl.update(result.email_status.total_unseen);


				}

				GO.mainLayout.setNotification('email',result.email_status.total_unseen,'green');
		});



	}
});

GO.email.aliasesStore = new GO.data.JsonStore({
	url: GO.url("email/alias/store"),
	baseParams:{limit:0},
	fields: ['id','account_id', 'from', 'name','email','html_signature', 'plain_signature','template_id','signature_below_reply'],
	remoteSort: true
});

// Save all attachments of the given email panel to a selected GO folder
GO.email.saveAllAttachments = function(panel){
	
	if(!this.selectFolderDialog){
		
		this.selectFolderDialog = new GO.files.SelectFolderDialog({
			handler:function(fs, path, selectedFolderNode){
				GO.request({
					url: 'email/message/saveAllAttachments',
					params:{
						uid: panel.uid,
						mailbox: panel.mailbox,
						account_id: panel.account_id,
						folder_id: selectedFolderNode.attributes.id
					},
					success: function(options, response, result){
						// Successfully saved all attachments
					},
					scope:this
				});
			}
		});
	}

	this.selectFolderDialog.show();
};

GO.email.saveAttachment = function(attachment,panel)
	{
		if(!GO.files.saveAsDialog)
		{
			GO.files.saveAsDialog = new GO.files.SaveAsDialog();
		}
		GO.files.saveAsDialog.show({
			folder_id : 0,
			filename: attachment.name,
			handler:function(dialog, folder_id, filename){

				GO.request({
					maskEl:dialog.el,
					url: 'email/message/saveAttachment',
					params:{
						//task:'save_attachment',
						uid: panel.uid,
						mailbox: panel.mailbox,
						number: attachment.number,
						encoding: attachment.encoding,
						type: attachment.type,
						subtype: attachment.subtype,
						account_id: panel.account_id,
						uuencoded_partnumber: attachment.uuencoded_partnumber,
						folder_id: folder_id,
						filename: filename,
						tmp_file: attachment.tmp_file ? attachment.tmp_file : 0,
						charset:attachment.charset,
						sender:panel.data.sender,
						filepath:panel.data.path//smime message are cached on disk
					},
					success: function(options, response, result)
					{
						dialog.hide();
					},
					scope:this
				});
			},
			scope:this
		});
	}

GO.email.openAttachment = function(attachment, panel, forceDownload)
	{
		if(!panel)
			return false;

		if(!attachment)
			return false;

		var params = {
			action:'attachment',
			account_id: panel.account_id,
			mailbox: panel.mailbox,
			uid: panel.uid,
			number: attachment.number,
			uuencoded_partnumber: attachment.uuencoded_partnumber,
			encoding: attachment.encoding,
			type: attachment.type,
			subtype: attachment.subtype,
			filename:attachment.name,
			charset:attachment.charset,
			sender:panel.data.sender, //for gnupg and smime,
			filepath:panel.data.path ? panel.data.path : '' //In some cases encrypted messages are temporary stored on disk so the handlers must use that to fetch the data.
		}

		var url_params = '?';
		for(var name in params){
			url_params+= name+'='+encodeURIComponent(params[name])+'&';
		}
		url_params = url_params.substring(0,url_params.length-1);

		if(!forceDownload && attachment.mime=='message/rfc822')
		{
			GO.email.showMessageAttachment(0, params);
		}else
		{
			switch(attachment.extension)
			{
				case 'png':
				case 'bmp':
				case 'png':
				case 'gif':
				case 'jpg':
				case 'jpeg':

					if(GO.files && !forceDownload)
					{
						if(!this.imageViewer)
						{
							this.imageViewer = new GO.files.ImageViewer({
								closeAction:'hide'
							});
						}

						var index = 0;
						var images = Array();
						if(panel)
						{
							for (var i = 0; i < panel.data.attachments.length;  i++)
							{
								var r = panel.data.attachments[i];
								var ext = GO.util.getFileExtension(r.name);

								if(ext=='jpg' || ext=='png' || ext=='gif' || ext=='bmp' || ext=='jpeg')
								{
									images.push({
										name: r.name,
										src: r.url+'&inline=0'
									});
								}
								if(r.name==attachment.name)
								{
									index=images.length-1;
								}
							}
							this.imageViewer.show(images, index);
							break;
						}
					}

				default:
					if(forceDownload)
						attachment.url+='&inline=0';
					if (attachment.extension!='vcf'||forceDownload)
						window.open(attachment.url);
					break;
			}
		}
	};




/**
 * Function that will open an email composer. If a composer is already open it will create a new one. Otherwise it will reuse an already created one.
 */
GO.email.showComposer = function(config){

	config = config || {};

	GO.email.composers = GO.email.composers || [];

	var availableComposer;

	for(var i=0;i<GO.email.composers.length;i++)
	{
		if(!GO.email.composers[i].isVisible())
		{
			availableComposer=GO.email.composers[i];
			break;
		}
	}


	if(!availableComposer)
	{
		config.move=30*GO.email.composers.length;

		availableComposer = new GO.email.EmailComposer();
		availableComposer.on('send', function(composer){
			if(composer.sendParams.reply_uid && composer.sendParams.reply_uid>0)
			{
				var record = GO.email.messagesGrid.store.getById(composer.sendParams.reply_uid);
				if(record)
				{
					record.set('answered',true);
				}
			}

			if(composer.sendParams.forward_uid && composer.sendParams.forward_uid>0)
			{
				var record = GO.email.messagesGrid.store.getById(composer.sendParams.forward_uid);
				if(record)
				{
					record.set('forwarded',true);
				}
			}

			if(GO.email.messagesGrid && GO.email.messagesGrid.store.loaded && (GO.email.messagesGrid.store.reader.jsonData.sent || (GO.email.messagesGrid.store.reader.jsonData.drafts && composer.sendParams.draft_uid && composer.sendParams.draft_uid>0)))
			{
				GO.email.messagesGrid.store.reload();
			}
		});

		availableComposer.on('save', function(composer){

			if(GO.email.messagesGrid && GO.email.messagesGrid.store.loaded && GO.email.messagesGrid.store.reader.jsonData.drafts)
			{
				GO.email.messagesGrid.store.reload();
			}
		});


		GO.email.composers.push(availableComposer);
	}

	availableComposer.show(config);

	return availableComposer;
}

GO.email.extraTreeContextMenuItems = [];

GO.moduleManager.addModule('email', GO.email.EmailClient, {
	title : GO.lang.strEmail,
	iconCls : 'go-tab-icon-email'
});

GO.quickAddPanel.addButton(new Ext.Button({
		iconCls:'img-email-add',
		cls: 'x-btn-icon',
		tooltip:GO.email.lang.email,
		handler: function(){
			GO.email.showComposer();
		},
		scope: this
	}),0);


GO.email.showAddressMenu = function(e, email, name)
{
	var e = Ext.EventObject.setEvent(e);
	e.preventDefault();
	GO.email.addressContextMenu.showAt(e.getXY(), email, name);
}

GO.newMenuItems.push({
	itemId : 'email',
	text: GO.email.lang.email,
	iconCls: 'go-model-icon-GO_Email_Model_ImapMessage',
	handler:function(item, e){
		var taskShowConfig = GO.email.getTaskShowConfig(item);

//		if(GO.settings.modules.savemailas.read_permission)
//			taskShowConfig.values.subject='[id:'+item.parentMenu.link_config.modelNameAndId+'] ';

		GO.email.showComposer(taskShowConfig);
	}
},{
	itemId : 'email-files',
	text: GO.email.lang.emailFiles,
	iconCls: 'em-btn-email-files',
	handler:function(item, e){
		var panel = item.parentMenu.panel;

		if (panel.model_name == 'GO\\Files\\Model\\File') {
			GO.request({
				url:'files/file/display',
				maskEl:panel.ownerCt.getEl(),
				params:{
					id: panel.data.id
				},
				success:function(response, options, result){
					GO.email.emailFiles(result.data.path, this);
				},
				scope: this
			});
		} else {
			GO.request({
				url:'files/folder/checkModelFolder',
				maskEl:panel.ownerCt.getEl(),
				params:{
					mustExist:false,
					model: panel.model_name,
					id: panel.data.id
				},
				success:function(response, options, result){
					GO.email.openFolderTree(result.files_folder_id, 0, this);
				},
				scope: this
			});
		}
	}
});

GO.email.getTaskShowConfig = function(item) {

	var taskShowConfig = {};

	if (Ext.isDefined(item)) {

		if(item.itemId && item.parentMenu.showConfigs && item.parentMenu.showConfigs[item.itemId]){
			taskShowConfig = item.parentMenu.showConfigs[item.itemId];
		}else{
			taskShowConfig = item.parentMenu.taskShowConfig || {};
		}
		taskShowConfig.link_config=item.parentMenu.link_config
	}

	taskShowConfig.values={};

	if (Ext.isDefined(item)) {

		taskShowConfig.values={};
		if(typeof(item.parentMenu.panel)!='undefined' && typeof(item.parentMenu.panel.data.email)!='undefined'){
			var to='';
			if(item.parentMenu.panel.data.full_name){
				to='"'+item.parentMenu.panel.data.full_name+'" <'+item.parentMenu.panel.data.email+'>';
			}else if(item.parentMenu.panel.data.name){
				to='"'+item.parentMenu.panel.data.name+'" <'+item.parentMenu.panel.data.email+'>';
			}

			taskShowConfig.values.to=to;
		}
	}

	return taskShowConfig;
}
//files is array of relative paths
GO.email.emailFiles = function(files, item) {
	if (!Ext.isArray(files)) {
		files = new Array(files);
	}

	var composerConfig = GO.email.getTaskShowConfig(item);

	var c = GO.email.showComposer(composerConfig);

	c.on('dialog_ready', function(){
		c.emailEditor.attachmentsView.afterUpload({
			addFileStorageFiles: Ext.encode(files)
		});
	},this,{single:true});
}

GO.email.openFolderTree = function(id, folder_id, referenceItem) {

	if (!GO.email.treeFileBrowser) {
		GO.email.treeFileBrowser = new GO.Window({
			title: GO.files.lang.fileBrowser,
			height:500,
			width:400,
			layout:'fit',
			border:false,
			maximizable:true,
			collapsible:true,
			closeAction:'hide',
			items: [
				GO.email.folderTree = new GO.files.TreeFilePanel()
			],
			listeners:{
				show:function(){
					this.btnSelectAll.toggle(false);
				},
				scope:this
			},
			tbar: new Ext.Toolbar({
				cls:'go-head-tb',
				region:'north',
				items:[{
					iconCls: 'btn-refresh',
					text: GO.lang.cmdRefresh,
					cls: 'x-btn-text-icon',
					handler: function() {
						GO.email.folderTree.getRootNode().reload()
						this.btnSelectAll.toggle(false);
					},
					scope: this
				},
				this.btnSelectAll = new Ext.Button({
					iconCls: 'btn-select-all',
					text: GO.lang.selectAll,
					cls: 'x-btn-text-icon',
					enableToggle: true,
					pressed: false,
					toggleHandler: function(btn, state) {
						GO.email.folderTree.getRootNode().cascade(function(n) {
							n.getUI().toggleCheck(state);
						});
					},
					scope: this
				})
				]
			}),
			buttons:[{
				text: GO.lang['cmdOk'],
				handler: function(){

					var selFiles = new Array();
					var selNodes = GO.email.folderTree.getChecked();

					Ext.each(selNodes, function(node) {
						selFiles.push(node.attributes.path);
					});

					GO.email.emailFiles(
						selFiles,
						this.treeFileBrowser.referenceItem
					);
					GO.email.treeFileBrowser.hide();
				},
				scope:this
			}]
		});
	}

	GO.email.folderTree.getLoader().baseParams.root_folder_id=id;
	GO.email.folderTree.getLoader().baseParams.expand_folder_id=folder_id;
	GO.email.folderTree.getRootNode().reload({
		callback:function(){
			delete GO.email.folderTree.getLoader().baseParams.expand_folder_id;
		},
		scope:this
	});

	if (!referenceItem)
		referenceItem = {};

	GO.email.treeFileBrowser.referenceItem = referenceItem;
	GO.email.treeFileBrowser.show();
}

GO.email.showMessageAttachment = function(id, remoteMessage){

	if(!GO.email.linkedMessagePanel){
		GO.email.linkedMessagePanel = new GO.email.LinkedMessagePanel();

		GO.email.linkedMessageWin = new GO.Window({
			maximizable:true,
			collapsible:true,
			stateId:'em-linked-message-panel',
			title: GO.email.lang.emailMessage,
			height: 500,
			width: 800,
			closeAction:'hide',
			layout:'fit',
			items: GO.email.linkedMessagePanel
		});
	}

	if(!remoteMessage)
		remoteMessage={};

	GO.email.linkedMessagePanel.remoteMessage=remoteMessage;
	GO.email.linkedMessageWin.show();
	GO.email.linkedMessagePanel.load(id, remoteMessage);
}


GO.email.showAttendanceWindow=function(event_id){
	if(!GO.email.attendanceWindow){
		GO.email.attendanceWindow = new GO.calendar.AttendanceWindow ();
	}
	GO.email.attendanceWindow.show(event_id);
}


GO.email.moveToSpam = function(mailUid,mailboxName,fromAccountId) {
	Ext.Msg.show({
		title: GO.email.lang.moveToSpamTitle,
		icon: Ext.MessageBox.QUESTION,
		msg: GO.email.lang.moveToSpamMsg,
		buttons: Ext.Msg.YESNO,
		fn: function(btn) {
			if (btn=='yes') {
				GO.request({
					url: 'email/message/moveToSpam',
					params: {
						account_id: fromAccountId,
						from_mailbox_name: mailboxName,
						mail_uid: mailUid
					},
					success: function() {
						GO.email.emailClient.topMessagesGrid.store.load();
						GO.email.emailClient.leftMessagesGrid.store.load();
					},
					failure: function(response,options,result) {
						console.log(response);
						console.log(options);
						console.log(result);
					}
				});
			}
		},
		scope : this
	});
}

GO.email.moveToInbox = function(mailUid,fromAccountId) {
	Ext.Msg.show({
		title: GO.email.lang.moveToInboxTitle,
		icon: Ext.MessageBox.QUESTION,
		msg: GO.email.lang.moveToInboxMsg,
		buttons: Ext.Msg.YESNO,
		fn: function(btn) {
			if (btn=='yes') {
				GO.request({
					url: 'email/message/moveToInbox',
					params: {
						account_id: fromAccountId,
						mail_uid: mailUid
					},
					success: function() {
						GO.email.emailClient.topMessagesGrid.store.load();
						GO.email.emailClient.leftMessagesGrid.store.load();
					},
					failure: function(response,options,result) {
						console.log(response);
						console.log(options);
						console.log(result);
					}
				});
			}
		},
		scope : this
	});
}

GO.email.ContactsGrid = function(config){

	if(!config)
	{
		config = {};
	}

	config.layout='fit';
	config.autoScroll=true;
	config.split=true;	
	config.paging=true;
	config.border=false;

  if(!config.store)
	config.store = new GO.data.JsonStore({
		url : GO.url("addressbook/contact/searchEmail"),
		id : 'email',
		fields : ['id', 'name',  'email', 'ab_name', 'company_name', "function","department"],
		remoteSort : true
	});

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true,
			css : 'white-space:normal;'
		},
		columns : [{
			header : GO.lang['strName'],
			dataIndex : 'name'			
		}, {
			header : GO.lang['strEmail'],
			dataIndex : 'email'			
		},{
			header : GO.lang.strCompany,
			dataIndex : 'company_name',
			css : 'white-space:normal;',
			sortable : true
		},{
			header : GO.addressbook.lang.addressbook,
			dataIndex : 'ab_name',
			css : 'white-space:normal;',
			sortable : false
		},{
			header : GO.lang.strDepartment,
			dataIndex : 'department'
		},{
			header : GO.lang.strFunction,
			dataIndex : 'function'
		}]
	});
	config.cm=columnModel;

	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang.pleaseEnterQuery,
		deferEmptyText: false
	});
	

	
	config.sm=new Ext.grid.RowSelectionModel({
		singleSelect:config.singleSelect
	});
	
	
	this.contactsSearchField = new GO.form.SearchField({
		store : config.store,
		width : 320
	});
	
	this.contactsSearchField.on("search", function(){
		this.getView().emptyText=GO.lang['strNoItems'];
	}, this);
	
	this.contactsSearchField.on("reset", function(){
		this.getView().emptyText=GO.lang.pleaseEnterQuery;
		this.store.removeAll();
		//cancel store load
		return false;
	}, this);
	
	

	config.tbar=[GO.lang['strSearch'] + ': ', ' ', this.contactsSearchField];

	GO.email.ContactsGrid.superclass.constructor.call(this, config);

};

Ext.extend(GO.email.ContactsGrid, GO.grid.GridPanel,{

	});

GO.email.FindContactDialog = function(config) {

	if (!config) {
		config = {};
	}
    
	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=600;
	config.height=400;
	config.closeAction='hide';
	config.title=GO.addressbook.lang.contacts;

	this.contactsGrid = new GO.email.ContactsGrid({
		singleSelect:true,
		store: new GO.data.JsonStore({
		  url : GO.url("addressbook/contact/store"),
		  id : 'wemail',
		  fields : ['id', 'name',  'email', 'ab_name', 'company_name', "function","department"],
		  remoteSort : true
		})
	});
	config.items=[this.contactsGrid];


	GO.email.FindContactDialog.superclass.constructor.call(this, config);

	this.contactsGrid.on('rowdblclick', function(grid, rowIndex)
	{
		var record = grid.getStore().getAt(rowIndex);
		this.mergeEmail(record.data.id);
	}, this);

	this.addEvents({
		'email_merged' : true
	});

}
Ext.extend(GO.email.FindContactDialog, Ext.Window, {

	email : '',
	replace_email : '',
	contact_id : 0,
    
	show : function(record) {
	
		if (!this.rendered) {
			this.render(Ext.getBody());
		}

		this.email = record.email;

		if(record.first_name != record.email)
		{
			var query = record.first_name + ' ' + record.middle_name + ' ' + record.last_name;
			this.contactsGrid.contactsSearchField.setValue(query);
			this.contactsGrid.store.baseParams.query=query;
		}
	
		this.contactsGrid.store.reload();
			
		GO.email.FindContactDialog.superclass.show.call(this);
	},

	mergeEmail : function(contact_id)
	{
		if(contact_id)
		{
			this.contact_id = contact_id;
		}
	
		Ext.Ajax.request({
	    url: GO.url('addressbook/contact/mergeEmailWithContact'),
			params: {
				contact_id: this.contact_id,
				email: this.email,
				replace_email: this.replace_email
			},
			callback: function(options, success, response)
			{
				var data = Ext.decode(response.responseText);

				this.replace_email = '';

				if(data.success)
				{
					if(data.addresses && data.contact_name)
					{
						this.showReplaceDialog(data.addresses, data.contact_name);
					}else
					{
						alert(GO.addressbook.lang.emailAdded);
						this.fireEvent('email_merged',contact_id);
						this.hide();
					}
				} else if(data.feedback) {
					alert(data.feedback);
				}
			},
			scope: this
		});
	},

	showReplaceDialog : function(addresses, contact_name)
	{
		if(!GO.email.replaceEmailDialog)
		{
			GO.email.replaceEmailDialog = new GO.email.ReplaceEmailDialog();

			GO.email.replaceEmailDialog.on('replace', function(e, email)
			{	
				this.replace_email = email;
		
				this.mergeEmail();
			},this)
		}
	
		GO.email.replaceEmailDialog.store.loadData(
		{
			addresses : addresses
		});

		GO.email.replaceEmailDialog.setTitle(GO.addressbook.lang.contact + ': '+ contact_name);

		GO.email.replaceEmailDialog.show();	
	}

});


GO.email.ReplaceEmailDialog = function(config) {

    if (!config) {
	config = {};
    }

    config.layout='fit';
    config.modal=true;
    config.resizable=false;
    config.width=400;
    config.height=200;
    config.closeAction='hide';
    config.title=GO.addressbook.lang.contact;
 
    this.store = new GO.data.JsonStore({
	root: 'addresses',
	fields:['name']
    });

    this.list = new GO.grid.SimpleSelectList({
	store: this.store
    });

    this.list.on('click', function(dataview, index)
    {
	var record = dataview.store.data.items[index];

	this.fireEvent('replace', this, record.data.name);
	this.hide();
    }, this);
    
    config.items= new Ext.Panel({
	autoScroll:true,
	items: [
	new Ext.Panel({
	    border: false,
	    html: GO.email.lang.replaceEmailText
	}),
	this.list
	],
	cls: 'go-form-panel'
    });

    GO.email.ReplaceEmailDialog.superclass.constructor.call(this, config);

    this.addEvents({
	'replace' : true
    });

}
Ext.extend(GO.email.ReplaceEmailDialog, Ext.Window);

GO.email.MessageDialog = function(config){	
	
	if(!config)
	{
		config={};
	}

	this.messagePanel = new GO.email.MessagePanel({
		autoScroll:true,
		attachmentContextMenu: new GO.email.AttachmentContextMenu()
	});

	this.toolbar =[
	this.replyButton=new Ext.Button({
		disabled:false,
		iconCls: 'btn-reply',
		text: GO.email.lang.reply,
		cls: 'x-btn-text-icon',
		handler: function(){

			GO.email.showComposer({
				uid: this.messagePanel.uid,
				task: 'reply',
				mailbox: this.messagePanel.mailbox,
				account_id: this.messagePanel.account_id
			});
		},
		scope: this
	}),this.replyAllButton=new Ext.Button({
		disabled:false,
		iconCls: 'btn-reply-all',
		text: GO.email.lang.replyAll,
		cls: 'x-btn-text-icon',
		handler: function(){
			GO.email.showComposer({
				uid: this.messagePanel.uid,
				task: 'reply_all',
				mailbox: this.messagePanel.mailbox,
				account_id: this.messagePanel.account_id

			});
		},
		scope: this
	}),this.forwardButton=new Ext.Button({
		disabled:false,
		iconCls: 'btn-forward',
		text: GO.email.lang.forward,
		cls: 'x-btn-text-icon',
		handler: function(){
			GO.email.showComposer({
				uid: this.messagePanel.uid,
				task: 'forward',
				mailbox: this.messagePanel.mailbox,
				account_id: this.messagePanel.account_id
			});
		},
		scope: this
	}),

	this.printButton = new Ext.Button({
		disabled: false,
		iconCls: 'btn-print',
		text: GO.lang.cmdPrint,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.messagePanel.body.print();
		},
		scope: this
	})];
	
	config.layout='fit';
	config.title=GO.email.lang.message;
	config.stateId='email-message-dialog';
	config.maximizable=true;
	config.collapsible=true;
	config.modal=false;
	config.width=600;
	config.height=500;
	config.resizable=true;
	config.minizable=true;
//	config.closeAction='hide';	
	config.items=this.messagePanel;
	config.tbar=this.toolbar;
	config.buttons=[{	
		text: GO.lang['cmdClose'],
		handler: function()
		{
			this.hide();
		},
		scope:this
	}];
	
	GO.email.MessageDialog.superclass.constructor.call(this, config);
}

Ext.extend(GO.email.MessageDialog, Ext.Window,{
	closeAction:'hide',	
	
	showData : function(data){
		GO.email.MessageDialog.superclass.show.call(this);
		
		this.messagePanel.setData(data);
	},
		
	show : function(uid, mailbox, account_id, no_max_body_size)
	{
		if(!this.rendered)
			this.render(Ext.getBody());

		this.messagePanel.loadMessage(uid, mailbox, account_id, false, no_max_body_size);
				
		GO.email.MessageDialog.superclass.show.call(this);
	}
});

GO.email.showMessageDialog = function(uid,mailbox,account_id,no_max_body_size) {
	
	// no_max_body must be boolean. If true, the email body is not truncated when
	// it exceeds the maximum size.
	
	if (!GO.email.messageDialog){
		GO.email.messageDialog = new GO.email.MessageDialog();
		GO.email.messageDialog.messagePanel.on('attachmentClicked', GO.email.openAttachment, this);
	}

	GO.email.messageDialog.show(uid,mailbox,account_id,no_max_body_size);
	
}

GO.email.ImapAclDialog = Ext.extend(GO.Window, {

	initComponent : function(){

		this.grid = new GO.grid.GridPanel({
			store:new GO.data.JsonStore({
				url: GO.url("email/folder/aclStore"),
				baseParams: {
					mailbox:"",
					account_id:0
				},
				root: 'results',
				id: 'identifier',
				fields:['identifier','permissions']
			}),
			cm: new Ext.grid.ColumnModel({
				defaults:{
					sortable:false
				},
				columns:[
				{
					header:GO.lang.strUser,
					dataIndex: 'identifier'
				},{
					header: GO.lang.strPermissions,
					dataIndex: 'permissions'
				}]
			}),
			view: new Ext.grid.GridView({
				autoFill: true,
				forceFit: true,
				emptyText: GO.lang['strNoItems']
			}),
			loadMask:true,
			tbar: [{
				iconCls: 'btn-add',
				text: GO.lang.cmdAdd,
				cls: 'x-btn-text-icon',
				handler: function(){
					this.showUserDialog();
				},
				scope: this
			},{
				iconCls: 'btn-delete',
				text: GO.lang.cmdDelete,
				cls: 'x-btn-text-icon',
				handler: function(){
					this.grid.deleteSelected();
				},
				scope:this
			}],
			listeners:{
				rowdblclick:function(grid, rowIndex){
					var record = grid.getStore().getAt(rowIndex);
					this.showUserDialog(record);
				},
				scope:this
			}
		});

		Ext.apply(this, {
			width:500,
			height:400,
			title:GO.email.lang.shareFolder,
			layout:'fit',
			items:[this.grid],
			buttons:[{
				text : GO.lang['cmdClose'],
				handler : function() {
					this.hide();
				},
				scope : this
			}]
		});
		GO.email.ImapAclDialog.superclass.initComponent.call(this);
	},

	setParams : function(account_id, mailbox, mailboxtext){
		this.grid.store.baseParams.account_id=account_id;
		this.grid.store.baseParams.mailbox=mailbox;
		this.grid.store.load();

		this.setTitle(GO.email.lang.shareFolder+": "+mailboxtext);
	},

	showUserDialog : function(record){

		if(!this.userDialog){
			this.userDialog = new GO.email.ImapAclUserDialog({
				listeners:{
					scope:this,
					save:function(){
						this.grid.store.load();
					}
				}
			});
		}		
		this.userDialog.show();
		this.userDialog.setData(this.grid.store.baseParams.mailbox, this.grid.store.baseParams.account_id, record);

	}

});

GO.email.ImapAclUserDialog = Ext.extend(GO.Window, {

	initComponent : function(){

		this.formPanel = new Ext.form.FormPanel({
			autoHeight:true,
			waitMsgTarget : true,
			url : GO.url("email/folder/setAcl"),
			border : false,
			baseParams : {
				account_id : 0,
				mailbox:''
			},
			cls : 'go-form-panel',
			items : [new GO.form.ComboBox({
					xtype:'textfield',
					fieldLabel:GO.lang.strUsername,
					name:'identifier',
					anchor:'100%',
					displayField: 'username',		
					valueField: 'username',
					triggerAction: 'all',
					selectOnFocus:true,					
					pageSize: parseInt(GO.settings['max_rows_list']),
					store: new GO.data.JsonStore({
						url: GO.url("email/account/usernames"),
						id: 'username',
						fields:['username','email'],
						remoteSort: true
					})
			}),{
				xtype:'checkboxgroup',
				fieldLabel:GO.lang.strPermissions,				
				anchor:'100%',
				columns:1,
				items:[{
						boxLabel:GO.email.lang.readPerm,
						name:'read',
						checked:true
				},{
						boxLabel:GO.email.lang.writePerm,
						name:'write'
				},{
						boxLabel:GO.email.lang.deletePerm,
						name:'delete'
				},{
						boxLabel:GO.email.lang.createMailboxPerm,
						name:'createmailbox'
				},{
						boxLabel:GO.email.lang.deleteMailboxPerm,
						name:'deletemailbox'
				},{
						boxLabel:GO.email.lang.adminPerm,
						name:'admin'
				}
				]
			}]
			
		});


		Ext.apply(this, {
			width:400,
			autoHeight:true,
			title:GO.email.lang.shareFolder,
			items:[this.formPanel],
			buttons:[{
				text : GO.lang['cmdOk'],
				handler : function() {
					this.submitForm();
				},
				scope : this
			},{
				text : GO.lang['cmdClose'],
				handler : function() {
					this.hide();
				},
				scope : this
			}]
		});
		GO.email.ImapAclDialog.superclass.initComponent.call(this);
		this.addEvents({
			save:true
		});
	},

	focus : function(){
		var f = this.formPanel.form.findField('identifier');
		f.focus();
	},
	
	setData : function(mailbox, account_id, record){
		this.formPanel.baseParams.mailbox=mailbox;
		this.formPanel.baseParams.account_id=account_id;

		var f = this.formPanel.form.findField('identifier');
		
		if(record){
			this.formPanel.form.setValues(record.json);			
			f.setDisabled(true);
			this.formPanel.baseParams.identifier=f.getValue();
		}else{
			this.formPanel.form.reset();
			delete this.formPanel.baseParams.identifier;
			f.setDisabled(false);
			f.focus();
		}
	},


	submitForm : function(hide) {
		this.formPanel.form.submit({
			url : GO.url("email/folder/setAcl"),
			waitMsg : GO.lang['waitMsgSave'],
			success : function(form, action) {

				this.fireEvent('save', this);
				this.hide();
			},
			failure : function(form, action) {
				if (action.failureType == 'client') {
					Ext.MessageBox.alert(GO.lang['strError'],
						GO.lang['strErrorsInForm']);
				} else {
					Ext.MessageBox.alert(GO.lang['strError'],
						action.result.feedback);
				}
			},
			scope : this
		});
	}

});

GO.email.MoveOldMailDialog = function(config){
	
	if(!config)
	{
		config={};
	}

	this.buildForm();

	config.layout='fit';
	config.title=GO.email.lang.moveOldMails;
	//	config.stateId='email-message-dialog';
	config.maximizable=true;
	config.modal=false;
	config.width=500;
	config.height=200;
	config.resizable=true;
	config.minizable=true;
	config.closeAction='hide';	
	config.items=this.formPanel;
	config.buttons=[{
		text: GO.lang['cmdOk'],
		handler: function()
		{
			this.submitForm();
		},
		scope:this
	},{
		text: GO.lang['cmdClose'],
		handler: function()
		{
			this.hide();
		},
		scope:this
	}];
	
	GO.email.MoveOldMailDialog.superclass.constructor.call(this, config);

}

Ext.extend(GO.email.MoveOldMailDialog, Ext.Window,{

	onShow : function() {
		GO.email.MoveOldMailDialog.superclass.onShow.call(this);
		if (typeof(this.node)=='object') {
			this.folderNameField.setValue(this.node.attributes.mailbox);
		}
		this.untilDate.setValue(this.getDefaultDate());
	},

	buildForm : function() {
		this.formPanel = new Ext.form.FormPanel({
			timeout:120000,
			url : GO.url("email/message/MoveOld"),
			waitMsgTarget : true,
			border : false,
			cls : 'go-form-panel',
			items : [this.folderNameField = new GO.form.PlainField({
				anchor : '100%',
				allowBlank:false,
				fieldLabel : GO.email.lang.folder
			}),{
				xtype : 'plainfield',
				anchor : '100%',
				allowBlank:false,
				hideLabel : true,
				value : GO.email.lang.moveOldMailsInstructions
			},this.selectMailbox = new GO.form.ComboBoxReset({
				fieldLabel : GO.email.lang.moveTo,
				hiddenName : 'target_mailbox',
				store : new GO.data.JsonStore({
					url : GO.url("email/folder/store"),
					baseParams : {
						task : 'subscribed_folders',
						account_id : 0
					},
					fields : ['name']
				}),
				valueField : 'name',
				displayField : 'name',
				value:'Trash',
				typeAhead : true,
				mode : 'local',
				triggerAction : 'all',
				editable : false,
				selectOnFocus : true,
				forceSelection : true
			})
		, this.untilDate = new Ext.form.DateField({
				name : 'until_date',
				width : 100,
				format : GO.settings['date_format'],
				allowBlank : false,
				fieldLabel : GO.email.lang.everythingBefore
			})
			]
		});
		
		this.selectMailbox.store.on('load',function(store,records,options){
			this.selectMailbox.setValue(this.selectMailbox.store.reader.jsonData['trash']);
		},this);
		
	},

	setNode : function(node) {
		this.node = node;
		this.account_id = node.attributes.account_id;
		this.selectMailbox.store.baseParams.account_id=this.account_id;
		this.selectMailbox.store.load();
	},

	getDefaultDate : function() {
		var date = new Date();
		date.setFullYear(date.getFullYear()-2);
		return date;
	},

	getNode : function() {
		if (typeof(this.node)=='undefined')
			return {};
		else
			return this.node;
	},

	submitForm : function(hide) {
		Ext.Msg.show({
			title: GO.email.lang.MoveOldMails,
			icon: Ext.MessageBox.WARNING,
			msg: GO.email.lang.moveOldMailsSure.replace("{date}", this.untilDate.value).replace("{source}", this.folderNameField.getValue()).replace("{target}", this.selectMailbox.getValue()),
			buttons: Ext.Msg.YESNO,
			fn: function(btn) {
				if (btn=='yes') {
					this.formPanel.form.submit({
						url : GO.url("email/message/MoveOld"),
						params : {
							'account_id' : this.account_id,
							'mailbox' : this.node.attributes.mailbox
						},
						waitMsg : GO.lang['waitMsgSave'],
						success : function(form, action) {

							GO.email.messagesGrid.store.load({
								callback:function(){
									Ext.MessageBox.alert(GO.lang.strSuccess, GO.email.lang.nMovedMailsTxt+": "+action.result.total);
									this.hide();
								},
								scope:this
							});

						},

						failure : function(form, action) {
							var error = '';
							if (action.failureType == 'client') {
								error = GO.lang.strErrorsInForm;
							} else if (action.result) {
								error = action.result.feedback;
							} else {
								error = GO.lang.strRequestError;
							}

							Ext.MessageBox.alert(GO.lang.strError, error);
						},
						scope : this

					});

				}
			},
			scope : this
		});
	}
});

GO.email.MailboxContextMenu = Ext.extend(Ext.menu.Menu,{
	
	hasAcl : function(node){
		
		var inboxNode = this.treePanel.findInboxNode(node);
		if(!inboxNode)
			return false;
		else
			return inboxNode.attributes.acl_supported;
	},
	
	setNode : function(node){
		this.addFolderButton.setDisabled(node.attributes.noinferiors);
		
		this.shareBtn.setVisible(this.hasAcl(node));

	//		if (GO.settings.modules.email.write_permission) {
	//			var node_id_type = node.attributes.id.substring(0,6);
	//			this.items.get(5).setDisabled(node_id_type!='folder');
	//		}
	},
	initComponent : function(){
		
		this.items=[
		this.addFolderButton = new Ext.menu.Item({
			iconCls: 'btn-add',
			text: GO.email.lang.addFolder,
			handler: function(){
				Ext.MessageBox.prompt(GO.lang.strName, GO.email.lang.enterFolderName, function(button, text){
					if(button=='ok')
					{
						var sm = this.treePanel.getSelectionModel();
						var node = sm.getSelectedNode();
				
						GO.request({
							url: "email/folder/create",
							maskEl: GO.mainLayout.getModulePanel("email").getEl(),
							params: {
								parent: node.attributes.mailbox,
								account_id: node.attributes.account_id,
								name: text
							},
							success: function(options, response, result)
							{								
								this.treePanel.refresh(node);
							},
							fail : function(){
								this.treePanel.refresh();
							},
							scope: this
						});
					}
				}, this);
			},
			scope:this
		}),
		this.renameFolderButton = new Ext.menu.Item({
			iconCls: 'btn-edit',
			text: GO.email.lang.renameFolder,
			handler: function()
			{
				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();

				if(!node || !node.attributes.mailbox)
				{
					Ext.MessageBox.alert(GO.lang.strError, GO.email.lang.selectFolderRename);
				}else if(node.attributes.mailbox=='INBOX')
				{
					Ext.MessageBox.alert(GO.lang.strError, GO.email.lang.cantRenameInboxFolder);
				}else
				{
					Ext.MessageBox.prompt(GO.lang.strName, GO.email.lang.enterFolderName, function(button, text){
						if(button=='ok')
						{
							var sm = this.treePanel.getSelectionModel();
							var node = sm.getSelectedNode();

							GO.request({								
								maskEl: Ext.getBody(),
								url: "email/folder/rename",
								params: {
									account_id: node.attributes.account_id,
									mailbox: node.attributes.mailbox,
									name: text
								},
								success: function(options, response, result)
								{
									this.treePanel.refresh(node.parentNode);
									
										//remove preloaded children otherwise it won't request the server
//										delete node.parentNode.attributes.children;
//
//										var updateFolderName = function(){
//											var node = this.treePanel.getNodeById('folder_'+this.folder_id);
//											if(node){
//												if(this.folder_id==node.attributes.folder_id){
//													this.mailbox = node.attributes.mailbox;
//													this.treePanel.getSelectionModel().select(node);
//												}
//											}
//											this.el.unmask();
//										}
//										node.parentNode.reload(updateFolderName.createDelegate(this));
										
									
								},
								fail : function(){
								this.treePanel.refresh();
							},
								scope: this
							});
						}
					}, this, false, node.attributes.name);
				}
			},
			scope:this
		}),'-',	new Ext.menu.Item({
//			iconCls: 'btn-delete',
			text:GO.email.lang.markAsRead,
			cls: 'x-btn-text-icon',
			scope:this,
			handler: function()
			{
				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();

				var t = new Ext.Template(GO.email.lang.markFolderReadConfirm);

				Ext.MessageBox.confirm(GO.lang['strConfirm'], t.applyTemplate({name:node.attributes.text}), function(btn){
					if(btn=='yes')
					{
						GO.request({
							maskEl:GO.mainLayout.getModulePanel("email").getEl(),
							url: "email/folder/markAsRead",
							params:{
								account_id: node.attributes.account_id,
								mailbox: node.attributes.mailbox
							},
							success:function(){
								if(node.attributes.mailbox==GO.mainLayout.getModulePanel("email").messagesGrid.store.baseParams.mailbox)
								{
									GO.mainLayout.getModulePanel("email").messagesGrid.store.load();
								}
							},
							scope: this
						});
					}
				}, this);
			}
		}),	new Ext.menu.Item({
			iconCls: 'btn-cut',
			text:GO.email.lang.moveOldMails,
			cls: 'x-btn-text-icon',
			scope:this,
			handler: function()
			{
				if (typeof(this.moveOldMailDialog)=='undefined') {
					this.moveOldMailDialog = new GO.email.MoveOldMailDialog();
				}
				this.moveOldMailDialog.setNode(this.treePanel.getSelectionModel().getSelectedNode());
				this.moveOldMailDialog.show();
			}
		}),this.emptyFolderButton = new Ext.menu.Item({
			iconCls: 'btn-delete',
			text: GO.email.lang.emptyFolder,
			handler: function(){

				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();

				var t = new Ext.Template(GO.email.lang.emptyFolderConfirm);

				Ext.MessageBox.confirm(GO.lang['strConfirm'], t.applyTemplate({name:node.attributes.text}), function(btn){
					if(btn=='yes')
					{
						GO.request({
							maskEl:GO.mainLayout.getModulePanel("email").getEl(),
							url: "email/folder/truncate",
							params:{
								account_id: node.attributes.account_id,
								mailbox: node.attributes.mailbox
							},
							success:function(){
								if(node.attributes.mailbox==GO.mainLayout.getModulePanel("email").messagesGrid.store.baseParams.mailbox)
								{
									GO.mainLayout.getModulePanel("email").messagesGrid.store.removeAll();
									GO.mainLayout.getModulePanel("email").messagePanel.reset();
								}
								GO.mainLayout.getModulePanel("email").updateFolderStatus(node.attributes.mailbox, 0);
//								GO.mainLayout.getModulePanel("email").updateNotificationEl();
							},
							scope: this
						});
					}
				}, this);
			},
			scope:this
		}),this.deleteFolderButton = new Ext.menu.Item({
			iconCls: 'btn-delete',
			text: GO.lang.cmdDelete,
			cls: 'x-btn-text-icon',
			scope: this,
			handler: function(){
				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();

				if(!node|| node.attributes.folder_id<1)
				{
					Ext.MessageBox.alert(GO.lang.strError, GO.email.lang.selectFolderDelete);
				}else if(node.attributes.mailbox=='INBOX')
				{
					Ext.MessageBox.alert(GO.lang.strError, GO.email.lang.cantDeleteInboxFolder);
				}else
				{
					
					GO.deleteItems({
						maskEl: GO.mainLayout.getModulePanel("email").getEl(),
						url: GO.url("email/folder/delete"),
						params: {					
							account_id:node.attributes.account_id,
							mailbox: node.attributes.mailbox
						},
						callback: function(responseParams)
						{
							
							if(responseParams.success)
							{
								node.remove();

								if(node.attributes.mailbox==GO.mainLayout.getModulePanel("email").messagesGrid.store.baseParams.mailbox){
									GO.mainLayout.getModulePanel("email").messagesGrid.store.removeAll();
								}

								if(GO.emailportlet){
									GO.emailportlet.foldersStore.load();
								}
								this.treePanel.mainPanel.refresh(true);
							}
						},
						count: 1,
						scope: this
					});
				}
			}
		}),'-',this.shareBtn = new Ext.menu.Item({
			iconCls:'em-btn-share-mailbox ',
			text: GO.email.lang.shareFolder,
			handler:function(){
				if(!this.imapAclDialog)
					this.imapAclDialog = new GO.email.ImapAclDialog();

				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();

				this.imapAclDialog.setParams(node.attributes.account_id,node.attributes.mailbox, node.text);
				this.imapAclDialog.show();
			},
			scope:this

		}),{
			iconCls : 'btn-settings',
			text : GO.email.lang.subscribeFolders,
			scope : this,
			handler : function() {
				if (!this.foldersDialog) {
					this.foldersDialog = new GO.email.FoldersDialog();
				}
				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();
				this.foldersDialog.show(node.attributes.account_id);
			}
		},'-', this.propertiesBtn = new Ext.menu.Item({
			iconCls: 'btn-edit',
			text: GO.lang['strProperties'],
			handler:function(a,b){
				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();
				
				if (!GO.email.folderDialog)
					GO.email.folderDialog = new GO.email.FolderDialog();
				GO.email.folderDialog.show(node.attributes.account_id,{mailboxPath:node.attributes.mailbox});
			},
			scope:this
		})];

	
		for(var i=0;i<GO.email.extraTreeContextMenuItems.length;i++)
		{
			this.items.push(GO.email.extraTreeContextMenuItems[i]);
		}
		
		GO.email.MailboxContextMenu.superclass.initComponent.call(this);
		

	}
}
);


GO.email.AccountContextMenu = Ext.extend(Ext.menu.Menu,{

	setNode : function(node){
		this.addFolderButton.setDisabled(node.attributes.noinferiors);
		// Disable the properties menu item when you have no manage permission
		this.propertiesBtn.setDisabled((node.attributes.permission_level < GO.permissionLevels.manage));
	},
	initComponent : function(){
		
		this.items=[
		this.addFolderButton = new Ext.menu.Item({
			iconCls: 'btn-add',
			text: GO.email.lang.addFolder,
			scope:this,
			handler: function(){
				Ext.MessageBox.prompt(GO.lang.strName, GO.email.lang.enterFolderName, function(button, text){
					if(button=='ok')
					{
						var sm = this.treePanel.getSelectionModel();
						var node = sm.getSelectedNode();
				
						GO.request({
							url: "email/folder/create",
							maskEl: Ext.getBody(),
							params: {
								parent: node.attributes.mailbox,
								account_id: node.attributes.account_id,
								name: text
							},
							success: function(options, response, result)
							{								
								this.treePanel.refresh(node);
							},
							fail : function(){
								this.treePanel.refresh();
							},
							scope: this
						});
					}
				}, this);
			}
		}),{
			iconCls : 'btn-settings',
			text : GO.email.lang.subscribeFolders,
			scope : this,
			handler : function() {
				if (!this.foldersDialog) {
					this.foldersDialog = new GO.email.FoldersDialog();
				}
				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();
				this.foldersDialog.show(node.attributes.account_id);
			}
		},
		this.propertiesBtn = new Ext.menu.Item({
			iconCls: 'btn-edit',
			text: GO.lang['strProperties'],
			handler:function(a,b){
				var sm = this.treePanel.getSelectionModel();
				var node = sm.getSelectedNode();

				if(!this.accountDialog){
					this.accountDialog = new GO.email.AccountDialog();
					this.accountDialog.on('save', function(){
						GO.mainLayout.getModulePanel("email").refresh();
						if(GO.email.aliasesStore.loaded)
						{
							GO.email.aliasesStore.reload();
						}
					}, this);
				}

				this.accountDialog.show(node.attributes.account_id);

			},
			scope:this
		})
		];
		
		GO.email.AccountContextMenu.superclass.initComponent.call(this);
	}
}
);

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @author WilmarVB <wilmar@intermesh.nl>
 */

GO.email.FolderDialog = Ext.extend(GO.dialog.TabbedFormDialog, {
		
	initComponent : function(){
		
		Ext.apply(this, {
			title:GO.email.lang.mailbox,
			titleField: 'mailboxPath',
//			goDialogId:'note',
			height: 160,
			formControllerUrl: 'email/folder'
		});
		
		GO.email.FolderDialog.superclass.initComponent.call(this);
		
	},
	
	beforeLoad : function(remoteModelId,config) {
		this.hiddenAccountIdField.setValue(remoteModelId);
		this.hiddenMailboxPathField.setValue(config.mailboxPath);
		config.loadParams = {
			accountId : remoteModelId,
			mailboxPath : config.mailboxPath
		}
	},
	
	buildForm : function() {
		this.addPanel(new Ext.Panel({
			layout: 'form',
			cls:'go-form-panel',
			items: [this.hiddenAccountIdField = new Ext.form.TextField({
				name : 'accountId',
				hidden: true
			}), this.hiddenMailboxPathField = new Ext.form.TextField({
				name : 'mailboxPath',
				hidden: true
			}), this.checkUnseenField = new Ext.form.Checkbox({
				name : 'checkUnseen',
				boxLabel: GO.email.lang.checkUnseen,
				allowBlank: true,
				hideLabel:true
			})]
		}));
	}

});


GO.email.FilterDialog = Ext.extend(GO.dialog.TabbedFormDialog, {
	initComponent : function(){
		
		Ext.apply(this, {
			titleField:'keyword',
			title:GO.email.lang.filter,			
			formControllerUrl: 'email/filter',
			height:200
		});
		
		GO.email.FilterDialog.superclass.initComponent.call(this);	
	},
	
	buildForm:function(){
		this.addPanel({
			layout : 'form',
			defaults : {
				anchor : '100%'
			},
			defaultType : 'textfield',
			labelWidth : 125,
			border : false,
			cls : 'go-form-panel',
			waitMsgTarget : true,
			items : [new Ext.form.ComboBox({
					fieldLabel : GO.email.lang.field,
					hiddenName : 'field',
					store : new Ext.data.SimpleStore({
						fields : ['value', 'text'],
						data : [
							[
								'from',
								GO.email.lang.sender],
							[
								'subject',
								GO.email.lang.subject],
							['to', GO.email.lang.sendTo],
							[
								'cc',
								GO.email.lang.ccField]]
					}),
					value : 'from',
					valueField : 'value',
					displayField : 'text',
					typeAhead : true,
					mode : 'local',
					triggerAction : 'all',
					editable : false,
					selectOnFocus : true,
					forceSelection : true
				}), {
					fieldLabel : GO.email.lang.keyword,
					name : 'keyword',
					allowBlank : false
				}, new Ext.form.ComboBox({
					fieldLabel : GO.email.lang.moveToFolder,
					hiddenName : 'folder',
					store : GO.email.subscribedFoldersStore,
					valueField : 'name',
					displayField : 'name',
					typeAhead : true,
					mode : 'local',
					triggerAction : 'all',
					editable : false,
					selectOnFocus : true,
					forceSelection : true,
					allowBlank : false
				}), {
					xtype:'xcheckbox',
					boxLabel : GO.email.lang.markAsRead,
					name : 'mark_as_read',
					checked : false,
					hideLabel : true
				}]
			});
		}
	});

GO.email.FilterGrid = Ext.extend(GO.grid.GridPanel,{
	constructor : function(config){
		
		config=config||{};
		
		Ext.applyIf(config, {
			tbar:[GO.email.lang.sieveNote],
			standardTbar:true,
			title : GO.email.lang.filters,
			disabled:true,
			store: new GO.data.JsonStore({
				url : GO.url("email/filter/store"),
				baseParams : {
					account_id : 0
				},
				fields : ['id', 'field', 'keyword', 'folder', 'mark_as_read'],
				remoteSort : false
			}),
			layout : 'fit',
			border : false,
			loadMask : true,
			enableDragDrop:true,
			ddGroup:'EmailFiltersDD',			
			cm : new Ext.grid.ColumnModel([{
				header : GO.email.lang.field,
				dataIndex : 'field'
			}, {
				header : GO.email.lang.contains,
				dataIndex : 'keyword'
			}, {
				header : GO.email.lang.moveToFolder,
				dataIndex : 'folder'
			}, {
				header : GO.email.lang.markAsRead,
				dataIndex : 'mark_as_read',
				renderer : function (value) {
					return value == "1" ? GO.lang.cmdYes : GO.lang.cmdNo;
				}
			}]),
			view : new Ext.grid.GridView({
				autoFill : true,
				forceFit : true,
				emptyText : GO.lang.strNoItems
			}),
			sm : new Ext.grid.RowSelectionModel(),
			listeners:{
				scope:this,
				show:function(){					
					if(!GO.email.subscribedFoldersStore.loaded)
						GO.email.subscribedFoldersStore.load();

					this.store.load();					
				},
				render:function(){
					//enable row sorting
					var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody,
					{
						ddGroup : 'EmailFiltersDD',
						copy:false,
						notifyDrop : this.onNotifyDrop.createDelegate(this)
					});
					
				}
			}
		});
		
		this.filterDialog = new GO.email.FilterDialog();

		this.filterDialog.on('save', function(){   
			this.store.load();  			    			
		}, this);	
		
		GO.email.FilterGrid.superclass.constructor.call(this, config);
	},
	
	dblClick : function(grid, record, rowIndex){
		this.showFilterDialog(record.id);
	},
	
	btnAdd : function(){				
		this.showFilterDialog();	  	
	},
	showFilterDialog : function(id){

		this.filterDialog.show(id);	  
	},
	
	setAccountId : function(id){
		this.store.baseParams.account_id=id;
		this.setDisabled(!id);
		this.filterDialog.formPanel.baseParams.account_id=id;
	},
	
	onNotifyDrop : function(dd, e, data)
	{
		var rows=this.selModel.getSelections();
		var dragData = dd.getDragData(e);
		var cindex=dragData.rowIndex;
		if(cindex=='undefined')
		{
			cindex=this.store.data.length-1;
		}

		for(i = 0; i < rows.length; i++)
		{
			var rowData=this.store.getById(rows[i].id);

			if(!this.copy){
				this.store.remove(this.store.getById(rows[i].id));
			}

			this.store.insert(cindex,rowData);
		}

		//save sort order
		var filters = {};

		for (var i = 0; i < this.store.data.items.length;  i++)
		{
			filters[this.store.data.items[i].get('id')] = i;
		}
		
		GO.request({
			url:'email/filter/saveSort',
			params:{
				filters:Ext.encode(filters)
			}
		})

	}
})

GO.email.LabelsGrid = Ext.extend(GO.grid.GridPanel, {
    changed: false,

    initComponent: function () {

        Ext.apply(this, {
            standardTbar: true,
            title : GO.email.lang.labels,
            store: new GO.data.JsonStore({
                url : GO.url("email/label/store"),
                baseParams : {
                    account_id : 0
                },
				listeners: {
					load: function() { 
						Ext.ComponentMgr.get('email-messages-labels-menu').store.baseParams.account_id = null; //this.store.baseParams.account_id;
					},
					scope:this
				},
                fields : ['id', 'name', 'flag', 'color', 'default'],
                remoteSort : false
            }),
            border: false,
            paging: true,
            view: new Ext.grid.GridView({
                autoFill: true,
                forceFit: true,
                emptyText: GO.lang['strNoItems']
            }),
            cm: new Ext.grid.ColumnModel({
                defaults: {
                    sortable: true
                },
                columns: [
                    {
                        header: GO.lang.strName,
                        dataIndex: 'name'
                    },
                    {
                        header: GO.lang.color,
                        dataIndex: 'color',
                        renderer: function (value, metaData, record) {
                            return '<div style="display:inline-block; width:38px; height:14px; background-color:#' + value + '; margin-right:4px;"></div>';
                        }
                    }
                ]
            })
        });

        GO.email.LabelsGrid.superclass.initComponent.call(this);
    },

    setAccountId : function(id){
        this.store.baseParams.account_id=id;
		  var tabPanel = this.findParentByType('tabpanel');
		  if(!id) {
				tabPanel.hideTabStripItem(this);
			} else {
				tabPanel.unhideTabStripItem(this);
			}
        this.setDisabled(!id); 
        this.store.load();       
    },

    dblClick: function (grid, record) {
        this.showLabelDialog(record.id);
    },

    btnAdd: function () {
        this.showLabelDialog();
    },

    showLabelDialog: function (id) {
        if (!this.labelDialog) {
            this.labelDialog = new GO.email.LabelDialog();

            this.labelDialog.on('save', function () {
                this.store.load();
                this.changed = true;
            }, this);
        }

        this.labelDialog.formPanel.baseParams.account_id=this.store.baseParams.account_id;
        this.labelDialog.show(id);
    },

    deleteSelected: function () {
        GO.email.LabelsGrid.superclass.deleteSelected.call(this);
        this.changed = true;
    }
});

GO.email.PortletPanel = Ext.extend(Ext.Panel, {

	height:400,
	//autoHeight:true,	
		
	initComponent : function(){	
		
		Ext.applyIf(this, {
				// Configuration for this Panel
				layout:"border"
		});
		
		this.tabPanel = new Ext.TabPanel({
			region:'north',
			title:'test',
			border:false,
			items:[{title:"dummy"}]
		});
		
		this.folderStore = new GO.data.JsonStore({
			url:GO.url('email/portlet/portletFoldersByUser'),
			root: 'results',
			totalProperty: 'total',
			fields:['account_id','folder_name','user_id','mtime','name','email'],
			remoteSort: true
		});
		
		this.messageStore = new GO.data.JsonStore({
			url:GO.url('email/message/store'),
//			baseParams: {
//				task: 'messages'
//			},
			root: 'results',
			totalProperty: 'total',
			id: 'uid',
			fields:['uid','icon','flagged','attachments','seen','subject','from','sender','size','date', 'priority','answered','forwarded','arrival','arrival_time','date_time','labels'],
			remoteSort: true
		});
		
		this.messagesGrid = new GO.email.MessagesGrid({
			id:'emp-messagesgrid',
			store:this.messageStore,
			hideSearch:true,
			region:"center"
		});
		
		this.messagesGrid.on('rowdblclick', function(grid, rowIndex)
		{
			var record = grid.getStore().getAt(rowIndex);

			GO.email.showMessageDialog(record.id, record.store.baseParams.mailbox, record.store.baseParams.account_id);
			
		}, this);
		
		this.folderStore.on('load', function()
		{
			// Remove all tabs
			this.tabPanel.removeAll(true);
//			
			if(!this.folderStore.data.length || this.folderStore.data.length == 0)
			{
//				// Add an empty tab to the panel
				this.tabPanel.add(new Ext.Panel({
					title:GO.email.lang.noEmailFolders
				}));
				
				this.messagesGrid.store.removeAll();
				this.messagesGrid.hide();
			}
			else
			{
				this.messagesGrid.show();
				for(var i=0; i<this.folderStore.data.length; i++)
				{
					
					var folder = this.folderStore.data.items[i].data;
//					console.log(folder);
					var panel = new Ext.Panel({
						id:'account_'+folder.account_id+':'+folder.name,
						account_id:folder.account_id,
						folder_id:folder.folder_name,
						title:folder.name,
						tabTip:folder.email,
						mailbox:folder.folder_name,
						layout:'fit',
						closable:true
					});
					
					panel.on('show', function(p)
					{
						this.loadMessagepanel(p);
					},this);

					panel.on('close', function(p)
					{
						var record = this.folderStore.getAt(p.index);
						this.folderStore.remove(record);
						
						GO.request({
							url : 'email/portlet/disablePortletFolder',
							params : {
								account_id : p.account_id,
								mailbox : p.mailbox
							},
							fail: function(response, options, result) {
								Ext.Msg.alert(GO.lang.strError, result.feedback);
								this.folderStore.reload();
							},
							success:function(){
								this.folderStore.reload();
							},
							scope : this
						});

					},this);

					Ext.TaskMgr.start({
						run: function(){
							this.messagesGrid.store.load();
						},
						scope:this,
						interval:60*15*1000
					});

					this.tabPanel.add(panel);
				}				
			}

			
			this.tabPanel.setActiveTab(0);
			this.tabPanel.doLayout();
			
		}, this);
				
		
		
		// Add the tabpanel and messageGrid to the Portlet panel
		this.items=[this.tabPanel,this.messagesGrid];

		GO.email.PortletPanel.superclass.initComponent.call(this);
		
		this.on("render",function(){
			this.folderStore.load();
		}, this);
		
		
	},
	loadMessagepanel : function(e){
		this.messagesGrid.store.baseParams.account_id = e.account_id;
		this.messagesGrid.store.baseParams.folder_name = e.folder_name;
		this.messagesGrid.store.baseParams.mailbox = e.mailbox;

		this.messagesGrid.store.load();
	}
	
	
});

GO.email.PortletSettingsDialog = Ext.extend(GO.Window, {
	
	width: 300,
	
	height: 400,
		
	initComponent : function(){	
		
		this.foldersTree = new Ext.tree.TreePanel({
			animate : true,
			border : false,
			autoScroll : true,
			layout:'fit',
			height : 400,
//			autoHeight:true,
			loader : new GO.base.tree.TreeLoader({
				dataUrl : GO.url("email/portlet/portletTree"),
				preloadChildren : true,
				listeners : {
					beforeload : function() {
						this.body.mask(GO.lang.waitMsgLoad);
					},
					load : function() {
						this.body.unmask();
					},
					scope : this
				}
			})
		});
		
		// set the root node
		this.rootNode = new Ext.tree.AsyncTreeNode({
			text : GO.email.lang.root,
			draggable : false,
			id : 'root',
			expanded : true
		});
		
		this.foldersTree.setRootNode(this.rootNode);

		this.rootNode.on('load', function() {
			this.rootNode.select();

		}, this);
		
		this.foldersTree.on('checkchange', function(node, checked) {
		
			var route = checked ? 'email/portlet/enablePortletFolder' : 'email/portlet/disablePortletFolder';

			GO.request({
				maskEl:this.body,
				url : route,
				params : {
					account_id : node.attributes.account_id,
					mailbox : node.attributes.mailbox
				},
				fail: function(response, options, result) {
					Ext.Msg.alert(GO.lang.strError, result.feedback);
					this.foldersTree.getRootNode().reload();
				},
				scope : this
			});

		}, this);
		


		GO.email.PortletSettingsDialog.superclass.initComponent.call(this);
		
		this.add(this.foldersTree);
		
	}
	
});

GO.mainLayout.onReady(function(){
	if(GO.summary)
	{
		this.emailPortlet = new GO.email.PortletPanel();
		
		GO.summary.portlets['portlet-email']=new GO.summary.Portlet({
			id: 'portlet-email',
			iconCls: 'go-module-icon-email',
			title: GO.email.lang.email,
			layout:'fit',
			tools: [{
				id: 'gear',
				handler: function(){
					if(!this.emailPortletSettings){
						this.emailPortletSettings = new GO.email.PortletSettingsDialog();
						this.emailPortletSettings.on("hide", function(){
							this.emailPortlet.folderStore.reload();
						},this);
					}
				
					this.emailPortletSettings.show();
				},
				scope:this
			},{
				id:'close',
				handler: function(e, target, panel){
					panel.removePortlet();
				}
			}],
			items: this.emailPortlet,
			autoHeight:true
		});
	}
});


GO.email.CopyMailToDialog = Ext.extend(GO.Window, {
	
	_selectedEmailMessages : [],
	
	title : GO.email.lang['copyMailToTxt'],
	
	width: 300,
	
	height: 400,
	
	layout: 'fit',
		
	initComponent : function(){	
		
		this.foldersTree = new Ext.tree.TreePanel({
			animate : true,
			border : false,
			autoScroll : true,
			layout:'fit',
			height : 400,
//			autoHeight:true,
			loader : new GO.base.tree.TreeLoader({
				dataUrl : GO.url("email/account/tree"),
				baseParams: {
					permissionLevel: GO.permissionLevels.write
				},
				preloadChildren : true,
				listeners : {
					beforeload : function() {
						this.body.mask(GO.lang.waitMsgLoad);
					},
					load : function() {
						this.body.unmask();
					},
					scope : this
				}
			})
		});
		
		// set the root node
		this.rootNode = new Ext.tree.AsyncTreeNode({
			text : GO.email.lang.root,
			draggable : false,
			id : 'root',
			expanded : true
		});
		
		this.foldersTree.setRootNode(this.rootNode);

		this.rootNode.on('load', function() {
			this.rootNode.select();

		}, this);
		
//		this.foldersTree.on('checkchange', function(node, checked) {
//		
//			var route = checked ? 'email/portlet/enablePortletFolder' : 'email/portlet/disablePortletFolder';
//
//			GO.request({
//				maskEl:this.body,
//				url : route,
//				params : {
//					account_id : node.attributes.account_id,
//					mailbox : node.attributes.mailbox
//				},
//				fail: function(response, options, result) {
//						Ext.Msg.alert(GO.lang.strError, result.feedback);
//					this.foldersTree.getRootNode().reload();
//				},
//				scope : this
//			});
//
//		}, this);
		
//		this.foldersTree.on('dblclick',function(node,event){
//			this._copyMail(node.attributes.account_id,node.attributes.mailbox);
//		},this);

		this.buttons = [new Ext.Button({
			text : GO.lang['cmdOk'],
			handler : function() {
				var node = this.foldersTree.getSelectionModel().getSelectedNode();
				if (!GO.util.empty(node))
				this._copyMail(node.attributes.account_id,node.attributes.mailbox);
				this.hide();
			},
			scope : this
		}),new Ext.Button({
			text : GO.lang['cmdCancel'],
			handler : function() {
				this.hide();
			},
			scope : this
		}),new Ext.Button({
			text : GO.lang['cmdRefresh'],
			handler : function() {
				this.rootNode.reload();
			},
			scope : this
		})];

		GO.email.CopyMailToDialog.superclass.initComponent.call(this);
		
		this.add(this.foldersTree);
		
		this.addEvents({
			'copy_email' : true
		});
		
	},
	
	show : function(selectedEmailMessages) {
		this._selectedEmailMessages = selectedEmailMessages;
		GO.email.CopyMailToDialog.superclass.show.call(this);
		
	},
	
	_copyMail : function(targetAccountId,targetMailboxPath) {
		
		if (GO.util.empty(targetAccountId) || GO.util.empty(targetMailboxPath)) {
			Ext.MessageBox.alert(GO.lang['strError'],GO.email.lang['selectValidMailFolder']);
		} else {
//			if (this._selectedEmailMessages.length>1){
//				var messageStr = GO.email.lang['copyMailsToRUSure'];
//			}else{
//				var messageStr = GO.email.lang['copyMailToRUSure'];
//			}

//			Ext.Msg.show({
//				title: GO.email.lang['copyMailTo'],
//				msg: messageStr,
//				buttons: Ext.Msg.YESNO,
//				fn: function(btn) {
//					if (btn=='yes') {
				var srcMessages = [];
				for (var i=0; i<this._selectedEmailMessages.length;i++) {				
					srcMessages.push({
						accountId : this._selectedEmailMessages[i].data.account_id,
						mailboxPath : this._selectedEmailMessages[i].data.mailbox,
						mailUid : this._selectedEmailMessages[i].data.uid,
						seen : this._selectedEmailMessages[i].data.seen
					});
				}
				GO.request({
					url : "email/account/copyMailTo",
					params : {
						'srcMessages' : Ext.encode(srcMessages),
						'targetAccountId' : targetAccountId,
						'targetMailboxPath' : targetMailboxPath
					},
					success:function(options, response, result){
						this.fireEvent('copy_email');
						Ext.Msg.hide();
						this.hide();
					},
					scope:this
				});
			}
				
//				},
//				scope : this
//			});
	}
	
});

GO.email.LabelDialog = Ext.extend(GO.dialog.TabbedFormDialog, {

    initComponent: function () {

        Ext.apply(this, {
            titleField: 'name',
            goDialogId: 'label',
            title: GO.email.lang.label,
            height: 260,
            width: 490,
            formControllerUrl: 'email/label'
        });

        GO.email.LabelDialog.superclass.initComponent.call(this);
    },

    buildForm: function () {

        this.propertiesPanel = new Ext.Panel({
            title: GO.lang['strProperties'],
            cls: 'go-form-panel',
            layout: 'form',
            labelWidth: 160,
            items: [
                {
                    xtype: 'textfield',
                    name: 'name',
                    width: 300,
                    anchor: '100%',
                    maxLength: 100,
                    allowBlank: false,
                    fieldLabel: GO.lang.strName
                },
                this.colorField = new GO.form.ColorField({
                    fieldLabel: GO.lang.color,
                    width: 100,
                    value: "7A7AFF",
                    name: 'color'
                })
            ]
        });

        this.addPanel(this.propertiesPanel);
    }
})
;

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: UserDialog.js 16919 2014-02-26 14:12:07Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 GO.users.UserDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	customFieldType : "GO\\Base\\Model\\User",
	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'user',
			title:GO.users.lang.userSettings,
			formControllerUrl: 'users/user',
			height:600,
			width:800,
			stateId:'go-user-window'
			
		});
		
//		this.tbar = [
//		this.linkBrowseButton = new Ext.Button({
//			iconCls: 'btn-link', 
//			cls: 'x-btn-text-icon', 
//			text: GO.lang.cmdBrowseLinks,
//			disabled:true,
//			handler: function(){
//				if(!GO.linkBrowser){
//					GO.linkBrowser = new GO.LinkBrowser();
//				}
//				GO.linkBrowser.show({link_id: this.user_id,link_type: "8",folder_id: "0"});				
//			},
//			scope: this
//		})];
//		
//		if(GO.files)
//		{		
//			this.tbar.push(this.fileBrowseButton = new Ext.Button({
//				iconCls: 'btn-files',
//				cls: 'x-btn-text-icon', 
//				text: GO.files.lang.files,
//				handler: function(){
//					GO.files.openFolder(this.files_folder_id);				
//				},
//				scope: this,
//				disabled: true
//			}));
//		}	
		
		GO.users.UserDialog.superclass.initComponent.call(this);	
	},

	user_id : 0,
	
	files_folder_id : '',
	
	setRemoteModelId : function(remoteModelId){
		
		GO.users.UserDialog.superclass.setRemoteModelId.call(this, remoteModelId);	
		
		this.permissionsTab.setUserId(remoteModelId);
		this.accountTab.setUserId(remoteModelId);
		
		if(this.serverclientFieldSet)
		{
			var visible = remoteModelId>0;
			this.serverclientFieldSet.setVisible(!visible);
		}

		this.loginTab.setVisible(remoteModelId>0);
		
		this.lookAndFeelTab.startModuleField.clearLastSearch();
		this.lookAndFeelTab.modulesStore.baseParams.user_id=remoteModelId;		
	},
	
	afterLoad : function(remoteModelId, config, action){		
		this.fireEvent('set_id', this);
	},
	
	serverclientDomainCheckboxes : [],
	
	
	setDefaultEmail : function(){
		
		if(this.rendered)
		{
			for(var i=0;i<this.serverclientDomainCheckboxes.length;i++)
			{
				if(this.serverclientDomainCheckboxes[i].getValue())
				{
					var username = this.formPanel.form.findField('username').getValue();
					var emailField = this.formPanel.form.findField('email');
					
					if(emailField)
						this.formPanel.form.findField('email').setValue(username+'@'+GO.serverclient.domains[i]);
						
					break;
				}
			}
		}	
	},
	
	
	afterSubmit : function(action){
		this.permissionsTab.commit();
		this.files_folder_id = action.result.files_folder_id;
	},
	
	getSubmitParams : function(){
		return this.permissionsTab.getPermissionParameters();
	},
	
	buildForm : function () {
		this.accountTab = new GO.users.AccountPanel();
		

		this.loginTab = new GO.users.LoginPanel();
		this.permissionsTab = new GO.users.PermissionsPanel();
		this.regionalSettingsTab = new GO.users.RegionalSettingsPanel();
		this.lookAndFeelTab = new GO.users.LookAndFeelPanel();
		this.diskQuotaPanel = new GO.users.DiskQuotaPanel();

		this.profileTab = new Ext.Panel({
			title:GO.users.lang.account,
			autoScroll:true,
			layout:'column',
			//cls:'go-form-panel',
			bodyStyle:'padding:5px',
			items:[{
				columnWidth:.5,
				items:[this.accountTab],
				bodyStyle:'padding-right:5px',
				border:false
			},this.rightCol = new Ext.Panel({
				columnWidth:.5,
				bodyStyle:'padding-left:5px',
				items:[this.loginTab, this.diskQuotaPanel],
				border:false
			}),{
				xtype:'hidden',
				name:'contact_id',
				value:''
			}]
		});
		
		this.addPanel(this.profileTab);
		
		if(GO.addressbook){
			this.contactPanel = new  GO.addressbook.ContactProfilePanel({
				forUser:true
			});
			this.addPanel(this.contactPanel);
		}
		
		
		this.addPanel(this.permissionsTab);
    this.addPanel(this.regionalSettingsTab);
    this.addPanel(this.lookAndFeelTab);
     

		if(GO.customfields && GO.customfields.types["GO\\Base\\Model\\User"])
		{
			for(var i=0;i<GO.customfields.types["GO\\Base\\Model\\User"].panels.length;i++)
			{
				this.addPanel(GO.customfields.types["GO\\Base\\Model\\User"].panels[i]);
			}
		}   
		
		if(GO.serverclient && GO.serverclient.domains)
		{				
			this.serverclientFieldSet = new Ext.form.FieldSet({
				title: GO.serverclient.lang.mailboxes, 
				autoHeight:true,
				items:new GO.form.HtmlComponent({
					html:'<p class="go-form-text">'+GO.serverclient.lang.createMailbox+':</p>'
				})
			});

			for(var i=0;i<GO.serverclient.domains.length;i++)
			{
				this.serverclientDomainCheckboxes[i]=new Ext.form.Checkbox({						
					checked:(i==0),
					name:'serverclient_domains[]',
					autoCreate: {tag: "input", type: "checkbox", value: GO.serverclient.domains[i]},						
					hideLabel:true,
					boxLabel: GO.serverclient.domains[i]
				});

				this.serverclientDomainCheckboxes[i].on('check', this.setDefaultEmail, this);
				this.serverclientFieldSet.add(this.serverclientDomainCheckboxes[i]);
			}

			this.rightCol.add(this.serverclientFieldSet);
			
			this.on('render',function(){
				this.formPanel.form.findField('username').on('change', this.setDefaultEmail, this);
			},this);
			
		}		
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: PermissionsPanel.js 19015 2015-04-21 08:15:50Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.users.PermissionsPanel = function(config)
{
    if(!config)
    {
        config={};
    }
	
    config.autoScroll=false;
    config.hideLabel=true;
    config.title = GO.lang['strPermissions'];
    config.layout='columnfit';
    config.anchor='100% 100%';
	
    config.defaults={
        border:true,
        height:280,
        autoScroll:true
    };
	
		this.moduleAccessGrid = new GO.grid.ModulePermissionsGrid({
			title: GO.users.lang.moduleAccess,
			storeUrl: GO.url('modules/module/permissionsStore'),
			columnWidth: .4,
			layout:'fit',
			paramIdType: 'userId'
		});
	
    /* end module permissions grid */
	
	
    /* group member grid */
	
    var groupsMemberOfColumn = new GO.grid.CheckColumn({
        header: '',
        dataIndex: 'selected',
        width: 55,
        menuDisabled:true
    });
	
	
    this.groupMemberStore = new GO.data.JsonStore({
        url:GO.url('users/user/groupStore'),
        baseParams: {
            user_id: 0,
			limit: 0
        },
        fields: ['id', 'disabled', 'name', 'selected'],
        root: 'results'
    });
	
    var groupMemberGrid = new GO.grid.GridPanel({
        columnWidth: .3,
        layout:'fit',
        title: GO.users.lang.userIsMemberOf,
        columns: [
        {
            id:'name',
            header: GO.users.lang.group,
            dataIndex: 'name',
            menuDisabled:true
        },
        groupsMemberOfColumn
        ],
        ds: this.groupMemberStore,
        //sm: new Ext.grid.RowSelectionModel({singleSelect:singleSelect}),
        plugins: groupsMemberOfColumn,
        autoExpandColumn:'name'
    });
	
	
	
    /* end group member grid */
	
	
	
    /* group visible grid */
	
    var groupsVisibleToColumn = new GO.grid.CheckColumn({
        header: '',
        dataIndex: 'selected',
        width: 55,
        menuDisabled:true
    });
	
	
	
    this.groupVisibleStore = new GO.data.JsonStore({
        url:GO.url('users/user/visibleGroupStore'),
        baseParams: {
            user_id: -1,
			limit: 0
        },
        fields: ['id', 'disabled', 'name', 'selected'],
        root: 'results'
    });
	
    var groupVisibleGrid = new GO.grid.GridPanel({
        columnWidth: .3,
        layout:'fit',
        title: GO.users.lang.userVisibleTo,
        columns: [
        {
            id:'name',
            header: GO.users.lang.group,
            dataIndex: 'name',
            menuDisabled:true
        },
        groupsVisibleToColumn
        ],
        ds: this.groupVisibleStore,
        plugins: groupsVisibleToColumn,
        autoExpandColumn:'name'
    });
	
	
    /* end group visible grid */

    config.items=[
    this.moduleAccessGrid,
    groupMemberGrid,
    groupVisibleGrid];
	

    GO.users.PermissionsPanel.superclass.constructor.call(this, config);
}


Ext.extend(GO.users.PermissionsPanel, Ext.Panel,{
	
    setUserId : function(user_id, reset)
    {
        if(!this.isVisible() && user_id!=this.user_id)
        {
            this.groupMemberStore.removeAll();
            //this.modulePermissionsStore.removeAll();
            this.groupVisibleStore.removeAll();
			
            //this.modulePermissionsStore.baseParams.user_id=-1;
						this.moduleAccessGrid.setIdParam(-1);
            this.groupMemberStore.baseParams.user_id=-1;
            this.groupVisibleStore.baseParams.user_id=-1;
        }
        this.user_id=user_id;
				
				this.moduleAccessGrid.setIdParam(user_id);
    //this.setDisabled(this.user_id==0);
    },
	
    onShow : function(){
        GO.users.PermissionsPanel.superclass.onShow.call(this);
				
        if(this.groupMemberStore.baseParams.user_id!=this.user_id)
        {
					this.moduleAccessGrid.setIdParam(this.user_id);
          //this.modulePermissionsStore.baseParams.user_id=this.user_id;
					this.groupMemberStore.baseParams.user_id=this.user_id;
					this.groupVisibleStore.baseParams.user_id=this.user_id;

          this.groupMemberStore.load();
          this.moduleAccessGrid.store.load();
					this.groupVisibleStore.load();
        }
    },

		commit : function(){
			this.moduleAccessGrid.store.commitChanges();
			this.moduleAccessGrid.show();
			this.groupMemberStore.commitChanges();
			this.groupVisibleStore.commitChanges();
		},
	
    getPermissionParameters : function(){

		
//        var modulePermissions = new Array();
        var memberGroups = new Array();
        var visibleGroups = new Array();
		 
//        for (var i = 0; i < this.modulePermissionsStore.data.items.length;  i++)
//        {
//            modulePermissions[i] =
//            {
//                id: this.modulePermissionsStore.data.items[i].get('id'),
//                name: this.modulePermissionsStore.data.items[i].get('name'),
//                read_permission: this.modulePermissionsStore.data.items[i].get('read_permission'),
//                write_permission: this.modulePermissionsStore.data.items[i].get('write_permission')
//            };
//        }
		 
        for (var i = 0; i < this.groupMemberStore.data.items.length;  i++)
        {
            memberGroups[i] =
            {
                id: this.groupMemberStore.data.items[i].get('id'),
                group: this.groupMemberStore.data.items[i].get('name'),
                selected: this.groupMemberStore.data.items[i].get('selected')
            };
        }

        for (var i = 0; i < this.groupVisibleStore.data.items.length;  i++)
        {
            visibleGroups[i] =
            {
                id: this.groupVisibleStore.data.items[i].get('id'),
                group: this.groupVisibleStore.data.items[i].get('name'),
                selected: this.groupVisibleStore.data.items[i].get('selected')
            };
        }
	
	
        return {
            modules : this.moduleAccessGrid.getPermissionData(),
            groups_visible : Ext.encode(visibleGroups),
            group_member : Ext.encode(memberGroups)
        };
    }

});			

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: LoginPanel.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.users.LoginPanel = function(config)
{
	if(!config)
	{
		config={};
	}
	
	config.autoHeight=true;
	config.border=true;
	config.hideLabel=true;
	config.title = GO.users.lang.loginInfo;
	config.layout='form';
	config.defaults={anchor:'100%'};
	config.defaultType = 'textfield';
	//config.cls='go-form-panel';
	config.labelWidth=140;
	
	config.items=[
		{
      xtype: 'plainfield',
			fieldLabel: GO.users.lang.cmdFormLabelRegistrationTime,
			name: 'ctime'
		},
		{
      xtype: 'plainfield',
			fieldLabel: GO.users.lang.cmdFormLabelLastLogin,
			name: 'lastlogin'
		},
		{
      xtype: 'plainfield',
			fieldLabel: GO.users.lang.numberOfLogins,
			name: 'logins'
		}		
	];

	GO.users.LoginPanel.superclass.constructor.call(this, config);		
}


Ext.extend(GO.users.LoginPanel, Ext.form.FieldSet,{
	

});			

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AccountPanel.js 21127 2017-04-24 14:30:47Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.users.AccountPanel = function(config)
{
	if(!config)
	{
		config={};
	}
	
	config.autoHeight=true;
	config.border=true;
	config.hideLabel=true;
	config.title = GO.users.lang.account;
	config.layout='form';
	config.defaults={anchor:'100%'};
	config.defaultType = 'textfield';
	//config.cls='go-form-panel';
	config.labelWidth=140;
	
	this.passwordField1 = new Ext.form.TriggerField({
		inputType: 'password', 
		fieldLabel: GO.users.lang['cmdFormLabelPassword'], 
		name: 'password',
		panel:this,
		triggerConfig:{
			tag: "img",
			src: Ext.BLANK_IMAGE_URL,
			cls: "x-form-trigger x-form-trigger-plus",
			'ext:qtip':GO.users.lang.generatePassword
		},
		onTriggerClick:function(){
			var pass = this.panel.randomPassword(6);
			this.panel.passwordField1.setValue(pass);
			this.panel.passwordField2.setValue(pass);
			
			Ext.MessageBox.alert(GO.users.lang['cmdFormLabelPassword'],GO.users.lang.generatedPasswordIs+": "+pass);
		}
		});
	this.passwordField2 = new Ext.form.TextField({
		inputType: 'password', 
		fieldLabel: GO.users.lang.confirmPassword, 
		name: 'passwordConfirm'
		});
		
	this.usernameField = new Ext.form.TextField({
			fieldLabel: GO.lang['strUsername'], 
			name: 'username'
		});
		
	this.enabledField = new Ext.ux.form.XCheckbox({
		boxLabel: GO.users.lang['cmdBoxLabelEnabled'],
		name: 'enabled',
		checked: true,
		hideLabel:true
	});
	
	this.forcePasswordChange = new Ext.ux.form.XCheckbox({
		boxLabel: GO.users.lang.forcePasswordChange,
		name: 'force_password_change',
		checked: false,
		hideLabel:true
	});

	this.invitationField = new Ext.form.Checkbox({
		boxLabel: GO.users.lang.sendInvitation,
		name: 'send_invitation',
		checked: true,
		hideLabel:true
	});

	config.items=[
		this.usernameField,
		this.passwordField1,
		this.passwordField2,
		{
			fieldLabel: GO.lang['strEmail'],
			name: 'email',
			allowBlank: false,
			vtype:'emailAddress'
		},
		{
			fieldLabel: GO.lang.strRecoveryEmail,
			name: 'recovery_email',
			allowBlank: false,
			vtype:'emailAddress'
		},
		{fieldLabel: GO.lang['strFirstName'], name: 'first_name', allowBlank: false},
		{fieldLabel: GO.lang['strMiddleName'], name: 'middle_name'},
		{fieldLabel: GO.lang['strLastName'], name: 'last_name', allowBlank: false},
		{
			xtype:'panel',
			hideLabel:true,
			border:false,
			bodyStyle:'padding:0',
			layout:'column',
			defaults:{bodyStyle:'padding:0',border:false, layout:'form', columnWidth:.5},
			items:[{
				items:this.enabledField
			},{
				items:this.invitationField
			}]
		},
		this.forcePasswordChange
	];

	GO.users.AccountPanel.superclass.constructor.call(this, config);		
}


Ext.extend(GO.users.AccountPanel, Ext.form.FieldSet,{
	randomPassword : function(length){
		var charsets = [
			"abcdefghijklmnopqrstuvwxyz",
			"ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			"1234567890",
			"!@#$%^&*()<>,."];
		
		var pass = "";
		var i;
		
		//take one from each
		for(var x=0;x<charsets.length;x++){
			i = Math.floor(Math.random() * charsets[x].length);
			pass += charsets[x].charAt(i);
		}
		
		var combined = charsets.join("");
	
		length-=charsets.length;
		
		for(var x=0;x<length;x++)
		{
			i = Math.floor(Math.random() * combined.length);
			pass += combined.charAt(i);
		}
		return pass;
	},
	setUserId : function(user_id)
	{
		this.invitationField.setDisabled(user_id>0);
		this.invitationField.getEl().up('.x-form-item').setDisplayed(!user_id);
		//this.usernameField.setDisabled(user_id>0);
		this.passwordField2.allowBlank=(user_id>0);
		this.passwordField1.allowBlank=(user_id>0);
	}
});			

GO.users.ImportDialog = Ext.extend(GO.dialog.TabbedFormDialog , {

	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'importUsers',
			title:GO.lang.cmdImport,
			formControllerUrl: 'users/user',
			submitAction: 'import',
			loadOnNewModel: false,
			fileUpload : true
		});
		
		GO.users.ImportDialog.superclass.initComponent.call(this);	
	},

	submitForm : function(hide){
		if(this.importPanel.fileSelector.inputs.items.length == 1)
			this.hide();
		else
			GO.users.ImportDialog.superclass.submitForm.call(this,hide);
	},
	
	buildForm : function () {
		
		this.importPanel = new GO.base.model.ImportPanel({
			filetypes:[
				['csv','CSV (Comma Separated Values)']
			],
			controllers:[
				['GO\\Users\\Controller\\UserController',GO.lang.user]
			]
//			,
//			importBaseParams:[
//				{}
//			]
		});
		
		this.updateExisting = new Ext.ux.form.XCheckbox({
			fieldLabel: GO.users.lang.updateExistingOnImport,
			name: 'updateExisting'
		});
		
		this.importPanel.add(this.updateExisting);
		
		this.exampleButton = new Ext.Button({
			text:GO.users.lang.downloadSampleCSV,
			width: 200,
			fieldLabel: GO.users.lang.downloadSampleCSV,
			handler: function(){
				window.open(GO.url('users/user/getImportExample'));
			},
			scope:this			
		});

		this.importPanel.add(this.exampleButton);
		
		this.addPanel(this.importPanel);
	}
});


//
//GO.users.ImportDialog = Ext.extend(Ext.Window, {
//	
//	initComponent : function(){
//		
//		this.title=GO.lang.cmdImport;
//		
//		this.width=500;
//		this.autoHeight=true;
//		
//		this.closeAction='hide';
//		
//		this.uploadFile = new GO.form.UploadFile({
//			inputName : 'importfile',
//			max:1  				
//		});				
//		
//		this.upForm = new Ext.form.FormPanel({
//			fileUpload:true,
//			waitMsgTarget:true,
//			items: [new GO.form.HtmlComponent({
//				html: GO.users.lang.importText+'<br /><br />'
//			}),
//			this.uploadFile],
//			cls: 'go-form-panel'
//		});
//		
//		
//		
//		this.items=[
//		
//		this.upForm];
//		
//		this.buttons=[
//		{
//			text:GO.lang.cmdOk,
//			handler: this.uploadHandler, 
//			scope: this
//		},
//		{
//			text:GO.lang['cmdClose'],
//			handler: function(){this.hide()}, 
//			scope: this
//		},{
//			text:GO.users.lang.downloadSampleCSV,
//			handler: function(){
//				window.open(GO.url('users/user/getImportExample'));
//			},
//			scope:this			
//		}];
//		
//		this.addEvents({'import': true});
//		
//		GO.users.ImportDialog.superclass.initComponent.call(this);
//	},
//	uploadHandler : function(){
//		this.upForm.form.submit({
//			waitMsg:GO.lang.waitMsgUpload,
//			url:GO.settings.modules.users.url+'action.php',
//			params: {
//			  task: 'import'	
//			},
//			success:function(form, action){
//				this.uploadFile.clearQueue();						
//				this.hide();
//				
//				this.fireEvent('import');
//				
//				var fb = action.result.feedback.replace(/BR/g,'<br />');
//				
//				Ext.MessageBox.alert(GO.lang.strSuccess, fb);
//			},
//			failure: function(form, action) {	
//				if(action.failureType == 'client')
//				{					
//					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
//				} else {
//					
//					var fb = action.result.feedback.replace(/BR/g,'<br />');
//					
//					Ext.MessageBox.alert(GO.lang['strError'], fb);
//				}
//			},
//			scope: this
//		});			
//	}
//});



GO.users.contactCustomFieldsCategoriesStore = new GO.data.JsonStore({
	url: GO.url('users/settings/loadContactCustomfieldCategories'),
	root: 'results', 
	totalProperty: 'total', 
	id: 'cf_category_id',
	fields: Array('id','extends_model','acl_id','name','sort_index'),
	remoteSort: true
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: RegisterEmailPanel.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.users.RegisterEmailPanel = Ext.extend(Ext.Panel,{

	initComponent : function(){
		
		this.autoScroll=true;
		this.border=false;
		this.hideLabel=true;
		this.title = GO.users.lang.registrationEmail;
		this.layout='form';
		this.cls='go-form-panel';
		this.labelWidth=50;
		
		this.emailSubjectField = new Ext.form.TextField({
			name: 'register_email_subject',
			anchor: '100%',
			fieldLabel:GO.lang.strSubject
		});
		
		this.emailBodyField = new Ext.form.TextArea({
			hideLabel:true,
			name: 'register_email_body',
			anchor:'100% -30',
			fieldLabel:GO.lang.strSubject,
			height:250
		});
		
		this.items = [
			this.emailSubjectField,
			this.emailBodyField
		]
	
		GO.users.RegisterEmailPanel.superclass.initComponent.call(this);
	}
});			

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: SelectSettingPanels.js 17133 2014-03-20 08:25:24Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.users.SelectSettingPanels = Ext.extend(Ext.Panel,{

	tabElements : [],

	initComponent : function(){
		
		this.autoScroll=true;
		this.border=false;
		this.hideLabel=true;
		this.title = GO.users.lang.enabledSettingtabs;
		this.layout='form';
		this.cls='go-form-panel';
		this.labelWidth=50;
		
		this.items = [];
		this.items.push(new GO.form.HtmlComponent({html:GO.users.lang.explanation_cf_settingspanels}));
		
		this.items.push(new GO.form.HtmlComponent({html:'<br /><h1>'+GO.users.lang.show_addresslists_panel+'</h1>'}));
		
		// This item is saved in the go_settings table as "globalsettings_show_tab_addresslist".
		this.items.push({
			xtype:'xcheckbox',
			boxLabel: GO.users.lang.addresslist_panel,
			name: 'globalsettings_show_tab_addresslist',
			hideLabel:true,
			checked: false
			});		
		
		this.items.push(new GO.form.HtmlComponent({html:'<br /><h1>'+GO.users.lang.enabled_cf_tabs+'</h1>'}));
		GO.users.SelectSettingPanels.superclass.initComponent.call(this);
	},
	
	removeComponents : function(){
			var f = this.ownerCt.ownerCt.form;
			for(var i=0;i<this.tabElements.length;i++)
			{
				f.remove(this.tabElements[i]);
				this.remove(this.tabElements[i], true);
			}
			this.tabElements=[];
		},
	
	loadComponents : function(){
		
		this.removeComponents();

		var f = this.ownerCt.ownerCt.form;
		
		for(var i=0;i<GO.users.contactCustomFieldsCategoriesStore.data.items.length;i++)
		{
			var record = GO.users.contactCustomFieldsCategoriesStore.data.items[i];
			
			this.tabElements.push(new Ext.form.Checkbox({
				boxLabel: record.data.name,
				labelSeparator: '',
				name: 'tab_cf_cat_'+record.data.id,
				autoCreate:  { tag: "input", type: "checkbox", autocomplete: "off", value: record.data.id },
				value:false,
				hideLabel:true
			}));
			
			this.add(this.tabElements[i]);
			f.add(this.tabElements[i]);
		}
		this.doLayout();
		
	},
	afterRender : function(){
		GO.users.SelectSettingPanels.superclass.afterRender.call(this);

		if(GO.users.contactCustomFieldsCategoriesStore.loaded){
			this.loadComponents();
		} else {
			GO.users.contactCustomFieldsCategoriesStore.load();
		}	
		GO.users.contactCustomFieldsCategoriesStore.on('load', function(){
			this.loadComponents();
		}, this);
	}	
});			

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: SettingsDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.users.SettingsDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'usersettings',
			title: GO.lang['cmdSettings'],
			formControllerUrl: 'users/settings',
			height:360,
			width:500
//			,
//			helppage:'Z-push_admin_user_manual#Settings'
		});
		
		GO.users.SettingsDialog.superclass.initComponent.call(this);	
	},
	  
	buildForm : function () {
		
		this.registerEmailPanel = new GO.users.RegisterEmailPanel();
		this.selectSettingPanels = new GO.users.SelectSettingPanels();
	
		this.addPanel(this.registerEmailPanel);
		this.addPanel(this.selectSettingPanels);
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: DiskQuotaPanel.js 16018 2013-10-22 12:26:17Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Michael de Hart <mdhart@intermesh.nl>
 */
GO.users.DiskQuotaPanel = Ext.extend(Ext.Panel,{

	initComponent : function(){
		
		Ext.apply(this,{
			border:false,
			//title: GO.users.lang['diskQuota'],
			layout:'form',
			items: [{
					xtype: 'fieldset',
					title: GO.users.lang['diskSpace'],
					items: [{
						xtype: 'compositefield',
						items: [{
								xtype: 'numberfield',
								name: 'disk_quota',
								fieldLabel: GO.users.lang['diskQuota'],
								decimals: 0
							},{
								xtype: 'displayfield',
								value: 'MB'
						}]
					},
					{
						xtype: 'displayfield',
						name: 'disk_usage',
						fieldLabel: GO.users.lang['spaceUsed'],
						setValue: function(v) {
							this.setRawValue(Math.round(v/1024/1024*100)/100+'MB');
							return this;
						}
					}
				]
				}]
		});
	
		GO.users.DiskQuotaPanel.superclass.initComponent.call(this);
	}
});	

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: UsersGrid.js 21039 2017-04-06 11:33:19Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author Boy Wijnmaalen <bwijnmaalen@intermesh.nl>
 */

GO.users.UsersGrid = function(config)
{	
	if(!config)
	{
		config = {};
	}
	
	
		var fields = {
		fields:['id', 'username', 'name','logins','lastlogin','disk_quota','disk_usage', 'ctime','address','address_no','zip','city','state','country','home_phone','email',
	    	'waddress','waddress_no','wzip','wcity','wstate','wcountry','wphone','enabled','force_password_change'],
		columns:[
				{header: GO.users.lang.id, dataIndex: 'id', width: 40},
        {header: GO.lang['strUsername'], dataIndex: 'username', width: 200},
        {header: GO.lang['strName'], dataIndex: 'name', width: 250},
        {header: GO.users.lang.numberOfLogins, dataIndex: 'logins', width: 100, align:"right"},
        {header: GO.users.lang['cmdFormLabelLastLogin'], dataIndex: 'lastlogin', width: 110},
        {header: GO.users.lang['cmdFormLabelRegistrationTime'], dataIndex: 'ctime', width: 110},      
        {header: GO.lang['strEmail'], dataIndex: 'email',  hidden: false, width: 150},
        {
            header: GO.users.lang['diskQuota'], 
            dataIndex: 'disk_quota',
            width: 100, 
            renderer: function(v, metaData, record){
                if(v)
                   return v+' MB';
            }
        },
        {
            header: GO.users.lang['spaceUsed'], 
            dataIndex: 'disk_usage',
            width: 100, 
            renderer: function(v, metaData, record){
                var quota = record.data.disk_quota
                var mb_used = v/1024/1024;
                if(v) {
                    return '<div class="go-progressbar">'+
                            '<div class="go-progress-indicator" style="width:'+Math.ceil(mb_used/GO.util.unlocalizeNumber(quota)*100)+'%"></div>'+
                            '</div>';
                }
                else
                    return mb_used+' MB';
            }
        },
	{header: GO.users.lang['cmdBoxLabelEnabled'], dataIndex: 'enabled',  hidden: false, width: 100},
	{header: GO.users.lang['changePassword'], dataIndex: 'force_password_change',  hidden: false, width: 170, renderer: GO.grid.ColumnRenderers.yesNo}
    ]
	};

	if(GO.customfields)
	{
		GO.customfields.addColumns("GO\\Base\\Model\\User", fields);
	}

	config.store = new GO.data.JsonStore({
	    url: GO.url('users/user/store'),
	    baseParams: {task: 'users'},
	    id: 'id',
	    totalProperty: 'total',
	    root: 'results',
	    fields: fields.fields,
	    remoteSort: true
	});

	config.loadMask=true;
						
	config.store.setDefaultSort('username', 'ASC');
 
	config.view = new Ext.grid.GridView({
		getRowClass : function(record, rowIndex, p, store){
			if(record.data.enabled == GO.lang['no']){
				return 'user-disabled';
			}
		}
	});

	config.deleteConfig={extraWarning:GO.users.lang.deleteWarning+"\n\n"};
			
	config.cm = new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:fields.columns
	});	
    
   if(GO.settings.config.max_users>0)
   {
	   config.bbar = new Ext.PagingToolbar({
	   			cls: 'go-paging-tb',
	        store: config.store,
	        pageSize: parseInt(GO.settings['max_rows_list']),
	        displayInfo: true,
	        displayMsg: GO.lang['displayingItems']+'. '+GO.lang.strMax+' '+GO.settings.config.max_users,
	        emptyMsg: GO.lang['strNoItems']
	    });
   }

		config.sm = new Ext.grid.RowSelectionModel();
		config.paging=true;		
				
		GO.users.UsersGrid.superclass.constructor.call(this,config);
};
		
Ext.extend(GO.users.UsersGrid, GO.grid.GridPanel,{
	
	afterRender : function(){
		GO.users.UsersGrid.superclass.afterRender.call(this);
		
		this.on("rowdblclick",this.rowDoubleClick, this);			
		this.store.load();


		GO.dialogListeners.add('user',{
			scope:this,
			save:function(){
				this.store.reload();
			}
		});
	},			
	
	rowDoubleClick : function (grid, rowIndex, event)
	{
		var selectionModel = grid.getSelectionModel();
		var record = selectionModel.getSelected();
		GO.users.showUserDialog(record.data['id']);
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: MainPanel.js 19225 2015-06-22 15:07:34Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author Boy Wijnmaalen <bwijnmaalen@intermesh.nl>
 */


GO.users.MainPanel = function(config)

{	
	if(!config)
	{
		config = {};
	}


	
	config.layout='border';
	config.border=false;
	
	this.usersGridPanel = new GO.users.UsersGrid({'region':'center'});
	
	this.groupsGrid = new GO.users.GroupsGrid({
		relatedStore: this.usersGridPanel.store,
		region:'west',
		id:'users-groups-panel',
		width: 250

	});
	
  this.searchField = new GO.form.SearchField({
		store: this.usersGridPanel.store,
		width:320
  });
	
	this.tbar = new Ext.Toolbar({		
			cls:'go-head-tb',
			items: [{
		      	 	xtype:'htmlcomponent',
				html:GO.users.lang.name,
				cls:'go-module-title-tbar'
			},
		  	{
		  		iconCls: 'btn-add', 
		  		text: GO.lang['cmdAdd'], 
		  		cls: 'x-btn-text-icon', 
		  		handler: function(){
		  			if(GO.settings.config.max_users>0 && this.usersGridPanel.store.totalLength>=GO.settings.config.max_users)
		  			{
		  				Ext.Msg.alert(GO.lang.strError, GO.users.lang.maxUsersReached);
		  			}else
		  			{
		  				GO.users.showUserDialog();
		  			}
		  		}, 
		  		scope: this
		  	},
		  	{
		  		iconCls: 'btn-delete', 
		  		text: GO.lang['cmdDelete'], 
		  		cls: 'x-btn-text-icon', 
		  		handler: function(){
						this.usersGridPanel.deleteSelected();
					},
		  		scope: this
		  	},{
		  		iconCls: 'btn-upload',
		  		text:GO.lang.cmdImport,
		  		handler:function(){
		  			if(!this.importDialog)
		  			{
		  				this.importDialog = new GO.users.ImportDialog();
		  				this.importDialog.on('import', function(){this.usersGridPanel.store.reload();}, this);
		  			}
		  			this.importDialog.show();
		  		},
		  		scope:this		  		
		  	},{
				iconCls:'btn-settings',
				text:GO.lang.administration,
				handler:function(){
					if(!this.settingsDialog)
					{
						this.settingsDialog = new GO.users.SettingsDialog();
					}
					this.settingsDialog.show();
				},
				scope:this
			},
			this.exportMenu = new GO.base.ExportMenu({className:'GO\\Users\\Export\\CurrentGrid'}),
			{
				iconCls: 'bsync-btn-sync',
				text: GO.users.lang['transferData'],
				handler:function(){
					if(!this.transferDialog)
					{
						this.transferDialog = new GO.users.TransferDialog();
					}
					this.transferDialog.show();
				},
				scope:this
			},
//			{
//				enableToggle:true,
//				text:GO.users.lang.showProUsers,
//				toggleHandler:function(btn, pressed){
//					this.store.baseParams.show_licensed=pressed ? 1 : 0;
//					this.store.load();
//				},
//				scope:this
//			},
				'-',
		         GO.lang['strSearch']+':',
		        this.searchField
		    ]});
			
	this.exportMenu.setColumnModel(this.usersGridPanel.getColumnModel());
	
	config.items= [
		this.groupsGrid,
		this.usersGridPanel
	];
	
	GO.users.MainPanel.superclass.constructor.call(this, config);

};

Ext.extend(GO.users.MainPanel, Ext.Panel,{
	show : function() {
		
		GO.users.MainPanel.superclass.show.call(this);
		this.groupsGrid.store.load();
		
	}
});

GO.users.showUserDialog = function(user_id, config){

	if(!GO.users.userDialog)
		GO.users.userDialog = new GO.users.UserDialog();

	GO.users.userDialog.show(user_id, config);
}


GO.linkHandlers["GO\\Base\\Model\\User"]=function(id){
	//GO.users.showUserDialog(id);
	if(!GO.users.userLinkWindow){
		var userPanel = new GO.users.UserPanel();
		GO.users.userLinkWindow = new GO.LinkViewWindow({
			title: GO.lang.strUser,
			closeAction:'hide',
			items: userPanel,
			userPanel: userPanel
		});
	}
	GO.users.userLinkWindow.userPanel.load(id);
	GO.users.userLinkWindow.show();
	return GO.users.userLinkWindow;
};

GO.linkPreviewPanels["GO\\Base\\Model\\User"]=function(config){
	config = config || {};
	return new GO.users.UserPanel(config);
}


GO.moduleManager.addModule('users', GO.users.MainPanel, {
	title : GO.lang.users,
	iconCls : 'go-tab-icon-users',
	admin :true
});

GO.users.UserPanel = Ext.extend(GO.DisplayPanel,{

	model_name : "GO\\Base\\Model\\User",

	loadParams : {task: 'user_with_items'},

	idParam : 'id',

	loadUrl : "users/user/display",

	editGoDialogId : 'user',

	editHandler : function(){
		GO.users.showUserDialog(this.link_id);		
	},

	initComponent : function(){


		this.template =
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0">'+
					'<tr>'+
						'<td colspan="2" class="display-panel-heading"><b>'+GO.lang.strUsername+': {username}</b></td>'+
					'</tr>'+

					'<tr>'+

						// PERSONAL DETAILS+ 1e KOLOM
						'<td valign="top">'+
							'<table cellpadding="0" cellspacing="0" border="0">'+
								//NAME

								'<tr>'+
									'<td>' + GO.lang['strName'] + ':</td><td> {name}</td>'+
								'</tr>'+
								'<tr>'+
									'<td>' + GO.lang['strUsername'] + ':</td><td> {username}</td>'+
								'</tr>'+
								'<tr>'+
									'<td>' + GO.lang['strEmail'] + ':</td><td> {email}</td>'+
								'</tr>'+
								
								'<tpl if="contact_id"><tr>'+
									'<td colspan="2"><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Addressbook\\\\\\\\Model\\\\\\\\Contact\'].call(this, {contact_id});">'+GO.users.lang.openContact+'</a></td></tr></tpl>'+
								
							'</table>'+
							
							
							
						'</td>'+
					'</tr>'+
				'</table>'+
				GO.linksTemplate;

				if(GO.customfields)
				{
					this.template +=GO.customfields.displayPanelTemplate;
				}


		Ext.apply(this.templateConfig, {
			addSlashes : function(str)
			{
				str = GO.util.html_entity_decode(str, 'ENT_QUOTES');
				str = GO.util.add_slashes(str);
				return str;
			},
			mailTo : function(email, name) {

				if(GO.email && GO.settings.modules.email.read_permission)
				{
					return '<a href="#" onclick="GO.email.showAddressMenu(event, \''+this.addSlashes(email)+'\',\''+this.addSlashes(name)+'\');">'+email+'</a>';
				}else
				{
					return '<a href="mailto:'+email+'">'+email+'</a>';
				}
			},
			
			isuserFieldset: function(values){
				if(!GO.util.empty(values['email']) ||
					!GO.util.empty(values['home_phone']) ||
					!GO.util.empty(values['fax']) ||
					!GO.util.empty(values['cellular']) ||
					!GO.util.empty(values['work_phone']) ||
					!GO.util.empty(values['work_fax'])	)
				{
					return true;
				} else {
					return false;
				}
			},
		isPhoneFieldset : function(values)
			{
				if(!GO.util.empty(values['home_phone']) ||
					!GO.util.empty(values['fax']) ||
					!GO.util.empty(values['cellular']) )
				{
					return true;
				} else {
					return false;
				}
			},
			isWorkPhoneFieldset : function(values)
			{
				if(!GO.util.empty(values['work_phone']) ||
					!GO.util.empty(values['work_fax']) )
				{
					return true;
				} else {
					return false;
				}
			},
			isWorkFieldset : function(values)
			{
				if(!GO.util.empty(values['company']) ||
					!GO.util.empty(values['function']) ||
					!GO.util.empty(values['department']))
				{
					return true;
				} else {
					return false;
				}
			},
			GoogleMapsCityStreet : function(values)
			{
				var google_url = 'http://maps.google.com/maps?q=';

				if(!GO.util.empty(values['address']) && !GO.util.empty(values['city']))
				{
					if(!GO.util.empty(values['address_no']))
					{
						return '<a href="' + google_url + values['address'] + '+' + values['address_no'] + '+' + values['city'] + '" target="_blank" >' + values['address'] + ' ' + values['address_no'] + '</a>';
					} else {
						return '<a href="' + google_url + values['address'] + '+' + values['city'] + '" target="_blank" >' + values['address'] + '</a>';
					}
				} else {
					return values['address'] + ' ' + values['address_no'];
				}
			}
		});

		Ext.apply(this.templateConfig, GO.linksTemplateConfig);


		if(GO.files)
		{
			Ext.apply(this.templateConfig, GO.files.filesTemplateConfig);
			this.template += GO.files.filesTemplate;
		}

		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}


		GO.users.UserPanel.superclass.initComponent.call(this);


		if(GO.documenttemplates)
		{
			this.newOODoc = new GO.documenttemplates.NewOODocumentMenuItem();
			this.newOODoc.on('create', function(){this.reload();}, this);

			this.newMenuButton.menu.add(this.newOODoc);

			GO.documenttemplates.ooTemplatesStore.on('load', function(){
				this.newOODoc.setDisabled(GO.documenttemplates.ooTemplatesStore.getCount() == 0);
			}, this);
		}
	},
	getLinkName : function(){
		return this.data.full_name;
	},
	setData : function(data)
	{
		GO.users.UserPanel.superclass.setData.call(this, data);

		if(GO.documenttemplates && !GO.documenttemplates.ooTemplatesStore.loaded)
			GO.documenttemplates.ooTemplatesStore.load();
	}
});

GO.users.GroupsGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
	
	config.title = GO.lang['userGroups'];
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	if(!config.store)
		config.store = new GO.data.JsonStore({
			url: GO.url('users/group/store'),
			baseParams: {
				'permissionLevel' : GO.permissionLevels.read,
				limit:parseInt(GO.settings.config.nav_page_size)
			},
			root: 'results', 
			totalProperty: 'total', 
			id: 'id',
			fields: ['id','name','checked'],
			remoteSort: true
		});

	Ext.apply(config, {
		allowNoSelection:true,
		bbar: new GO.SmallPagingToolbar({
			items:[this.searchField = new GO.form.SearchField({
				store: config.store,
				width:120,
				emptyText: GO.lang.strSearch
			})],
			store:config.store,
			pageSize:GO.settings.config.nav_page_size
		})
	});
	
	GO.users.GroupsGrid.superclass.constructor.call(this, config);
};


Ext.extend(GO.users.GroupsGrid, GO.grid.MultiSelectGrid, {});

GO.users.TransferDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	initComponent : function(){


		Ext.apply(this, {
			loadOnNewModel: false,
			goDialogId:'usertransferdialog',
			title: 'Transfer Userdata',
			formControllerUrl: 'users/user',
			createAction : 'transfer',
			layout: 'fit',
			height:230,
			//enableOkButton: GO.fixdossiers.isManager,
			enableApplyButton: false,
			width:400,
			jsonPost: true
		});
		
		GO.users.TransferDialog.superclass.initComponent.call(this);	
	},
	  
	buildForm : function () {
		this.transferPanel = this.buildTransferPanel();
		this.addPanel(this.transferPanel);
	},
	
	buildTransferPanel : function() {
		
		return new Ext.Panel({
			title:'Select users',			
			cls:'go-form-panel',
			layout:'form',
			width: '100%',
			items:[
				{
					xtype:'displayfield',
					html: 'Select 2 user accounts to transfer data from one account to the other'
				},
				new GO.form.SelectUser({
					hiddenName: 'transfer.id_from'
				}),
				new GO.form.SelectUser({
					hiddenName: 'transfer.id_to'
				})
			]				
		});
	}
	
});

GO.modules.ModulePermissionsWindow = Ext.extend(GO.Window,{
	
	module_id : '',
	initComponent : function(){
		this.permissionsTab = new GO.grid.PermissionsPanel({
					title : GO.users.lang.useModule,
					levels:[
						GO.permissionLevels.read,
						GO.permissionLevels.manage
					]
				});
				
		Ext.apply(this,{
			title : GO.lang['strPermissions'],
			layout : 'fit',
			height : 600,
			width : 440,
			modal:true,
			closable:false,
			closeAction:'hide',
			items : [this.permissionsTab],
			buttons : [{
				text : GO.lang['cmdOk'],
				handler : function() {
					GO.request({
						timeout : 2 * 60 * 1000,
						url : 'modules/module/checkDefaultModels',
						params : {
							moduleId : this.module_id
						},
						success : function(response, options, result) {
							this.hide();
						},
						scope : this
					});
				},
				scope : this
			}]
				  
		});
		
		GO.modules.ModulePermissionsWindow.superclass.initComponent.call(this);
	},
	show: function(moduleId, name, acl_id) {
		this.module_id=moduleId;
		
		this.setTitle(GO.lang['strPermissions'] + ' ' + name);		
		GO.modules.ModulePermissionsWindow.superclass.show.call(this);		
		this.permissionsTab.setAcl(acl_id);		
	}
})

/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: modules.js 18445 2014-11-11 09:58:34Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.modules.MainPanel = function(config) {
	if (!config) {
		config = {};
	}
	
	
	var reader = new Ext.data.JsonReader({
			root: 'results',
			totalProperty: 'total',
			fields: ['name', 'package', 'description', 'id', 'sort_order', 'admin_menu', 'acl_id', 'icon', 'enabled', 'warning', 'buyEnabled','not_installable'],
			id: 'id'
		});

	this.store = new GO.data.GroupingStore({
		url: GO.url('modules/module/store'),
		reader: reader,
		sortInfo: {
			field: 'name',
			direction: 'ASC'
		},
		groupField: 'package',
		remoteGroup:false,
		remoteSort:false
	});
	
	this.store.on('load',function(){
		if(!this.store.reader.jsonData.has_license)
			this.trialButton.show();
		else
			this.trialButton.hide();
		
	}, this);

	config.tbar = new Ext.Toolbar({
		cls: 'go-head-tb',
		items: [
			{
				xtype: 'htmlcomponent',
				html: GO.modules.lang.name,
				cls: 'go-module-title-tbar'
			}, {
				iconCls: 'btn-refresh',
				text: GO.lang.cmdRefresh,
				cls: 'x-btn-text-icon',
				handler: function() {
					this.store.load();
				},
				scope: this
			},
//			{
//				iconCls: 'btn-settings',
//				text: "Install license file",
//				cls: 'x-btn-text-icon',
//				hidden: GO.settings.config.product_name!=='Group-Office',
//				handler: function() {
//					if(!this.installLicenseDialog){
//						this.installLicenseDialog = new GO.modules.InstallLicenseDialog({
//							
//						});						
//					}					
//					this.installLicenseDialog.show();
//				},
//				scope: this
//			},
			{
				iconCls: 'btn-settings',
				text: GO.modules.lang.buyLicenses,
				cls: 'x-btn-text-icon',
				hidden: GO.settings.config.product_name != 'Group-Office',
				handler: function() {				
					window.open('https://www.group-office.com/shop/');					
				},
				scope: this
			},


			this.trialButton = new Ext.Button({
				iconCls: 'btn-settings',
				text: GO.modules.lang.trialLicense,
				cls: 'x-btn-text-icon',
				hidden:true,
				handler: function() {
					Ext.MessageBox.confirm(
						GO.modules.lang.trialLicense,
						GO.modules.lang.trialLicenseText,
						function(btn){
							if(btn==='yes'){
								window.open('https://www.group-office.com/30-day-trial?hostname='+document.domain,'groupoffice-shop');
							}
						}
					);
					
				},
				scope: this
			})]
	});
	
	var checkColumn = new GO.grid.CheckColumn({
		header: GO.modules.lang.enabled,
		dataIndex: 'enabled',
		width: 100,
		disabled_field:'not_installable',
		listeners: {
			scope: this,
			change: function(record, checked) {
				GO.request({
					maskEl:this.getEl(),
					url: 'modules/module/update',
					params: {
						id: record.id,
						enabled: checked
					},
					scope: this,
					success: function(response, options, result) {

						if (result.acl_id) {
							record.set('acl_id', result.acl_id);

							if (record.data.enabled) {
								this.showPermissions(record.data.id, record.data.name, record.data.acl_id);
								this.store.load();
							}
						}
						record.commit();
					}
				});
			}
		}
	});

	config.cm = new Ext.grid.ColumnModel([
		{
			header: GO.lang['strName'],
			dataIndex: 'name',
			id: 'name',
			renderer: this.iconRenderer
		}, 
		checkColumn,
		{
			header: GO.modules.lang.sort_order,
			dataIndex: 'sort_order',
			sortable:true,
			id: 'sort_order',
			editor: new GO.form.NumberField({
				allowBlank: false,
				decimals:0
			})
		},
		{
			header: "Package",
			dataIndex: 'package',
			id: 'package'
			
		}
	]);
	config.clicksToEdit = 1;
	config.loadMask=true;
	
	var store = this.store;

	config.view = new Ext.grid.GroupingView({
		hideGroupedColumn:true,
		enableRowBody: true,
		showPreview: true,
		showGroupName: false,
//		autoFill: true,
		startCollapsed:true,
		emptyText: GO.lang.strNoItems,
//		groupTextTpl: '{text}<tpl if="values.rs[0].data.buyEnabled"><div class="mo-buy">Buy licenses</div></tpl>',
//		processEvent: function(name, e){
//			
//			
//        Ext.grid.GroupingView.superclass.processEvent.call(this, name, e);
//				
//				var buyLink = Ext.get(e.getTarget('.mo-buy', this.mainBody));
//				if(buyLink){
//					
//					if(name == 'mousedown' && e.button == 0){
//						var group = buyLink.parent('.x-grid-group');
//						var row = group.query('.x-grid3-row');					
//						var rowIndex = this.findRowIndex(row[0]);
//						var record = store.getAt(rowIndex);
//
//						GO.modules.showBuyDialog(record);
//					}
//				}else
//				{
//				
//					var hd = e.getTarget('.x-grid-group-hd', this.mainBody);
//					if(hd){
//							// group value is at the end of the string
//							var field = this.getGroupField(),
//									prefix = this.getPrefix(field),
//									groupValue = hd.id.substring(prefix.length),
//									emptyRe = new RegExp('gp-' + Ext.escapeRe(field) + '--hd');
//
//							// remove trailing '-hd'
//							groupValue = groupValue.substr(0, groupValue.length - 3);
//
//							// also need to check for empty groups
//							if(groupValue || emptyRe.test(hd.id)){
//									this.grid.fireEvent('group' + name, this.grid, field, groupValue, e);
//							}
//							if(name == 'mousedown' && e.button == 0){
//									this.toggleGroup(hd.parentNode);
//							}
//					}
//				}
//
//    },
		getRowClass: function(record, rowIndex, p, store) {
			if (this.showPreview && record.data.description.length) {
				p.body = '<div class="mo-description">' + record.data.description + '</div>';
				return 'x-grid3-row-expanded';
			}
			return 'x-grid3-row-collapsed';
		}
	});


//	config.ddGroup = 'ModulesGridDD';
//
//	config.enableDragDrop = true;

	config.autoExpandColumn='name';
	config.layout = 'fit';
	config.sm = new Ext.grid.RowSelectionModel({
		singleSelect: false
	});
	config.paging = false;

	GO.modules.MainPanel.superclass.constructor.call(this, config);

	this.on('afteredit', function(e){
		this.submitRecord(e.record);
	}, this);
	
	this.on('beforeedit', function(e){
		return e.record.data.enabled;
	}, this);
	

	this.on("rowdblclick", function(grid, rowIndex, event) {
		var moduleRecord = grid.store.getAt(rowIndex);

		if (moduleRecord.data.acl_id) {
			this.showPermissions(moduleRecord.data.id, moduleRecord.data.name, moduleRecord.data.acl_id);
		}
	}, this);

};

Ext.extend(GO.modules.MainPanel,Ext.grid.EditorGridPanel, {
	

	afterRender: function() {

		GO.modules.MainPanel.superclass.afterRender.call(this);
		
		
//
//		var notifyDrop = function(dd, e, data) {
//			var sm = this.getSelectionModel();
//			var rows = sm.getSelections();
//			var cindex = dd.getDragData(e).rowIndex;
//			if (cindex == 'undefined') {
//				cindex = this.store.data.length - 1;
//			}
//			for (var i = 0; i < rows.length; i++) {
//				var rowData = this.store.getById(rows[i].id);
//
//				if (!this.copy) {
//					this.store.remove(this.store.getById(rows[i].id));
//				}
//
//				this.store.insert(cindex, rowData);
//			}
//			;
//
//			this.save();
//
//		};
//
//		var ddrow = new Ext.dd.DropTarget(this.getView().mainBody, {
//			ddGroup: 'ModulesGridDD',
//			copy: false,
//			notifyDrop: notifyDrop.createDelegate(this)
//		});

		this.store.load();

	},
//	save: function() {
//		var modules = new Array();
//
//		for (var i = 0; i < this.store.data.items.length; i++) {
//			modules[i] = {
//				id: this.store.data.items[i].get('id'),
//				sort_order: i,
//				admin_menu: this.store.data.items[i].get('admin_menu')
//			};
//		}
//
//		GO.request({
//			maskEl: this.container,
//			url: 'modules/module/saveSortOrder',
//			params: {
//				modules: Ext.encode(modules)
//			},
//			scope: this
//		});
//	},
//	uninstallModule : function() {
//
//		var uninstallModules = Ext.encode(this.selModel.selections.keys);
//
//		switch (this.selModel.selections.keys.length) {
//			case 0 :
//				Ext.MessageBox.alert(GO.lang['strError'],
//					GO.lang['noItemSelected']);
//				return false;
//				break;
//
//			case 1 :
//				var strConfirm = GO.lang['strDeleteSelectedItem'];
//				break;
//
//			default :
//				var t = new Ext.Template(GO.lang['strDeleteSelectedItems']);
//				var strConfirm = t.applyTemplate({
//					'count' : this.selModel.selections.keys.length
//				});
//				break;
//		}
//
//		Ext.MessageBox.confirm(GO.lang['strConfirm'], strConfirm,
//			function(btn) {
//				if (btn == 'yes') {
//					this.store.baseParams.uninstall_modules = uninstallModules;
//
//					this.store.reload({
//						callback : function() {
//							if (!this.store.reader.jsonData.uninstallSuccess) {
//								Ext.MessageBox
//								.alert(
//									GO.lang['strError'],
//									this.store.reader.jsonData.uninstallFeedback);
//							}
//
//							this.store.reload();
//						},
//						scope : this
//					});
//
//					delete this.store.baseParams.uninstall_modules;
//				}
//			}, this);
//
//	},

	showPermissions: function(moduleId, name, acl_id) {
		if (!this.permissionsWin) {
			this.permissionsWin = new GO.modules.ModulePermissionsWindow();
			this.permissionsWin.on('hide', function() {
				// Loop through the recently installed modules, allowing the user to
				// set the permissions, module by module.
				if (this.installedModules && this.installedModules.length) {
					var r = this.installedModules.shift();
					this.permissionsWin.show(r.id, r.name, r.acl_id);
				}
			}, this);
		}
		this.permissionsWin.show(moduleId, name, acl_id);
	},
	iconRenderer: function(name, cell, record) {
		return '<div class="mo-title" style="background-image:url(' + record.data["icon"] + ')">'
						+ name + '</div>';
	},
	warningRenderer: function(name, cell, record) {
		return record.data.warning != '' ?
						'<div class="go-icon go-warning-msg" ext:qtip="' + Ext.util.Format.htmlEncode(record.data.warning) + '"></div>' : '';
	},
	buyRenderer: function(name, cell, record) {
		return record.data.buyEnabled ? '<a href="#" class="normal-link" onclick="GO.modules.showBuyDialog(\'' + record.data.id + '\');">'+GO.modules.lang.buyLicenses+'</a>' : '';
	},

	/**
	 * Submit the record
	 * 
	 * @param array record
	 * @returns {undefined}
	 */
	submitRecord : function(record){
		var url = GO.url('modules/module/updateModuleModel');

		Ext.Ajax.request({
			method:'POST',
			url: url,
			params : {
				id:record.data.id
			},
			jsonData: {module:this.createJSON(record.data)},
			scope : this,
			callback : function (options, success,response) {
				var responseParams = Ext.decode(response.responseText);

				if (!responseParams.success) {
					GO.errorDialog.show(responseParams.feedback);
				}else{
					if(responseParams.id){
						record.set('id', responseParams.id);
					}
					record.commit();
				}
			}
		});
	},
/**
 * Create Json string for posting to the controller
 * 
 * @param array params
 * @returns JSON String
 */
	createJSON : function(params){

		var keys, JSON={}, currentJSONlevel;
		
		for(var key in params){
			
			keys = key.split('.');
			
			currentJSONlevel = JSON;
			
			for(var i=0;i<keys.length;i++){
				if(i===(keys.length-1)){
					
					// Change true to 1 for customfields checkboxes
					if(params[key] == true){
						params[key] = '1';
					}
					
					currentJSONlevel[keys[i]]= params[key];
				}else
				{
					currentJSONlevel[keys[i]]=currentJSONlevel[keys[i]] || {};
					currentJSONlevel=currentJSONlevel[keys[i]];
				}				
			}
			
			currentJSONlevel = JSON;
			
		}

		return JSON;
	}

});


GO.moduleManager.addModule('modules', GO.modules.MainPanel, {
	title: GO.modules.lang.modules,
	iconCls: 'go-tab-icon-modules',
	admin: true
});

GO.modules.BuyDialog = Ext.extend(GO.Window, {
	width: 500,
	height: 500,
	title: 'Buy',
	initComponent: function() {
		
		var store = new GO.data.JsonStore({
			url : GO.url('modules/license/users'),
			fields : ['name', 'username', 'id','checked'],
			remoteSort : true,
			id:'username',
			baseParams:{
				module:''
			}
		});
		
		store.on('load', function(){
			
			this.licenseIdField.setValue(store.reader.jsonData.license_id);
			this.hostnameField.setValue(store.reader.jsonData.hostname);
			
		}, this);

		this.usersGrid = new GO.grid.MultiSelectGrid({
			loadMask:true,
			autoExpandColumn: 'name',
			noSingleSelect:true,
			extraColumns:[{
				header: GO.lang['strUsername'],
				dataIndex: "username",
				id: "username",
				width: 200
			}],
			store:store,
			allowNoSelection:true
		});
		
		
		this.formPanel = new Ext.FormPanel({
			
			url:'https://www.group-office.com/buylicense',
			standardSubmit:true,
			items:[
				this.usernamesField = new Ext.form.Hidden({
					name:'usernames',
					value:''
				}),
				this.moduleField = new Ext.form.Hidden({
					name:'module',
					value:''
				}),
				this.licenseIdField = new Ext.form.Hidden({
					name:'license_id',
					value:''
				}),
				this.hostnameField = new Ext.form.Hidden({
					name:'hostname',
					value:''
				})
			],
			hidden:true
		});
		
		


		this.layout = 'fit';
		this.items = [this.usersGrid, this.formPanel];
		
		this.buttons=[{
			text:GO.lang.cmdCancel,
			handler:function(){
				this.hide();
				
				this.usersGrid.store.removeAll();
			},
			scope:this
		},{
				text:GO.modules.lang.addToCart,
				scope:this,
				handler:function(){
					
					this.formPanel.form.getEl().dom.target='groupoffice-shop';
					
					var usernames = this.usersGrid.getSelected();					
					
					this.usernamesField.setValue(Ext.encode(usernames));
					this.formPanel.form.submit();		
					
					
					this.usersGrid.store.removeAll();
					
					this.hide();
					
				}
		}];


		GO.modules.BuyDialog.superclass.initComponent.call(this);
	},
	setModule: function(record) {
		
		this.setTitle(GO.modules.lang.selectUsersForPackage.replace('{package}',record.data.package));
		
		this.usersGrid.store.baseParams.module=record.id;
		this.moduleField.setValue(record.id);
		this.usersGrid.store.load();
	}
});

GO.modules.showBuyDialog = function(record) {
	if (!GO.modules.buyDialog) {
		GO.modules.buyDialog = new GO.modules.BuyDialog();
	}

	GO.modules.buyDialog.show();
	GO.modules.buyDialog.setModule(record);

	
};


GO.modules.InstallLicenseDialog = Ext.extend(GO.dialog.TabbedFormDialog, {
	fileUpload: true,
	title: "Install license file",
	height: 200,
	enableApplyButton: false,
	formControllerUrl: 'modules/license',
	submitAction: 'upload',
	loadOnNewModel: false,
	buildForm: function() {



		var uploadPanel = new Ext.Panel({
			layout: 'form',
			items: [{
					xtype: 'htmlcomponent',
					html: 'When you\'ve bought licenses from the App center, you can download your license file from the shop at <a target="_blank" href="https://www.group-office.com/downloads">https://www.group-office.com/downloads</a>. Click on \'Select license file\' to upload the file from your computer. Please wait one minute for the license file to be installed.',
					style:'margin-bottom:15px'
				}, this.uploadFile = new GO.form.UploadFile({
					inputName: 'license_file',
					addText: "Select license file",
					max: '1'
				})]
		});

		this.addPanel(uploadPanel);


	},
	afterSubmit: function() {
		this.uploadFile.clearQueue();
		
		GO.request({
			maskEl:this.getEl(),
			url:'modules/license/install',
			success:function(){
				Ext.MessageBox.alert("Group-Office license installed successfully", "Your license was installed and the new users were automatically added to the App permissions if necessary.\n\nThank you for using Group-Office!");
			}
		});		
		
	}
});

GO.tasks.TasksObservable = function(){
	GO.tasks.TasksObservable.superclass.constructor.call(this);

	this.addEvents({
		'save':true
	})
}
Ext.extend(GO.tasks.TasksObservable, Ext.util.Observable);

GO.tasks.tasksObservable = new GO.tasks.TasksObservable();

GO.tasks.SelectTaskStatus = Ext.extend(GO.form.ComboBox,{
	name : 'status_text',
	hiddenName : 'status',
	triggerAction : 'all',
	editable : false,
	selectOnFocus : true,
	forceSelection : true,
	fieldLabel : GO.lang.strStatus,
	mode : 'local',
	value : 'ACCEPTED',
	valueField : 'value',
	displayField : 'text',
	store : new Ext.data.SimpleStore({
		fields : ['value', 'text'],
		data : [
		['NEEDS-ACTION',
		GO.tasks.lang.needsAction],
		['ACCEPTED', GO.tasks.lang.accepted],
		['DECLINED', GO.tasks.lang.declined],
		['TENTATIVE', GO.tasks.lang.tentative],
		['DELEGATED', GO.tasks.lang.delegated],
		['COMPLETED', GO.tasks.lang.completed],
		['IN-PROCESS', GO.tasks.lang.inProcess]]
	})
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: ContinueTaskDialog.js 21045 2017-04-10 08:17:15Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.tasks.ContinueTaskDialog = Ext.extend(GO.dialog.TabbedFormDialog, {

	initComponent: function () {

		Ext.apply(this, {
			//autoHeight:true,
			height: 540,
			goDialogId: 'continuetask',
			title: GO.tasks.lang.continueTask,
			formControllerUrl: 'tasks/task'
		});

		GO.tasks.ContinueTaskDialog.superclass.initComponent.call(this);

		this.formPanel.baseParams.remind = 'on';
	},
	beforeSubmit: function (params) {
		this.formPanel.baseParams.remind_date = this.formPanel.baseParams.due_time;
	},

	beforeLoad: function (remoteModelId, config) {
		this.formPanel.baseParams.due_time = this.datePicker.getValue().format(GO.settings.date_format);
	},

	buildForm: function () {

		var now = new Date();
		var tomorrow = now.add(Date.DAY, 1);
		var eight = Date.parseDate(tomorrow.format('Y-m-d') + ' 08:00', 'Y-m-d G:i');

		this.datePicker = new Ext.DatePicker({
			internalRender: true,
			xtype: 'datepicker',
			name: 'due_time',
			format: GO.settings.date_format,
			fieldLabel: GO.lang.strDate
		});

		this.datePicker.setValue(tomorrow);

		this.datePicker.on("select", function (DatePicker, DateObj) {
			this.formPanel.baseParams.due_time = DateObj.format(GO.settings.date_format);
		}, this);
		this.propertiesPanel = new Ext.Panel({
			border: false,
			
			layout: 'border',
			waitMsgTarget: true,
			items: [
				{
					region: 'north',
					layout: 'form',
					cls: 'go-form-panel',
					autoHeight: true,
					items: [{
							items: this.datePicker,
							width: 240,
							style: 'margin:auto;'
						},
						new GO.form.HtmlComponent({html: '<br />'}),
						{
							xtype: 'timefield',
							name: 'remind_time',
							width: 220,
							format: GO.settings.time_format,
							value: eight.format(GO.settings['time_format']),
							fieldLabel: GO.lang.strTime,
							anchor: '100%'
						},
						this.statusProgressField = new GO.tasks.StatusProgressField({}),
						this.selectTaskList = new GO.tasks.SelectTasklist({fieldLabel: GO.tasks.lang.tasklist, anchor: '100%'}),
					]
				},
				{
					region: 'center',
					layout: 'anchor',
					cls: 'go-form-panel',
					items: [
						{
							xtype: 'textarea',
							name: 'comment',
							anchor: '100% 100%',							
							fieldLabel: GO.lang.strDescription
						}]
				}

			]


		});

		this.addPanel(this.propertiesPanel);
	}
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: TaskPanel.js 17728 2014-07-03 08:25:10Z wilmar1980 $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.tasks.TaskPanel = Ext.extend(GO.DisplayPanel,{
	model_name : "GO\\Tasks\\Model\\Task",
	
	stateId : 'ta-task-panel',

	editGoDialogId : 'task',
	
	editHandler : function(){		
		GO.tasks.showTaskDialog({task_id: this.model_id});		
	},	
	
	initComponent : function(){
	
		this.loadUrl=('tasks/task/display');
	
		this.template = 			
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0">'+
					'<tr>'+
						'<td colspan="2" class="display-panel-heading">'+GO.tasks.lang.task+': {name}</td>'+
					'</tr>'+
					'<tr>'+
						'<td>ID:</td>'+
						'<td>{id}</td>'+
					'</tr>'+
					'<tr>'+
						'<td>'+GO.tasks.lang.tasklist+':</td>'+
						'<td>{tasklist_name}</td>'+
					'</tr>'+
					'<tr>'+
						'<td>'+GO.tasks.lang.startsAt+':</td>'+
						'<td>{start_time}</td>'+
					'</tr>'+
					'<tr>'+
						'<td>'+GO.tasks.lang.dueAt+':</td>'+
						'<td<tpl if="late"> class="tasks-late"</tpl>>{due_time}</td>'+
					'</tr>'+
					'<tr>'+
						'<td>'+GO.lang.strStatus+':</td>'+
						'<td>{status_text}</td>'+
					'</tr>';
				
				if(GO.projects2){
					this.template +=
					'<tpl if="project_name">'+
						'<tr>'+
							'<td>'+GO.projects2.lang.project+':</td>'+
							'<td><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Projects2\\\\\\\\Model\\\\\\\\Project\'].call(this, {project_id});">{project_name}</a></td>'+
						'</tr>'+
					'</tpl>';
				} else if(GO.projects){
					this.template +=
					'<tpl if="project_name">'+
						'<tr>'+
							'<td>'+GO.projects.lang.project+':</td>'+
							'<td><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Projects\\\\\\\\Model\\\\\\\\Project\'].call(this, {project_id});">{project_name}</a></td>'+
						'</tr>'+
					'</tpl>';
				}
					
				this.template +=
					'<tpl if="!GO.util.empty(description)">'+
						'<tr>'+
							'<td colspan="2" class="display-panel-heading">'+GO.lang.strDescription+'</td>'+
						'</tr>'+
						'<tr>'+
							'<td colspan="2">{description}</td>'+
						'</tr>'+
					'</tpl>'+
									
				'</table>';																		

		
		if(GO.customfields)
		{
			this.template +=GO.customfields.displayPanelTemplate;
		}
	
		if(GO.tasks)
			this.template +=GO.tasks.TaskTemplate;

		if(GO.calendar)
			this.template += GO.calendar.EventTemplate;

		if(GO.workflow){
			this.template +=GO.workflow.WorkflowTemplate;
		}


		this.template += GO.linksTemplate;	
				
		if(GO.files)
		{
			Ext.apply(this.templateConfig, GO.files.filesTemplateConfig);
			this.template += GO.files.filesTemplate;
		}
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);
		
		
		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}

		this.template += GO.createModifyTemplate;

		this.buttons=[this.continueTaskButton = new Ext.Button({
			text:GO.tasks.lang.continueTask,
			handler:function(){
				if(!this.continueTaskDialog){
					this.continueTaskDialog = new GO.tasks.ContinueTaskDialog({
						listeners:{
							submit:function(){
								this.reload();
								var tasksModulePanel =GO.mainLayout.getModulePanel('tasks');
								if(tasksModulePanel && tasksModulePanel.rendered){
									tasksModulePanel.gridPanel.store.reload();
								}
							},
							scope:this
						}
					});
				}

				this.continueTaskDialog.show(this.data.id,this.data);
			},
			scope:this,
			disabled:true
		})];
		
		GO.tasks.TaskPanel.superclass.initComponent.call(this);
	},
	setData : function(data){
		GO.tasks.TaskPanel.superclass.setData.call(this, data);

		this.continueTaskButton.setDisabled(!data.write_permission);
	},
	reset : function(){
		GO.tasks.TaskPanel.superclass.reset.call(this);

		this.continueTaskButton.setDisabled(true);
	}
});			

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: ScheduleCallDialog.js 19324 2015-08-18 10:17:13Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.tasks.ScheduleCallDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	initComponent : function(){
		
		Ext.apply(this, {
			height:580,
			width:600,
			goDialogId:'task-schedule-call',
			title:GO.tasks.lang.scheduleCall,
			formControllerUrl: 'tasks/scheduleCall',
			submitAction : 'save',
			loadAction : 'load',
			enableApplyButton : false
		});
		
		GO.tasks.ScheduleCallDialog.superclass.initComponent.call(this);	
		this.setCurrentDateAndTime();
		this.formPanel.baseParams.remind_date=this.datePicker.getValue().format(GO.settings.date_format);
	},
	show : function (remoteModelId, config) {
		this.selectContact.clearLastSearch();
		GO.tasks.ScheduleCallDialog.superclass.show.call(this,remoteModelId, config);

		if(config && config.link_config){
			this.setContact(config.link_config.model_id,config.link_config.name);
		}
		
		this.setCurrentDateAndTime();
	},
	setCurrentDateAndTime : function(){
		var now = new Date();

		var time = now.getMinutes() +10; // + 10 minutes
		now.setMinutes(time);
		this.datePicker.setValue(now);
		this.timeField.setValue(now.format(GO.settings['time_format']));
	},
	buildForm : function () {

		this.datePicker = new Ext.DatePicker({
			xtype:'this.datePicker',
			name:'remind_date',
			format: GO.settings.date_format,
			fieldLabel:GO.lang.strDate
		});

		this.datePicker.on("select", function(datePicker, DateObj){						
			this.formPanel.baseParams.remind_date=this.formPanel.baseParams.start_time=this.formPanel.baseParams.due_time=DateObj.format(GO.settings.date_format);	
		},this);
				
		this.selectTaskList = new GO.tasks.SelectTasklist({
			fieldLabel: GO.tasks.lang.tasklist, 
			anchor:'100%'
		});
		
		this.timeField = new Ext.form.TimeField({
			name:'remind_time',
			width:220,
			format: GO.settings.time_format,
			fieldLabel:GO.lang.strTime,
			anchor:'100%'
		});
			
		this.descriptionField = new Ext.form.TextArea({
			name: 'description',
			anchor: '100%',
			width:300,
			height:45,
			fieldLabel: GO.lang.strDescription
		});		

//		this.selectContact = new GO.addressbook.SelectContact ({
//			name: 'contact_name',
//			fieldLabel:GO.addressbook.lang.contact,
//			enableKeyEvents : true,
//			remoteSort: true,
//			allowBlank:false,
//			anchor: '100%',
//			tpl:'<tpl for="."><div class="x-combo-list-item">{name} ({ab_name}) <tpl if="email">({email})</tpl></div></tpl>'
//		});
		
		this.selectContact = new GO.form.ComboBoxReset({
			name: 'contact_name',
			fieldLabel:GO.addressbook.lang.contact,
			anchor: '100%',
			allowBlank:false,
			mode:'remote',
			triggerAction:'all',
			enableKeyEvents : true,
			selectOnFocus:true,
			displayField:'name',
			valueField: 'id',
			tpl:'<tpl for="."><div class="x-combo-list-item">{name} ({ab_name}) <tpl if="email">({email})</tpl></div></tpl>',
			store: new GO.data.JsonStore({
				url: GO.url('addressbook/contact/store'),
				root: 'results',
				id: 'id',
				totalProperty:'total',
				fields: ['id','name','email','ab_name','work_phone','home_phone','cellular','cellular2'],
				remoteSort: true
			})
		});
		//copied from GO.addressbook.SelectContact
		this.selectContact.selectContactById = function(contact_id, callback, scope){
			this.getStore().load({
				params:{
					contact_id:contact_id
				},
				callback:function(){
					this.setValue(contact_id);

					if(callback){

						var record = this.store.getAt(0);

						if(!scope)
							scope=this;
						callback.call(scope, this, record);
					}
				},
				scope:this
			});

		};
		
				
		this.contactIdField = new Ext.form.Hidden({
			name:'contact_id'
		});
		
		this.phoneNumberField = new GO.form.ComboBoxReset({
			name: 'number',
			fieldLabel:GO.tasks.lang.phoneNr,
			anchor: '100%',
			allowBlank:false,
			mode:'local',
			triggerAction:'all',
			enableKeyEvents : true,
			selectOnFocus:true,
			displayField:'label',
			valueField: 'number',
			store: new Ext.data.ArrayStore({
				storeId: 'phoneNumberFieldStore',
				fields: ['id','number','label']
			})
		});
		
		this.btnAddContact = new Ext.Button ({
			text:GO.addressbook.lang.btnAddContact,
			anchor: '50%',
			disabled:true,
			style:{
				'margin-left':'105px',
				'margin-bottom':'5px'
			},
			handler:function(){
				var attrs = {};
				var name = this.selectContact.getRawValue();
				var number = this.phoneNumberField.getRawValue();
				var field = this.savePhoneNumberField.getValue();
				
				var nameParts = {};

				if(name){
					nameParts = name.split(" ");

					if(nameParts.length > 2){
						attrs.first_name = nameParts[0];
						attrs.middle_name = nameParts[1];
						attrs.last_name = nameParts[2];
					} else if(nameParts.length > 1){
						attrs.first_name = nameParts[0];
						attrs.last_name = nameParts[1];
					} else {
						attrs.first_name = nameParts[0];
					}
				}
				
				if(!GO.util.empty(field) && number){
					attrs[field] = number;
				} else if(number){
					attrs['work_phone'] = number;
				}
			
				GO.addressbook.showContactDialog(0, {values:attrs});
				
				GO.addressbook.contactDialog.on('save',this.setContactFromDialog,this);
				GO.addressbook.contactDialog.on('hide',function(){
					GO.addressbook.contactDialog.un('save', this.setContactFromDialog);
				},this, {single:true});
			},
			scope: this
		});

		this.savePhoneNumberField = new GO.form.ComboBox({
			hiddenName: 'save_as',
			fieldLabel:GO.tasks.lang.savePhoneNr,
			disabled:true,
			anchor: '100%',
			mode:'local',
			triggerAction:'all',
			selectOnFocus:true,
			displayField:'label',
			valueField: 'id',
			store: new Ext.data.ArrayStore({
				storeId: 'savePhoneNumberFieldStore',
				fields: ['id','label','number']
			})
		});
			
		this.selectContact.on('change', function(combo, new_val, old_val ){

			var record = this.selectContact.store.getById(new_val);
			
			new_val = record ? new_val :  0;

			this.contactIdField.setValue(new_val);
			this.populatePhoneFieldsWithoutRecord(new_val);
			this.btnAddContact.setDisabled(new_val!=0);

		},this);
		
		this.phoneNumberField.on('keyup', function(combo,e){
			if(e.getKey() !== 9 && e.getKey() !== 13){ // Don't do anything when the tab button is pressed
				this.savePhoneNumberField.setDisabled(false);
			}
		},this);
		
		this.phoneNumberField.on('select', function(combo,record,index){			
			this.disableSavePhoneNumberField();
		},this);
		
		this.propertiesPanel = new Ext.Panel({
			border: false,
			//			baseParams: {date: tomorrow.format(GO.settings.date_format), name: 'TEST'},			
			//cls:'go-form-panel',
			layout:'form',
			waitMsgTarget:true,			
			items:[
			{
				xtype:'fieldset',
				title: GO.tasks.lang.task,
				items:[
				{	
					items:this.datePicker,
					width:240,
					style:'margin:auto;'
				},
				{
					layout:'column',
					items:[{
							columnWidth:.5,
							items:[{
									layout:'form',
									labelWidth:76,
									items:[
										this.timeField,
										this.selectTaskList
									]
							}]
						},{
							columnWidth:.5,
							items:[{
									layout:'form',
									style:{
										'padding-left': '10px'
									},
									labelWidth:70,
									items:[
										this.descriptionField
									]
							}]
						}]
				}
			]},{
				xtype:'fieldset',
				title: GO.addressbook.lang.contact,
				items:[
					this.contactIdField,
					this.selectContact,
					this.phoneNumberField,
					this.savePhoneNumberField,
					this.btnAddContact
				]}
			]			
		});
	
		this.addPanel(this.propertiesPanel);
	},

	populatePhoneFields : function(record){
		
		var order = [
			'work_phone',
			'home_phone',
			'cellular',
			'cellular2'
		];
		
		if(GO.util.empty(record)){
		var record = this.selectContact.store.getById(this.contactIdField.getValue());

			if(GO.util.empty(record)){
				record = {};
				record.data = {};

				for(var i=0; i <order.length; i++)
					record.data[order[i]] = '';

				this.savePhoneNumberField.setDisabled(false);
			} else {
				this.savePhoneNumberField.setDisabled(true);
			}
		}
		
		// Select the first found attribute that is not empty
		var currentNumber = '';
		var foundNumbers = [];
		var replaceNumbers = [];
		for(var i=0; i <order.length; i++){
			currentNumber = record.data[order[i]];
			if(!GO.util.empty(currentNumber)){
				replaceNumbers.push(new Ext.data.Record({'id':order[i],'label':this.createReplaceNumberLabel(order[i],currentNumber),'number':currentNumber},order[i]));
				foundNumbers.push(new Ext.data.Record({'id':order[i],'number':currentNumber,'label':currentNumber+' '+GO.addressbook.lang['contact'+this.capitalize(order[i])]},order[i]));
			} else {
				replaceNumbers.push(new Ext.data.Record({'id':order[i],'label':this.createReplaceNumberLabel(order[i],''),'number':''},order[i]));
			}
		}

		// Clear both stores
		this.phoneNumberField.getStore().removeAll();
		this.savePhoneNumberField.getStore().removeAll();

		// Fill the store for the phoneNumberField 
		if(foundNumbers.length > 0){
			this.phoneNumberField.getStore().add(foundNumbers);
			this.phoneNumberField.selectFirst();
		}
		// Fill the store for the savePhoneNumberField
		this.savePhoneNumberField.getStore().add(replaceNumbers);
		this.savePhoneNumberField.setRawValue('');		
	},
	createReplaceNumberLabel: function(field,oldvalue){
		
		var label = '';
		
		if(!GO.util.empty(oldvalue))
			label = GO.tasks.lang.overwritePhoneNumber;
		else 
			label = GO.tasks.lang.addToPhoneNumber;
		
		var fieldname = 'contact'+this.capitalize(field);

		label = label.replace("{field}",GO.addressbook.lang[fieldname]);
		label = label.replace("{number}",oldvalue);

		return label;
	},
	capitalize : function(text) {
    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();
	},
	setContactFromDialog : function(dialog,contact_id){
		this.setContact(contact_id,this.getNameFromContactDialog(dialog));
	},
	setContact : function(contact_id, contact_name){
		this.selectContact.selectContactById(contact_id,function(combo,record){

			this.contactIdField.setValue(contact_id);
			this.populatePhoneFieldsWithoutRecord(contact_id);
			this.btnAddContact.setDisabled(true);
			this.disableSavePhoneNumberField();
			
			var f = this.formPanel.form.findField('contact_name');
			f.setRemoteText(contact_name);
		},this);
		
		this.btnAddContact.setDisabled(true);
		this.disableSavePhoneNumberField();
	},
	
	populatePhoneFieldsWithoutRecord : function(contact_id){
		
		if(!GO.util.empty(contact_id)){
			// First check for the record in the available store
			var record = this.selectContact.store.getById(contact_id);

			if(!Ext.isDefined(record)){
				// Record is not available in the store
				// Retreive record with a request
				GO.request({
					url: 'addressbook/contact/load',
					params: {
						id:contact_id
					},
					success: function(response,options,result) {
						this.populatePhoneFields(result);
					},
					scope: this
				});
			} else {
				this.populatePhoneFields(record);
			}
		}
	},
	
	disableSavePhoneNumberField : function(){
		this.savePhoneNumberField.setDisabled(true);
		this.savePhoneNumberField.setRawValue('');
	},
	getNameFromContactDialog : function(dialog){
		var data = dialog.formPanel.getForm().getValues();
		var name = '';
		
		if(GO.settings.sort_name == 'last_name'){
			name = data.last_name+', ';
			name += data.first_name;
			
			if(!GO.util.empty(data.middle_name)){
				name += ' '+data.middle_name;
			}
			
		} else {
			name = data.first_name+' ';
			
			if(!GO.util.empty(data.middle_name)){
				name += data.middle_name+' ';
			}
			
			name += data.last_name;
		}
				
		return name;
	}
	
});

GO.tasks.TasklistDialog = function(config)
{
	if(!config)
	{
		config = {};
	}
	
	this.propertiesTab = new Ext.form.FormPanel({
		waitMsgTarget:true,
		url: GO.settings.modules.tasks.url+'action.php',
		//url:GO.url('tasks/tasklist/submit'),
		title:GO.lang['strProperties'],
		layout:'form',
		anchor: '100% 100%',
		defaultType: 'textfield',
		autoHeight:true,
		cls:'go-form-panel',waitMsgTarget:true,
		labelWidth: 75,
   
		items: [
		this.selectUser = new GO.form.SelectUser({
			fieldLabel: GO.lang['strUser'],
			disabled : !GO.settings.has_admin_permission,
			value: GO.settings.user_id,
			anchor: '100%'
		}),
		{
			fieldLabel: GO.lang['strName'],
			name: 'name',
			allowBlank:false,
			anchor: '100%'
		},this.exportButton = new Ext.Button({			
				text:GO.lang.cmdExport,
				disabled:true,
				handler:function(){
					document.location=GO.url('tasks/task/exportIcs', {"tasklist_id":this.tasklist_id});
				},
				scope:this
			}),
			this.deleteAllItemsButton = new Ext.Button({
				style:'margin-top:10px',
				xtype:'button',
				text:GO.lang.deleteAllItems,
				handler:function(){
					Ext.Msg.show({
						title: GO.lang.deleteAllItems,
						icon: Ext.MessageBox.WARNING,
						msg: GO.lang.deleteAllItemsAreYouSure,
						buttons: Ext.Msg.YESNO,
						scope:this,
						fn: function(btn) {
							if (btn=='yes') {
								GO.request({
									timeout:300000,
									maskEl:Ext.getBody(),
									url:'tasks/tasklist/truncate',
									params:{
										tasklist_id:this.tasklist_id
									},
									scope:this
								});
							}
						}
					});
				},
				scope:this
			}),
			this.removeDuplicatesButton =new Ext.Button({
				style:'margin-top:10px',
				xtype:'button',
				text:GO.lang.removeDuplicates,
				handler:function(){
					
					window.open(GO.url('tasks/tasklist/removeDuplicates',{tasklist_id:this.tasklist_id}))
					
				},
				scope:this
			})
		]
	});


	this.readPermissionsTab = new GO.grid.PermissionsPanel({
		
	});


	var uploadFile = new GO.form.UploadFile({
		inputName : 'ical_file',	   
		max:1 			
	});
	
	uploadFile.on('filesChanged', function(input, inputs){
		this.importButton.setDisabled(inputs.getCount()==1);
	}, this);
	

	this.importTab = new Ext.form.FormPanel({
		fileUpload:true,
		waitMsgTarget:true,
		disabled:true,
		title:GO.lang.cmdImport,
		items: [{
			xtype: 'panel',
			html: GO.tasks.lang.selectIcalendarFile,
			border:false	
		},uploadFile,this.importButton = new Ext.Button({
				xtype:'button',
				disabled:true,
				text:GO.lang.cmdImport,
				handler: function(){						
					this.importTab.form.submit({
						//waitMsg:GO.lang.waitMsgUpload,
						// TODO: Fix this import so it works with the new MVC structure
						url: GO.url('tasks/tasklist/importIcs'),//O.settings.modules.tasks.url+'action.php',
						params: {
//							task: 'import',
							tasklist_id:this.tasklist_id
						},
						success: function(form,action)
						{				
							uploadFile.clearQueue();		

							if(action.result.success)
							{
								Ext.MessageBox.alert(GO.lang.strSuccess,action.result.feedback);
							}else
							{
								Ext.MessageBox.alert(GO.lang.strError,action.result.feedback);
							}						
						},
						failure: function(form, action) {
							Ext.MessageBox.alert(GO.lang.strError, action.result.feedback);
						},
						scope: this
					});
				}, 
				scope: this
			})],
		cls: 'go-form-panel'
	});

	this.tabPanel = new Ext.TabPanel({
			hideLabel:true,
			deferredRender:false,
			xtype:'tabpanel',
			activeTab: 0,
			border:false,
			anchor: '100% 100%',
			items:[
			this.propertiesTab,
			this.readPermissionsTab,
			this.importTab 
			]
		});
	
	
	GO.tasks.TasklistDialog.superclass.constructor.call(this,{
					title: GO.tasks.lang.tasklist,
					layout:'fit',
					modal:false,
					height:600,
					width:440,
					closeAction:'hide',
					items: this.tabPanel,
					buttons:[
					{
						text:GO.lang['cmdOk'],
						handler: function(){this.save(true)},
						scope: this
					},
					{
						text:GO.lang['cmdApply'],
						handler: function(){this.save(false)},
						scope: this
					},

					{
						text:GO.lang['cmdClose'],
						handler: function(){this.hide()},
						scope: this
					}
					]
				});
}

Ext.extend(GO.tasks.TasklistDialog, Ext.Window, {
	
	initComponent : function(){
		
		this.addEvents({'save' : true});
		
		GO.tasks.TasklistDialog.superclass.initComponent.call(this);
		
		
	},
				
	show : function (tasklist_id){		
		if(!this.rendered)
			this.render(Ext.getBody());
			
		this.propertiesTab.show();
		
		
		this.removeDuplicatesButton.setDisabled(!tasklist_id);
		this.deleteAllItemsButton.setDisabled(!tasklist_id);
			
		if(tasklist_id > 0)
		{
			if(tasklist_id!=this.tasklist_id)
			{
				this.loadTasklist(tasklist_id);
			}else
			{
				GO.tasks.TasklistDialog.superclass.show.call(this);
			}
		}else
		{
			this.tasklist_id=0;
			this.propertiesTab.form.reset();

			this.readPermissionsTab.setDisabled(true);

			this.exportButton.setDisabled(true);
			this.importTab.setDisabled(true);
		

			GO.tasks.TasklistDialog.superclass.show.call(this);
		}
	},
	loadTasklist : function(tasklist_id)
	{
		this.propertiesTab.form.load({
			url: GO.url('tasks/tasklist/load'),
			params: {
				id:tasklist_id
			},
			
			success: function(form, action) {
				this.tasklist_id=action.result.data.id;
				this.selectUser.setRemoteText(action.result.remoteComboTexts.user_name);
				this.readPermissionsTab.setAcl(action.result.data.acl_id);
				
				this.exportButton.setDisabled(false);
				this.importTab.setDisabled(false);
				GO.tasks.TasklistDialog.superclass.show.call(this);
			},
			failure:function(form, action)
			{
				GO.errorDialog.show(action.result.feedback)
			},
			scope: this
		});
	},
	save : function(hide)
	{
		this.propertiesTab.form.submit({
				
			//url:GO.settings.modules.tasks.url+'action.php',
			url: GO.url('tasks/tasklist/submit'),
			params: {
			//		'task' : 'save_tasklist', 
					'id': this.tasklist_id
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
										
				if(action.result.id)
				{
					this.tasklist_id=action.result.id;
					this.readPermissionsTab.setAcl(action.result.acl_id);
					
					this.exportButton.setDisabled(false);
					this.importTab.setDisabled(false);
				}
				
				this.fireEvent('save');
				
				if(hide)
				{
					this.hide();
				}
					
					
			},

			failure: function(form, action) {
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}else
				{
					error = action.result.feedback;
				}
					
				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope:this

		});
			
	}
});


/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: TaskDialog.js 19784 2016-01-26 13:56:16Z michaelhart86 $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.tasks.TaskDialog = function() {

	this.buildForm();

	var focusName = function() {
		this.nameField.focus();
	};

	this.goDialogId='task';
	
	this.remind_before = '';

	this.win = new GO.Window({
		layout : 'fit',
		modal : false,
		resizable : true,
		width : 560,
		height : 400,
		closeAction : 'hide',
		collapsible: true,
		title : GO.tasks.lang.task,
		items : this.formPanel,
		focus : focusName.createDelegate(this),
		buttons : [{
			text : GO.lang['cmdOk'],
			handler : function() {
				this.submitForm(true);

			},
			scope : this
		},/* {
			text : GO.lang['cmdApply'],
			handler : function() {
				this.submitForm();
			},
			scope : this
		}, */{
			text : GO.lang['cmdClose'],
			handler : function() {
				this.win.hide();
			},
			scope : this
		}]
	/*
 * , keys: [{ key: Ext.TaskObject.ENTER, fn: function(){ this.submitForm();
 * this.win.hide(); }, scope:this }]
 */
	});

	this.win.render(Ext.getBody());

	GO.tasks.TaskDialog.superclass.constructor.call(this);
}

Ext.extend(GO.tasks.TaskDialog, Ext.util.Observable, {

	
	show : function(config) {

		if (!config) {
			config = {};
		}
		
		this.showConfig=config;

		GO.dialogListeners.apply(this);

		if(!GO.tasks.categoriesStore.loaded)
			GO.tasks.categoriesStore.load();

		//tmpfiles on the server ({name:'Name',tmp_file:/tmp/name.ext} will be attached)
		this.formPanel.baseParams.tmp_files = config.tmp_files ? Ext.encode(config.tmp_files) : '';

		if(config.projectName)
			this.formPanel.baseParams.project_name=config.projectName;
		else
			delete this.formPanel.baseParams.project_name;
		
		delete this.link_config;
		this.formPanel.form.reset();

		//		this.formPanel.form.findField('remind').setValue(!GO.util.empty(GO.tasks.remind));
		//		this.formPanel.form.findField('remind_date').setDisabled(GO.util.empty(GO.tasks.remind));
		//		this.formPanel.form.findField('remind_time').setDisabled(GO.util.empty(GO.tasks.remind));

		this.tabPanel.setActiveTab(0);

		if (!config.task_id) {
			config.task_id = 0;
		}

		this.setTaskId(config.task_id);
		
		var params = {};
		if (!GO.util.empty(config.tasklist_id))
			params.tasklist_id=config.tasklist_id;
		
		if (config.link_config && config.link_config.model_name=="GO\\Projects\\Model\\Project")
			params.project_id=config.link_config.model_id;	
		
		// this.selectTaskList.container.up('div.x-form-item').setDisplayed(false);

		//		if (config.task_id > 0) {

		this.formPanel.load({
			url : GO.url('tasks/task/load'),
			params:params,
			success : function(form, action) {
				this.win.show();
				this.changeRepeat(action.result.data.freq);
				this.setValues(config.values);
					
				this.remind_before = action.result.data.remind_before;

				//	this.selectTaskList.setRemoteText(action.result.data.tasklist_name);
				this.selectTaskList.setRemoteText(action.result.remoteComboTexts.tasklist_id);

				if(this.selectProject){
					if(config.link_config && config.link_config.model_name=="GO\\Projects2\\Model\\Project"){			

						this.selectProject.setValue(config.link_config.model_id);
						this.selectProject.setRemoteText(config.link_config.text);
					}else
					{
						this.selectProject.setRemoteText(action.result.remoteComboTexts.project_id);
					}
				}
				
				if(GO.comments){	
					if(action.result.data['id'] > 0){
						if (!GO.util.empty(action.result.data['action_date'])) {
							this.commentsGrid.actionDate = action.result.data['action_date'];
						} else {
							this.commentsGrid.actionDate = false;
						}
						this.commentsGrid.setLinkId(action.result.data['id'], 'GO\\Tasks\\Model\\Task');
						this.commentsGrid.store.load();
						this.commentsGrid.setDisabled(false);
					}else {
						this.commentsGrid.setDisabled(true);
					}
				}
				
				if(action.result.data.category_id == 0)
				{
					//this.selectCategory.setRemoteText();
					this.selectCategory.setValue("");
				}else
				{
					this.selectCategory.setRemoteText(action.result.remoteComboTexts.category_id);
				}
					
				this.formPanel.form.clearInvalid();
					
			},
			failure : function(form, action) {
				GO.errorDialog.show(action.result.feedback)
			},
			scope : this

		});
		//		} else {
		//			delete this.formPanel.form.baseParams['exception_task_id'];
		//			delete this.formPanel.form.baseParams['exceptionDate'];
		//
		//			this.lastTaskListId = this.selectTaskList.getValue();
		//
		//			this.selectTaskList.setValue(this.lastTaskListId);
		//
		//			this.setWritePermission(true);
		//
		//			this.win.show();
		//			this.setValues(config.values);
		//
		//			if (GO.util.empty(config.tasklist_id)) {
		//				config.tasklist_id = GO.tasks.defaultTasklist.id;
		//				config.tasklist_name = GO.tasks.defaultTasklist.name;
		//			}
		//			this.selectTaskList.setValue(config.tasklist_id);
		//			if (config.tasklist_name) {
		//				this.selectTaskList.setRemoteText(config.tasklist_name);
		//				this.selectTaskList.container.up('div.x-form-item').setDisplayed(true);
		//			}else
		//			{
		//				this.selectTaskList.container.up('div.x-form-item').setDisplayed(false);
		//			}
		//		}

		// if the newMenuButton from another passed a linkTypeId then set this
		// value in the select link field
		if (config.link_config) {
			this.link_config = config.link_config;
			if (config.link_config.modelNameAndId) {
				this.selectLinkField.setValue(config.link_config.modelNameAndId);
				this.selectLinkField.setRemoteText(config.link_config.text);				
			}
		}
	},


	setValues : function(values) {
		if (values) {
			for (var key in values) {
				var field = this.formPanel.form.findField(key);
				if (field) {
					field.setValue(values[key]);
				}
			}
		}

	},
	setTaskId : function(task_id) {
		this.formPanel.form.baseParams['id'] = task_id;
		this.task_id = task_id;
	},

	setCurrentDate : function() {
		var formValues = {};

		var date = new Date();

		formValues['start_time'] = formValues['remind_date'] = date
		.format(GO.settings['date_format']);
		formValues['start_hour'] = date.format("H");
		formValues['start_min'] = '00';

		formValues['end_date'] = date.format(GO.settings['date_format']);
		formValues['end_hour'] = date.add(Date.HOUR, 1).format("H");
		formValues['end_min'] = '00';

		this.formPanel.form.setValues(formValues);
	},

	submitForm : function(hide) {
		this.formPanel.form.submit({
			url : GO.url('tasks/task/submit'),
			waitMsg : GO.lang['waitMsgSave'],
			success : function(form, action) {

				if (action.result.id) {
					this.setTaskId(action.result.id);
				}

				if (this.link_config && this.link_config.callback) {
					this.link_config.callback.call(this);
				}

				GO.tasks.tasksObservable.fireEvent('save', this, this.task_id);
				this.fireEvent('save', this, this.task_id);
				
				
				GO.dialog.TabbedFormDialog.prototype.refreshActiveDisplayPanels.call(this);

				if (hide) {
					this.win.hide();
				}
			},
			failure : function(form, action) {
				if (action.failureType == 'client') {
					GO.errorDialog.show(GO.lang['strErrorsInForm']);
				} else {
					GO.errorDialog.show(action.result.feedback);
				}
			},
			scope : this
		});

	},

	buildForm : function() {

		this.nameField = new Ext.form.TextField({
			name : 'name',
			allowBlank : false,
			fieldLabel : GO.lang.strSubject
		});

		this.selectLinkField = new GO.form.SelectLink();

		var checkDateInput = function(field) {

			if (field.name == 'due_time') {
				if (startDate.getValue() > dueDate.getValue()) {
					startDate.setValue(dueDate.getValue());
				}
			} else {
				if (startDate.getValue() > dueDate.getValue()) {
					dueDate.setValue(startDate.getValue());
				}
			}

			var remindDate = startDate.getValue().add(Date.DAY, -this.remind_before);
			
			formPanel.form.findField('remind_date').setValue(remindDate);

			if (this.repeatType.getValue() != '') {
				if (this.repeatEndDate.getValue() == '') {
					this.repeatForever.setValue(true);
				} else {
					var eD = dueDate.getValue();
					if (this.repeatEndDate.getValue() < eD) {
						this.repeatEndDate.setValue(eD.add(Date.DAY, 1));
					}
				}
			}
		}

		var now = new Date();

		var startDate = new Ext.form.DateField({
			name : 'start_time',
			format : GO.settings['date_format'],
			fieldLabel : GO.tasks.lang.startsAt,
			value : now.format(GO.settings.date_format),
			listeners : {
				change : {
					fn : checkDateInput,
					scope : this
				}
			}
		});

		var dueDate = new Ext.form.DateField({
			name : 'due_time',
			format : GO.settings['date_format'],
			allowBlank : false,
			fieldLabel : GO.tasks.lang.dueAt,
			value : now.format(GO.settings.date_format),
			listeners : {
				change : {
					fn : checkDateInput,
					scope : this
				}
			}
		});

		var taskStatus = new GO.tasks.SelectTaskStatus({
			flex:3,
			listeners:{
				scope:this,
				select:function(combo, record){
					if(record.data.value=='COMPLETED')
						this.formPanel.form.findField('percentage_complete').setValue(100);
				}
			}
		});

		this.selectTaskList = new GO.tasks.SelectTasklist({
			fieldLabel : GO.tasks.lang.tasklist,
			allowBlank:false
		});

		this.selectCategory = new GO.form.ComboBoxReset({
			hiddenName:'category_id',
			fieldLabel:GO.tasks.lang.category,
			valueField:'id',
			displayField:'name',			
			store: GO.tasks.categoriesStore,
			mode:'local',
			triggerAction:'all',
			emptyText:GO.tasks.lang.selectCategory,
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			pageSize: parseInt(GO.settings['max_rows_list'])
		});

		this.selectPriority = new GO.form.SelectPriority();
		
		var percentages = [];
		for(var i=0;i<101;i+=10){
			percentages.push([i,i+"%"]);
		}
		
		var descAnchor = -220;

		var propertiesPanel = new Ext.Panel({
			hideMode : 'offsets',
			title : GO.lang['strProperties'],
			defaults : {
				anchor : '-20'
			},
			labelWidth:120,
			// cls:'go-form-panel',waitMsgTarget:true,
			bodyStyle : 'padding:5px',
			layout : 'form',
			autoScroll : true,
			items : [
				this.nameField, 
				this.selectLinkField,
				startDate,
				dueDate,
				this.statusProgressField = new GO.tasks.StatusProgressField({}),
				this.selectTaskList,
				this.selectCategory,
				this.selectPriority	
			]

		});

		if(GO.moduleManager.userHasModule("projects2")){
			descAnchor-=20;
			this.selectProject = new GO.projects2.SelectProject();
			propertiesPanel.add(this.selectProject);
		} else if(GO.moduleManager.userHasModule("projects")) {
			descAnchor-=20;
			this.selectProject = new GO.projects.SelectProject();
			propertiesPanel.add(this.selectProject);
		}
		
		propertiesPanel.add({
				xtype:'textarea',
				fieldLabel:GO.lang.strDescription,
				name : 'description',
				anchor:'-20 '+descAnchor
			});
				

		// Start of recurrence tab
		this.repeatEvery = new GO.form.NumberField({
			decimals:0,
			name : 'interval',
			minValue:1,
			width : 50,
			value : '1'
		});


		this.repeatType = new Ext.form.ComboBox({
			hiddenName : 'freq',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			width : 200,
			forceSelection : true,
			mode : 'local',
			value : '',
			valueField : 'value',
			displayField : 'text',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [['', GO.lang.noRecurrence],
				['DAILY', GO.lang.strDays],
				['WEEKLY', GO.lang.strWeeks],
				['MONTHLY_DATE', GO.lang.monthsByDate],
				['MONTHLY', GO.lang.monthsByDay],
				['YEARLY', GO.lang.strYears]]
			}),
			hideLabel : true,
			listeners : {
				change : {
					fn : checkDateInput,
					scope : this
				}
			}
		});

		this.repeatType.on('select', function(combo, record) {
			this.changeRepeat(record.data.value);
		}, this);

		this.monthTime = new Ext.form.ComboBox({
			//hiddenName : 'month_time',
			hiddenName : 'bysetpos',
			triggerAction : 'all',
			selectOnFocus : true,
			disabled : true,
			width : 80,
			forceSelection : true,
			fieldLabel : GO.tasks.lang.atDays,
			mode : 'local',
			value : '1',
			valueField : 'value',
			displayField : 'text',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [['1', GO.lang.strFirst],
				['2', GO.lang.strSecond],
				['3', GO.lang.strThird],
				['4', GO.lang.strFourth]]
			})
		});
		
		
		var days = ['SU','MO','TU','WE','TH','FR','SA'];

		this.cb = [];
		for (var day = 0; day < 7; day++) {
			this.cb[day] = new Ext.form.Checkbox({
				boxLabel : GO.lang.shortDays[day],
				name : days[day],
				disabled : true,
				checked : false,
				width : 'auto',
				hideLabel : true,
				labelSeperator : ''
			});
		}

		this.repeatEndDate = this.repeatEndDate = new Ext.form.DateField({
			name : 'until',
			width : 100,
			disabled : true,
			format : GO.settings['date_format'],
			allowBlank : true,
			fieldLabel : GO.tasks.lang.repeatUntil,
			listeners : {
				change : {
					fn : checkDateInput,
					scope : this
				}
			}
		});

		this.repeatForever = new Ext.form.Checkbox({
			boxLabel : GO.tasks.lang.repeatForever,
			name : 'repeat_forever',
			checked : true,
			disabled : true,
			width : 'auto',
			hideLabel : true,
			labelSeperator : '',
			listeners : {
				check : {
					fn : this.disableUntilField,
					scope : this
				}
			}
		});

		this.recurrencePanel = new Ext.Panel({
			title : GO.tasks.lang.recurrence,
			bodyStyle : 'padding: 5px',
			layout : 'form',
			hideMode : 'offsets',
			defaults:{
				forceLayout:true,
				border:false
			},
			items : [{
				fieldLabel : GO.tasks.lang.repeatEvery,
				xtype : 'compositefield',
				items : [this.repeatEvery,this.repeatType]
			}, {
				xtype : 'compositefield',
				fieldLabel : GO.tasks.lang.atDays,
				items : [this.monthTime,this.cb[1],this.cb[2],this.cb[3],this.cb[4],this.cb[5],this.cb[6],this.cb[0]]
			}, {
				fieldLabel : GO.tasks.lang.repeatUntil,
				xtype : 'compositefield',
				items : [this.repeatEndDate,this.repeatForever]
			}
			]
		});

		var remindDate = now.add(Date.DAY, -GO.tasks.reminderDaysBefore);
		// start other options tab
		var optionsPanel = new Ext.Panel({

			title : GO.tasks.lang.options,
			defaults : {
				anchor : '100%'
			},
			bodyStyle : 'padding:5px',
			layout : 'form',
			hideMode : 'offsets',
			autoScroll : true,
			items : [{
				xtype : 'xcheckbox',
				boxLabel : GO.tasks.lang.remindMe,
				hideLabel : true,
				name : 'remind',
				listeners : {
					'check' : function(field, checked) {
						this.formPanel.form.findField('remind_date')
						.setDisabled(!checked);
						this.formPanel.form.findField('remind_time')
						.setDisabled(!checked);
					},
					scope : this
				}
			}, {
				xtype : 'datefield',
				name : 'remind_date',
				format : GO.settings.date_format,
				value : remindDate.format(GO.settings['date_format']),
				fieldLabel : GO.lang.strDate,
				disabled : true
			}, {
				xtype : 'timefield',
				name : 'remind_time',
				format : GO.settings.time_format,
				value : GO.tasks.reminderTime,
				fieldLabel : GO.lang.strTime,
				disabled : true
			}]
		});

		var items = [propertiesPanel, this.recurrencePanel, optionsPanel];


		if(GO.customfields && GO.customfields.types["GO\\Tasks\\Model\\Task"])
		{
			for(var i=0;i<GO.customfields.types["GO\\Tasks\\Model\\Task"].panels.length;i++)
			{
				items.push(GO.customfields.types["GO\\Tasks\\Model\\Task"].panels[i]);
			}
		}
		
		if(GO.comments){
			this.commentsGrid = new GO.comments.CommentsGrid({title:GO.comments.lang.comments});
			items.push(this.commentsGrid);
		}
		
		this.tabPanel = new Ext.TabPanel({
			activeTab : 0,
			deferredRender : false,
			// layoutOnTabChange:true,
			border : false,
			anchor : '100% 100%',
			hideLabel : true,
			items : items
		});

		var formPanel = this.formPanel = new Ext.form.FormPanel({
			waitMsgTarget : true,
			url : GO.settings.modules.tasks.url + 'action.php',
			border : false,
			baseParams : {
				task : 'task'
			},
			items : this.tabPanel
		});
	},

	/*populateComboBox : function(records)
	{
		var data = [];

		for(var i=0; i<records.length; i++)
		{
			var tasklist = []
			tasklist.push(records[i].id);
			tasklist.push(records[i].data.name);

			data.push(tasklist);
		}

		this.selectCategory.store.loadData(data);
		var r = this.selectCategory.store.getAt(0);
		if(r)
			this.selectCategory.setValue(r.data.id);
	},*/

	changeRepeat : function(value) {

		var repeatForever = this.repeatForever.getValue();
		
		var form = this.formPanel.form;
		switch (value) {
			case '' :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForever.setDisabled(true);
				this.repeatEndDate.setDisabled(true);
				this.repeatEvery.setDisabled(true);
				break;

			case 'DAILY' :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForever.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);

				break;

			case 'WEEKLY' :
				this.disableDays(false);
				this.monthTime.setDisabled(true);
				this.repeatForever.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);

				break;

			case 'MONTHLY_DATE' :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForever.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);

				break;

			case 'MONTHLY' :
				this.disableDays(false);
				this.monthTime.setDisabled(false);
				this.repeatForever.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);
				break;

			case 'YEARLY' :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForever.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);
				break;
		}
	},
	disableDays : function(disabled) {
		var days = ['SU','MO','TU','WE','TH','FR','SA'];
		for (var day = 0; day < 7; day++) {
			this.formPanel.form.findField(days[day])
			.setDisabled(disabled);
		}
	},
	disableUntilField : function() {
		if(this.repeatForever.checked)
			this.repeatEndDate.setDisabled(true);
		else
			this.repeatEndDate.setDisabled(false);
	}
});

GO.tasks.TasksPanel = function(config)
	{
		if(!config)
		{
			config = {};
		}


		this.checkColumn = new GO.grid.CheckColumn({
			id:'completed',
			dataIndex: 'completed',
			width: 30,
			hideInExport:true,
			header: '<div class="tasks-complete-icon"></div>',
			sortable:false,
			groupable:false
		});

		this.checkColumn.on('change', function(record, checked){
			this.store.baseParams['completed_task_id']=record.data.id;
			this.store.baseParams['checked']=checked;

			//dirty, but it works for updating all the grids
			this.store.reload({
				callback:function(){					
					GO.tasks.tasksObservable.fireEvent('save', this, this.task_id, this.store);
				},
				scope:this
			});
			
			delete this.store.baseParams['completed_task_id'];
			delete this.store.baseParams['checked'];

		}, this);

		var fields ={
			fields:['id', 'icon', 'name','completed','due_time','is_active', 'late', 'description', 'status', 'ctime', 'mtime', 'start_time', 'completion_time','disabled','tasklist_name','category_name','priority','project_name','percentage_complete','user_name'],
			columns:[this.checkColumn,{
				id:'icon',
				header:"&nbsp;",
				width:23,
				dataIndex: 'icon',
				renderer: this.renderIcon,
				hideable:false,
				fixed: true,
				sortable:false,
				groupable:false
			},{
				id:'name',
				width:200,
				header:GO.lang['strName'],
				dataIndex: 'name'
//				renderer:function(value, p, record){
//					if(!GO.util.empty(record.data.description))
//					{
//						p.attr = 'ext:qtip="'+Ext.util.Format.htmlEncode(record.data.description)+'"';
//					}
//					return value;
//				}
			},{
				header:GO.tasks.lang.tasklist,
				dataIndex: 'tasklist_name',
				width:60,
				hidden:true,
				groupable:true
			},{
				header:GO.tasks.lang.category,
				dataIndex: 'category_name',
				width:150,
				sortable:true,
				groupable:true
			},
			{
				header:GO.lang.priority,
				dataIndex: 'priority',
				width:70,
				hidden:false,
				renderer : function(value, cell, record) {
					var str = '';
					switch(value)
					{
						case 0:
							str = GO.lang.priority_low;
							break;
						case 1:
							str = GO.lang.priority_normal;
							break;
						case 2:
							str = GO.lang.priority_high;
							break;
					}
					return str;
				}
			},
			{
				header:GO.tasks.lang.dueDate,
				dataIndex: 'due_time',
				width:100
			},{
				header: GO.tasks.lang.startsAt,
				dataIndex: 'start_time',
				hidden:true,
				width:110
			},{
				header: GO.tasks.lang.completedAt,
				dataIndex: 'completion_time',
				hidden:true,
				width:110
			},{
				header: GO.lang.strStatus,
				dataIndex: 'status',
				width:110,
				groupable:true,
				renderer:function(value, p, record){
					return GO.tasks.lang.statuses[value];
				}
			},{
				header: GO.tasks.lang.taskPercentage_complete,
				dataIndex: 'percentage_complete',
				width:60,
				renderer:function(value, p, record){
					return value+"%";
				}
			},{
				id:'user_name',
				header: GO.lang.createdBy,
				dataIndex: 'user_name',
				hidden:true,
				width:150,
				sortable:false
			},{
				header: GO.lang.strCtime,
				dataIndex: 'ctime',
				hidden:true,
				width:110
			},{
				header: GO.lang.strMtime,
				dataIndex: 'mtime',
				hidden:true,
				width:110
			},{
				id:'id',
				width:200,
				header: 'ID',
				dataIndex: 'id',
				hidden: true
			}]
		};

		if (GO.projects2){
			fields.columns.push({
				header: GO.projects2.lang.project,
				dataIndex: 'project_name',
				hidden:true,
				width:150
			});
		} else if(GO.projects){
			fields.columns.push({
				header: GO.projects.lang.project,
				dataIndex: 'project_name',
				hidden:true,
				width:150
			});
		}

		if(GO.customfields)
		{
			GO.customfields.addColumns("GO\\Tasks\\Model\\Task", fields);
		}

		var reader = new Ext.data.JsonReader({
			root: 'results',
			totalProperty: 'total',
			fields: fields.fields,
			id: 'id'
		});

		config.store = new GO.data.GroupingStore({
			url: GO.url('tasks/task/store'),
//			baseParams: {
//				'show': 'all'
//			},
			reader: reader,
			sortInfo: {
				field: 'due_time',
				direction: 'ASC'
			},
			groupField: 'tasklist_name',
			remoteGroup:true,
			remoteSort:true
		});
		
		config.store.on('load', function()
		{
			if(config.store.reader.jsonData.buttonParams) {
				if(config.store.reader.jsonData.buttonParams.permissionLevel < 40)
					this.deleteSelected = function(){ /*nop*/ }; //disable grid delete action when no permissions
				else
					this.deleteSelected = GO.grid.GridPanel.prototype.deleteSelected;
			} else
				this.deleteSelected = function(){ /*nop*/ };
			
			if(config.store.reader.jsonData.feedback)
			{
				alert(config.store.reader.jsonData.feedback);
			}
			this.storeLoaded = true;
		},this)

		config.view=new Ext.grid.GroupingView({
			scrollOffset: 2,
			//forceFit:true,
			hideGroupedColumn:true,
			emptyText: GO.tasks.lang.noTask,
			getRowClass : function(record, rowIndex, p, store){
				if(record.data.late && !record.data.completed){
					return 'tasks-late';
				}
				if(record.data.completed){
					return 'tasks-completed';
				}
				if(record.data.is_active) {
					
					return 'tasks-active';
				}
			}
		}),
		config.sm=new Ext.grid.RowSelectionModel();

		var columnModel =  new Ext.grid.ColumnModel({
			defaults:{
				sortable:true,
				groupable:false
			},
			columns:fields.columns
		});

		config.cm=columnModel;

		config.paging=true,
		config.plugins=this.checkColumn;

		this.searchField = new GO.form.SearchField({
			store: config.store,
			width:320
		});

		config.enableDragDrop=true;
		config.ddGroup='TasklistsDD';
		
		config.tbar = [GO.lang['strSearch'] + ':', this.searchField];

		GO.tasks.TasksPanel.superclass.constructor.call(this, config);

		this.addEvents({
			checked : true
		});
		
	};


Ext.extend(GO.tasks.TasksPanel, GO.grid.GridPanel, {

	saveListenerAdded : true,
	
	storeLoaded : false,
	
	renderIcon : function(src, p, record) {
		if(typeof(record.data['priority'])!='undefined')
		{
			if(record.data['priority'] > 1)
				return '<div class="email-grid-icon btn-high-priority"></div>';

			if(record.data['priority'] < 1)
				return '<div class="email-grid-icon btn-low-priority"></div>';
		}
	}
});



/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: SelectTasklist.js 16833 2014-02-13 14:22:53Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.tasks.SelectTasklist = function(config){
	
	config = config || {};

	if(!config.hiddenName)
		config.hiddenName='tasklist_id';

	if(!config.fieldLabel)
	{
		config.fieldLabel=GO.tasks.lang.tasklist;
	}

	Ext.apply(this, config);
	
	
	this.store = new GO.data.JsonStore({
		url: GO.url('tasks/tasklist/store'),
		baseParams:{permissionLevel: GO.permissionLevels.create},
		fields:['id','name','user_name'],
		remoteSort:true
	});	

	GO.tasks.SelectTasklist.superclass.constructor.call(this,{
		displayField: 'name',	
		valueField: 'id',
		triggerAction:'all',		
		mode:'remote',
		editable: true,
		selectOnFocus:true,
		forceSelection: true,
		typeAhead: true,
		emptyText:GO.lang.strPleaseSelect,
		pageSize: parseInt(GO.settings.max_rows_list)
	});
	
}
Ext.extend(GO.tasks.SelectTasklist, GO.form.ComboBoxReset, {
	
	/*afterRender : function(){
		
		
		this.store.load({
			
			callback:function(){
				GO.tasks.SelectTasklist.superclass.afterRender.call(this);		
			},
			scope: this
			
		});	
	}*/	
});

GO.tasks.MainPanel = function(config){
	
	if(!config)
	{
		config = {};
	}
		
	this.taskListsStore = new GO.data.JsonStore({
		url: GO.url('tasks/tasklist/store'),
		baseParams: {
			limit:GO.settings.config.nav_page_size
		},
		root: 'results',
		totalProperty: 'total',
		id: 'id',
		fields:['id','name','checked']		
	});

	this.gridPanel = new GO.tasks.TasksPanel( {		
		id:'ta-tasks-grid',
		loadMask:true,
		region:'center'
	});
	
	this.taskListsPanel = new GO.tasks.TaskListsGrid({
		id:'ta-taskslists',
		region:'center',
		loadMask:true,
		store: this.taskListsStore,
		title: GO.tasks.lang.tasklists,	
		relatedStore: this.gridPanel.store,
		autoLoadRelatedStore:false,
		split:true
	});

	this.taskListsPanel.on('drop', function(type)
	{
	    this.taskListsPanel.store.reload();
			this.gridPanel.store.reload();
	}, this);

//	this.taskListsPanel.on('change', function(grid, tasklists, records)
//	{                		                
////		this.gridPanel.store.baseParams.tasks_tasklist_filter = Ext.encode(tasklists);
////		this.gridPanel.store.load();
//		this.tasklist_ids = tasklists;
//
//		if(records.length)
//		{
//			this.addTaskPanel.populateComboBox(records);
//
//			this.tasklist_id = records[0].data.id;
//			this.tasklist_name = records[0].data.name;
//		}
//
//		// this.gridPanel.store.baseParams.tasklists;
//	}, this);

this.gridPanel.store.on('load', function(store, records, options)
	{    
		var lists = store.reader.jsonData.selectable_tasklists;
				
		if(lists && lists.length){
			this.addTaskPanel.populateComboBox(lists);
			this.tasklist_id = lists[0].data.id;
			this.tasklist_name = lists[0].data.name;
		}
//		
//		if(records.length)
//		{
//			this.addTaskPanel.populateComboBox(records);
//
//			this.tasklist_id = records[0].data.id;
//			this.tasklist_name = records[0].data.name;
//		}
	}, this);
	
	var filterPanel = new Ext.form.FormPanel({
		title:GO.tasks.lang.filter,
		height:180,
//		id:'ta-filter-form',
//		stateId:'ta-filter-form',
//		cls:'go-form-panel',
		waitMsgTarget:true,
		region:'north',
		border:true,
		split:true,
		items: [{
				hideLabel:true,
				anchor:'100%',
				xtype:'radiogroup',
				value:GO.tasks.show,
				columns: 1,
				listeners:{
					change:function(radiogroup, checkedbox){
						this.gridPanel.store.baseParams['show']=checkedbox.inputValue;
						this.gridPanel.store.load();
						//delete this.gridPanel.store.baseParams['show'];
					},
					scope:this
				},
				items: [{
					boxLabel:  GO.tasks.lang.active,
					name: 'show',
					inputValue: 'active'
				},{
					boxLabel: GO.tasks.lang.dueInSevenDays,
					name: 'show',
					inputValue: 'sevendays'
				},{
					boxLabel: GO.tasks.lang.overDue,
					name: 'show',
					inputValue: 'overdue'
				},{
					boxLabel: GO.tasks.lang.incompleteTasks,
					name: 'show',
					inputValue: 'incomplete'
				},{
					boxLabel: GO.tasks.lang.completed,
					name: 'show',
					inputValue: 'completed'
				},{
					boxLabel: GO.tasks.lang.futureTasks,
					name: 'show',
					inputValue: 'future'
				},{
					boxLabel: GO.tasks.lang.all,
					name: 'show',
					inputValue: 'all'
				}]
			}]
	});
      
	this.categoriesPanel= new GO.grid.MultiSelectGrid({
		id:'ta-categories-grid',
		title:GO.tasks.lang.categories,
		region:'south',
		loadMask:true,
		height:150,
		allowNoSelection:true,
		store:GO.tasks.categoriesStore,
		split:true
	});
	this.categoriesPanel.on('change', function(grid, categories, records)
	{
		this.gridPanel.store.baseParams.categories = Ext.encode(categories);
		this.gridPanel.store.reload();
                
		//delete this.gridPanel.store.baseParams.categories;
	}, this);


	this.addTaskPanel = new GO.tasks.AddTaskPanel({
		region:'north'
	});

	
			
	this.gridPanel.on("delayedrowselect",function(grid, rowIndex, r){
		this.taskPanel.load(r.data.id);
	}, this);

	this.gridPanel.on('rowdblclick', function(grid, rowIndex){
		this.taskPanel.editHandler();
	}, this);

	this.gridPanel.on('checked', function(grid, task_id){
		if(this.taskPanel.data && this.taskPanel.data.id==task_id)
			this.taskPanel.reload();
			
	}, this);
			
	this.taskPanel = new GO.tasks.TaskPanel({
		//title:GO.tasks.lang.task,
		region:'east',
		width:400,
		border:true
	});

	this.accordionPanel = new Ext.Panel({
		region:'center',
		titlebar: false,
		autoScroll:false,
//		closeOnTab: true,
		resizable:true,
//		layout:'border',
		layoutConfig:{hideCollapseTool:true},
		layout:'accordion',
		baseCls: 'x-plain',
		items:[
			this.taskListsPanel,
			this.categoriesPanel
		]
	});

	config.layout='border';
	config.items=[
		new Ext.Panel({
			region:'west',
			titlebar: false,
			autoScroll:false,
			closeOnTab: true,
			width: 230,
			split:true,
			resizable:true,
			layout:'border',
			baseCls: 'x-plain',
			items:[
				filterPanel,
				this.accordionPanel
			]
		}),
		{
			//title:GO.tasks.lang.tasks,
			region:'center',
			border:false,
			layout:'border',
			items:[ this.addTaskPanel,this.gridPanel]
		},
	this.taskPanel
	];
	
	config.tbar=new Ext.Toolbar({
			cls:'go-head-tb',
			items: [{
		      	 	xtype:'htmlcomponent',
				html:GO.tasks.lang.name,
				cls:'go-module-title-tbar'
			},{
				grid: this.gridPanel,
				xtype:'addbutton',
				handler: function(b){
					this.taskPanel.reset();
					GO.tasks.showTaskDialog({
						tasklist_id: b.buttonParams.id,
						tasklist_name: b.buttonParams.name
					});
				},
				scope: this
			},
			{
				grid: this.gridPanel,
				xtype:'deletebutton',
				handler: function(b){
					this.gridPanel.deleteSelected({
						callback : this.taskPanel.gridDeleteCallback,
						scope: this.taskPanel
					});
				},
				scope: this
			},
//			this.addButton = new Ext.Button({
//				iconCls: 'btn-add',
//				text: GO.lang['cmdAdd'],
//				cls: 'x-btn-text-icon',
//				handler: function(){
//					this.taskPanel.reset();
//					GO.tasks.showTaskDialog({
//						tasklist_id: this.tasklist_id,
//						tasklist_name: this.tasklist_name
//					});
//
//				},
//				scope: this
//			}),this.deleteButton = new Ext.Button({
//				iconCls: 'btn-delete',
//				text: GO.lang['cmdDelete'],
//				cls: 'x-btn-text-icon',
//				handler: function(){
//					this.gridPanel.deleteSelected({
//						callback : this.taskPanel.gridDeleteCallback,
//						scope: this.taskPanel
//					});
//				},
//				scope: this
//			})
			{
				iconCls: 'btn-settings',
				text: GO.lang.administration,
				cls: 'x-btn-text-icon',
				handler: function(){
					this.showAdminDialog();
				},
				scope: this
			},
//			{
//				iconCls: 'btn-export',
//				text: GO.lang.cmdExport,
//				cls: 'x-btn-text-icon',
//				handler:function(){
////					var config = {};
////					config.colModel = this.gridPanel.getColumnModel();
////					config.title = GO.tasks.lang.tasks;
////
////					var query = this.gridPanel.searchField.getValue();
////					if(!GO.util.empty(query))
////					{
////						config.subtitle= GO.lang.searchQuery+': '+query;
////					}else
////					{
////						config.subtitle='';
////					}
////
////					if(!this.exportDialog)
////					{
////						this.exportDialog = new GO.ExportQueryDialog({
////							query:'get_tasks'
////						});
////					}
////					this.exportDialog.show(config);
//
//				
//				if(!this.exportDialog)
//				{
//					this.exportDialog = new GO.ExportGridDialog({
//						url: 'tasks/task/export',
//						name: 'tasks',
//						documentTitle:'ExportTask',
//						colModel: this.gridPanel.getColumnModel()
//					});
//				}
//				
//				this.exportDialog.show();
//
//				},
//				scope: this
//			},
			this.exportMenu = new GO.base.ExportMenu({className:'GO\\Tasks\\Export\\CurrentGrid'}),
			{
				iconCls: 'btn-refresh',
				text: GO.lang['cmdRefresh'],
				cls: 'x-btn-text-icon',
				handler: function(){
					this.taskListsStore.load();
					this.gridPanel.store.load();
				},
				scope: this
			}
			]
		});
	
	this.exportMenu.setColumnModel(this.gridPanel.getColumnModel());
	
	GO.tasks.MainPanel.superclass.constructor.call(this, config);
	
	this.on('show', function(){
		//GO.tasks.notificationEl.setDisplayed(false);
	},this);
	
}
 
Ext.extend(GO.tasks.MainPanel, Ext.Panel,{

	tasklist_ids: [],
	afterRender : function()
	{
		GO.tasks.MainPanel.superclass.afterRender.call(this);


		GO.tasks.tasksObservable.on('save',function(tasksObservable, task_id, loadedStore){
			if(this.gridPanel.store!=loadedStore)
				this.gridPanel.store.reload();
		}, this);
                
		this.taskListsStore.on('load', function(){
			var records = [];
			for(var i=0; i<this.taskListsStore.data.length; i++)
			{
				var item = this.taskListsStore.data.items[i];
				if(item.data.checked)
				{
					records.push(item);
				}
			}

			this.addTaskPanel.populateComboBox(records);

			if(records.length)
			{
				this.tasklist_id = records[0].data.id;
				this.tasklist_name = records[0].data.name;
			}
                                             
		},this);

		var requests = {
			tasklists:{r:"tasks/tasklist/store"},				
			categories:{r:"tasks/category/store"}
		}

		if (!this.gridPanel.storeLoaded) {
			var groupState = this.gridPanel.store.multiSortInfo.sorters[0];//this.gridPanel.store.getSortState();
			var sortState = this.gridPanel.store.getSortState();
			requests['tasks'] = {
														r:"tasks/task/store",
														groupBy: groupState.field,
														groupDir: groupState.dir,
														sort: sortState.field,
														dir: sortState.direction														
													};
		}

		GO.request({
			maskEl:this.getEl(),
			url: "core/multiRequest",
			params:{
				requests:Ext.encode(requests)
			},
			success: function(options, response, result)
			{
				GO.tasks.categoriesStore.loadData(result.categories);
				this.taskListsStore.loadData(result.tasklists);
				if (!GO.util.empty(result.tasks)){
					if(result.tasks.success) {
							this.gridPanel.store.loadData(result.tasks);
					} else {
							Ext.Msg.alert(result.tasks.feedback);
					}
				}
			},
			scope:this
		});               
		
		GO.mainLayout.on('linksDeleted', function(deleteConfig, link_types){
			GO.mainLayout.onLinksDeletedHandler(link_types["GO\\Tasks\\Model\\Task"], this, this.gridPanel.store);
		}, this);    
	},
  
	showAdminDialog : function() {
		
		if(!this.adminDialog)
		{
			this.tasklistDialog = new GO.tasks.TasklistDialog();
			this.categoryDialog = new GO.tasks.CategoryDialog();

//			GO.tasks.writableTasklistsStore.on('load', function(){
//				if(GO.tasks.writableTasklistsStore.reader.jsonData.new_default_tasklist){
//					GO.tasks.defaultTasklist=GO.tasks.writableTasklistsStore.reader.jsonData.new_default_tasklist;
//				}
//			
//			}, this);
			
			this.tasklistDialog.on('save', function(){
				GO.tasks.writableTasklistsStore.load();
				this.taskListsStore.load();
			}, this);

			this.categoryDialog.on('save', function(){
				GO.tasks.categoriesStore.load();
			},this);
			
			this.tasklistsGrid = new GO.grid.GridPanel( {
				paging:true,
				border:false,
				title: GO.tasks.lang.tasklists,
				store: GO.tasks.writableTasklistsStore,
				deleteConfig: {
					callback:function(){
						this.taskListsStore.load();
					},
					scope:this
				},
				columns:[{
					header:GO.tasks.lang.id,
					dataIndex: 'id',
					sortable:true,
					hidden:true,
					width:20
				},{
					header:GO.lang['strName'],
					dataIndex: 'name',
					sortable:true
				},{
					header:GO.lang['strOwner'],
					dataIndex: 'user_name'
				}],
				view:new  Ext.grid.GridView({
					autoFill:true
				}),
				sm: new Ext.grid.RowSelectionModel(),
				loadMask: true,
				tbar: [{
					iconCls: 'btn-add',
					text: GO.lang['cmdAdd'],
					cls: 'x-btn-text-icon',
					handler: function(){						
						this.tasklistDialog.show();
					},
					disabled: !GO.settings.modules.tasks.write_permission,
					scope: this
				},{
					iconCls: 'btn-delete',
					text: GO.lang['cmdDelete'],
					cls: 'x-btn-text-icon',
					disabled: !GO.settings.modules.tasks.write_permission,
					handler: function(){
						this.tasklistsGrid.deleteSelected();
					},
					scope:this
				},'-',new GO.form.SearchField({
					store: GO.tasks.writableTasklistsStore,
					width:150
				})]
			});

			this.deleteCategoryButton = new Ext.Button({
				iconCls: 'btn-delete',
				text: GO.lang['cmdDelete'],
				cls: 'x-btn-text-icon',
				//disabled: !GO.settings.modules.tasks.write_permission,
				handler: function(){
					this.categoriesGrid.deleteSelected();
				},
				scope:this
			});


			this.categoriesGrid = new GO.grid.GridPanel( {
				paging:true,
				border:false,
				title: GO.tasks.lang.categories,
				store: GO.tasks.categoriesStore,
				deleteConfig: {
					callback:function(){
						GO.tasks.categoriesStore.load();
					},
					scope:this
				},
				columns:[{
					header:GO.lang['strName'],
					dataIndex: 'name',
					sortable:true
				},{
					header:GO.lang['strOwner'],
					dataIndex: 'user_name'
				}],
				view:new  Ext.grid.GridView({
					autoFill:true
				}),
				sm: new Ext.grid.RowSelectionModel(),
				loadMask: true,
				tbar: [{
					iconCls: 'btn-add',
					text: GO.lang['cmdAdd'],
					cls: 'x-btn-text-icon',
					handler: function(){
						this.categoryDialog.show();
					},
					//disabled: !GO.settings.modules.tasks.write_permission,
					scope: this
				},
				this.deleteCategoryButton
			]
			});
			
			this.categoriesGridSelectionModel = this.categoriesGrid.getSelectionModel();
			this.categoriesGridSelectionModel.on("selectionchange", function(selModel){
				var disabled = false;
				if(!GO.settings.modules.tasks.write_permission){
					var selectedRows = selModel.getSelections();
					for (var i = 0; i < selectedRows.length; i++) {
						if(selectedRows[i].data.user_id != GO.settings.user_id && disabled !=true)
							disabled = true;
					}
				}
				this.deleteCategoryButton.setDisabled(disabled);
			}, this);

			this.tasklistsGrid.on("rowdblclick", function(grid, rowClicked, e){

				this.tasklistDialog.show(grid.selModel.selections.keys[0]);
			}, this);

			this.categoriesGrid.on('rowdblclick', function(grid, rowIndex)
			{
				var record = grid.getStore().getAt(rowIndex);

				if(GO.settings.has_admin_permission || (record.data.user_id > 0))
				{
					this.categoryDialog.show(record);
				}				

			}, this);

			this.tabPanel = new Ext.TabPanel({
				activeTab:0,
				border:false,
				items:[this.tasklistsGrid,this.categoriesGrid]
			})

			this.adminDialog = new Ext.Window({
				title: GO.lang.cmdSettings,
				layout:'fit',
				modal:false,
				minWidth:300,
				minHeight:300,
				height:400,
				width:600,
				closeAction:'hide',				
				items: this.tabPanel,
				buttons:[{
					text:GO.lang['cmdClose'],
					handler: function(){
						this.adminDialog.hide()
					},
					scope: this
				}]
			});
			
		}
		
		if(!GO.tasks.writableTasklistsStore.loaded){
			GO.tasks.writableTasklistsStore.load();
		}

		if(!GO.tasks.categoriesStore.loaded){
			GO.tasks.categoriesStore.load();
		}
	
		this.adminDialog.show();
	}
	
});


GO.tasks.showTaskDialog = function(config){

	if(!GO.tasks.taskDialog)
		GO.tasks.taskDialog = new GO.tasks.TaskDialog();

	GO.tasks.taskDialog.show(config);
}



GO.tasks.writableTasklistsStore = new GO.data.JsonStore({
	url: GO.url('tasks/tasklist/store'),
	baseParams: {
		'task': 'tasklists',
		'auth_type':'write'
	},
	root: 'results',
	totalProperty: 'total',
	id: 'id',
	fields:['id','name','user_name'],
	remoteSort:true,
	sortInfo: {
		field: 'name',
		direction: 'ASC'
	}
});

GO.tasks.categoriesStore = new GO.data.JsonStore({
	url: GO.url('tasks/category/store'),
	baseParams: {
		'task': 'categories'
	},
	root: 'results',
	totalProperty: 'total',
	id: 'id',
	fields:['id','name','user_name','checked','user_id'],
	remoteSort:true,
	sortInfo: {
		field: 'name',
		direction: 'ASC'
	}
});

/*
 * This will add the module to the main tabpanel filled with all the modules
 */
 
GO.moduleManager.addModule('tasks', GO.tasks.MainPanel, {
	title : GO.tasks.lang.tasks,
	iconCls : 'go-tab-icon-tasks'
});
/*
 * If your module has a linkable item, you should add a link handler like this. 
 * The index (no. 1 in this case) should be a unique identifier of your item.
 * See classes/base/links.class.inc for an overview.
 * 
 * Basically this function opens a task window when a user clicks on it from a 
 * panel with links. 
 */
GO.linkHandlers["GO\\Tasks\\Model\\Task"]=function(id, link_config){

	if(!GO.tasks.taskLinkWindow){
		var taskPanel = new GO.tasks.TaskPanel();
		GO.tasks.taskLinkWindow = new GO.LinkViewWindow({
			title: GO.tasks.lang.task,
			closeAction:'hide',
			items: taskPanel,
			taskPanel: taskPanel
		});
	}
	GO.tasks.taskLinkWindow.taskPanel.load(id);
	GO.tasks.taskLinkWindow.show();
	return GO.tasks.taskLinkWindow;
}

GO.linkPreviewPanels["GO\\Tasks\\Model\\Task"]=function(config){
	config = config || {};
	return new GO.tasks.TaskPanel(config);
}


GO.newMenuItems.push({
	text: GO.tasks.lang.task,
	iconCls: 'go-model-icon-GO\\Tasks\\Model\\Task',
	itemId:'ta-new-task',
	handler:function(item, e){

		var taskShowConfig = item.parentMenu.taskShowConfig || {};
		taskShowConfig.link_config=item.parentMenu.link_config

		GO.tasks.showTaskDialog(taskShowConfig);
	}
});
	
if(GO.addressbook){	
	GO.quickAddPanel.addButton(new Ext.Button({
		iconCls:'img-call-add',
		cls: 'x-btn-icon', 
		tooltip:GO.tasks.lang.scheduleCall,
		handler: function(){
			if(!GO.tasks.scheduleCallDialog)
				GO.tasks.scheduleCallDialog = new GO.tasks.ScheduleCallDialog();
			
			GO.tasks.scheduleCallDialog.show(0,{link_config : this.linkConfig});			
		}, 
		scope: this
	}),0);
}

//GO.mainLayout.onReady(function(){
//
//	//GO.checker is not available in some screens like accept invitation from calendar
//	if(GO.checker){
//		//create notify icon
//		var notificationArea = Ext.get('notification-area');
//		if(notificationArea)
//		{
//			GO.tasks.notificationEl = notificationArea.createChild({
//				id: 'ta-notify',
//				tag:'a',
//				href:'#',
//				style:'display:none'
//			});
//			GO.tasks.notificationEl.on('click', function(){
//				GO.mainLayout.openModule('tasks');
//			}, this);
//		}
//
//		GO.checker.on('check', function(checker, data){
//			var tp = GO.mainLayout.getModulePanel('tasks');
//
//			if(data.tasks.active!=GO.tasks.last_active && data.tasks.active>0)
//			{
//				
//				if(!tp || !tp.isVisible())
//					GO.tasks.notificationEl.setDisplayed(true);
//			}
//
//			GO.tasks.notificationEl.update(data.tasks.active);			
//			GO.tasks.last_active=data.tasks.active;			
//		});
//	}
//});


GO.tasks.SimpleTasksPanel = function(config)
	{
		if(!config)
		{
			config = {};
		}

		config.id='su-tasks-grid';
		
		var reader = new Ext.data.JsonReader({
			root: 'results',
			totalProperty: 'total',
			fields:['id', 'name','completed','due_time','description','tasklist_name','late','is_active'],
			id: 'id'
		});
	
		config.store = new Ext.data.GroupingStore({
			url: GO.url('tasks/portlet/portletGrid'),
			baseParams: {},
			reader: reader,
			sortInfo: {
				field: 'due_time',
				direction: 'ASC'
			},
			groupField: 'tasklist_name',
			remoteGroup:true,
			remoteSort:true
		});

		config.store.on('load', function(){
			//do layout on Startpage
			if(this.rendered)
				this.ownerCt.ownerCt.ownerCt.doLayout();
		}, this);
	
		var checkColumn = new GO.grid.CheckColumn({
			dataIndex: 'completed',
			width: 30,
			header: '<div class="tasks-complete-icon"></div>'
		});
  
		checkColumn.on('change', function(record, checked){
			this.store.baseParams['completed_task_id']=record.data.id;
			this.store.baseParams['checked']=checked;
  	
			this.store.reload({
				callback:function(){

					GO.tasks.tasksObservable.fireEvent('save', this, this.task_id, this.store);
				},
				scope:this
			});
  	
			delete this.store.baseParams['completed_task_id'];
			delete this.store.baseParams['checked'];
		}, this);
	
		config.paging=false;
		config.plugins=checkColumn;
		config.autoExpandColumn='task-portlet-name-col';
		config.autoExpandMax=2500;
		config.enableColumnHide=false;
		config.enableColumnMove=false;
		config.columns=[
		checkColumn,
		{
			id:'task-portlet-name-col',
			header:GO.lang['strName'],
			dataIndex: 'name',
			renderer:function(value, p, record){
				if(!GO.util.empty(record.data.description))
				{
					p.attr = 'ext:qtip="'+Ext.util.Format.htmlEncode(record.data.description)+'"';
				}
				return value;
			},
			sortable:true
		},{
			header:GO.tasks.lang.dueDate,
			dataIndex: 'due_time',
			width:100,
			sortable:true
		},{
			header:GO.tasks.lang.tasklist,
			dataIndex: 'tasklist_name',
			sortable:true,
			width:150
		},{
            header:'ID',
            dataIndex: 'id',
            sortable:true,
            width:50,
            hidden: true
        }];
		config.view=new Ext.grid.GroupingView({
			scrollOffset: 2,
			//forceFit:true,
			hideGroupedColumn:true,
			emptyText: GO.tasks.lang.noTask,
			getRowClass : function(record, rowIndex, p, store){
				if(record.data.late && !record.data.completed){
					return 'tasks-late';
				}
				if(record.data.completed){
					return 'tasks-completed';
				}
				if(record.data.is_active) {
					
					return 'tasks-active';
				}
			}
		});
		config.sm=new Ext.grid.RowSelectionModel();
		config.loadMask=true;
		config.autoHeight=true;
	
		GO.tasks.SimpleTasksPanel.superclass.constructor.call(this, config);
	
	};

Ext.extend(GO.tasks.SimpleTasksPanel, GO.grid.GridPanel, {
	
	saveListenerAdded : false,
		
	afterRender : function()
	{
		GO.tasks.SimpleTasksPanel.superclass.afterRender.call(this);

		GO.tasks.tasksObservable.on('save',function(tasksObservable, task_id, loadedStore){
			if(this.store!=loadedStore)
				this.store.reload();
		}, this);
   
		this.on("rowdblclick", function(grid, rowClicked, e){
			GO.linkHandlers["GO\\Tasks\\Model\\Task"].call(this, grid.selModel.selections.keys[0]);
		}, this);
			
		Ext.TaskMgr.start({
			run: function(){
				this.store.load();
			},
			scope:this,
			interval:960000
		});
	}
});


GO.mainLayout.onReady(function(){
	if(GO.summary)
	{
		var tasksGrid = new GO.tasks.SimpleTasksPanel();
		
		GO.summary.portlets['portlet-tasks']=new GO.summary.Portlet({
			id: 'portlet-tasks',
			//iconCls: 'go-module-icon-tasks',
			title: GO.tasks.lang.tasks,
			layout:'fit',
			tools: [{
				id: 'gear',
				handler: function(){
					if(!this.selectTasklistsWin)
					{
						this.selectTasklistsWin = new GO.base.model.multiselect.dialog({
							url:'tasks/portlet',
							columns:[{ header: GO.lang['strName'], dataIndex: 'name', sortable: true }],
							fields:['id','name'],
							title:GO.tasks.lang.visibleTasklists,
							model_id:GO.settings.user_id,
							listeners:{
								hide:function(){
									tasksGrid.store.reload();
								},
								scope:this
							}
						});
					}
					this.selectTasklistsWin.show();
				}
			},{
				id:'close',
				handler: function(e, target, panel){
					panel.removePortlet();
				}
			}],
			items: tasksGrid,
			autoHeight:true
		});
	}
});

/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: Settings.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.tasks.SettingsPanel = function(config) {
	if (!config) {
		config = {};
	}

	var now = new Date();
	var eight = Date.parseDate(now.format('Y-m-d') + ' 08:00', 'Y-m-d G:i');

	config.autoScroll = true;
	config.border = false;
	config.hideLabel = true;
	config.title = GO.tasks.lang.tasks;
	config.hideMode='offsets';
	config.layout = 'form';
	config.labelWidth=125;
	config.bodyStyle='padding:5px;';
	config.items = {
		xtype:'fieldset',
		autoHeight:true,
		layout:'form',
		forceLayout:true,
		title:GO.tasks.lang.taskDefaults,
		items:[this.remindCheck=new Ext.form.Checkbox({
				boxLabel : GO.tasks.lang.remindMe,
				hideLabel : true,
				name : 'remind',
				listeners : {
					'check' : function(field, checked) {
						this.numberField.setDisabled(!checked);
						this.timeField.setDisabled(!checked);
					},
					scope : this
				}
			}), this.numberField = new GO.form.NumberField({
				decimals:0,
				name : 'reminder_days',			
				value : '0',
				fieldLabel : GO.tasks.lang.daysBeforeStart,
				disabled : true
			}),this.timeField = new Ext.form.TimeField({
				name : 'reminder_time',
				format : GO.settings.time_format,
				value : eight.format(GO.settings['time_format']),
				fieldLabel : GO.lang.strTime,
				disabled : true
			}),
			new GO.form.HtmlComponent({html:'<br />'}),
			this.selectTaskList = new GO.tasks.SelectTasklist({
					fieldLabel : GO.tasks.lang.defaultTasklist,
					hiddenName : 'default_tasklist_id'
				})]
		};
	
	GO.tasks.SettingsPanel.superclass.constructor.call(this, config);
};

Ext.extend(GO.tasks.SettingsPanel, Ext.Panel, {
			onLoadSettings : function(action) {
				//this.selectTaskList.setRemoteText(action.result.data.default_tasklist_name);
			},
			
			onSaveSettings : function(){
				var t = GO.tasks.taskDialog;
				
				var now = new Date();
				
				GO.tasks.reminderDaysBefore=parseInt(this.numberField.getValue());
				GO.tasks.reminderTime=this.timeField.getValue();
				if(t){				
					var remindDate = now.add(Date.DAY, -GO.tasks.reminderDaysBefore);

					t.formPanel.form.findField('remind').originalValue=this.remindCheck.getValue();
					t.formPanel.form.findField('remind_time').originalValue=this.timeField.getValue();
					t.formPanel.form.findField('remind_date').originalValue=remindDate;
				}
			}

		});

GO.mainLayout.onReady(function() {
			GO.moduleManager.addSettingsPanel('tasks',
					GO.tasks.SettingsPanel);
		});

GO.tasks.CategoryDialog = function(config){

	if(!config)
	{
		config = {};
	}

	this.buildForm();

	var focusFirstField = function(){
		this.formPanel.items.items[0].focus();
	};
    
	config.layout='fit';
	config.title=GO.tasks.lang.category;
	config.modal=false;
	config.border=false;
	config.width=400;
	config.autoHeight=true;
	config.resizable=false;
	config.plain=true;
	config.shadow=false,
	config.closeAction='hide';
	config.items=this.formPanel;
	config.focus=focusFirstField.createDelegate(this);
	config.buttons=[{
		text:GO.lang['cmdOk'],
		handler: function()
		{
			this.submitForm(true)
		},
		scope: this
//	},{
//		text:GO.lang['cmdApply'],
//		handler: function()
//		{
//			this.submitForm(false)
//		},
//		scope: this
	},{
		text:GO.lang['cmdClose'],
		handler: function()
		{
			this.hide()
		},
		scope: this
	}];
		
	GO.tasks.CategoryDialog.superclass.constructor.call(this,config);
	
	this.addEvents({'save' : true});
}

Ext.extend(GO.tasks.CategoryDialog, Ext.Window, {
	
	show : function (record)
	{		
		if(!this.rendered)
			this.render(Ext.getBody());
			
		if(record)
		{
			this.category_id=record.data.id;
			
		}else
		{
			this.category_id=0;
		}
		
		this.formPanel.form.baseParams['id'] = this.category_id;
		
		if(this.category_id > 0)
		{
			this.formPanel.form.findField('name').setValue(record.data.name);
			if(GO.settings.has_admin_permission)
			{
				this.formPanel.form.findField('global').setValue(record.data.user_id == 0);
			}
		}else
		{
			this.formPanel.form.reset();
		}
                
		GO.tasks.CategoryDialog.superclass.show.call(this);
	},
	submitForm : function(hide)
	{
		this.formPanel.form.submit(
		{		
			//url:GO.settings.modules.tasks.url+'action.php',
			url:GO.url('tasks/category/submit'),
			params: {
//				task:'save_category',
			//	id:this.category_id
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action)
			{
				if(action.result.id)
				{
					this.category_id=action.result.id;
					this.formPanel.form.baseParams['id'] = this.category_id;
				}
			
				this.fireEvent('save');
				
				if(hide)
				{
					this.hide();
				}
			},
			failure: function(form, action) 
			{
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}
				else
				{
					error = action.result.feedback;
				}
				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope:this
		});		
	},
	buildForm : function () 
	{
		var items = [];
		items.push({
			fieldLabel: GO.lang['strName'],
			name: 'name',
			allowBlank:false
		});
		if(GO.settings.has_admin_permission)
		{
			items.push(this.globalCategory = new Ext.form.Checkbox({
				name:'global',
				boxLabel:GO.tasks.lang.globalCategory,
				hideLabel:true,
				checked:false
			}));
		}
		
		this.formPanel = new Ext.FormPanel({
			cls:'go-form-panel',
			anchor:'100% 100%',
			bodyStyle:'padding:5px',
			defaults:{anchor: '95%'},
			baseParams:{},
			defaultType:'textfield',
			autoHeight:true,
			waitMsgTarget:true,
			labelWidth:75,
			items: items
		});	
	}	
});

GO.tasks.TaskListsGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
   
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.ddGroup='TasklistsDD';
	config.enableDD=true;

	Ext.apply(config, {
		allowNoSelection:true,
		bbar: new GO.SmallPagingToolbar({
			items:[this.searchField = new GO.form.SearchField({
				store: config.store,
				width:120,
				emptyText: GO.lang.strSearch
			})],
			store:config.store,
			pageSize:GO.settings.config.nav_page_size
		})
	});
	
	GO.tasks.TaskListsGrid.superclass.constructor.call(this, config);
};


Ext.extend(GO.tasks.TaskListsGrid, GO.grid.MultiSelectGrid, {
	
	afterRender : function()
	{
		GO.tasks.TaskListsGrid.superclass.afterRender.call(this);

		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody, {
			ddGroup : 'TasklistsDD',
			notifyDrop : this.onNotifyDrop.createDelegate(this)
		});
	},
	onNotifyDrop : function(source, e, data)
	{
		var selections = source.dragData.selections;
		var dropRowIndex = this.getView().findRowIndex(e.target);
		var tasklist_id = this.getView().grid.store.data.items[dropRowIndex].id;

		var move_items = [];
		for(var i=0; i<selections.length; i++)
		{
			move_items.push(selections[i].id);	    
		}
						
		if(tasklist_id > 0)
		{
			GO.request({
				url:'tasks/task/move',
				params:{
					//task:'move_tasks',
					tasklist_id:tasklist_id,
					items:Ext.encode(move_items)
				},
				success: function(options, response, result){
					if(result.reload_store)
						{
							this.fireEvent('drop');
						}
				},
				scope:this
			});
//			
//			
//			Ext.Ajax.request({
//				url: GO.settings.modules.tasks.url+'action.php',
//				params: {
//					task:'move_tasks',
//					tasklist_id:tasklist_id,
//					items:Ext.encode(move_items)
//				},
//				callback: function(options, success, response)
//				{
//					var data = Ext.decode(response.responseText);
//
//					if(!data.success)
//					{
//						GO.errorDialog.show(data.feedback)
//					}else
//					{
//						if(data.reload_store)
//						{
//							this.fireEvent('drop');
//						}
//					}
//				},
//				scope:this
//			});		
			
			return true;
		}else
		{
			return false;
		}
	}
	
});


GO.tasks.TaskTemplate =
		'<tpl if="values.tasks && values.tasks.length">'+
		'{[this.collapsibleSectionHeader(GO.tasks.lang.incompleteTasks, "tasks-"+values.panelId, "tasks")]}'+
		
			'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="tasks-{panelId}">'+
			'<tr>'+
				'<td class="table_header_links" width="16px;"></td>'+
				'<td class="table_header_links" width="10px;"></td>'+
				'<td class="table_header_links">' + GO.lang['strName'] + '</a></td>'+
				'<td class="table_header_links" width="110px">' + GO.tasks.lang.status + '</td>'+
				'<td class="table_header_links" width="110px">' + GO.tasks.lang.dueDate + '</td>'+
				'<td class="table_header_links" width="120px">' + GO.tasks.lang.tasklist + '</td>'+
			'</tr>'+
			'<tpl if="!tasks.length">'+
				'<tr><td colspan="4">'+GO.lang.strNoItems+'</td></tr>'+
			'</tpl>'+
			'<tpl for="tasks">'+
				'<tr class="display-panel-link">'+
					'<td style="padding-right:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-link-icon go-model-icon-GO_Tasks_Model_Task"></div></td>'+					
					'<td style="padding-right:0px !important;padding-left:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-has-links <tpl if="link_count&gt;1">has-links</tpl>"></div></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Tasks\\\\\\\\Model\\\\\\\\Task\'].call(this, {id});" <tpl if="completion_time!=\'\'">class="tasks-completed"</tpl><tpl if="is_active!=\'\'">class="tasks-active"</tpl><tpl if="late!=\'\'">class="tasks-late"</tpl>>{name}</a></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{status}</td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{due_time}</td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{tasklist_name}</td>'+
				'</tr>'+
				'<tpl if="description!=\'\'">'+
					'<tr class="display-panel-link">'+
						'<td style="padding-right:0px !important;" colspan="1" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div></div></td>'+
						'<td style="padding-right:0px !important;padding-left:0px !important;" colspan="5" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div>{description}</div></td>'+
					'</tr>'+
				'</tpl>'+
			'</tpl>'+
			'</table>'+
		'</tpl>'+
		'<tpl if="values.completed_tasks && values.completed_tasks.length">'+
		'{[this.collapsibleSectionHeader(GO.tasks.lang.completedTasks, "completedTasks-"+values.panelId, "completed_tasks")]}'+
		
			'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="completedTasks-{panelId}">'+
			'<tr>'+
				'<td class="table_header_links" width="16px;"></td>'+
				'<td class="table_header_links" width="10px;"></td>'+
				'<td class="table_header_links">' + GO.lang['strName'] + '</a></td>'+
				'<td class="table_header_links" width="110px">' + GO.tasks.lang.status + '</td>'+
				'<td class="table_header_links" width="110px">' + GO.tasks.lang.dueDate + '</td>'+
				'<td class="table_header_links" width="120px">' + GO.tasks.lang.tasklist + '</td>'+
			'</tr>'+
			'<tpl if="!completed_tasks.length">'+
				'<tr><td colspan="4">'+GO.lang.strNoItems+'</td></tr>'+
			'</tpl>'+
			'<tpl for="completed_tasks">'+
				'<tr class="display-panel-link">'+
					'<td style="padding-right:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-link-icon go-model-icon-GO_Tasks_Model_Task"></div></td>'+					
					'<td style="padding-right:0px !important;padding-left:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-has-links <tpl if="link_count&gt;1">has-links</tpl>"></div></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Tasks\\\\\\\\Model\\\\\\\\Task\'].call(this, {id});" >{name}</a></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{status}</td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{due_time}</td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{tasklist_name}</td>'+
				'</tr>'+	
				'<tpl if="description!=\'\'">'+
					'<tr class="display-panel-link">'+
						'<td style="padding-right:0px !important;" colspan="1" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div></div></td>'+
						'<td style="padding-right:0px !important;padding-left:0px !important;" colspan="5" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div>{description}</div></td>'+
					'</tr>'+
				'</tpl>'+
			'</tpl>'+
			'</table>'+
		'</tpl>';

GO.tasks.AddTaskPanel = function(config){

	config = config || {};
	
	this.ntName = new Ext.form.TextField({
		emptyText: GO.tasks.lang.addTask,
		fieldLabel:GO.lang['strName'],
		flex:1

	});

	this.ntTasklist = new GO.form.ComboBox({
		fieldLabel:GO.tasks.lang.tasklist,
		valueField:'id',
		displayField:'name',
		store: new Ext.data.ArrayStore({
			fields: ['id', 'name']
		}),
		mode:'local',
		triggerAction:'all',
		editable:false,
		selectOnFocus:true,
		forceSelection:true
	});
	this.ntTasklist.on('select', function(combo, record){
		this.store.baseParams.tasklist_id = record.data.id;
	})

	this.ntDue = new Ext.form.DateField({
		value: new Date(),
		fieldLabel:GO.tasks.lang.dueDate,
		disabled:true,
		format : GO.settings.date_format
	});

	this.btnNewTask = new Ext.Button({
		text: '<b>+</b>',
		cls:'btn-new-task',
		width:20,
		handler:function()
		{
			this.userTriggered = true;
			this.doBlur();
		},
		disabled:true,
		scope: this
	})

	config = Ext.apply(config, {
		border:false,
		//baseCls:'x-border-layout-ct',
		cls:'ta-add-task-panel',
		height:40,
		items:[{
			anchor:'100%',
			xtype:'compositefield',			
			hideLabel:true,
			items:[this.ntName, this.ntTasklist, this.ntDue, this.btnNewTask]
		}]
	});

	

	GO.tasks.AddTaskPanel.superclass.constructor.call(this, config);
}

Ext.extend(GO.tasks.AddTaskPanel, Ext.FormPanel,{
	populateComboBox : function(records)
	{
		var data = [];
		if(records.length){
			for(var i=0; i<records.length; i++)
			{
				var tasklist = []
				tasklist.push(records[i].data.id);
				tasklist.push(records[i].data.name);

				data.push(tasklist);
			}
		}else
		{
			//data = [[GO.tasks.defaultTasklist.id, GO.tasks.defaultTasklist.name]]
		}

		this.ntTasklist.store.loadData(data);
		var record = this.ntTasklist.store.getAt(0);
		if(record)
			this.ntTasklist.setValue(record.data.id);
	},
	afterRender : function()
	{
		GO.tasks.AddTaskPanel.superclass.afterRender.call(this);


		this.editing = false;
		this.focused = false;
		this.userTriggered = false;

		var handlers = {
			focus: function(){
				this.focused = true;
			},
			blur: function(){
				this.focused = false;
				this.doBlur.defer(250, this);
				if(Ext.isEmpty(this.ntName.getValue())){
					this.btnNewTask.disable();
				}
			},
			specialkey: function(f, e){
				if(e.getKey()==e.ENTER){
					this.userTriggered = true;
					e.stopEvent();
					f.el.blur();
					if(f.triggerBlur){
						f.triggerBlur();
					}
				}
			},
			scope:this
		}
		this.ntName.on(handlers, this);
		this.ntDue.on(handlers, this);

		this.ntName.on('focus', function(){
			this.focused = true;
			this.btnNewTask.enable();
			if(!this.editing){
				this.ntDue.enable();
				this.editing = true;
			}
		}, this);
	},

	syncFields : function(){

		var cm = this.getColumnModel();
		//this.ntSelectLink.setSize(cm.getColumnWidth(1)-204);
		this.ntName.setSize(cm.getColumnWidth(1)-4);
		this.ntDue.setSize(cm.getColumnWidth(2)-4);

	},

	// when a field in the add bar is blurred, this determines
	// whether a new task should be created
	doBlur : function(){
		if(this.userTriggered && this.editing && !this.focused){
			var taskname = this.ntName.getValue();
			var due = this.ntDue.getValue();
			var tasklist_id = this.ntTasklist.getValue();
			// var link = this.ntSelectLink.getValue();
			if(!Ext.isEmpty(taskname) && due){

				Ext.Ajax.request({
					//url: GO.settings.modules.tasks.url+'action.php',
					url:GO.url('tasks/task/submit'),
					params: {
						//task: 'save_task',
						tasklist_id: tasklist_id,
						name: taskname,
					//	link: link,
						start_time: due.format(GO.settings.date_format), //new Date().format(GO.settings.date_format),
						due_time: due.format(GO.settings.date_format)
					},
					callback: function(options, success, response)
					{
						var reponseParams = Ext.decode(response.responseText);
						if(!reponseParams.success)
						{
							GO.errorDialog.show(reponseParams.feedback);
						}else
						{

							GO.tasks.tasksObservable.fireEvent('save', this, this.task_id);
							//this.store.reload();
						}

					},
					scope:this
				});


				this.ntName.setValue('');
				if(this.userTriggered){ // if the entered to add the task, then go to a new add automatically
					this.userTriggered = false;
					this.ntName.focus.defer(100, this.ntName);
				}
			}
			if(due)
			{
				this.ntDue.disable();
				this.btnNewTask.disable();
				this.editing = false;
			}
		}
	}
});


GO.moduleManager.on('moduleconstructed',function(mm,moduleName,panel){
	if(moduleName=='settings'){

		var fieldset =new Ext.form.FieldSet({
			title:GO.tasks.lang.tasks,
			items:[{
				xtype:'textfield',
				name:'task_name_template',
				fieldLabel:GO.tasks.lang.globalsettings_templatelabel,
				width: 300
			},{
				xtype:'checkbox',
				name:'GO_Tasks_Model_Tasklist_change_all_names',
				fieldLabel:GO.tasks.lang.globalsettings_allchangelabel,
				listeners: {
	  			 "check": function(cb, isenabled) {
						if(isenabled && !confirm(GO.tasks.lang.globalsettings_renameall))
							cb.setValue(false);
					},
					scope:this
				}
			}]
		});

		panel.add(fieldset);
	}
});

GO.tasks.ScheduleCallMenuItem = Ext.extend(Ext.menu.Item,{
	linkConfig : { name : '', link: {model_id:0, model_name:0}},
	
	initComponent : function(){
		this.iconCls= 'tasks-call';
		this.text= GO.tasks.lang.scheduleCall;
		this.cls='x-btn-text-icon';
		this.disabled=true;
		this.handler= function()
		{
			if(!GO.tasks.scheduleCallDialog)
			{
				GO.tasks.scheduleCallDialog = new GO.tasks.ScheduleCallDialog();
			}
			GO.tasks.scheduleCallDialog.show(0,{link_config : this.linkConfig});			
		};
		
		GO.tasks.ScheduleCallMenuItem.superclass.initComponent.call(this);
	},
	
	setLinkConfig : function(config){
		
		this.linkConfig = config;
		this.setDisabled(false);
	}
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: StatusProgressField.js 15954 2013-10-17 12:04:36Z johan $
 * @copyright Copyright Intermesh
 * @author Johan Overeem <JOvereem@intermesh.nl>
 */

GO.tasks.StatusProgressField = function (config) {
	var config = config || {};
	
	var percentages = [];
	for (var i = 0; i <= 100; i += 10) {
		percentages.push([i, i + "%"]);
	}
	
	this.progressInpercentagesStore = new Ext.data.SimpleStore({
		fields: ['value', 'text'],
		data: percentages
	});
	
	config = Ext.applyIf(config, {
		fieldLabel: GO.tasks.lang.taskStatus,
		items: [
			this.taskStatusField = new GO.tasks.SelectTaskStatus({
				flex: 3,
				listeners: {
					scope: this,
					select: function (combo, record) {
						if (record.data.value == 'COMPLETED')
							this.progressField.setValue(100);
					}
				}
			}),
			this.progressField = new Ext.form.ComboBox({
				fieldLabel: GO.tasks.lang.taskPercentage_complete,
				flex: 1,
				hiddenName: 'percentage_complete',
				store: this.progressInpercentagesStore,
				value: '0',
				valueField: 'value',
				displayField: 'text',
				mode: 'local',
				triggerAction: 'all',
				editable: false,
				selectOnFocus: true,
				listeners: {
					scope: this,
					select: function (combo, record) {
						if (record.data.value == 100)
							this.taskStatusField.setValue("COMPLETED");
					}
				}
			})
		]
	});
	
	GO.tasks.StatusProgressField.superclass.constructor.call(this, config);

};


Ext.extend(GO.tasks.StatusProgressField, Ext.form.CompositeField,{
	
	
	
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: PrintCategoryCountDialog.js 16635 2014-01-17 14:37:56Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */
 
GO.calendar.PrintCategoryCountDialog = Ext.extend(GO.dialog.TabbedFormDialog , {

	initComponent : function(){

		Ext.apply(this, {
			goDialogId:'printCategoryCountDialog',
			title:GO.calendar.lang.cmdPrintCategoryCount,
			formControllerUrl:'calendar/calendar',
			collapsible:true,
			loadOnNewModel:false,
			layout:'fit',
			modal:false,
			resizable:true,
			maximizable:true,
			width:400,
			height:165,
			closeAction:'hide',
			enableOkButton : false,
			enableApplyButton : false,
			enableCloseButton : false,
			
			buttons:[{
				text: GO.lang['cmdExport'],
				handler: function(){
					this.submitForm(true);
				},
				scope: this
			},{
				text: GO.lang['cmdClose'],
				handler: function(){
					this.hide();
				},
				scope:this
			}]
		});		
		
		GO.calendar.PrintCategoryCountDialog.superclass.initComponent.call(this);	
	},
	
	beforeSubmit : function(params){
		
		this.formPanel.form.standardSubmit = true;
		this.formPanel.form.getEl().dom.target = '_blank';
		this.formPanel.form.getEl().dom.action = GO.url('calendar/calendar/printCategoryCount');
		
		GO.calendar.PrintCategoryCountDialog.superclass.beforeSubmit.call(this,params);	
	},
		
	buildForm : function () {	
		
		var now = new Date();
		var startOfLastMonth = now.getFirstDateOfMonth();
		var endOfLastMonth = now.getLastDateOfMonth();

		this.startDateField = new Ext.form.DateField({
			flex:1,
			name : 'startDate',
			anchor: '100%',
			format : GO.settings['date_format'],
			allowBlank : false,
			fieldLabel: GO.calendar.lang.startDate,
			value: startOfLastMonth.format(GO.settings.date_format)
		});
		
		this.endDateField = new Ext.form.DateField({
			flex:1,
			name : 'endDate',
			anchor: '100%',
			format : GO.settings['date_format'],
			allowBlank : false,
			fieldLabel: GO.calendar.lang.endDate,
			value: endOfLastMonth.format(GO.settings.date_format)
		});
	
		this.previousMonthButton = new Ext.Button({
			flex:1,
			text: GO.calendar.lang.previousMonth,
			handler: function(){
				this.changeMonth(-1);
			},
			scope:this
		});
		
		this.nextMonthButton = new Ext.Button({
			flex:1,
			text: GO.calendar.lang.nextMonth,
			handler: function(){
				this.changeMonth(1);
			},
			scope:this
		});
		
		this.startComp = new Ext.form.CompositeField({
			items:[
				this.startDateField,
				this.previousMonthButton
			]
		});
		
		this.endComp = new Ext.form.CompositeField({
			items:[
				this.endDateField,
				this.nextMonthButton
			]
		});
	
	
		this.propertiesPanel = new Ext.Panel({
			waitMsgTarget:true,			
			border: false,
			autoScroll:true,
			title:GO.lang['strProperties'],
			layout:'form',
			cls:'go-form-panel',
			items : [
				this.startComp,
				this.endComp
			]
		});
			
		this.addPanel(this.propertiesPanel);
	},
	changeMonth : function(increment)
	{
		var date = this.startDateField.getValue();
		date = date.add(Date.MONTH, increment);
		this.startDateField.setValue(date.getFirstDateOfMonth().format(GO.settings.date_format));
		this.endDateField.setValue(date.getLastDateOfMonth().format(GO.settings.date_format));
	}
});

/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: Settings.js 21212 2017-06-02 09:58:46Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.SettingsPanel = function(config) {
	if (!config) {
		config = {};
	}

	var reminderValues = [[null, GO.calendar.lang.noReminder]];

	for (var i = 0; i < 60; i++) {
		reminderValues.push([i, i]);
	}

	this.reminderValue = new Ext.form.ComboBox({
				fieldLabel : GO.calendar.lang.reminder,
				hiddenName : 'reminder_value',
				triggerAction : 'all',
				editable : false,
				selectOnFocus : true,
				width : 148,
				forceSelection : true,
				mode : 'local',
				value : '0',
				valueField : 'value',
				displayField : 'text',
				store : new Ext.data.SimpleStore({
							fields : ['value', 'text'],
							data : reminderValues
						})
			});

	this.reminderMultiplier = new Ext.form.ComboBox({
				hiddenName : 'reminder_multiplier',
				triggerAction : 'all',
				editable : false,
				selectOnFocus : true,
				width : 148,
				forceSelection : true,
				mode : 'local',
				value : '60',
				valueField : 'value',
				displayField : 'text',
				store : new Ext.data.SimpleStore({
							fields : ['value', 'text'],
							data : [['60', GO.lang.strMinutes],
									['3600', GO.lang.strHours],
									['86400', GO.lang.strDays]

							]
						}),
				hideLabel : true,
				labelSeperator : ''
			});

	config.autoScroll = true;
	config.border = false;
	config.hideLabel = true;
	config.title = GO.calendar.lang.calendar;
	config.hideMode = 'offsets';
	config.layout = 'form';
	config.labelWidth=140;
	config.bodyStyle = 'padding:5px';
	config.items = [{
		forceLayout:true,
		xtype : 'fieldset',
		autoHeight : true,
		layout : 'form',
		title : GO.calendar.lang.eventDefaults,
		items : [{
					border : false,
					layout : 'table',
					defaults : {
						border : false,
						layout : 'form',
						bodyStyle : 'padding-right:3px'
					},
					items : [{
								items : this.reminderValue
							}, {
								items : this.reminderMultiplier
							}]
				}, this.colorField = new GO.form.ColorField({
							fieldLabel : GO.lang.color,
							value : 'EBF1E2',
							name : 'background',
							colors : [
									'EBF1E2',
									'95C5D3',
									'FFFF99',
									'A68340',
									'82BA80',
									'F0AE67',
									'66FF99',
									'CC0099',
									'CC99FF',
									'996600',
									'999900',
									'FF0000',
									'FF6600',
									'FFFF00',
									'FF9966',
									'FF9900',
									/* Line 1 */
									'FB0467',
									'D52A6F',
									'CC3370',
									'C43B72',
									'BB4474',
									'B34D75',
									'AA5577',
									'A25E79',
									/* Line 2 */
									'FF00CC',
									'D52AB3',
									'CC33AD',
									'C43BA8',
									'BB44A3',
									'B34D9E',
									'AA5599',
									'A25E94',
									/* Line 3 */
									'CC00FF',
									'B32AD5',
									'AD33CC',
									'A83BC4',
									'A344BB',
									'9E4DB3',
									'9955AA',
									'945EA2',
									/* Line 4 */
									'6704FB',
									'6E26D9',
									'7033CC',
									'723BC4',
									'7444BB',
									'754DB3',
									'7755AA',
									'795EA2',
									/* Line 5 */
									'0404FB',
									'2626D9',
									'3333CC',
									'3B3BC4',
									'4444BB',
									'4D4DB3',
									'5555AA',
									'5E5EA2',
									/* Line 6 */
									'0066FF',
									'2A6ED5',
									'3370CC',
									'3B72C4',
									'4474BB',
									'4D75B3',
									'5577AA',
									'5E79A2',
									/* Line 7 */
									'00CCFF',
									'2AB2D5',
									'33ADCC',
									'3BA8C4',
									'44A3BB',
									'4D9EB3',
									'5599AA',
									'5E94A2',
									/* Line 8 */
									'00FFCC',
									'2AD5B2',
									'33CCAD',
									'3BC4A8',
									'44BBA3',
									'4DB39E',
									'55AA99',
									'5EA294',
									/* Line 9 */
									'00FF66',
									'2AD56F',
									'33CC70',
									'3BC472',
									'44BB74',
									'4DB375',
									'55AA77',
									'5EA279',
									/* Line 10 */
									'00FF00', '2AD52A',
									'33CC33',
									'3BC43B',
									'44BB44',
									'4DB34D',
									'55AA55',
									'5EA25E',
									/* Line 11 */
									'66FF00', '6ED52A', '70CC33',
									'72C43B',
									'74BB44',
									'75B34D',
									'77AA55',
									'79A25E',
									/* Line 12 */
									'CCFF00', 'B2D52A', 'ADCC33', 'A8C43B',
									'A3BB44',
									'9EB34D',
									'99AA55',
									'94A25E',
									/* Line 13 */
									'FFCC00', 'D5B32A', 'CCAD33', 'C4A83B',
									'BBA344', 'B39E4D',
									'AA9955',
									'A2945E',
									/* Line 14 */
									'FF6600', 'D56F2A', 'CC7033', 'C4723B',
									'BB7444', 'B3754D', 'AA7755',
									'A2795E',
									/* Line 15 */
									'FB0404', 'D52A2A', 'CC3333', 'C43B3B',
									'BB4444', 'B34D4D', 'AA5555', 'A25E5E',
									/* Line 16 */
									'FFFFFF', '949494', '808080', '6B6B6B',
									'545454', '404040', '292929', '000000']
						}),	
						this.selectCalendar = new GO.form.ComboBox({
							fieldLabel : GO.calendar.lang.default_calendar,
							hiddenName : 'default_calendar_id',
							anchor : '-20',
							emptyText : GO.lang.strPleaseSelect,
							store : new GO.data.JsonStore({
								url : GO.url("calendar/calendar/store"),
								baseParams : {
									permissionLevel:GO.permissionLevels.write
								},
								fields : ['id', 'name'],
								remoteSort : true
							}),
							pageSize : parseInt(GO.settings.max_rows_list),
							valueField : 'id',
							displayField : 'name',
							typeAhead : true,
							mode : 'remote',
							triggerAction : 'all',
							editable : false,
							selectOnFocus : true,
							forceSelection : true,
							allowBlank : false
						}),{
							xtype:'xcheckbox',
							name:'show_statuses',
							boxLabel: GO.calendar.lang.showStatuses,
							hideLabel:true
						}		
					]
	}];

	GO.calendar.SettingsPanel.superclass.constructor.call(this, config);
};

Ext.extend(GO.calendar.SettingsPanel, Ext.Panel, {

	onSaveSettings : function() {

		if(GO.calendar.eventDialog){
			GO.calendar.eventDialog.reminderValue.originalValue = this.reminderValue
					.getValue();
			GO.calendar.eventDialog.reminderMultiplier.originalValue = this.reminderMultiplier
					.getValue();
			GO.calendar.eventDialog.colorField.originalValue = this.colorField
					.getValue();
		}else
		{
			GO.calendar.defaultReminderValue=this.reminderValue.getValue();
			GO.calendar.defaultReminderMultiplier=this.reminderMultiplier.getValue();
		}
	},
	//needed for override in freebusypermissions
	onLoadSettings : function(action){
		
		console.log(action);
		
	}

});

GO.mainLayout.onReady(function() {
			GO.moduleManager.addSettingsPanel('calendar',
					GO.calendar.SettingsPanel);
		});

GO.calendar.EventTemplate =
		'<tpl if="values.events && values.events.length">'+
		'{[this.collapsibleSectionHeader(GO.calendar.lang.forthcomingAppointments, "events-"+values.panelId, "events")]}'+
		
			'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="events-{panelId}">'+
			'<tr>'+
				'<td class="table_header_links" width="16px;"></td>'+
				'<td class="table_header_links" width="10px;"></td>'+
				'<td class="table_header_links">' + GO.lang['strName'] + '</a></td>'+
				'<td class="table_header_links" width="110px">' + GO.calendar.lang.startsAt + '</td>'+
				'<td class="table_header_links" width="120px">' + GO.calendar.lang.calendar + '</td>'+
			'</tr>'+
			'<tpl if="!events.length">'+
				'<tr><td colspan="4">'+GO.lang.strNoItems+'</td></tr>'+
			'</tpl>'+
			'<tpl for="events">'+
				'<tr class="display-panel-link">'+
					'<td style="padding-right:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-link-icon go-model-icon-GO_Calendar_Model_Event"></div></td>'+
					'<td style="padding-right:0px !important;padding-left:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-has-links <tpl if="link_count&gt;1">has-links</tpl>"></div></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Calendar\\\\\\\\Model\\\\\\\\Event\'].call(this, {id});">{name}</a></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{start_time}</td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{calendar_name}</td>'+
				'</tr>'+
				'<tpl if="description!=\'\'">'+
					'<tr class="display-panel-link">'+
						'<td style="padding-right:0px !important;" colspan="1" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div></div></td>'+
						'<td style="padding-right:0px !important;padding-left:0px !important;" colspan="4" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div>{description}</div></td>'+
					'</tr>'+
				'</tpl>'+
			'</tpl>'+
			'</table>'+
		'</tpl>'+
		'<tpl if="values.past_events && values.past_events.length">'+
		'{[this.collapsibleSectionHeader(GO.calendar.lang.pastAppointments, "pastEvents-"+values.panelId, "past_events")]}'+
			'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="pastEvents-{panelId}">'+
			'<tr>'+
				'<td class="table_header_links" width="16px;"></td>'+
				'<td class="table_header_links" width="10px;"></td>'+
				'<td class="table_header_links">' + GO.lang['strName'] + '</a></td>'+
				'<td class="table_header_links" width="110px">' + GO.calendar.lang.startsAt + '</td>'+
				'<td class="table_header_links" width="120px">' + GO.calendar.lang.calendar + '</td>'+
			'</tr>'+
			'<tpl if="!past_events.length">'+
				'<tr><td colspan="4">'+GO.lang.strNoItems+'</td></tr>'+
			'</tpl>'+
			'<tpl for="past_events">'+
				'<tr class="display-panel-link">'+
					'<td style="padding-right:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-link-icon go-model-icon-GO_Calendar_Model_Event"></div></td>'+
					'<td style="padding-right:0px !important;padding-left:0px !important;" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div class="display-panel-has-links <tpl if="link_count&gt;1">has-links</tpl>"></div></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Calendar\\\\\\\\Model\\\\\\\\Event\'].call(this, {id});">{name}</a></td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{start_time}</td>'+
					'<td {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}>{calendar_name}</td>'+
				'</tr>'+
				'<tpl if="description!=\'\'">'+
					'<tr class="display-panel-link">'+
						'<td style="padding-right:0px !important;" colspan="1" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div></div></td>'+
						'<td style="padding-right:0px !important;padding-left:0px !important;" colspan="4" {[xindex % 2 === 0 ? "class=\\\"display-panel-link-even\\\"" : ""]}><div>{description}</div></td>'+
					'</tr>'+
				'</tpl>'+
			'</tpl>'+
			'</table>'+
		'</tpl>';

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: EventDialog.js 21212 2017-06-02 09:58:46Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.EventDialog = function(calendar) {
	this.calendar = calendar;

	this.buildForm();

	this.beforeInit();

	this.goDialogId='event';
	this.resourceGroupsStore = new GO.data.JsonStore({
		url:GO.url('calendar/group/groupsWithResources'),
		fields: ['id','resources','name','customfields'],
		remoteSort: true
	});

	this.resourceGroupsStore.on('load', function()
	{		
		this.buildAccordion();
	}, this);

	var items  = [
	this.propertiesPanel,
	this.recurrencePanel,
	this.optionsPanel,
	this.participantsPanel,
	this.resourcesPanel
	];

	if(GO.customfields && GO.customfields.types["GO\\Calendar\\Model\\Event"])
	{
		for(var i=0;i<GO.customfields.types["GO\\Calendar\\Model\\Event"].panels.length;i++)
		{
			items.push(GO.customfields.types["GO\\Calendar\\Model\\Event"].panels[i]);
		}
	}
	
	if(GO.comments){
		this.commentsGrid = new GO.comments.CommentsGrid({title:GO.comments.lang.comments});
		items.push(this.commentsGrid);
	}
	
	this.tabPanel = new Ext.TabPanel({
		activeTab : 0,
		deferredRender : false,
		border : false,
		anchor : '100% 100%',
		hideLabel : true,
		enableTabScroll : true,
		items : items,
		defaults:{
			forceLayout:true
		}
	});

	this.formPanel = new Ext.form.FormPanel({
		waitMsgTarget : true,
		url : GO.url('calendar/event/load'),
		border : false,
		baseParams : {},
		items : this.tabPanel
	});

	this.initWindow();

	this.addEvents({
		'save' : true,
		'show' : true
	});

	this.win.render(Ext.getBody());

}

Ext.extend(GO.calendar.EventDialog, Ext.util.Observable, {
	resources_options : '',
	beforeInit : function(){

	},

	initWindow : function() {
		var focusSubject = function() {
			this.subjectField.focus();
		}

		var tbar = [this.linkBrowseButton = new Ext.Button({
			iconCls : 'btn-link',
			cls : 'x-btn-text-icon',
			text : GO.lang.cmdBrowseLinks,
			disabled : true,
			handler : function() {
				if(!GO.linkBrowser){
					GO.linkBrowser = new GO.LinkBrowser();
				}
				GO.linkBrowser.show({
					model_id : this.event_id,
					model_name : "GO\\Calendar\\Model\\Event",
					folder_id : "0"
				});
			},
			scope : this
		})];

		if (GO.files) {
			tbar.push(this.fileBrowseButton = new GO.files.FileBrowserButton({
				model_name:"GO\\Calendar\\Model\\Event"
			}));
			
			this.fileBrowseButton.on('click',function(){
			if (this.privateCB.getValue() && !GO.files.privateWarned) {
				GO.files.privateWarned=true;
				alert(GO.calendar.lang['eventPrivateChecked']);
			}
		},this);
		}
		
		tbar.push(this.checkAvailabilityButton = new Ext.Button({
			iconCls : 'btn-availability',
			text : GO.calendar.lang.checkAvailability,
			cls : 'x-btn-text-icon',
			handler : function() {
				this.checkAvailability();
			},
			scope : this
		}));

		this.win = new GO.Window({
			layout : 'fit',
			modal : false,
			tbar : tbar,
			resizable : true,
			collapsible:true,
			maximizable:true,
			width : 620,
			height : 450,
			id:'calendar_event_dialog',
			closeAction : 'hide',
			title : GO.calendar.lang.appointment,
			items : this.formPanel,
			focus : focusSubject.createDelegate(this),
			buttons : [{
				text : GO.lang.cmdOk,
				handler : function() {
					this.submitForm(true, { 
						'check_conflicts' : 1
					} );
				},
				scope : this
			}, {
				text : GO.lang.cmdApply,
				handler : function() {
					this.submitForm(false, { 
						'check_conflicts' : 1
					} );
				},
				scope : this
			}, {
				text : GO.lang.cmdClose,
				handler : function() {
					this.win.hide();
				},
				scope : this
			}]
		});
	},

	files_folder_id : 0,



	initialized : false,

	show : function(config) {

		config = config || {};

		GO.dialogListeners.apply(this);

		this.win.show();

		if(!this.initialized){
			
			
			GO.request({
				url: 'core/multiRequest',
				maskEl:this.win.getEl(),
				params:{
					requests:Ext.encode({
						groups:{r:'calendar/group/store'},
						//categories:{r:'calendar/category/store'},
						resources:{r:'calendar/group/groupsWithResources'}						
					})
				},
				success: function(options, response, result)
				{
					GO.calendar.groupsStore.loadData(result.groups);
					this.resourceGroupsStore.loadData(result.resources);				
					
					this.initialized=true;
					
					this.show(config);
				},
				scope:this
			});
			return false;
		}		
        
		if (config.oldDomId) {
			this.oldDomId = config.oldDomId;
		} else {
			this.oldDomId = false;
		}
		// propertiesPanel.show();

		delete this.link_config;

		//tmpfiles on the server ({name:'Name',tmp_file:/tmp/name.ext} will be attached)
		this.formPanel.baseParams.tmp_files = config.tmp_files ? Ext.encode(config.tmp_files) : '';

		this.formPanel.form.reset();
        
		this.tabPanel.setActiveTab(0);

		if (!config.event_id) {
			config.event_id = 0;
		}		

		this.setEventId(config.event_id);	
		
		var params = {};
		
		if(!config.event_id){
			
			if(!GO.util.empty(config.calendar_id))
				params.calendar_id=config.calendar_id;

			if(config.values && config.values.start_date){
				params.start_date=config.values.start_date.format(GO.settings.date_format);				
				params.start_time=config.values.start_date.format(GO.settings.time_format);				
				params.end_date=config.values.end_date.format(GO.settings.date_format);				
				params.end_time=config.values.end_date.format(GO.settings.time_format);				
			}
		}		
		
		//These parameters are present when a user edits a single occurence of a repeating event
		params.exception_date=config.exception_date;
		
		
			// if the newMenuButton from another passed a linkTypeId then set this
		// value in the select link field
		if (config.link_config) {
			this.link_config = config.link_config;
			if (config.link_config.modelNameAndId) {
				this.selectLinkField.setValue(config.link_config.modelNameAndId);
				this.selectLinkField.setRemoteText(config.link_config.text);
				
				params.linkModelNameAndId= config.link_config.modelNameAndId;
			}		

			//if(this.subjectField.getValue()=='')
				//this.subjectField.setValue(config.link_config.text);
				
			params.name=config.link_config.text;			
		}
		

		//if (config.event_id > 0) {
			this.formPanel.load({
				params:params,
				url : GO.url('calendar/event/load'),
				waitMsg:GO.lang.waitMsgLoad,
				success : function(form, action) {
					//this.win.show();
					
					this.setData(action);
					
					if(action.result.data.enable_reminder){
						this.reminderComposite.setDisabled(false);
					} else {
						this.reminderComposite.setDisabled(true);
					}
					
					
					// If this is a recurrence and the following is true (action.result.data.exception_for_event_id and action.result.data.exception_date are set and not empty)
					if(action.result.data.exception_date){
						this.setEventId(0);
						this.formPanel.form.baseParams['exception_for_event_id'] = action.result.data.exception_for_event_id;
						this.formPanel.form.baseParams['exception_date'] = action.result.data.exception_date;
					} 
					
					// Disable the recurrence panel when an event is an exception of an other event or if it is a recurrence item itself.
					if(action.result.data.exception_date || action.result.data.exception_for_event_id > 0){
						this.recurrencePanel.setDisabled(true);
					} else {
						this.recurrencePanel.setDisabled(false);
					}
					
					if(GO.comments){
						if(action.result.data['id'] > 0){
							if (!GO.util.empty(action.result.data['action_date'])) {
								this.commentsGrid.actionDate = action.result.data['action_date'];
							} else {
								this.commentsGrid.actionDate = false;
							}
							this.commentsGrid.setLinkId(action.result.data['id'], 'GO\\Calendar\\Model\\Event');
							this.commentsGrid.store.load();
							this.commentsGrid.setDisabled(false);
						} else {
							this.commentsGrid.setDisabled(true);
						}
					}
					
					this.changeRepeat(action.result.data.freq);
					this.setValues(config.values);
					//this.setWritePermission(action.result.data.write_permission);
					//this.selectCalendar.setValue(action.result.data.calendar_id);
					this.selectCalendar.setRemoteText(action.result.remoteComboTexts.calendar_id);
					
					this.setPermissionLevel(action.result.data.permission_level);
					
					if(GO.customfields)
						GO.customfields.disableTabs(this.tabPanel, action.result);	

					if(action.result.group_id == 1)
					{
						//TODO
						this.toggleFieldSets(action.result.data.resources_checked);
					}

					this.selectCategory.setCalendarId(action.result.data.calendar_id);
					this.selectCategory.setRemoteText(action.result.remoteComboTexts.category_id);
					//this.selectCategory.store.load();

					//this.selectCategory.container.up('div.x-form-item').setDisplayed(this.formPanel.form.baseParams['group_id']==1);
					
					if(action.result.data.category_name)
						this.selectCategory.setRemoteText(action.result.data.category_name);

//					this.has_other_participants=action.result.data.has_other_participants;					
					if(this.resourceGroupsStore.data.items.length == 0 || action.result.group_id != '1') {
						this.tabPanel.hideTabStripItem('resources-panel');
						
						
					} else {
						this.tabPanel.unhideTabStripItem('resources-panel'); 
					}
					
					if(action.result.group_id != '1' && !action.result.data.resourceGroupAdmin) {
						this.eventStatus.disable();
					}
					
					
					this.participantsPanel.store.loadData(action.result.participants);
					
					//hide participants for resources
					if(action.result.group_id != '1')
						this.tabPanel.hideTabStripItem(this.participantsPanel);
					else
						this.tabPanel.unhideTabStripItem(this.participantsPanel);

				},
				failure : function(form, action) {
					Ext.Msg.alert(GO.lang.strError, action.result.feedback)
				},
				scope : this

			});
		
					
		
	


		this.fireEvent('show', this);
	},
	
	
	/**
	 * Dummy funtion that is used to create a sequence in other modules.
	 * 
	 * @param array data
	 * @returns {undefined}
	 */
	setData : function(data){
		
	},
	
	setPermissionLevel : function(permissionLevel){
		// Disable the eventStatus select box and set it to the default "NEEDS-ACTION" value
		if(this.event_id == 0 && permissionLevel == GO.permissionLevels.create){
			this.eventStatus.setValue('NEEDS-ACTION');
			this.eventStatus.setDisabled(true);
		}else{
			this.eventStatus.setDisabled(false);
		}
	},
	
//	updateResourcePanel : function()
//	{
//		var values = {};
//		var checked = [];		
//		
//		// save values before all items are removed (checkboxes + statuses)
//		if(this.win.isVisible())
//		{
//			if(GO.customfields && GO.customfields.types["GO\\Calendar\\Model\\Event"])
//			{
//				for(var i=0; i<this.resourceGroupsStore.data.items.length; i++)
//				{
//					var record = this.resourceGroupsStore.data.items[i].data;
//					var resources = record.resources;
//
//					for(var j=0; j<resources.length; j++)
//					{
//						var calendar_id = resources[j].id;
//						values['status_'+calendar_id] = this.formPanel.form.findField('status_'+calendar_id).getValue();
//
//						var p = this.resourcesPanel.getComponent('group_'+record.id);
//						var c = p.getComponent('resource_'+calendar_id);
//						if(!c.collapsed)
//						{
//							checked.push(calendar_id);
//						}
//
//						for(var k=0; k<record.fields.length; k++)
//						{
//							var field = record.fields[k];
//							if(field)
//							{
//								for(var l=0; l<GO.customfields.types["1"].panels.length; l++)
//								{
//									var cfield = 'cf_category_'+GO.customfields.types["1"].panels[l].category_id;
//									if(cfield == field)
//									{
//										var cf = GO.customfields.types["1"].panels[l].customfields;
//										for(var m=0; m<cf.length; m++)
//										{
//											var name = 'resource_options['+calendar_id+']['+cf[m].dataname+']';
//											var value = this.formPanel.form.findField(name).getValue();
//
//											values[name] = value;
//										}
//									}
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//        
//		this.resourceGroupsStore.load({
//			callback:function()
//			{
//				if(this.win.isVisible())
//				{
//					if(checked)
//					{
//						this.toggleFieldSets(checked);
//					}
//
//					// after reload store set the values we saved earlier
//					this.setValues(values);
//
//					if(this.resourceGroupsStore.data.items.length == 0)
//					{
//						this.tabPanel.hideTabStripItem('resources-panel');
//						this.tabPanel.setActiveTab(0);
//					} else
//{
//						this.tabPanel.unhideTabStripItem('resources-panel');												
//					}
//				}
//			},
//			scope:this
//		});
//	},
	toggleFieldSets : function(resources_checked)
	{
		for(var i=0; i<this.resourceGroupsStore.data.items.length; i++)
		{
			var record = this.resourceGroupsStore.data.items[i].data;
			var resources = record.resources;

			for(var j=0; j<resources.length; j++)
			{
				var p = this.resourcesPanel.getComponent('group_'+record.id);
				var r = 'resource_'+resources[j].id;
				var c = p.getComponent(r);

				if(resources_checked && (resources_checked.indexOf(resources[j].id) != -1))
				{
					c.expand();
				}else
				{
					var l = c.getComponent('status_'+resources[j].id);
					l.setValue(GO.calendar.lang.no_status);

					c.collapse();
				}
			}
		}
	},
//	setWritePermission : function(writePermission) {
//		this.win.buttons[0].setDisabled(!writePermission);
//		this.win.buttons[1].setDisabled(!writePermission);
//	},

	setValues : function(values) {
		if (values) {
			for (var key in values) {
				var field = this.formPanel.form.findField(key);
				if (field) {
					field.setValue(values[key]);
				}
			}
		}
	},
	setEventId : function(event_id) {		
		this.formPanel.form.baseParams['id'] = event_id;
		
		delete this.formPanel.form.baseParams['exception_for_event_id'];
		delete this.formPanel.form.baseParams['exception_date'];
		
		this.event_id = event_id;

		this.participantsPanel.setEventId(event_id);

		this.selectLinkField.container.up('div.x-form-item').setDisplayed(event_id == 0);

		this.linkBrowseButton.setDisabled(event_id < 1);
		if(this.fileBrowseButton)
			this.fileBrowseButton.setId(event_id);
	},

	setCurrentDate : function() {
		var formValues = {};

		var date = new Date();

		formValues['start_date'] = date.format(GO.settings['date_format']);
		formValues['start_time'] = date.format(GO.settings.time_format);
		
		formValues['end_date'] = date.format(GO.settings['date_format']);
		formValues['end_time'] = date.add(Date.HOUR, 1).format(GO.settings.time_format);
		
		this.formPanel.form.setValues(formValues);
	},

//	has_other_participants:0,
	submitForm : function(hide, config) {

		if(!config)
		{
			config = {};
		}

		this.hide = hide;

		var params = {
			'task' : 'save_event',
			'submitresources':true,
			'check_conflicts' : typeof(config.check_conflicts)!='undefined' ? config.check_conflicts : null
		};

//		if(this.participantsPanel.store.loaded)
//		{
		var gridData = this.participantsPanel.getGridData();
		params.participants=Ext.encode(gridData);
			
		this.formPanel.form.submit({
			url : GO.url('calendar/event/submit'),
			params : params,
			waitMsg : GO.lang.waitMsgSave,
			success : function(form, action) {

				if (action.result.id) {
					this.files_folder_id = action.result.files_folder_id;
					this.setEventId(action.result.id);
				}

				var startDate = this.getStartDate();

				var endDate = this.getEndDate();

				var newEvent = {
					id : Ext.id(),
					calendar_id : this.selectCalendar.getValue(),
					calendar_name : Ext.util.Format.htmlEncode(this.selectCalendar.getRawValue()),
					event_id : this.event_id,
					name : Ext.util.Format.htmlEncode(this.subjectField.getValue()),
					start_time : startDate.format('Y-m-d H:i'),
					end_time : endDate.format('Y-m-d H:i'),
					startDate : startDate,
					endDate : endDate,
					description : Ext.util.Format.htmlEncode(GO.util.nl2br(this.formPanel.form
						.findField('description').getValue()).replace(/\n/g,'')),
					background : this.formPanel.form.findField('background')
					.getValue(),
					location : Ext.util.Format.htmlEncode(this.formPanel.form.findField('location')
					.getValue()),
					repeats : this.formPanel.form.findField('freq')
					.getValue() !="",
					'private_enabled' : this.formPanel.form.findField('private').getValue(),
					'has_reminder':!GO.util.empty(this.reminderValue.getValue()),
					
					model_name:"GO\\Calendar\\Model\\Event",
					all_day_event:this.formPanel.form.findField('all_day_event').getValue() ? true : false,
					exception_event_id : this.formPanel.form.baseParams['exception_event_id']
//					has_other_participants: this.participantsPanel.invitationRequired()
				};
				
				if(action.result.background){
					newEvent.background=action.result.background;
				}

				if(action.result.permission_level){
					newEvent.permission_level=action.result.permission_level;
				}

				if(!GO.util.empty(action.result.status_color))
					newEvent.status_color = action.result.status_color;
				
				if(!GO.util.empty(action.result.status))
					newEvent.status = action.result.status;
				
				if(!GO.util.empty(action.result.is_organizer))
					newEvent.is_organizer = action.result.is_organizer;
					
				this.fireEvent('save', newEvent, this.oldDomId, action);
				
				GO.dialog.TabbedFormDialog.prototype.refreshActiveDisplayPanels.call(this);

				if (this.link_config && this.link_config.callback) {
					this.link_config.callback.call(this);
				}

				if(action.result.feedback){
					Ext.MessageBox.alert(GO.lang.strError, action.result.feedback);
				}else	if (hide) {
					this.win.hide();
				}

				if (config && config.callback) {
					config.callback.call(this, this, true);
				}
				
				
				this.participantsPanel.store.loadData({results:action.result.participants});
				
				
				GO.calendar.handleMeetingRequest(action.result);

			},
			failure : function(form, action) {
				if (action.failureType == 'client') {
					var error = GO.lang.strErrorsInForm;
				} else {
					var error = action.result.feedback;
				}

				if (error=='Ask permission') {
					Ext.Msg.show({
						title: GO.calendar.lang.ignoreConflictsTitle,
						msg: GO.calendar.lang.ignoreConflictsMsg,
						buttons: Ext.Msg.YESNO,
						fn: this.handlePrompt,
						animEl: 'elId',
						icon: Ext.MessageBox.QUESTION
					});
				} else if (error=='Resource conflict') {
					error = GO.calendar.lang.resourceConflictMsg;
					if (config && config.callback) {
						config.callback.call(this, this, false);
					}
					error = error+'<ul>';
					for (var i in action.result.resources) {
						if (!isNaN(i))
							error = error+'<li> - '+action.result.resources[i]+'</li>';
					}
					error = error+'</ul>';
					Ext.MessageBox.alert(GO.calendar.lang.resourceConflictTitle, error);
				} else {
					if (config && config.callback) {
						config.callback.call(this, this, false);
					}
					Ext.MessageBox.alert(GO.lang.strError, error);
				}
			},
			scope : this
		});
	},

	handlePrompt : function(btn) {
		if (btn=='yes') {
			GO.calendar.eventDialog.submitForm(GO.calendar.eventDialog.hide,{
				'check_conflicts':'0'
			});
		}
	},

	getStartDate : function() {

		var startDate = this.startDate.getValue();
//		if (!this.formPanel.form.findField('all_day_event').getValue()) {
			startDate = Date.parseDate(startDate.format('Y-m-d')+' '+this.formPanel.form.findField('start_time').getValue(),'Y-m-d '+GO.settings.time_format);
//		}

		return startDate;
	},

	getEndDate : function() {
		var endDate = this.endDate.getValue();
//		if (!this.formPanel.form.findField('all_day_event').getValue()) {
			endDate = Date.parseDate(endDate.format('Y-m-d')+' '+this.formPanel.form.findField('end_time').getValue(),'Y-m-d '+GO.settings.time_format);
//		}
		return endDate;
	},

	checkDateInput : function() {

		var eD = this.endDate.getValue();
		var sD = this.startDate.getValue();

		if (sD > eD) {
			this.endDate.setValue(sD);
		}

		if (sD.getElapsed(eD) == 0) {
			
			var sdWithTime = sD.format('Y-m-d')+' '+this.startTime.getValue();
			var sT = Date.parseDate(sdWithTime, 'Y-m-d '+GO.settings.time_format);

			var edWithTime = eD.format('Y-m-d')+' '+this.endTime.getValue();
			var eT = Date.parseDate(edWithTime, 'Y-m-d '+GO.settings.time_format);

			if(sT>=eT){
				
				var ed = sT.add(Date.HOUR, 1);
				
				this.endTime.setValue(ed.format(GO.settings.time_format));
				this.endDate.setValue(ed);
			}
		}
		
		if (this.repeatType.getValue() != "") {
			if (GO.util.empty(this.repeatEndDate.getValue())) {
				this.repeatForeverXCheckbox.setValue(true);
			} else {

				if (this.repeatEndDate.getValue() < eD) {
					this.repeatEndDate.setValue(eD.add(Date.DAY, 1));
				}
			}
		}

		this.participantsPanel.reloadAvailability();
	},

	buildForm : function() {

		this.selectLinkField = new GO.form.SelectLink({});

		this.subjectField = new Ext.form.TextField({
			//name : 'subject',
			name : 'name',
			allowBlank : false,
			fieldLabel : GO.lang.strSubject
		});

		this.locationField = new Ext.form.TextField({
			name : 'location',
			allowBlank : true,
			fieldLabel : GO.lang.strLocation
		});
		this.startDate = new Ext.form.DateField({
			name : 'start_date',
			width : 100,
			format : GO.settings['date_format'],
			allowBlank : false,			
			listeners : {
				change : {
					fn : this.checkDateInput,
					scope : this
				}
			}
		});

		this.startTime = new Ext.form.TimeField({
			increment: 15,
			format:GO.settings.time_format,
			name:'start_time',
			width:80,
			hideLabel:true,
			autoSelect :true,			
			listeners : {
				change : {
					fn : this.checkDateInput,
					scope : this
				}
			}
		});

		this.endTime = new Ext.form.TimeField({
			increment: 15,
			format:GO.settings.time_format,
			name:'end_time',
			width:80,
			hideLabel:true,
			autoSelect :true,			
			listeners : {
				change : {
					fn : this.checkDateInput,
					scope : this
				}
			}
		});	

		this.endDate = new Ext.form.DateField({
			name : 'end_date',
			width : 100,
			format : GO.settings['date_format'],
			allowBlank : false,			
			listeners : {
				change : {
					fn : this.checkDateInput,
					scope : this
				}
			}
		});

		this.allDayCB = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.allDay,
			name : 'all_day_event',
			checked : false,
			width : 'auto',
			labelSeparator : '',
			hideLabel : true
		});

		this.allDayCB.on('check', function(checkbox, checked) {
			this.startTime.setDisabled(checked);
			this.endTime.setDisabled(checked);
			
		}, this);

		this.eventStatus = new Ext.form.ComboBox({
			hiddenName : 'status',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			width : 148,
			forceSelection : true,			
			mode : 'local',
			value : 'CONFIRMED',
			valueField : 'value',
			displayField : 'text',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [
				['NEEDS-ACTION', GO.calendar.lang.statuses["NEEDS-ACTION"]],
				//['ACCEPTED', GO.calendar.lang.accepted],
				['CONFIRMED', GO.calendar.lang.statuses["CONFIRMED"]],
				//['DECLINED', GO.calendar.lang.declined],
				['TENTATIVE',	GO.calendar.lang.statuses["TENTATIVE"]],
				['CANCELLED',	GO.calendar.lang.statuses["CANCELLED"]]
//				['DELEGATED',	GO.calendar.lang.delegated]
			]
			}),
			listeners: {
				scope:this,
				change:function(cb, newValue){
					if(this.formPanel.form.baseParams['group_id']>1){
						if(newValue=='CONFIRMED'){
							this.colorField.setValue('CCFFCC');
						}else
						{
							this.colorField.setValue('FF6666');
						}
					}
				}
			}
		});

		this.busy = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.busy,
			name : 'busy',
			checked : true,
			width : 'auto',
			labelSeparator : '',
			hideLabel : true
		});

		this.selectCategory = new GO.form.ComboBoxReset({
			pageSize: parseInt(GO.settings.max_rows_list),
			hiddenName:'category_id',
			fieldLabel:GO.calendar.lang.category,
			value:'',
			valueField:'id',
			displayField:'name',
			store: GO.calendar.globalCategoriesStore,
			mode:'remote',
			triggerAction:'all',
			emptyText:GO.calendar.lang.selectCategory,
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			allowBlank: !GO.calendar.categoryRequired,
			setCalendarId : function(calendar_id){
				this.clearLastSearch();
				this.store.baseParams.calendar_id=calendar_id;
			},
			tpl:'<tpl for="."><div class="x-combo-list-item"><div style="float:left;width:20px;margin-right:5px;background-color:#{color}">&nbsp;</div>{name}</div></tpl>'
		});

		this.selectCategory.on('select', function(combo, record)
		{			
			this.colorField.setValue(record.data.color);
		}, this);
		
		
		this.privateCB = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.privateEvent,
			name : 'private',
			checked : false,
			width : 'auto',
			labelSeparator : '',
			hideLabel : true
		});
		

		this.propertiesPanel = new Ext.Panel({
			hideMode : 'offsets',
			title : GO.lang.strProperties,
			defaults : {
				anchor : '-20'
			},
			// cls:'go-form-panel',waitMsgTarget:true,
			bodyStyle : 'padding:5px',
			layout : 'form',
			autoScroll : true,
			items : [
			this.subjectField,
			this.locationField,
			this.selectLinkField,
			{	
				xtype : 'compositefield',
				fieldLabel:GO.lang.strStart,
				items : [this.startDate,this.startTime,this.allDayCB
				]
			},{
				fieldLabel:GO.lang.strEnd,
				xtype : 'compositefield',				
				items : [this.endDate, this.endTime
				]
			},{
				xtype : 'compositefield',
				fieldLabel : GO.calendar.lang.status,
				items : [
				this.eventStatus,
				this.busy,
				this.privateCB
				]
			},
			this.selectCalendar = new GO.calendar.SelectCalendar({
				anchor : '-20',
				valueField : 'id',
				displayField : 'name',
				typeAhead : true,
				triggerAction : 'all',
				editable : false,
				selectOnFocus : true,
				forceSelection : true,
				allowBlank : false,
				listeners:{
					scope:this,
					select:function(sc, record){

						var newValue = record.data.id;
						
						var record = sc.store.getById(newValue);
						if(GO.customfields && record)
							GO.customfields.disableTabs(this.tabPanel, record.data);
						this.selectCategory.setCalendarId(newValue);
						this.selectCategory.reset();
						// Set the permissionlevel so we know if we have the right permissions
						if(record)
							this.setPermissionLevel(record.data.permissionLevel);
						
						this.participantsPanel.reloadOrganizer();
					}
				}
			}),
			this.selectCategory,
//			new GO.form.PlainField({
//				fieldLabel: GO.lang.strOwner,
//				value: GO.settings.name,
//				name:'user_name'
//			}),
			{
				xtype:'textarea',
				fieldLabel:GO.lang.strDescription,
				name : 'description',
				anchor:'-20 -240'
			}]

		});
		// Start of recurrence tab

		this.repeatEvery = new GO.form.NumberField({
			decimals:0,
			name : 'interval',
			minValue:1,
			width : 50,
			value : '1'
		});

		this.repeatType = new Ext.form.ComboBox({
			hiddenName : 'freq',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			width : 200,
			forceSelection : true,
			mode : 'local',
			value : '',
			valueField : 'value',
			displayField : 'text',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [['', GO.lang.noRecurrence],
				['DAILY', GO.lang.strDays],
				['WEEKLY', GO.lang.strWeeks],
				['MONTHLY_DATE', GO.lang.monthsByDate],
				['MONTHLY', GO.lang.monthsByDay],
				['YEARLY', GO.lang.strYears]]
			}),
			hideLabel : true

		});

		this.repeatType.on('select', function(combo, record) {
			this.checkDateInput();
			this.changeRepeat(record.data.value);
		}, this);

		this.monthTime = new Ext.form.ComboBox({
			hiddenName : 'bysetpos',
			triggerAction : 'all',
			selectOnFocus : true,
			disabled : true,
			width : 80,
			forceSelection : true,			
			mode : 'local',
			value : '1',
			valueField : 'value',
			displayField : 'text',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [['1', GO.lang.strFirst],
				['2', GO.lang.strSecond],
				['3', GO.lang.strThird],
				['4', GO.lang.strFourth],
				['-1', GO.calendar.lang.last]
			]
			})
		});

		var days = ['SU','MO','TU','WE','TH','FR','SA'];

		this.cb = [];
		for (var day = 0; day < 7; day++) {
			this.cb[day] = new Ext.form.Checkbox({
				boxLabel : GO.lang.shortDays[day],
				name : days[day],
				disabled : true,
				checked : false,
				width : 'auto',
				hideLabel : true,
				labelSeperator : ''
			});
		}

		this.repeatEndDate = new Ext.form.DateField({
			name : 'until',
			width : 100,
			disabled : true,
			format : GO.settings['date_format'],
			allowBlank : true,			
			listeners : {
				change : {
					fn : this.checkDateInput,
					scope : this
				}
			}
		});

		
		
		
		this.repeatForeverXCheckbox = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.repeatForever,
			name : 'repeat_forever',
			checked: true,
			width : 'auto',
			hideLabel : true,
			listeners : {
				check : {
				fn : function(cb, checked){
					
						if(!checked && !this.repeatUntilDateXCheckbox.getValue() && !this.repeatCountXCheckbox.getValue()) {
							this.repeatForeverXCheckbox.setValue(true);
						} else {
							this.repeatUntilDateXCheckbox.setValue(false);
							this.repeatCountXCheckbox.setValue(false);
						}
					},
					scope : this
				}
			}
		});
		
		this.repeatUntilDateXCheckbox = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.repeatUntilDate,
			name : 'repeat_UntilDate',
//			checked : true,
//			disabled : true,
			width : 'auto',
			hideLabel : true,
			listeners : {
				check : {
					fn : function(cb, checked){
					if(!checked && !this.repeatForeverXCheckbox.getValue() && !this.repeatCountXCheckbox.getValue()) {
							this.repeatUntilDateXCheckbox.setValue(true);
							return;
						} else {
							this.repeatForeverXCheckbox.setValue(false);
							this.repeatCountXCheckbox.setValue(false);

							this.repeatEndDate.setDisabled(!checked);
						}
					},
					scope : this
				}
			}
		});
		
		this.repeatNumber = new Ext.form.NumberField({
			name: 'count',
			disabled : true,
			maxLength: 1000,
			allowBlank:false,
			value: 1,
			minValue: 1,
			decimals:0
		});
		
		
		this.repeatCountXCheckbox = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.repeatCount,
			name : 'repeat_count',
			width : 'auto',
			hideLabel : true,
			listeners : {
				check : {
					fn : function(cb, checked) {
						if(!checked && !this.repeatForeverXCheckbox.getValue() && !this.repeatUntilDateXCheckbox.getValue()) {
							this.repeatCountXCheckbox.setValue(true);
							return;
						} else {
							this.repeatForeverXCheckbox.setValue(false);
							this.repeatUntilDateXCheckbox.setValue(false);

							this.repeatNumber.setDisabled(!checked);
						}
					},
					scope : this
				}
			}
		});
		
		this.recurrencePanel = new Ext.Panel({
			title : GO.calendar.lang.recurrence,
			bodyStyle : 'padding: 5px',
			layout : 'form',
			hideMode : 'offsets',
			defaults:{
				forceLayout:true,
				border:false
			},
			items : [{
				fieldLabel : GO.calendar.lang.repeatEvery,
				xtype : 'compositefield',
				items : [this.repeatEvery,this.repeatType]
			}, {
				xtype : 'compositefield',
				fieldLabel : GO.calendar.lang.atDays,
				items : [this.monthTime,this.cb[1],this.cb[2],this.cb[3],this.cb[4],this.cb[5],this.cb[6],this.cb[0]]
			},{
//				fieldLabel : GO.calendar.lang.rangeRecurrence,
//				xtype : 'compositefield',
//				items : [
//					{
						fieldLabel : GO.calendar.lang.repeatForever,
						xtype : 'compositefield',
						items : [this.repeatForeverXCheckbox]
					}, {
						fieldLabel : GO.calendar.lang.repeatCount,
						xtype : 'compositefield',
						items : [this.repeatCountXCheckbox, this.repeatNumber]
					}, {
						fieldLabel : GO.calendar.lang.repeatUntilDate,
						xtype : 'compositefield',
						items : [this.repeatUntilDateXCheckbox, this.repeatEndDate]
					}
//				]
//			}
			
			]
		});

		var reminderValues = [['0', GO.calendar.lang.noReminder]];

		for (var i = 1; i < 60; i++) {
			reminderValues.push([i, i]);
		}
		
		this.reminderValue = new GO.form.NumberField({
			decimals:0,
			name : 'reminder_value',
//			minValue:1,
			width : 50,
			value : GO.calendar.defaultReminderValue
		});

		this.reminderMultiplier = new Ext.form.ComboBox({
			hiddenName : 'reminder_multiplier',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			width : 148,
			forceSelection : true,
			mode : 'local',
			value : GO.calendar.defaultReminderMultiplier,
			valueField : 'value',
			displayField : 'text',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [['60', GO.lang.strMinutes],
				['3600', GO.lang.strHours],
				['86400', GO.lang.strDays],
				['604800', GO.lang.strWeeks]

				]
			}),
			hideLabel : true,
			labelSeperator : ''
		});
		
		this.reminderComposite = new Ext.form.CompositeField({
			style:'margin-top:10px;',
			fieldLabel : GO.calendar.lang.reminder,
			items : [this.reminderValue,this.reminderMultiplier]
		});
		
		this.enableReminderCheckbox = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.useReminder,
			name : 'enable_reminder',
			width : 'auto',
			hideLabel : true,
			listeners : {
				check : {
					fn : function(cb, checked) {
						this.reminderComposite.setDisabled(!checked);
					},
					scope : this
				}
			}
		});

		this.participantsPanel = new GO.calendar.ParticipantsPanel(this);

		this.optionsPanel = new Ext.Panel({
			layout:"form",
			title : GO.calendar.lang.options,
			bodyStyle : 'padding:5px 0',
			hideMode : 'offsets',
			border:false,
			items:[{
				xtype : 'fieldset',
				autoHeight : true,
				layout : 'form',
				title : GO.calendar.lang.reminder,
				items : [
					this.enableReminderCheckbox,
					this.reminderComposite
			]},this.colorField = new GO.form.ColorField({
				fieldLabel : GO.lang.color,
				value : "EBF1E2",
				name : 'background',
				colors : [
				'EBF1E2',
				'95C5D3',
				'FFFF99',
				'A68340',
				'82BA80',
				'F0AE67',
				'66FF99',
				'CC0099',
				'CC99FF',
				'996600',
				'999900',
				'FF0000',
				'FF6600',
				'FFFF00',
				'FF9966',
				'FF9900',
				'FF6666',
				'CCFFCC',
				/* Line 1 */
				'FB0467',
				'D52A6F',
				'CC3370',
				'C43B72',
				'BB4474',
				'B34D75',
				'AA5577',
				'A25E79',
				/* Line 2 */
				'FF00CC',
				'D52AB3',
				'CC33AD',
				'C43BA8',
				'BB44A3',
				'B34D9E',
				'AA5599',
				'A25E94',
				/* Line 3 */
				'CC00FF',
				'B32AD5',
				'AD33CC',
				'A83BC4',
				'A344BB',
				'9E4DB3',
				'9955AA',
				'945EA2',
				/* Line 4 */
				'6704FB',
				'6E26D9',
				'7033CC',
				'723BC4',
				'7444BB',
				'754DB3',
				'7755AA',
				'795EA2',
				/* Line 5 */
				'0404FB',
				'2626D9',
				'3333CC',
				'3B3BC4',
				'4444BB',
				'4D4DB3',
				'5555AA',
				'5E5EA2',
				/* Line 6 */
				'0066FF',
				'2A6ED5',
				'3370CC',
				'3B72C4',
				'4474BB',
				'4D75B3',
				'5577AA',
				'5E79A2',
				/* Line 7 */
				'00CCFF',
				'2AB2D5',
				'33ADCC',
				'3BA8C4',
				'44A3BB',
				'4D9EB3',
				'5599AA',
				'5E94A2',
				/* Line 8 */
				'00FFCC',
				'2AD5B2',
				'33CCAD',
				'3BC4A8',
				'44BBA3',
				'4DB39E',
				'55AA99',
				'5EA294',
				/* Line 9 */
				'00FF66',
				'2AD56F',
				'33CC70',
				'3BC472',
				'44BB74',
				'4DB375',
				'55AA77',
				'5EA279',
				/* Line 10 */
				'00FF00', '2AD52A',
				'33CC33',
				'3BC43B',
				'44BB44',
				'4DB34D',
				'55AA55',
				'5EA25E',
				/* Line 11 */
				'66FF00', '6ED52A', '70CC33',
				'72C43B',
				'74BB44',
				'75B34D',
				'77AA55',
				'79A25E',
				/* Line 12 */
				'CCFF00', 'B2D52A', 'ADCC33', 'A8C43B',
				'A3BB44',
				'9EB34D',
				'99AA55',
				'94A25E',
				/* Line 13 */
				'FFCC00', 'D5B32A', 'CCAD33', 'C4A83B',
				'BBA344', 'B39E4D',
				'AA9955',
				'A2945E',
				/* Line 14 */
				'FF6600', 'D56F2A', 'CC7033', 'C4723B',
				'BB7444', 'B3754D', 'AA7755',
				'A2795E',
				/* Line 15 */
				'FB0404', 'D52A2A', 'CC3333', 'C43B3B',
				'BB4444', 'B34D4D', 'AA5555', 'A25E5E',
				/* Line 16 */
				'FFFFFF', '949494', '808080', '6B6B6B',
				'545454', '404040', '292929', '000000']
			})]
		});

		this.resourcesPanel = new Ext.Panel({
			id:'resources-panel',
			title:GO.calendar.lang.resources,
			border:true,
			//layout:'accordion',
			forceLayout:true,
			autoScroll:true,
//			layoutConfig:{
//				titleCollapse:true,
//				animate:false,
//				activeOnTop:false
//			},
			defaults:{
				forceLayout:true,
				border:false
			}
		});
		this.resourcesPanel.on('show', function(){
			this.tabPanel.doLayout();
		},this);

        
	},
	

	buildAccordion : function()
	{
		this.resourcesPanel.removeAll(true);
		this.resourcesPanel.forceLayout=true;
		
		var newFormField;
		for(var i=0; i<this.resourceGroupsStore.getCount(); i++)
		{
			var record = this.resourceGroupsStore.data.items[i].data;
			var resourceFieldSets = [];
			var resources = record.resources;

			for(var j=0; j<resources.length; j++)
			{
				var resourceOptions = [];

				var pfieldStatus = new GO.form.PlainField({
					id:'status_'+resources[j].id,
					name:'status_'+resources[j].id,
					fieldLabel: GO.calendar.lang.status
				});
				resourceOptions.push(pfieldStatus);
				this.formPanel.form.add(pfieldStatus);

					if(GO.customfields)
					{
						var enabled_categories = record.customfields.enabled_categories;
						var disable_categories = record.customfields.disable_categories;
					
						if (GO.customfields.types["GO\\Calendar\\Model\\Calendar"]) {
							for(var l=0; l<GO.customfields.types["GO\\Calendar\\Model\\Calendar"].panels.length; l++)
							{
									var cf = GO.customfields.types["GO\\Calendar\\Model\\Calendar"].panels[l].customfields;
									var formFields = [new GO.form.PlainField({
											hideLabel: true,
											value: '<b>'+GO.customfields.types["GO\\Calendar\\Model\\Calendar"].panels[l].title+'</b>'
										})];
									for(var m=0; m<cf.length; m++)
									{
										if (typeof(resources[j][cf[m].dataname])!='undefined') {
											if (cf[m].datatype=='checkbox' && resources[j][cf[m].dataname]==GO.lang.cmdNo) {
												continue;
											}
											if (cf[m].datatype=='html' && resources[j][cf[m].dataname]=='<br>') {
												continue;
											}
											newFormField = new GO.form.PlainField({
												fieldLabel: cf[m].name,
												value: resources[j][cf[m].dataname]
											});
											formFields.push(newFormField);
										}
									}
									if (formFields.length>1) {
										for (var n=0; n<formFields.length; n++) {
											resourceOptions.push(formFields[n]);
										}
									}
							}
						}
						if (GO.customfields.types["GO\\Calendar\\Model\\Event"]) {
							resourceOptions.push({
								xtype: 'plainfield',
								value: '<br />'
							});
							var panels = GO.customfields.types["GO\\Calendar\\Model\\Event"].panels;
							for(var l=0; l<panels.length; l++)
							{
								var category_id = GO.customfields.types["GO\\Calendar\\Model\\Event"].panels[l].category_id;
								
									
									
								if(!disable_categories || enabled_categories.indexOf(category_id)>-1){									
		
									var cf = panels[l].customfields;
									for(var m=0; m<cf.length; m++)
									{
										
										newFormField = GO.customfields.getFormField(cf[m],{
											name:'resource_options['+resources[j].id+']['+cf[m].dataname+']',
											id:'resource_options['+resources[j].id+']['+cf[m].dataname+']'
										});


										/*
										 * Customfields might return a simple object instead of an Ext.component.
										 * So check if it has events otherwise create the Ext component.
										 */
										if(!newFormField.events){
											newFormField=Ext.ComponentMgr.create(newFormField, 'textfield');
										}

										resourceOptions.push(newFormField);
										this.formPanel.form.add(newFormField);
									}
								}
							}
						}
					}
					else
					{
						resourceOptions.push(new GO.form.PlainField({
							name:'no_fields_'+resources[j].id,
							hideLabel:true,
							value: GO.calendar.lang.no_custom_fields
						}));
					}
				

				resourceFieldSets.push({
					xtype:'fieldset',
					checkboxToggle:true,
					checkboxName:'resources['+resources[j].id+']',
					title:resources[j].name,
					id:'resource_'+resources[j].id,
					autoHeight:true,
					collapsed:true,
					forceLayout:true,
					items:resourceOptions
				});
			}
			
			var resourcePanel = new Ext.Panel({
				cls:'go-form-panel',
				id:'group_'+record.id,
				layout:'form',
				autoScroll:true,
				forceLayout:true,
				title:record.name,
				items:resourceFieldSets
			});
            
			this.resourcesPanel.add(resourcePanel);			
		}		
		this.tabPanel.doLayout();
	},

	changeRepeat : function(value) {

		var repeatForever = this.repeatForeverXCheckbox.getValue();
		
		
		
		var form = this.formPanel.form;
		switch (value) {
			default :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForeverXCheckbox.setDisabled(true);
				this.repeatEndDate.setDisabled(true);
				this.repeatEvery.setDisabled(true);
				break;

			case 'DAILY' :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForeverXCheckbox.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);

				break;

			case 'WEEKLY' :
				this.disableDays(false);
				this.monthTime.setDisabled(true);
				this.repeatForeverXCheckbox.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);

				break;

			case 'MONTHLY_DATE' :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForeverXCheckbox.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);

				break;

			case 'MONTHLY' :
				this.disableDays(false);
				this.monthTime.setDisabled(false);
				this.repeatForeverXCheckbox.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);
				break;

			case 'YEARLY' :
				this.disableDays(true);
				this.monthTime.setDisabled(true);
				this.repeatForeverXCheckbox.setDisabled(false);
				this.repeatEndDate.setDisabled(repeatForever);
				this.repeatEvery.setDisabled(false);
				break;
		}
	},
	disableDays : function(disabled) {
		var days = ['SU','MO','TU','WE','TH','FR','SA'];
		for (var day = 0; day < 7; day++) {
			this.formPanel.form.findField(days[day])
			.setDisabled(disabled);
		}
	},
	
	getResourceIds : function() {
		var components = this.formPanel.findBy(function(component,container){
			if (!GO.util.empty(component.checkboxName) && component.checkboxName.substring(0,10)=='resources[' && !component.collapsed) {
				return true;
			}
			return false;
		}, this);
		
		var idsArr = new Array();
		
		for (var i=0; i<components.length; i++) {
			var stringArr = components[i].id.substring(9).split(']');
			idsArr.push(stringArr[0]);
		}
		
		return idsArr;
	},
						
	checkAvailability : function() {
		if (!this.availabilityWindow) {
			this.availabilityWindow = new GO.calendar.AvailabilityCheckWindow();
			this.availabilityWindow.on('select', function(dataview, index, node) {
				this.startDate.setValue(Date.parseDate(
					dataview.store.baseParams.date,
					GO.settings.date_format));
				this.endDate.setValue(Date.parseDate(
					dataview.store.baseParams.date,
					GO.settings.date_format));
					
				var oldStartTime = Date.parseDate(this.startTime.getValue(), GO.settings.time_format);
				var oldEndTime = Date.parseDate(this.endTime.getValue(), GO.settings.time_format);
				var elapsed = oldEndTime.getElapsed(oldStartTime);

				var time = Date.parseDate(node.id.substr(4), 'G:i');
				this.startTime.setValue(time.format(GO.settings.time_format));
				this.endTime.setValue(time.add(Date.MILLI, elapsed).format(GO.settings.time_format));
				
				this.tabPanel.setActiveTab(0);
				this.reloadAvailability();
				this.availabilityWindow.hide();
			}, this);
		}
		
		this.availabilityWindow.show({
			participantData:Ext.encode(this.participantsPanel.getParticipantData()),
			date : this.startDate.getRawValue(),
			event_id : this.event_id,
			resourceIds : Ext.encode(this.getResourceIds())
		});
	}
	
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: CalendarGrid.js 20382 2016-08-29 10:17:29Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */


GO.calendar.CalendarEvent = Ext.data.Record.create([
{
	name: 'id'
},
{
	name: 'event_id'
},
{
	name: 'start_time'
},
{
	name: 'end_time'
},
{
	name: 'name'
},
{
	name: 'description'
},
{
	name: 'repeats'
},
{
	name: 'private'
},
{
	name: 'location'
},
{
	name: 'background'
},
{
	name: 'status_color'
},
{
	name: 'read_only'
},
{
	name: 'contact_id'
},
{
	name: 'task_id'
},
{
	name: 'calendar_name'
},
{
	name: 'calendar_id'
},
{
	name: 'resources'
}
]);




GO.grid.CalendarGrid = Ext.extend(Ext.Panel, {
	/**
     * @cfg {String} The components handles dates in this format
     */
	dateFormat : 'Y-m-d',
	/**
     * @cfg {String} The components handles dates in this format
     */
	dateTimeFormat : 'Y-m-d H:i',

	timeFormat : 'H:i',
	/**
     * @cfg {Number} Start day of the week. Monday or sunday
     */
	firstWeekday : 1,
	/**
     * @cfg {Date} The date set by the user
     */
	configuredDate : false,
	/**
     * @cfg {Date} The date where the grid starts. This can be recalculated after a user sets a date
     */
	startDate : false,

	//private var that is used when an event is dragged to another location
	dragEvent : false,

	//all the grid appointments are stored in this array. First index is day and second is the dom ID.
	appointments : {}, //Array(),

	//a map with day and index of the appointments aray. The key is the remote id
	appointmentsMap : {},

	//same for allday appointments.
	allDayAppointments : {}, //Array(),

	allDayAppointmentsMap : [],

	//how many rows to display for all day events
	allDayEventRows : 0,

	allDayColumns : {}, //Array(),

	//The remote database ID's can be stored in this array. Useful for database updates
	remoteEvents : {}, //Array(),

	//An object with the event_id as key and the value is an array with dom id's
	domIds : {}, //Array(),

	//amount of days to display
	days : 1,

	scale : 96,

	hourHeight : 40,

	loaded : false,

	minRows : 2,

	writePermission : false,

	/**
     * The amount of space to reserve for the scrollbar (defaults to 19 pixels)
     * @type Number
     */
	scrollOffset: 19,

	selected : {}, //Array(),

	nextId: 0,

	periodDisplay : '',
	
	// private
	initComponent : function(){

		this.cls='x-calGrid-panel';

		GO.grid.CalendarGrid.superclass.initComponent.call(this);

		this.addEvents({
			/**
		     * @event click
		     * Fires when this button is clicked
		     * @param {Button} this
		     * @param {EventObject} e The click event
		     */
			"create" : true,
			/**
		     * @event toggle
		     * Fires when the "pressed" state of this button changes (only if enableToggle = true)
		     * @param {Button} this
		     * @param {Boolean} pressed
		     */
			"move" : true,
			"eventResize" : true,
			"eventDblClick" : true,
			"deleteEvent" : true
		});

		if(this.store){
			this.setStore(this.store, true);
		}

		if(!this.startDate)
		{
			//lose time
			var date = new Date();
			this.startDate=date.clearTime();		
		}



		this.configuredDate=this.startDate;

		this.rowsPerHour=this.scale/24;
		this.rowHeight = this.hourHeight/this.rowsPerHour;
		
		this.on('show',function(){

			var self = this;

			var timeIndicatorTask = {
				interval: 60000,
				run: function(){
					if (self.isVisible()) {
						self._setTimeIndicator();
//						self.store.load();
					} else {
						Ext.TaskMgr.stop(timeIndicatorTask);
					}
				}
			}

			Ext.TaskMgr.start(timeIndicatorTask);

		},this);
	},


	//build the html grid
	doLayout : function(){

		GO.grid.CalendarGrid.superclass.doLayout.call(this);

		if(this.rendered)
		{
			//important to do here. Don't remember why :S
			this.setDate(this.startDate, this.days, false);


			//if this is not set the grid does not display well when I put a load mask on it.
			this.body.setStyle("overflow", "hidden");

			//Don't select things inside the grid
			this.body.unselectable();

			//this.renderDaysGrid();
			if(this.daysGridRendered)
			{
				this.cacheGridCells();
			}

			this.setStore(this.store);
		}
	},

	renderDaysGrid : function(){
		
		
		this.todaysHeading=false;

		this.daysGridRendered=true;
		this.body.update('');

		//get content size of element
		var ctSize = this.container.getSize(true);

		//column width is the container size minus the time column width
		var columnWidth = ((ctSize['width']-40-this.scrollOffset)/this.days);
		columnWidth = Math.floor(columnWidth);

		//generate table for headings and all day events
		this.headingsTable = Ext.DomHelper.append(this.body,
		{
			tag: 'table',
			id: Ext.id(),
			cls: "x-calGrid-headings-table",
			style: "width:"+(ctSize['width'])+"px;"

		},true);

		var tbody = Ext.DomHelper.append(this.headingsTable,
		{
			tag: 'tbody'
		}, true);
		this.headingsRow = Ext.DomHelper.append(tbody,
		{
			tag: 'tr',
			children:{
				tag:'td',
				style:'width:37px',
				cls: "x-calGrid-heading"
			}
		}, true);


		//create container for the grid
		this.allDayTableContainer = Ext.DomHelper.append(this.body,
		{
			tag: 'div',
			cls: "x-calGrid-all-day-table-container"
		}, true);

		this.allDayTable = Ext.DomHelper.append(this.allDayTableContainer,
		{
			tag: 'table',
			id: Ext.id(),
			cls: "x-calGrid-all-day-table",
			style: "width:"+(ctSize['width']-this.scrollOffset)+"px;"

		},true);

		var tbody = Ext.DomHelper.append(this.allDayTable,
		{
			tag: 'tbody'
		}, true);

		this.allDayRow = Ext.DomHelper.append(tbody,
			{
				tag: 'tr',
				children:{
					tag:'td',
					style:'width:40px',
					cls: "x-calGrid-all-day-first-col"
				}
			}, true);

		// QUICK FIX FOR .(dot) as a date separator.
		var separator = GO.settings.date_separator;
		if(separator === "."){
			separator = '\\.';
		}

		var re = new RegExp(separator+"?Y"+separator+"?");
	//	var re = new RegExp(GO.settings.date_separator+"?Y"+GO.settings.date_separator+"?");
	
		var dateFormat = 'D '+GO.settings.date_format.replace(re, '');

		var now = new Date();
		var nowStr = now.format(dateFormat);
		var dt, dtStr, heading, allDayColumn, headingCls, dayCls;

		this.allDayColumns=[];
		for(var day=0;day<this.days;day++)
		{
			dt = this.startDate.add(Date.DAY, day);

			dtStr = dt.format(dateFormat);

			headingCls = dtStr==nowStr ? 'x-calGrid-heading x-calGrid-heading-today' :  "x-calGrid-heading";

			
			
			//create grid heading
			heading = Ext.DomHelper.append(this.headingsRow,
			{
				tag: 'td',
				children:[{
					tag:'div',
					cls: headingCls,
					style: "width:"+(columnWidth-3)+"px",
					html: dt.format(dateFormat)
					}]
				}, true);
				
			if(dtStr==nowStr){
//			if(day==2){
				this.theWeekDay=day;
				this.todaysHeading = heading;
			}

			allDayColumn = Ext.DomHelper.append(this.allDayRow,
			{
				tag: 'td',
				id: 'all_day_'+day,
				cls: "x-calGrid-all-day-container",
				style: "width:"+(columnWidth-3)+"px;height:0px"
				}, true);

			this.allDayColumns.push(allDayColumn);
		}

		//for the scrollbar
		Ext.DomHelper.append(this.headingsRow,
		{
			tag: 'td',
			style: "width:"+(this.scrollOffset)+"px;height:0px",
			cls: "x-calGrid-heading"
		});
		/*
		Ext.DomHelper.append(this.allDayRow,
				{
					tag: 'td',
					style: "width:"+(this.scrollOffset)+"px;height:0px",
					cls: "x-calGrid-all-day-container"
				});	*/

		//create container for the grid
		this.gridContainer = Ext.DomHelper.append(this.body,
		{
			tag: 'div',
			cls: "x-calGrid-grid-container"
		}, true);



		//calculate gridContainer size
//		var headingsHeight = this.headingsTable.getHeight();

		//var gridContainerHeight = ctSize['height']-headingsHeight;

		//this.gridContainer.setSize(ctSize['width'],gridContainerHeight );

		this.gridWrapper = Ext.DomHelper.append(this.gridContainer,
		{
			tag: 'div',
			cls: "x-calGrid-table-wrapper"
		},true);
		


		this.gridTable = Ext.DomHelper.append(this.gridWrapper,
		{
			tag: 'table',
			id: Ext.id(),
			cls: "x-calGrid-table"

		},true);

		this.tbody = Ext.DomHelper.append(this.gridTable,
		{
			tag: 'tbody'
		}, true);

		this.gridTable.on("mousedown", this.startSelection, this);//, {delay:250});

		//create an overlay to track the mousemovement
		this.gridContainer.on("mousemove", this.onEventDragMouseMove, this);
		this.body.on("mouseup", this.onEventDragMouseUp, this);
		this.allDayTable.on("mousemove", this.onAllDayEventDragMouseMove, this);
		this.body.on("mouseup", this.onAllDayEventDragMouseUp, this);


		var gridRow =  Ext.DomHelper.append(this.tbody,
		{
			tag: 'tr'
		});

		var timeCol = Ext.DomHelper.append(gridRow,
		{
			tag: 'td',
			style: 'width:40px'
		}, true);

		var timeformat;

		var timeColHeight = (((this.rowHeight+1)*this.rowsPerHour)-1);

		for (var i = 0;i<this.scale;i+=this.rowsPerHour)
		{
			timeformat = GO.settings.time_format.substr(0,1)=='H' ? 'G:i' : 'g a';
			Ext.DomHelper.append(timeCol,
			{
				tag: 'div',
				id: 'head'+i,
				cls: "x-calGrid-timeHead",
				html: Date.parseDate(i/this.rowsPerHour, "G").format(timeformat),
				style: 'width:40px;height:'+timeColHeight+'px'
				}, true);
		}

		this.gridCells=[];

		var dayColumn, className, cell;

		var cellHtml = Ext.isIE6 ? '<p style="line-height:0px;"></p>' : '';

		for(var day=0;day<this.days;day++)
		{
			dt = this.startDate.add(Date.DAY, day);

			dtStr = dt.format(dateFormat);
			
			//create array to cache all grid cells later
			this.gridCells[day]=[];

			dayColumn = Ext.DomHelper.append(gridRow,
			{
				tag: 'td',
				id: 'dayCol'+day,
				style:'width:'+columnWidth+'px'
				}, true);


			className = "x-calGrid-hourRow";

			var hourCounter=0;
			for (var i = 0;i<this.scale;i++)
			{
				if(hourCounter==0)
				{
					className= "x-calGrid-hourRow";
				}else if(this.rowsPerHour/hourCounter==2)
				{
					className = "x-calGrid-halfhourRow";
				}else
				{
					className = "x-calGrid-blankRow";
				}
				
				if(dtStr==nowStr){
					className +=" x-calGrid-today";
				}

				cell = Ext.DomHelper.append(dayColumn,
				{
					tag: 'div',
					id: 'day'+day+'_row'+i,
					cls: className,
					style: 'height:'+(this.rowHeight)+'px;',
					html:cellHtml
				}, true);

				this.gridCells[day].push(cell);

				hourCounter++;
				if(hourCounter==this.rowsPerHour)
				{
					hourCounter=0;
				}
			}
		}
		
//		var now = new Date();
		
		this._setTimeIndicator(true);

		//the start of the grid
		//var position = FirstCol.getXY();
		this.gridX = 0;
		this.gridY = 0;

		//save scroll postion because it get's lost when you switch tabs
		this.gridContainer.on('scroll', this.storeScrollPosition,this);

		this.daysRendered=this.days;

		//create the selection proxy
		this.selector = Ext.DomHelper.append(this.body,
		{
			tag: 'div',
			id: Ext.id(),
			cls: "x-calGrid-selector"
		}, true);

		this.cacheGridCells();
		this.gridTableHeight = this.gridTable.getHeight();
	},

	cacheGridCells : function(){
		this.gridTable.xy = this.gridTable.getXY();
		var columnsContainerY = this.gridTable.getY();

		var cellSize = this.gridCells[0][0].getSize();
		var FirstCellPosition=this.gridCells[0][0].getXY();

		var x = FirstCellPosition[0];
		var y = FirstCellPosition[1]-columnsContainerY;

		for(var day=0;day<this.days;day++)
		{
			//var currentX = x+(day*(cellSize['width']-0.5));
			var currentX = x+(day*cellSize['width']);
			for (var i = 0;i<this.scale;i++)
			{
				var currentY = y+(i*cellSize['height']);

				if(this.gridCells[day])
				{
					this.gridCells[day][i].xy=[currentX, currentY];
					this.gridCells[day][i].size=cellSize;
				}else
				{
			//should never come here
			//alert('error');
			}
			}
		}

		var FirstCol = this.gridCells[0][0];
		this.snapCol = {
			'x':FirstCol['size']['width'],
			'y': FirstCol['size']['height']
			};
	},

	autoSizeGrid : function() {
		//calculate gridContainer size

		var ownerHeight = this.ownerCt.body.getHeight();

		var headingsHeight = this.headingsTable.getHeight();
		var allDayHeight = this.allDayTableContainer.getHeight();

		if(allDayHeight>(ownerHeight/2))
		{
			allDayHeight=ownerHeight/2;
			this.allDayTableContainer.setHeight(allDayHeight);
		}

		var gridContainerHeight = ownerHeight-headingsHeight-allDayHeight-2;
		this.gridContainer.setHeight(gridContainerHeight);
	},

	onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){
		//Ext.grid.GridPanel.superclass.onResize.apply(this, arguments);

		if(this.loaded && this.daysRendered==this.days){
			if(adjWidth!=this.headingsTable.getWidth()){

				this.load();
			}else if(adjHeight!=this.getHeight())
			{
				this.autoSizeGrid();
			}
		}

	/*if(this.daysRendered==this.days)
		{
  		if(this.loaded)
  		{
				//todo use store to maipulate grid
  			//this.store.reload();
				this.load();
  		}
		}*/
	},



	getFirstDateOfWeek : function(date)
	{
		//Calculate the first day of the week
		var weekday = date.getDay();

		var offset = this.firstWeekday-weekday;
		if(offset>0)
		{
			offset-=7;
		}
		return date.add(Date.DAY, offset);
	},

	mask : function()
	{
		if(this.rendered)
		{
			this.body.mask(GO.lang.waitMsgLoad,'x-mask-loading');
		}
	},

	unmask : function()
	{
		if(this.rendered)
		{
			this.body.unmask();
		}
	},

	getSnap : function()
	{
		return this.snapCol;
	},

	getGridXY : function()
	{
		var FirstCol = Ext.get("day0_row0");

		return FirstCol.getXY();
	},

	getRowIdByXY : function(x,y)
	{
		var snap = this.getSnap();

		var day = (x-this.gridX)/snap["x"];
		var row = (y-this.gridY)/snap["y"];
		return 'day'+day+'_row'+row;

	},
	getRowNumberByY : function(y)
	{
		var snap = this.getSnap();

		var gridPosition = this.gridTable.getXY();

		return Math.floor((y-gridPosition[1])/snap["y"]);
	},
	getDayByX : function(x)
	{
		var snap = this.getSnap();
		var gridPosition = this.gridTable.getXY();

		return Math.floor((x-gridPosition[0]-40)/snap["x"]);
	},
	startSelection : function (e){
		//check if we are not dragging an event, check for left button		
		if(this.permissionLevel>GO.permissionLevels.read && !this.dragEvent && (e.button == '0'))
		{
			var coords = e.getXY();

			this.clickedDay = this.getDayByX(coords[0]);
			this.clickedRow = this.getRowNumberByY(coords[1]);

			this.dragSnap = this.getSnap();

			if(this.clickedDay>-1){
				//get position of the row the user clicked on
				this.selectorStartRow = this.gridCells[this.clickedDay][this.clickedRow];

				if(this.selectorStartRow)
				{

					var columnsContainerY = this.gridTable.getY();
					var position = [this.selectorStartRow.xy[0],this.selectorStartRow.xy[1]+columnsContainerY];


					//create an overlay to track the mousemovement
					if(!this.overlay){
						this.overlay = this.body.createProxy({
							tag: "div",
							cls: "x-resizable-overlay",
							html: "&#160;"
						});
						this.overlay.unselectable();
						this.overlay.enableDisplayMode("block");
						this.overlay.on("mousemove", this.onSelectionMouseMove, this);
						this.overlay.on("mouseup", this.onSelectionMouseUp, this);
					}

					this.overlay.setSize(Ext.lib.Dom.getViewWidth(true), Ext.lib.Dom.getViewHeight(true));
					this.overlay.show();

					this.selector.setXY(position);
					//substract double border
					this.selector.setSize(this.snapCol['x']-3, this.snapCol['y']);
					this.selector.setVisible(true,false);
				}
			}
		}
	},
	onSelectionMouseMove : function (e){
		//update the selector proxy
		var eventPos = e.getXY();
		var shadowPos = this.selector.getXY();
		//var height = this.selector.getHeight();
		var increment = this.snap(eventPos[1]-shadowPos[1],this.dragSnap["y"], 0);
		this.selector.setHeight(increment);
	},

	onSelectionMouseUp : function (e){
		//hide the overlay
		this.overlay.hide();

		this.fireEvent("create", this, this.domToTimes(this.selector.id));
		this.clearSelection();

	},

	showContextMenu : function(e, event)
	{
		if(!this.contextMenu)
		{
			this.contextMenu = new GO.calendar.ContextMenu();

			this.contextMenu.on('deleteEvent', function()
			{
				this.fireEvent("deleteEvent", this);
			},this);
		
			this.contextMenu.on('updateEvent', function(obj, new_event_id)
			{								
				var event = obj.event;
				var calendar_visible = false;
				var calendars = Ext.decode(this.store.baseParams['calendars']);
				for(var i=0; i<calendars.length && !calendar_visible; i++)
				{
					if(calendars[i] == event.calendar_id)
					{
						calendar_visible = true;
					}
				}

				if(obj.isCopy)
				{
					if(calendar_visible)
					{
//						if(event.repeats)
//						{
							this.store.reload();
//						}else
//						{
//							var newEvent = GO.util.clone(event);
//
//							delete(newEvent.id);
//
//							newEvent.event_id = new_event_id;
//							newEvent.startDate = Date.parseDate(newEvent.start_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
//							newEvent.endDate = Date.parseDate(newEvent.end_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
//							newEvent.start_time=newEvent.startDate.format(this.dateTimeFormat);
//							newEvent.end_time=newEvent.endDate.format(this.dateTimeFormat);
//
//							this.addDaysGridEvent(newEvent, true);
//						}
					}
				}else
				{
					if(obj.repeats)
					{
						this.store.reload();
					}else
					{
						this.removeEvent(event.domId);
						delete event.domId;

						if(calendar_visible)
						{
							event.startDate = Date.parseDate(event.start_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							event.endDate = Date.parseDate(event.end_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							event.start_time=event.startDate.format(this.dateTimeFormat);
							event.end_time=event.endDate.format(this.dateTimeFormat);

							this.addDaysGridEvent(event, true);
						}
					}
				}
			},this);
		}

		e.stopEvent();
		this.contextMenu.setEvent(event);
		this.contextMenu.showAt(e.getXY());
	},

	getDayIndex : function (unixtime)
	{

	},
	
	addDaysGridEvent : function (eventData, recalculateAppointments)
	{
		if(eventData.id  == undefined)
		{
			eventData.id = this.nextId++;
		}
		
		//the start of the day the event starts
		var eventStartDay = Date.parseDate(eventData.startDate.format('Ymd'),'Ymd');
		var eventEndDay = Date.parseDate(eventData.endDate.format('Ymd'),'Ymd');

		//get unix timestamps
		var gridStartTime = this.startDate.format('U');
		var eventStartTime = eventStartDay.format('U');

		//ceil required because of DST changes!
		var day, endDay, originalEndDay;
		day = Math.round((eventStartTime-gridStartTime)/86400);

		/*if(day<0)
			day=0;*/

		var eventEndTime = eventEndDay.format('U');
		endDay = Math.round((eventEndTime-gridStartTime)/86400);

		/*if(endDay>this.days)
			endDay=this.days-1;*/

		//console.log(eventData);

		if(day<this.days && endDay> -1)
		{
			/*if(day < 0)
			{
				day=0;
			}

			if(endDay > this.days-1)
			{
				endDay=this.days-1;
			}*/

			var startRow = eventData.startDate.getHours()*this.rowsPerHour;
			var endRow = eventData.endDate.getHours()*this.rowsPerHour-1;

			var gridPrecision = 60/this.rowsPerHour;
			var startMin = eventData.startDate.getMinutes();
			startRow += Math.floor(startMin/gridPrecision);

			var endMin = eventData.endDate.getMinutes();
			endRow += Math.ceil(endMin/gridPrecision);

			var minEndRow = startRow+this.minRows-1;

			if(endRow<minEndRow && day==endDay)
			{
				endRow=minEndRow;
			}

			var domIds=[];

			for (var i=day;i<=endDay;i++)
			{
				//console.log(i);
				//does it fit in the current display?
				if(i > -1 && i < this.days){
					if(!eventData.all_day_event && (startRow || endRow<(this.rowsPerHour*24-1))  && (startRow && i==day || endRow && i==endDay))
					{
						eventData.noResize = i!=endDay;

						var currentEndRow= i==endDay ? endRow : this.rowsPerHour*24;
						var currentStartRow= i==day ? startRow : 0;
						if(currentEndRow>-1)
							domIds.push(this.addGridEvent(eventData, i, currentStartRow, currentEndRow, recalculateAppointments));
					}else
					{
						domIds.push(this.addAllDayEvent(eventData, i, i));
					}
				}
			}
		}		

		return domIds;
	},

	getSelectedEvent : function()
	{
		if(this.selected && this.selected.length > 0)
		{
			return this.elementToEvent(this.selected[0].id);
		}
	},

	isSelected : function(eventEl)
	{
		for (var i=0;i<this.selected.length;i++)
		{
			if(this.selected[i].id==eventEl)
			{
				return true;
			}
		}
		return false;
	},

	clearEventSelection : function()
	{
		for (var i=0;i<this.selected.length;i++)
		{
			this.selected[i].removeClass('x-calGrid-selected');
		}
		this.selected=[];
	},

	selectEventElement : function(eventEl)
	{
		if(!this.isSelected(eventEl))
		{
			this.clearEventSelection();

			var elements = this.getRelatedDomElements(eventEl.id);

			for (var i=0;i<elements.length;i++)
			{
				var element = Ext.get(elements[i]);
				element.addClass('x-calGrid-selected');
				this.selected.push(element);
			}
		}
	},

	/*removeEventByRemoteId : function(remote_id){
		var domIds = this.getEventDomElements(remote_id);
		if(domIds){
			for(var i=0, max=domIds.length;i<max;i++){
				this.removeEvent(domIds[i]);
			}
		}
	},*/

	removeEvent : function(domId, dontCalc){

		if(this.remoteEvents[domId]){
			var event_id = this.remoteEvents[domId].event_id;
			var index = this.store.findBy(function (record){
				return record.data.event_id==event_id;
			});
			var record = this.store.getAt(index);
			this.store.remove(record);

			var days = [];

			var deleted =false;
			var ids = this.getRelatedDomElements(domId);
			if(ids)
			{
				deleted =true;
				for(var i=0;i<ids.length;i++)
				{
					var el = Ext.get(ids[i]);
					if(el)
					{
						el.removeAllListeners();
						el.remove();
					}

					if(this.appointmentsMap[ids[i]]){
						var day = this.appointmentsMap[ids[i]].day;
						if(days.indexOf(day, days)==-1)
							days.push(day);
					}

					this.unregisterDomId(ids[i]);
				}
			}

			if(!dontCalc)
			{
				for(var i=0,max=days.length;i<max;i++)
					this.calculateAppointments(days[i]);
			}
			
			return deleted;
		}else
		{
			return false;
		}
	},

	unregisterDomId : function(domId)
	{

		if(this.appointmentsMap[domId] && this.appointments[this.appointmentsMap[domId].day])
		{
			var day = this.appointmentsMap[domId].day;
			var newAppointments = [];
			for(var i=0;i<this.appointments[day].length;i++)
			{
				if(this.appointments[day][i].id!=domId)
				{
					newAppointments.push(this.appointments[day][i]);
				}
			}
			this.appointments[day]=newAppointments;

		}else if(this.allDayAppointmentsMap[domId] && this.appointments[this.allDayAppointmentsMap[domId].day])
		{
			var day = this.allDayAppointmentsMap[domId];
			var newAppointments = [];
			for(var i=0;i<this.appointments[day].length;i++)
			{
				if(this.appointments[day][i].id!=domId)
				{
					newAppointments.push(this.appointments[day][i]);
				}
			}
			this.allDayAppointmentsMap[day]=newAppointments;
		}

		delete this.remoteEvents[domId];
		delete this.appointmentsMap[domId];

		var found =false;

		for(var e in this.domIds)
		{
			for(var i=0;i<this.domIds[e].length;i++)
			{
				if(this.domIds[e][i]==domId)
				{
					this.domIds[e].splice(i,1);
					found=true;
					break;
				}
			}
			if(found)
			{
				break;
			}
		}
	},

	addAllDayEvent : function (eventData, startDay, endDay)
	{		
		eventData.allDay=true;
		eventData.daySpan = endDay-startDay+1;

		if (eventData.model_name=='GO_Tasks_Model_Task' && !GO.util.empty(eventData.task_id) && eventData.task_id>0)
			eventData.id = "task:"+eventData.task_id;

		//allday event
		//var daySpan = endDay-startDay+1;
		if(startDay < 0)
		{
			startDay=0;
		}

		if(endDay > this.days-1)
		{
			endDay=this.days-1;
		}

		//var allDayColumn = Ext.get("all_day_"+startDay);
		//var size = allDayColumn.getSize();

		//var snap = this.getSnap();
		var text = '';

		if(GO.calendar.showStatuses && !GO.util.empty(eventData.status_color))
			text += '<span class="x-calGrid-event-status" style="background-color:#'+eventData.status_color+';"></span>';

		if(startDay!=endDay)
		{
			var format = GO.settings.date_format+' '+GO.settings.time_format;
			text += eventData.startDate.format(format)+'&nbsp;'+eventData.name;
		}else
		{
			text+=eventData.name;
		}

		for (var i=startDay;i<=endDay;i++)
		{
			var domId = this.lastDomId = eventData.domId = Ext.id();
			this.registerEvent(domId, eventData);

			var cls = "x-calGrid-all-day-event-container cal-event-partstatus-"+eventData.partstatus;

			if(eventData.link_count>0){
				text +='<span class="cal-has-links"></span>';
			}			
			if (eventData["private_enabled"])
				text += '<span class="cal-is-private"></span>';
			if (eventData.has_reminder==1)
				text += '<span class="cal-has-reminders"></span>';
			
			if (eventData.repeats)
				text += '<span class="cal-recurring"></span>';
			
			var event = Ext.DomHelper.append(this.allDayColumns[i],
			{
				tag: 'div',
				id: domId,
				cls: cls,
				style:"background-color:#"+eventData.background,
				html: text,
				"ext:qtip": GO.calendar.formatQtip(eventData),
				"ext:qtitle": Ext.util.Format.htmlEncode(eventData.name),
				tabindex:0//tabindex is needed for focussing and events
			}, true);
			
			//add the event to the appointments array
			if(typeof(this.allDayAppointments[i])=='undefined')
			{
				this.allDayAppointments[i]=[]; //Array();
			}
			this.allDayAppointments[i].push(event);
			this.allDayAppointmentsMap[domId]=i;

			//add events
			if(!eventData.read_only)
			{
				event.on('mousedown', function(e, eventEl){
					eventEl = Ext.get(eventEl).findParent('div.x-calGrid-all-day-event-container', 2, true);

					this.selectEventElement(eventEl);

					this.clickedEventId=eventEl.id;
					
					if(e.button === 0){ // 0 = left mouse button (2 = right mousebutton)
						this.eventMouseUp=false;
						this.startAllDayEventDrag(e, eventEl.id);
					}

				}, this);
			} else if (eventData.model_name=='GO_Tasks_Model_Task') {
					event.on('mousedown', function(e, eventEl){
					eventEl = Ext.get(eventEl).findParent('div.x-calGrid-all-day-event-container', 2, true);
					this.selectEventElement(eventEl);
					this.clickedEventId=eventEl.id;
				}, this);
			}

			event.on('dblclick', function(e, eventEl){

				eventEl = Ext.get(eventEl).findParent('div.x-calGrid-all-day-event-container', 2, true);

				this.clickedEventId=eventEl.id;

				var actionData = {};

				//do last because orginal times will be lost after this.
//				var event = this.elementToEvent(this.clickedEventId);
//
//				if(this.remoteEvents[this.clickedEventId]['repeats'] && this.writePermission)
//				{
//					this.handleRecurringEvent("eventDblClick", event, actionData);
//				}else
//				{
//					this.fireEvent("eventDblClick", this, event, actionData);
//				}
//				
				var event = this.elementToEvent(this.clickedEventId);

					if(event['repeats'] && this.writePermission)
					{
//						if(!event['read_only'])
							this.handleRecurringEvent("eventDblClick", event, {});
					}else
					{
						this.fireEvent("eventDblClick", this, event, {
							singleInstance : this.writePermission
							});
					}
			}, this);
			
			

			if (eventData.model_name=='GO_Tasks_Model_Task') {
				event.on('contextmenu', function(e, eventEl)
				{
					if (GO.tasks) {
						var task = this.elementToEvent(this.clickedEventId);
						if (!this.taskContextMenu)
							this.taskContextMenu = new GO.calendar.TaskContextMenu();
						
						e.stopEvent();
						this.taskContextMenu.setTask(task);
						this.taskContextMenu.showAt(e.getXY());
					}
				}, this);
			} else// if(!eventData.read_only)
			{
				event.on('contextmenu', function(e, eventEl)
				{
					this.clickedEventId=eventEl.id;
					var event = this.elementToEvent(this.clickedEventId);
					this.showContextMenu(e, event);
				}, this);

				event.on('mouseup', function(){
					this.eventMouseUp=true;
				}, this);
			}
		}
		return domId;
	},


	addGridEvent : function (eventData, day, startRow, endRow, recalculateAppointments)
	{
		var text = '';

		if(GO.calendar.showStatuses && !GO.util.empty(eventData.status_color))
			text += '<span class="x-calGrid-event-status" style="background-color:#'+eventData.status_color+';"></span>';
                
		text += '<span class="x-calGrid-event-time';

	
		
		text += '">'+eventData.startDate.format(GO.settings.time_format)+"</span>&nbsp;"+eventData.name;

		if(!GO.util.empty(eventData.location))
		{
			text += ' @ '+eventData.location;
		}

		if(eventData.link_count>0){
				text +='<span class="cal-has-links"></span>';
			}
		if (eventData["private_enabled"])
			text += '<span class="cal-is-private"></span>';
		if (eventData.has_reminder==1)
			text += '<span class="cal-has-reminders"></span>';
		if (eventData.repeats)
				text += '<span class="cal-recurring"></span>';

		if (!GO.util.empty(eventData.resources))
			text += '<span class="cal-resources"></span>';

		var domId = this.lastDomId = eventData.domId = Ext.id();
		this.registerEvent(domId, eventData);

		var snap = this.getSnap();

		if(endRow>(this.scale-1))
		{
			endRow=this.scale-1;
		}		
		var event = this.gridWrapper.insertFirst(
		{
			tag: 'div',
			id: domId,
			cls: "x-calGrid-event-container cal-event-partstatus-"+eventData.partstatus,
			style:"background-color:#"+eventData.background,
			"ext:qtip": GO.calendar.formatQtip(eventData),
			"ext:qtitle":Ext.util.Format.htmlEncode(eventData.name),
			html:text,
			tabindex:0//tabindex is needed for focussing and events
		});


		event.repeats=eventData.repeats;

		var startRowEl = Ext.get("day"+day+"_row"+startRow);
		var endRowEl = Ext.get("day"+day+"_row"+endRow);

		var startRowPos = startRowEl.getXY();
		var endRowPos = endRowEl.getXY();

		// var height = endRowPos[1]-startRowPos[1]+snap["y"]+3;
		var height = endRowPos[1]-startRowPos[1]+snap["y"];


		event.setXY(startRowPos);
		event.setSize(snap["x"]-2, height);

		if(!eventData.read_only){
			event.on('mousedown', function(e, eventEl){

				eventEl = Ext.get(eventEl).findParent('div.x-calGrid-event-container', 4, true);

				this.selectEventElement(eventEl);

				this.clickedEventId=eventEl.id;
				this.eventMouseUp=false;
				this.startEventDrag(e, eventEl.id);

			}, this);
			event.on('mouseup', function(){
				this.eventMouseUp=true;
			}, this);
		}else
		{
			event.on('mousedown', function(e, eventEl){
				eventEl = Ext.get(eventEl).findParent('div.x-calGrid-event-container', 4, true);
				this.selectEventElement(eventEl);
				this.clickedEventId=eventEl.id;
			}, this);
		}

		event.on('dblclick', function(e, eventEl){
			var actionData = {};

			//do last because orginal times will be lost after this.
			var event = this.elementToEvent(this.clickedEventId);

			if(this.remoteEvents[this.clickedEventId]['repeats'] && this.writePermission)
			{
//				if(!event['read_only'])
					this.handleRecurringEvent("eventDblClick", event, actionData);
			}else
			{
				this.fireEvent("eventDblClick", this, event, actionData);
			}
		}, this);

		event.on('contextmenu', function(e, eventEl)
		{
			var event = this.elementToEvent(this.clickedEventId);
			this.showContextMenu(e, event);
		}, this);

		//add the event to the appointments array
		if(typeof(this.appointments[day])=='undefined')
		{
			this.appointments[day]= []; //Array();
		}

		//add it to the appointments of this day for calculation

		this.appointments[day].push(event);
		this.appointmentsMap[domId]={
			day: day
		};

		if(!eventData.read_only && !eventData['private'] && !eventData.noResize)
		{
			var resizer = new Ext.Resizable(event, {
				handles: 's',
				//minWidth: event.getWidth(),
				minHeight: snap["y"],
				maxWidth: event.getWidth(),
				//maxHeight: this.snapY*48,
				heightIncrement: snap["y"],
				draggable: false,
				pinned: true
			});

			resizer.on('resize', function(eventEl, adjWidth, adjHeight, rawWidth, rawHeight){
				if(adjHeight>0)
				{
					var times = this.domToTimes(eventEl.el.id, false);

					//var newStartTime = times.startDate.format('U');
					var newEndTime = times.endDate.format('U');

					var actionData = {
						end_time : newEndTime,
						dragDate: this.remoteEvents[eventEl.el.id].startDate
						};

					//do last because orginal times will be lost after this.
					var event = this.elementToEvent(eventEl.el.id);

					this.remoteEvents[eventEl.el.id].endDate=times.endDate;

					var elX = eventEl.el.getX();
					this.clickedDay = this.getDayByX(elX);

					if(this.remoteEvents[eventEl.el.id]['repeats'])
					{
						event.day = this.clickedDay;
						this.handleRecurringEvent("eventResize", event, actionData);
					}else
					{
						this.resizeAppointment(eventEl.el.id, this.clickedDay);
						this.fireEvent("eventResize", this, event, actionData,[eventEl.el.id]);
					}

					var timeEl = eventEl.el.select('span.x-calGrid-event-time');
					if(timeEl)
					{
						timeEl.update(event.startDate.format(GO.settings.time_format));
						eventEl.el.set({
							'ext:qtip': GO.calendar.formatQtip(event)
							});
					}
				}
			}, this);
		}

		if(recalculateAppointments)
		{
			this.calculateAppointments(day);
		}

		return domId;
	},

	resizeAppointment : function(event_dom_id, day){
		var i = this.findAppointment(day, event_dom_id);
		this.appointments[day][i].size=this.appointments[day][i].getSize();

//		this.remoteEvents[event_dom_id].repeats=false;
		this.calculateAppointments(day);
	},

	calculateAppointments :  function (day)
	{
		if(typeof(this.appointments[day])!='undefined')
		{
			var snap = this.getSnap();

			//used to calculate Y coordinate of events on the gridcontainer
			var columnsContainerY = this.gridTable.getY();

			//determine the maximum appointments on one row
			var maxPositions=0;

			//store overlaps per event in this array
			//var overlaps = Array();
			var positions = {}; //Array();

			//sort the appointments on their start time (Y pos)
			this.appointments[day].sort(function(a,b){
				return a.getY()-b.getY();
			});

			//the left coordinate of the day column
			var dayColumnLeft=0;

			//create an array of rows with their positions
			this.rows={}; //Array();

			for(var rowId=0;rowId<this.scale;rowId++)
			{
				//cached rows
				var row = this.gridCells[day][rowId];
				var rowY = row.xy[1];

				if(rowId==0)
				{
					//add 1 px for border
					dayColumnLeft=row.xy[0];
				}

				if(typeof(this.rows[rowId]) == 'undefined')
				{
					this.rows[rowId]={}; //Array();
				}

				//check how many appointments are in the row area
				for(var i=0;i<this.appointments[day].length;i++)
				{
					if(!this.appointments[day][i].xy)
					{
						this.appointments[day][i].xy=this.appointments[day][i].getXY();
						this.appointments[day][i].xy[1]-=columnsContainerY;
					}

					if(!this.appointments[day][i].size)
					{
						this.appointments[day][i].size=this.appointments[day][i].getSize();
					}

					var eventPosition = this.appointments[day][i].xy;
					var appointmentsize = this.appointments[day][i].size;

					//new right side is right from existing left side and
					//new left side is left from existing right side

					//and

					//new top is above the existing bottom and
					//new bottom is below the existing top

					if((
						row.xy[0]+row.size['width'])>=eventPosition[0] &&
					row.xy[0]<=eventPosition[0]+appointmentsize['width'] &&
					rowY+row.size['height']<=eventPosition[1]+appointmentsize['height'] &&
					rowY+row.size['height']>eventPosition[1])
					{
						if(typeof(positions[this.appointments[day][i].id])=='undefined')
						{
							//determine the create_exception: true,event's position
							var position=0;

							//find a free position
							while(typeof(this.rows[rowId][position])!='undefined')
							{
								position++;
							}

							//set the space occupied
							var eventRowId=rowId;
							for(var n=rowY;n<eventPosition[1]+appointmentsize['height']-3;n+=snap["y"])
							{
								if(typeof(this.rows[eventRowId]) == 'undefined')
								{
									this.rows[eventRowId]={}; //Array();
								}
								this.rows[eventRowId][position]=this.appointments[day][i].id;
								eventRowId++;
							}

							this.rows[rowId][position]=this.appointments[day][i].id;

							positions[this.appointments[day][i].id]=position;
						}
					}
				}

				//update the max appointments on row per day value
				if(position>maxPositions)
				{
					maxPositions=position;
				}
			}
			//we got the maximum number of appointments on one row now.
			//we know for each appointments how many overlaps they have
			//we now need to know the widths of each event

			var posWidth = snap["x"]/(maxPositions+1);

			for(var i=0;i<this.appointments[day].length;i++)
			{

				if(!this.appointments[day][i].xy)
				{
					this.appointments[day][i].xy=this.appointments[day][i].getXY();
					this.appointments[day][i].xy[1]-=columnsContainerY;
				}

				if(!this.appointments[day][i].size)
				{
					this.appointments[day][i].size=this.appointments[day][i].getSize();
				}

				var eventPosition = this.appointments[day][i].xy;
				var appointmentsize = this.appointments[day][i].size;

				var rowId = Math.floor(eventPosition[1]/snap["y"]);
				var eventRows=(appointmentsize['height']-2)/snap["y"];

				var eventWidth = this.getEventWidth(
					positions[this.appointments[day][i].id],
					maxPositions,
					rowId,
					eventRows,
					posWidth);

				this.appointments[day][i].setWidth(eventWidth);

				var offset = positions[this.appointments[day][i].id]*posWidth;
				this.appointments[day][i].setX(dayColumnLeft+offset);
			}
		}
	},

	getEventWidth : function(startPosition, maxPositions, startRowId, eventRows, posWidth)
	{
		var eventWidth = posWidth;

		var rowPosition = startPosition+1;
		while(rowPosition<=maxPositions)
		{
			for(var r=0;r<eventRows;r++)
			{
				if(typeof(this.rows[startRowId+r]) != 'undefined' && typeof(this.rows[startRowId+r][rowPosition]) != 'undefined')
				{
					return eventWidth-2;
				}
			}
			eventWidth+=posWidth;
			rowPosition++;
		}
		return eventWidth-2;
	},

	inAppointmentsArray : function (id, appointments)
	{
		for(var i=0;i<appointments.length;i++)
		{
			if(appointments[i].id==id)
			{
				return true;
			}
		}
		return false;
	},

	clearSelection : function()
	{
		this.selector.setVisible(false);
	},

	handleRecurringEvent : function(fireEvent, event, actionData){

		//store them here so the already created window can use these values
		this.currentRecurringEvent = event;
		this.currentFireEvent=fireEvent;
		this.currentActionData=actionData;

		if(!this.recurrenceDialog)
		{
			this.recurrenceDialog = new GO.calendar.RecurrenceDialog();

			this.recurrenceDialog.on('single', function()
			{
				this.currentActionData.singleInstance=true;

				if(!this.currentRecurringEvent.allDay)
				{
					if(this.currentFireEvent=="eventResize")
					{
						this.resizeAppointment(this.currentRecurringEvent.domId, this.currentRecurringEvent.day);
						var domIds = [this.currentRecurringEvent.domId];
					}else if(this.currentFireEvent=='move')
					{
						//console.log(event);
						var domIds = this.moveAppointment(this.currentRecurringEvent, this.currentActionData);
						//console.log(event);
					}
				}
				this.fireEvent(this.currentFireEvent, this, this.currentRecurringEvent , this.currentActionData, domIds);

				//removed this line because otherwise the following happened:
				// 1. OPen a single instance
				// 2. close it.
				// 3. delete this event.
				// 4. Whole recurring series is removed while you would think only one is removed.
				//
				//this.currentRecurringEvent.repeats=false;
				this.recurrenceDialog.hide();
			},this)

			this.recurrenceDialog.on('entire', function()
			{
				this.currentActionData.singleInstance=false;
				this.fireEvent(this.currentFireEvent, this, this.currentRecurringEvent, this.currentActionData);
				this.recurrenceDialog.hide();
			},this)

			this.recurrenceDialog.on('cancel', function()
			{
				if(this.currentFireEvent == 'move')
				{
					this.store.reload();
					//console.debug(this.currentRecurringEvent);
					//console.debug(this.currentActionData);

					//this.moveAppointment(this.currentRecurringEvent, this.currentActionData);
				}

				this.recurrenceDialog.hide();
			},this)
		}

		this.recurrenceDialog.show();
	},

	snapPos : function(oldPos, newPos, snap){

		var inc = newPos-oldPos;

		var snaps = Math.floor(inc/snap);

		var leftOver = inc-(snaps*snap);

		var m = snap/2;
		if(leftOver>m)
		{
			snaps++;
		}
		return oldPos+(snaps*snap);
	},

	snap : function(value, inc, min){
		if(!inc || !value) return value;
		var newValue = value;
		var m = value % inc;
		if(m > 0){
			if(m > (inc/2)){
				newValue = value + (inc-m);
			}else{
				newValue = value - m;
			}
		}
		return Math.max(min, newValue);
	},

	clearGrid : function()
	{
		this.allDayAppointmentsMap={};
		this.appointmentsMap={};

		this.appointments={};
		this.allDayAppointments={}; //Array();
		this.remoteEvents={};//Array();
		this.domIds={}; //Array();
	},

	next : function(days)
	{
		if(!days)
		{
			days = this.days;
		}
		this.setDate(this.startDate.add(Date.DAY, days));
	},

	setDays : function(days, load)
	{
		this.setDate(this.configuredDate, days, load);
	},

	setDate : function(date, days, load)
	{		
		if(days)
		{
			this.days=days;
		}
		
		date = date.clearTime();

		this.configuredDate = date;

		if(this.days>4)
		{
			this.startDate = this.getFirstDateOfWeek(date);
		}else
		{
			this.startDate = date;
		}

		this.endDate = this.startDate.add(Date.DAY, this.days);
		this.setStoreBaseParams();

		if(load)
			this.store.reload();

		this.periodDisplay = GO.lang.strWeek+' '+this.startDate.format('W');

	},

	nextDate : function(){
		return this.startDate.add(Date.DAY, this.days>4 ? 7 : 1);
	},

	previousDate : function(){
		return this.startDate.add(Date.DAY, this.days>4 ? -7 : -1);
	},

	reload : function()
	{
		this.load();
	},

	load : function()
	{
		var records = this.store.getRange();

		this.writePermission = this.store.reader.jsonData.write_permission;
		this.permissionLevel = this.store.reader.jsonData.permission_level;

		this.clearGrid();

		this.renderDaysGrid();

		this.loaded=false;

		this.onAdd(this.store, records, 0);
		/*for(var i = 0, len = records.length; i < len; i++){
      var startDate = Date.parseDate(records[i].data['start_time'], this.dateTimeFormat);
			var endDate = Date.parseDate(records[i].data['end_time'], this.dateTimeFormat);

			var eventData = records[i].data;
			eventData['startDate']=startDate;
			eventData['endDate']=endDate;

			this.addDaysGridEvent(eventData);
    }*/

		this.autoSizeGrid();
		this.scrollToLastPosition();


		for(var i=0;i<this.days;i++)
		{
			this.calculateAppointments(i);
		}
		this.loaded=true;
	},

	setStore : function(store, initial){
		if(!initial && this.store){
			this.store.un("beforeload", this.mask, this);
			this.store.un("datachanged", this.reload);
		}
		if(store){
			store.on("beforeload", this.mask, this);
			store.on("load", this.unmask, this);
			store.on("datachanged", this.reload, this);
			store.on("add", this.onAdd, this);
			store.on("remove", this.onRemove, this);
			store.on("update", this.onUpdate, this);
		}
		this.store = store;
	},

	onAdd :  function(ds, records, index){
		for(var i = 0, len = records.length; i < len; i++){
			var startDate = Date.parseDate(records[i].data['start_time'], this.dateTimeFormat);
			var endDate = Date.parseDate(records[i].data['end_time'], this.dateTimeFormat);

			var eventData = records[i].data;
			eventData['startDate']=startDate;
			eventData['endDate']=endDate;


			this.addDaysGridEvent(eventData, this.loaded);
		}
		
		this.nextId = records.length;		
	},
	onRemove : function(ds, record, index){

	/*if(this.domIds[record.data.event_id]){
			for(var i=0,max=this.domIds[parseInt(record.data.event_id)].length;i<max;i++){
				var id = this.domIds[record.data.event_id][i];
				delete this.remoteEvents[id];
				var el = Ext.get(id);
				el.remove();
			}
			delete this.domIds[record.data.event_id];
		}*/
	},

	onUpdate : function(ds, record){

	},

	setStoreBaseParams : function(){
		this.store.baseParams['start_time']=this.startDate.format(this.dateTimeFormat);
		this.store.baseParams['end_time']=this.endDate.format(this.dateTimeFormat);
	},


	/**
   * An array of domId=>database ID should be kept so that we can figure out
   * which event to update when it's modified.
   * @param {String} domId The unique DOM id of the element
   * @param {String} remoteId The unique database id of the element
   * @return void
   */
	registerEvent : function(domId, eventData)
	{
		this.remoteEvents[domId]=eventData;

		/*if(!this.domIds[eventData.event_id])
		{
			this.domIds[eventData.event_id]=[];
		}
		this.domIds[eventData.event_id].push(domId);*/

		if(!this.domIds[eventData.id])
		{
			this.domIds[eventData.id]=[];
		}
		this.domIds[eventData.id].push(domId);
	},

	setNewEventId : function(domIds, new_event_id){
		for(var i=0,max=domIds.length;i<max;i++){
			this.remoteEvents[domIds[i]].event_id=new_event_id;
		}
	},

	getEventDomElements : function(event_id)
	{
		return GO.util.clone(this.domIds[event_id]);
	},

	getRelatedDomElements : function(eventDomId)
	{
		var eventData = this.remoteEvents[eventDomId];
		if(!eventData)
		{
			return false;
		}

		//var domElements = this.getEventDomElements(eventData.event_id);
		var domElements = this.getEventDomElements(eventData.id);

		if(!domElements)
		{
			domElements = [eventDomId];
		}
		return domElements;
	},


	elementToEvent : function(elementId, allDay)
	{
		//var time = this.domToTimes(elementId, allDay);
		this.remoteEvents[elementId]['domId']=elementId;

		/*if(this.remoteEvents[elementId]['startDate'].getDay()==time.startDate.getDay())
			this.remoteEvents[elementId]['startDate'] = time.startDate;

		if(this.remoteEvents[elementId]['endDate'].getDay()==time.endDate.getDay())
			this.remoteEvents[elementId]['endDate'] = time.endDate;*/
		
		return this.remoteEvents[elementId];
	},

	domToTimes : function(domId, allDay)
	{
		if(!allDay)
		{
			allDay=false;
		}

		var el = Ext.get(domId);
		if(!el)
		{
			return false;
		}

		var position=el.getXY();

		if(!allDay)
		{
			var size = el.getSize();

			var startRow = this.getRowNumberByY(position[1]);
			if(startRow<0)
			{
				startRow=0;
			}
			var endRow = this.getRowNumberByY(position[1]+size['height']);
			if(endRow<=startRow)
			{
				endRow=startRow+1;
			}
		}else
		{
			startRow=0;
			endRow=0;
		}

		var day = this.getDayByX(position[0]);

		var date = this.startDate.add(Date.DAY, day);

		var gridPrecision = 60/this.rowsPerHour;

		var startDate = date.add(Date.MINUTE,startRow*gridPrecision);
		var endDate = date.add(Date.MINUTE,endRow*gridPrecision);

		return {
			'startDate': startDate,
			'endDate':endDate,
			'day':day
		};
	},

	getDateByPosition : function(position, allDay){
		if(!allDay)
		{
			var row = this.getRowNumberByY(position[1]);
			if(row<0)
			{
				row=0;
			}
		}else
		{
			row=0;
		}

		var day = this.getDayByX(position[0]);
		var date = this.startDate.add(Date.DAY, day);
		var gridPrecision = 60/this.rowsPerHour;

		date = date.add(Date.MINUTE,row*gridPrecision);

		return date;
	},

	scrollToRow : function(row)
	{
		var snap = this.getSnap();
		if(!snap)
		{
			return false;
		}
		this.gridContainer.scrollTo("top", snap['y']*row);
	},

	scrollToLastPosition : function(){

		if(this.gridContainer)
		{
			if(this.scrollPosition && this.scrollPosition['top']>0)
			{
				this.gridContainer.scrollTo('top', this.scrollPosition['top']);
			}else
			{
				//scroll to 7am
				this.scrollToRow(7*this.rowsPerHour);
			}
		}
	},
	storeScrollPosition : function(e,container){
		var scrollPos = Ext.get(container).getScroll();
		if(scrollPos['top']>0)
		{
			this.scrollPosition=Ext.get(container).getScroll();
		}
	},
	onShow : function(){		
		GO.grid.CalendarGrid.superclass.onShow.call(this);

		this.scrollToLastPosition();
	},

	startEventDrag : function(e, eventId) {
		//don't start dragging when a doubleclick is recorded
		if(this.writePermission && !this.eventMouseUp && e.button == '0')//button 0 is left click
		{
			this.dragClickEventPosition=e.getXY();

			this.originalEvent = this.elementToEvent(eventId);
			if(!this.originalEvent['private'])
			{

				this.dragEvent= Ext.get(eventId);
				this.dragEvent.size=this.dragEvent.getSize();
				this.dragappointmentstartPos=this.dragEvent.getXY();
				this.dragXoffset = this.dragClickEventPosition[0]-this.dragappointmentstartPos[0];
				this.dragYoffset = this.dragClickEventPosition[1]-this.dragappointmentstartPos[1];

				this.lastDragX = this.dragappointmentstartPos[0];
				this.lastDragY = this.dragappointmentstartPos[1];

				this.dragSnap = this.getSnap();

				this.columnsContainerY = this.gridTable.getY();
			}
		}
	},


	onEventDragMouseMove : function (e){

		//if(!this.eventMouseUp)
		if(this.dragEvent)
		{
			//update the selector proxy
			var mouseEventPos = e.getXY();


			//adjust with offsets so event will not jump to mouse position
			var x = this.snapPos(this.dragappointmentstartPos[0],mouseEventPos[0]-this.dragXoffset,this.dragSnap["x"],this.days);
			var y = this.snapPos(this.dragappointmentstartPos[1],mouseEventPos[1]-this.dragYoffset,this.dragSnap["y"],this.scale);

			//var gridRight = (this.gridX+this.days*this.dragSnap["x"]);
			//var gridBottom = (this.gridY+48*this.dragSnap["y"]);

			var gridTop = this.columnsContainerY-4;
			var gridLeft = this.gridCells[0][0].xy[0]-4;
			var gridBottom= this.columnsContainerY+this.gridTableHeight/*-this.dragEvent.size['height']*/+5;
			var gridRight=this.gridCells[this.days-1][47].xy[0]+4;

			//gridBottomRight[0]=gridBottomRight[0]+this.gridCells[this.days-1][47].size['width'];
			//	gridBottomRight[1]=gridBottomRight[1]+this.gridCells[this.days-1][47].size['height'];

			//this.dragEvent.update(x+' = '+this.dragappointmentstartPos[0]);
			if(x != this.lastDragX  && x<gridRight && x>gridLeft)
			{
				this.lastDragX=x;
				this.dragEvent.setX(x);
			}


			if(y != this.lastDragY && y<gridBottom && y>gridTop)
			{
				this.lastDragY=y;
				this.dragEvent.setY(y);
			}

		//this.dragEvent.setXY([x, y]);
		//this.dragEvent.dom.innerHTML = "X:"+x+" Y:"+y+" TopLeft: "+gridLeft+","+gridTop+" BottomRight:"+gridRight+","+gridBottom;
		}
	},
	onEventDragMouseUp : function (e){

		//unset the drag stuff

		if(this.dragEvent)
		{
			var newPos = this.dragEvent.getXY();

			if(newPos[0] != this.dragappointmentstartPos[0] || newPos[1] != this.dragappointmentstartPos[1])
			{
				//var times = this.domToTimes(this.dragEvent.id, false);
				//var dropTime = times.startDate.format('U');
				//var dragTime = this.remoteEvents[this.dragEvent.id].startDate.format('U');

				var dragTime = this.getDateByPosition(this.dragappointmentstartPos);
				var dropTime = this.getDateByPosition(newPos);

				var actionData = {
					offset : dropTime.format('U')-dragTime.format('U'),
					dragDate: this.remoteEvents[this.dragEvent.id].startDate
					};

				//do last because orginal times will be lost after this.
				var event = this.elementToEvent(this.dragEvent.id);

				var element = Ext.get(this.dragEvent.id);
				var timeEl = element.select('span.x-calGrid-event-time');
				if(timeEl)
				{
					timeEl.update(event.startDate.format(GO.settings.time_format));
					element.set({
						'ext:qtip': GO.calendar.formatQtip(event)
						});
				}

				if(this.remoteEvents[this.dragEvent.id]['repeats'])
				{
					event['oldPos']=this.dragappointmentstartPos;
					event['newPos']=newPos;
					//console.debug('oldPos: '+this.dragappointmentstartPos);
					//console.debug('newPos: '+newPos);

					this.handleRecurringEvent("move", event, actionData);
				}else
				{
					var domIds = this.moveAppointment(event, actionData);

					this.fireEvent("move", this, event, actionData, domIds);
				}
			}

			this.dragEvent=false;
		}
	},

	moveAppointment  : function(event, actionData){
		this.removeEvent(event.domId, true);
		delete event.domId;

		//apply new times
		event.startDate = event.startDate.add(Date.SECOND, actionData.offset);
		event.endDate = event.endDate.add(Date.SECOND, actionData.offset);

		return this.addDaysGridEvent(event, true);
	},

	findAppointment : function(day, event_id)
	{
		for(var i=0;i<this.appointments[day].length;i++)
		{
			if(this.appointments[day][i].id==event_id)
			{
				return i;
			}
		}
	},

	/*moveAppointment : function (event_dom_id, oldPos, newPos)
	{

		var oldDay = this.getDayByX(oldPos[0]);
		var newDay = this.getDayByX(newPos[0]);

		var columnsContainerY = this.gridTable.getY();

		var i = this.findAppointment(oldDay, event_dom_id);

		this.appointments[oldDay][i].xy=newPos;
		this.appointments[oldDay][i].xy[1]-=columnsContainerY;
		this.appointments[oldDay][i].size=this.appointments[oldDay][i].getSize();

		this.remoteEvents[event_dom_id].repeats=false;

		if(oldDay!=newDay)
		{
			if(!this.appointments[newDay])
			{
				this.appointments[newDay]=[];
			}

			this.appointments[newDay].push(this.appointments[oldDay][i]);
			this.appointments[oldDay].splice(i,1);
			this.calculateAppointments(oldDay);
			this.calculateAppointments(newDay);
		}else
		{
			this.calculateAppointments(newDay);
		}
	},	*/

	startAllDayEventDrag : function(e, eventId) {
		//don't start dragging when a doubleclick is recorded
		if(!this.eventMouseUp && this.writePermission)
		{
			this.dragClickEventPosition=e.getXY();

			this.originalEvent = this.elementToEvent(eventId, true);
			this.allDayDragDate = this.originalEvent.startDate;

			if(!this.originalEvent['private'])
			{
				this.allDayDragEvent= Ext.get(eventId);
				this.allDayDragEvent.size=this.allDayDragEvent.getSize();
				this.dragappointmentstartPos=this.allDayDragEvent.getXY();
				this.currentDragDay = this.getDayByX(this.dragappointmentstartPos[0]+1);
				this.dragXoffset = this.dragClickEventPosition[0]-this.dragappointmentstartPos[0];

				this.dragSnap = this.getSnap();
			}
		}
	},

	currentDragDay : false,

	onAllDayEventDragMouseMove : function (e){

		//if(!this.eventMouseUp)
		if(this.allDayDragEvent)
		{
			//update the selector proxy
			var mouseEventPos = e.getXY();

			//adjust with offsets so event will not jump to mouse position
			var x = this.snapPos(this.dragappointmentstartPos[0],mouseEventPos[0]-this.dragXoffset,this.dragSnap["x"],this.days);

			var day = this.getDayByX(mouseEventPos[0]+1);

			//var gridLeft = this.gridCells[0][0].xy[0]-4;
			//var gridRight=this.gridCells[this.days-1][47].xy[0]+4;
			if(this.currentDragDay != day && this.allDayColumns[day])
			{
				this.currentDragDay=day;
				this.allDayColumns[day].appendChild(this.allDayDragEvent);
			}
		}
	},
	onAllDayEventDragMouseUp : function (e){

		//unset the drag stuff

		if(this.allDayDragEvent)
		{
			var newPos = e.getXY();

			if(newPos[0] != this.dragappointmentstartPos[0])
			{
				var dragDay = this.getDayByX(this.dragappointmentstartPos[0]+1);
				var dropDay = this.getDayByX(newPos[0]+1);

				if(dragDay!=dropDay && this.allDayColumns[dropDay])
				{
					var offsetDays = dropDay-dragDay;

					//do last because orginal times will be lost after this.
					var event = this.elementToEvent(this.allDayDragEvent.id, true);

					var actionData = {
						offsetDays : offsetDays,
						dragDate: this.allDayDragDate
						};

					if(this.remoteEvents[this.allDayDragEvent.id]['repeats'])
					{
						this.handleRecurringEvent("move", event, actionData);
					}else
					{
						this.removeEvent(this.allDayDragEvent.id);

						event.startDate = Date.parseDate(event.start_time, this.dateTimeFormat).add(Date.DAY, offsetDays);
						event.endDate = Date.parseDate(event.end_time, this.dateTimeFormat).add(Date.DAY, offsetDays);
						event.start_time=event.startDate.format(this.dateTimeFormat);
						event.end_time=event.endDate.format(this.dateTimeFormat);

						var domIds = this.addDaysGridEvent(event);

						this.fireEvent("move", this, event, actionData, domIds);
					}
				}
				this.autoSizeGrid();
			}
			this.allDayDragEvent=false;
		}
	},
					
	_setTimeIndicator : function(reloaded) {
		
		var reloaded = reloaded || false;
		
		var now = new Date();
				
		if(this.todaysHeading){
			var minutesElapsed = now.getMinutes()+now.getHours()*60;
			var indicatorTop = Math.ceil((11/15)*minutesElapsed);

			var x = this.todaysHeading.getX()-this.gridTable.getX()-this.theWeekDay+1;
			
			if(!Ext.isIE){
				x+=4;
			}

			if(!reloaded && this.timeIndicator1) {
				this.timeIndicator1.replaceWith({
						tag: 'div',
						id: Ext.id(),
						cls: "x-calGrid-indicator",
						style:"left:"+x+"px;top:"+indicatorTop+"px;width:"+(this.todaysHeading.getWidth()-3)+"px;"
					});
			} else {
				if (this.timeIndicator1)
					Ext.removeNode(this.timeIndicator1);
				this.timeIndicator1 = Ext.DomHelper.append(this.gridContainer,
					{
						tag: 'div',
						id: Ext.id(),
						cls: "x-calGrid-indicator",
						style:"left:"+x+"px;top:"+indicatorTop+"px;width:"+(this.todaysHeading.getWidth()-3)+"px;"
					},true);
			}

			if(!reloaded && this.timeIndicator2) {
				this.timeIndicator2.replaceWith({
						tag: 'div',
						id: Ext.id(),
						cls: "x-calGrid-indicator",
						style:"left:0px;top:"+indicatorTop+"px;width:6px;"
					});
			} else {
				if (this.timeIndicator2)
					Ext.removeNode(this.timeIndicator2);
				this.timeIndicator2 = Ext.DomHelper.append(this.gridContainer,
					{
						tag: 'div',
						id: Ext.id(),
						cls: "x-calGrid-indicator",
						style:"left:0px;top:"+indicatorTop+"px;width:6px;"
					},true);
			}

		}

		
	}
	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ListGrid.js 20164 2016-06-23 13:31:47Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.ListGrid = function(config)
{
	if(!config)
	{
		config = {};
	}
	
	config.store = new Ext.data.GroupingStore({
		reader: new Ext.data.JsonReader({
			totalProperty: "count",
			root: "results",
			id: "id",
			fields: [
			'id',
			'event_id',
			'name',
			'time',
			'start_time',
			'end_time',
			'description',
			'location',
			'private',
			'repeats',
			'background',
			'status_color',
			'day',
			'task_id',
			'contact_id',
			'link_count',
			'has_reminder',
			'calendar_id',
			'calendar_name',
			'read_only',
//			'has_other_participants',
			'participant_ids',
			'ctime',
			'mtime',
			'username',
			'musername',
			'resources',
			'model_name'
			]
		}),
		proxy: new Ext.data.HttpProxy({
			url:GO.url('calendar/event/store')
		}),
		groupField:'day',
		sortInfo: {
			field: 'start_time',
			direction: 'ASC'
		},
		remoteSort:true
	});
	
	config.paging=false,
	config.autoExpandColumn='listview-calendar-name-heading';
	config.autoExpandMax=2500;
	config.enableColumnHide=false;
	config.enableColumnMove=false;
	config.autoScroll=true;
  
	config.columns=[
	{
		header:GO.lang.strDay,
		dataIndex: 'day',
		menuDisabled:true
	},
	{
		header:GO.lang.strTime,
		dataIndex: 'time',
		width:90,
		renderer: function(v, metadata, record)
		{
			var html = '';
			
			//TODO: Set the correct background color for the following span block. The background-color depends on the status of the event.
//			if(!GO.util.empty(record.data.status_color))
//				html += '<span class="x-calListGrid-event-status" style="background-color:#'+record.data.status_color+';"></span>';
			
			html += '<div class="';
			if(record.data.link_count>0)
			{
				html +='cal-has-links';
			}
			if (record.data.private) {
				v = v+'<span class="cal-is-private"></span>';
			}
			if (record.data.has_reminder==1) {
				v = v+'<span class="cal-has-reminders"></span>';
			}

			html +='" style="background-position:1px 3px !important;border:1px solid #c0c0c0;padding:2px;margin:2px;background-color:#'+record.data.background+';">'+v+'</div>';
			return html;
		},
		menuDisabled:true
	},	
	{
		id:'listview-calendar-name-heading',
		header:GO.lang.strName,
		dataIndex: 'name',
		renderer: this.renderName,
		menuDisabled:true
	}];
		
	config.view=  new Ext.grid.GroupingView({
		hideGroupedColumn:true,
		groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "'+GO.lang.items+'" : "'+GO.lang.item+'"]})',
		emptyText: GO.calendar.lang.noAppointmentsToDisplay,
		showGroupName:false
	});
	config.sm=new Ext.grid.RowSelectionModel({
		singleSelect:true
	});
	config.loadMask=true;
	
	GO.calendar.ListGrid.superclass.constructor.call(this, config);
	
	if(!this.startDate)
	{
		//lose time
		var date = new Date();
		this.startDate=Date.parseDate(date.format(this.dateFormat), this.dateFormat);
	}
	
	
	this.setDate(this.startDate);
	
};


Ext.extend(GO.calendar.ListGrid, Ext.grid.GridPanel, {
	
	/**
   * @cfg {String} The components handles dates in this format
   */
	dateFormat : 'Y-m-d',
	/**
   * @cfg {String} The components handles dates in this format
   */
	dateTimeFormat : 'Y-m-d H:i',
	
	timeFormat : 'H:i',
	/**
   * @cfg {Number} Start day of the week. Monday or sunday
   */
	firstWeekday : 1,
	/**
   * @cfg {Date} The date set by the user
   */
	configuredDate : false,
	/**
   * @cfg {Date} The date where the grid starts. This can be recalculated after a user sets a date
   */
	startDate : false,
	
	/**
   * @cfg {Integer} amount of days to display
   */
	days : 91,

	nextId : 0,

	periodDisplay : '',
	
	renderName : function(grid, value, record)
	{
			return '<div style="font-weight:bold;" ext:qtip="'+GO.calendar.formatQtip(record.data)+'">'+record.data.name+'</div>'+GO.calendar.formatQtip(record.data,false);
	},
		
	afterRender : function()
	{
		GO.calendar.ListGrid.superclass.afterRender.call(this);
    
		/*GO.calendar.eventDialog.on('save', function(){
    	if(this.isVisible())
    	{
    		this.store.reload();
    	}    	
    }, this);*/
    
		this.on("rowdblclick", function(grid, rowIndex, e){
			var record = grid.getStore().getAt(rowIndex);

			if(record.data.read_only)
					return false;

			if(record.data.event_id)
			{
				GO.calendar.showEventDialog({
					event_id: record.data.event_id
				});
				
			}else if(record.data.task_id)
			{
				GO.tasks.showTaskDialog({
					task_id : record.data.task_id
				});
			}else	if(record.data.contact_id)
			{
				GO.linkHandlers["GO\\Addressbook\\Model\\Contact"].call(this, record.data.contact_id);
			}
			
		}, this);
		
		this.on('rowcontextmenu', function(grid, rowIndex, e)
		{			
			var sm = grid.getSelectionModel();
			if(sm.isSelected(rowIndex) !== true) {
				sm.clearSelections();
				sm.selectRow(rowIndex);
			}

			var theEventData = grid.getStore().getAt(rowIndex).data;
			console.log(theEventData);
			if (theEventData.model_name=='GO\\Tasks\\Model\\Task') {
				if (GO.tasks) {
					if (!this.taskContextMenu)
						this.taskContextMenu = new GO.calendar.TaskContextMenu();

					e.stopEvent();
					this.taskContextMenu.setTask(theEventData);
					this.taskContextMenu.showAt(e.getXY());
				}
			} else {
				this.showContextMenu(e, theEventData);
			}
		}, this);
		
	},
	
	getFirstDateOfWeek : function(date)
	{
		//Calculate the first day of the week
		var weekday = date.getDay();
		var offset = this.firstWeekday-weekday;
		if(offset>0)
		{
			offset-=7;
		}
		return date.add(Date.DAY, offset);
	},
	setDays : function(days, load)
	{
		this.setDate(this.configuredDate, 7, load);
	},
	
	getSelectedEvent : function(){
		
		var sm = this.getSelectionModel();
		var record = sm.getSelected();
		var event = record.data;
		
		event.startDate = Date.parseDate(event.start_time, this.dateTimeFormat);
		event.endDate = Date.parseDate(event.end_time, this.dateTimeFormat);
		
		return event;
	},
	
	removeEvent : function(){
		var sm = this.getSelectionModel();
		var record = sm.getSelected();
		this.store.remove(record)
	},
	
	setDate : function(date, days, load)
	{
		this.configuredDate = date;

		/*if(this.days>4)
		{
			this.startDate = this.getFirstDateOfWeek(date);
		}else
		{
			this.startDate = date;
		}*/

		var dateStr='';
		
		var year = date.getFullYear();

		if(date.getMonth()>8){
			dateStr=date.getFullYear()+'-10-01';
			this.periodDisplay = '4 ';
		}else if(date.getMonth()>5){
			dateStr=year+'-07-01';
			this.periodDisplay = '3 ';
		}else if(date.getMonth()>2){
			dateStr=year+'-04-01';
			this.periodDisplay = '2 ';
		}else
		{
			dateStr=year+'-01-01';
			this.periodDisplay = '1 ';
		}

		this.periodDisplay = GO.calendar.lang.quarterShort+this.periodDisplay+year;
		
		this.startDate=Date.parseDate(dateStr, this.dateFormat);
		this.endDate = this.nextDate();		
		this.setStoreBaseParams();
  	
		if(load)
			this.store.reload();		
	},

	nextDate : function(){
		return this.startDate.add(Date.MONTH, 3);
	},

	previousDate : function(){
		return this.startDate.add(Date.MONTH, -3);
	},

	setStoreBaseParams : function(){
		this.store.baseParams['start_time']=this.startDate.format(this.dateTimeFormat);
		this.store.baseParams['end_time']=this.endDate.format(this.dateTimeFormat);
	},

	showContextMenu : function(e, event)
	{			
		if(!this.contextMenu)
		{
			this.contextMenu = new GO.calendar.ContextMenu();

			this.contextMenu.on('deleteEvent', function()
			{
				this.fireEvent("deleteEvent", this);
			},this);			
			
			this.contextMenu.on('updateEvent', function(obj)
			{
				var calendars = Ext.decode(this.store.baseParams['calendars']);
				
				if(!obj.isCopy)
				{
					this.store.reload();
				}else
				{
					for(var i=0,found=false; i<calendars.length && !found; i++)
					{
						if(calendars[i] == obj.event.calendar_id)
						{
							found = true;
							this.store.reload();
						}
					}
				}
			},this);
		}		

		e.stopEvent();
		this.contextMenu.setEvent(event);
		//this.contextMenu.setParticipants(event.participant_ids);
		this.contextMenu.showAt(e.getXY());
	}
	
});

	



/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: CalendarDialog.js 21220 2017-06-12 09:43:55Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.CalendarDialog = function(config)
{
	if(!config)
	{
		config = {};
	}
	
	this.propertiesTab = new Ext.Panel({	
		title:GO.lang['strProperties'],
		layout:'form',
		anchor: '100% 100%',		
		cls:'go-form-panel',
		labelWidth: 120,
		items: [
		this.selectUser = new GO.form.SelectUser({
			fieldLabel: GO.lang.strUser,
			disabled : !GO.settings.has_admin_permission,
			value: GO.settings.user_id,
			anchor: '100%'
		}),
		this.name = new Ext.form.TextField({
			fieldLabel: GO.lang.strName,
			name: 'name',
			allowBlank:false,
			anchor: '100%'
		}),
		this.selectGroup = new GO.form.ComboBox({
			hiddenName:'group_id',
			fieldLabel:GO.calendar.lang.group,
			valueField:'id',
			value:1,
			displayField:'name',
			id:'resource_groups',
			emptyText: GO.lang.strPleaseSelect,
			store: new GO.data.JsonStore({
				url: GO.url("calendar/group/store"),
				fields:['id','name','user_name','fields','acl_id']
			}),
			
			mode:'local',
			triggerAction:'all',
			editable:false,
			selectOnFocus:true,
			allowBlank:true,
			forceSelection:true,
			anchor:'100%'
		}),{
			xtype:'xcheckbox',
			name:'show_bdays',
			boxLabel:GO.calendar.lang.show_bdays,
			hideLabel:true
		},{
			xtype:'xcheckbox',
			name:'show_holidays',
			boxLabel:GO.calendar.lang.show_holidays,
			hideLabel:true
		},{
			xtype:'xcheckbox',
			name:'show_completed_tasks',
			boxLabel:GO.calendar.lang.show_completed_tasks,
			hideLabel:true,
			hidden: !GO.tasks
		},{
			xtype:'textarea',
			fieldLabel:GO.lang.strComment,
			name:'comment',
			anchor:'100%',
			height:50
		},{
			xtype:'textarea',
			fieldLabel:GO.calendar.lang['tooltip'],
			name:'tooltip',
			anchor:'100%',
			height:50,
			maxLength: 127
		}
		]
	});

	if(GO.tasks)
	{
		this.tasklistsTab = new GO.base.model.multiselect.panel({
      title:GO.tasks.lang.visibleTasklists,
      url:'calendar/calendarTasklist',
      columns:[{header: GO.lang.strTitle, dataIndex: 'name'}],
      fields:['id','name'],
      model_id:0
    });
		
		this.selectTasklist = new GO.form.ComboBoxReset({
			fieldLabel:'CalDAV '+GO.tasks.lang.tasklist,
				store:new GO.data.JsonStore({
				url: GO.url('tasks/tasklist/store'),
				baseParams: {'permissionLevel': GO.permissionLevels.write},
				fields:['id','name','user_name'],
				remoteSort:true
			}),
			displayField: 'name',
			valueField: 'id',
			triggerAction:'all',
			hiddenName:'tasklist_id',
			mode:'remote',
			editable: true,
			selectOnFocus:true,
			forceSelection: true,
			typeAhead: true,
			emptyText:GO.lang.none,
			pageSize: parseInt(GO.settings.max_rows_list)
		});

		this.propertiesTab.add(this.selectTasklist);
	}

	this.propertiesTab.add([{
			xtype:'plainfield',
			fieldLabel:GO.calendar.lang.directUrl,
			name:'url',
			anchor:'100%'
		},{
			xtype:'xcheckbox',
			hideLabel:true,
			boxLabel:GO.calendar.lang.publishICS,
			hidden: GO.calendar.disablePublishing,
			name:'public'
		},{
			xtype:'plainfield',
			hidden: GO.calendar.disablePublishing,
			fieldLabel:'iCalendar URL',
			name:'ics_url',
			anchor:'100%'
		},
		this.exportButton = new Ext.Button({
			text:GO.lang.cmdExport,
			disabled:true,
			handler:function(){
				document.location=GO.url("calendar/calendar/exportIcs", {"calendar_id":this.calendar_id});
			},
			scope:this
		})
		,this.deleteAllItemsButton = new Ext.Button({
				style:'margin-top:10px',
				xtype:'button',
				text:GO.lang.deleteAllItems,
				handler:function(){
					Ext.Msg.show({
						title: GO.lang.deleteAllItems,
						icon: Ext.MessageBox.WARNING,
						msg: GO.lang.deleteAllItemsAreYouSure,
						buttons: Ext.Msg.YESNO,
						scope:this,
						fn: function(btn) {
							if (btn=='yes') {
								GO.request({
									timeout:300000,
									maskEl:Ext.getBody(),
									url:'calendar/calendar/truncate',
									params:{
										calendar_id:this.calendar_id
									},
									scope:this
								});
							}
						}
					});
				},
				scope:this
			}),
			this.removeDuplicatesButton =new Ext.Button({
				style:'margin-top:10px',
				xtype:'button',
				text:GO.lang.removeDuplicates,
				handler:function(){
					
					window.open(GO.url('calendar/calendar/removeDuplicates',{calendar_id:this.calendar_id}))
					
				},
				scope:this
			})
		])

	this.readPermissionsTab = new GO.grid.PermissionsPanel({	
	});
	
	this.uploadFile = new GO.form.UploadFile({
		inputName : 'ical_file',	   
		max:1 			
	});
	
	this.uploadFile.on('filesChanged', function(input, inputs){
		this.importButton.setDisabled(inputs.getCount()==1);
	}, this);
	
	
	this.categoriesGrid = new GO.calendar.CategoriesGrid({
		title:GO.calendar.lang.category,
		store: GO.calendar.categoriesStore
	});
	
	this.importTab = new Ext.Panel({		
		layout:'form',
		waitMsgTarget:true,
		disabled:true,
		title:GO.lang.cmdImport,
		items: [{
			xtype: 'panel',
			html: GO.calendar.lang.selectIcalendarFile,
			border:false
		},
		this.uploadFile,
		this.importButton = new Ext.Button({
			xtype:'button',
			disabled:true,
			text:GO.lang.cmdImport,
			handler: function(){
				this.formPanel.form.submit({
					waitMsg:GO.lang.waitMsgUpload,
					url: GO.url('calendar/calendar/importIcs'),
					params: {
//						task: 'import',
						calendar_id:this.calendar_id
					},
					success: function(form,action)
					{
						this.uploadFile.clearQueue();

						Ext.Msg.show({
							title: GO.lang.strSuccess,
							width : 600,
							height : 220,
							icon: Ext.MessageBox.INFO,
							msg: "<pre>"+action.result.feedback+"</pre>"
						});
						this.fireEvent('calendarimport', this);
						
					},
					failure: function(form, action) {
						GO.errorDialog.show(action.result.feedback);
					},
					scope: this
				});
			},
			scope: this
		})],
		cls: 'go-form-panel'
	});


	var items = [this.propertiesTab];
	
	if(GO.tasks)
	{
		items.push(this.tasklistsTab);
	}
	
	items.push(this.categoriesGrid);
	items.push(this.readPermissionsTab);
	items.push(this.importTab);

	if(GO.customfields && GO.customfields.types["GO\\Calendar\\Model\\Calendar"])
	{
		for(var i=0;i<GO.customfields.types["GO\\Calendar\\Model\\Calendar"].panels.length;i++)
		{
			var panel = GO.customfields.types["GO\\Calendar\\Model\\Calendar"].panels[i];
			panel.autoScroll = true;
			items.push(panel);
		}
	}

	this.tabPanel = new Ext.TabPanel({
		hideLabel:true,
		deferredRender:false,
		xtype:'tabpanel',
		activeTab: 0,
		border:false,
		anchor: '100% 100%',
		enableTabScroll: true,
		items:items
	});

	this.formPanel = new Ext.FormPanel({
		fileUpload:true,
		url: GO.url("calendar/calendar/load"),
		defaultType: 'textfield',
		waitMsgTarget:true,
		items:this.tabPanel
	});

	
	GO.calendar.CalendarDialog.superclass.constructor.call(this,{
		title: GO.calendar.lang.calendar,
		layout:'fit',
		modal:false,
		height:600,
		width:700,
		closeAction:'hide',
		items: this.formPanel,
		buttons:[
		{
			text:GO.lang.cmdOk,
			handler: function(){
				this.save(true)
			},
			scope: this
		},
		{
			text:GO.lang.cmdApply,
			handler: function(){
				this.save(false)
			},
			scope: this
		},

		{
			text:GO.lang.cmdClose,
			handler: function(){
				this.hide()
			},
			scope: this
		}
		]
	});

	this.addEvents({calendarimport:true});
}

Ext.extend(GO.calendar.CalendarDialog, GO.Window, {

	resource: 0,
    
	initComponent : function(){
		
		this.addEvents({
			'save' : true
		});
		
		GO.calendar.CalendarDialog.superclass.initComponent.call(this);	
		
	},				
	show : function (calendar_id, resource){		
		if(!this.rendered) {
			this.render(Ext.getBody());
		} else {
			this.selectGroup.store.reload()
		}
		if(GO.tasks)
		{
			this.tasklistsTab.setModelId(calendar_id);
		}
			
		this.propertiesTab.show();       

		if(resource && !this.selectGroup.store.loaded)
		{
			this.selectGroup.store.load({
				callback:function(){
					this.show(calendar_id, resource);
				},
				scope:this
			});
			return;
		}

		this.resource = (resource > 0) ? resource : 0;

		var title = (this.resource) ? GO.calendar.lang.resource : GO.calendar.lang.calendar;
		this.setTitle(title);

		this.removeDuplicatesButton.setDisabled(!calendar_id);
		this.deleteAllItemsButton.setDisabled(!calendar_id);

		if(calendar_id > 0)
		{
			if(calendar_id!=this.calendar_id)
			{
				this.loadCalendar(calendar_id);
			}else
			{
				GO.calendar.CalendarDialog.superclass.show.call(this);
			}                                   
		}else
		{
			this.calendar_id=0;
			this.formPanel.form.reset();
			
			
			

			if(resource){
				this.selectGroup.selectFirst();
			}else
			{
				this.selectGroup.setValue(1);
			}
            
			this.exportButton.setDisabled(true);
			this.importTab.setDisabled(true);	

			this.readPermissionsTab.setDisabled(true);

			this.showGroups(resource);
			
			this.categoriesGrid.setCalendarId(0);
			
			GO.calendar.CalendarDialog.superclass.show.call(this);
		}
	},
	hide : function() {
		this.uploadFile.clearQueue();
		
		GO.calendar.CalendarDialog.superclass.hide.call(this);
	},
	
	loadCalendar : function(calendar_id)
	{
		if(GO.tasks)
		{
			this.tasklistsTab.setModelId(calendar_id);
//			this.tasklistsTab.store.loaded = false;
//			this.tasklistsTab.store.baseParams.calendar_id = calendar_id;
		}
		
		this.categoriesGrid.setCalendarId(calendar_id);
		
		this.formPanel.form.load({
			url: GO.url("calendar/calendar/load"),
			params: {
				id:calendar_id				
			},
			waitMsg:GO.lang.waitMsgLoad,
			success: function(form, action) {
				this.calendar_id=calendar_id;
				this.selectUser.setRawValue(action.result.remoteComboTexts.user_id);
				this.readPermissionsTab.setAcl(action.result.data.acl_id);
				this.exportButton.setDisabled(false);
				this.importTab.setDisabled(false);

				if(GO.tasks && action.result.remoteComboTexts.tasklist_id)
					this.selectTasklist.setRemoteText(action.result.remoteComboTexts.tasklist_id);

				this.showGroups(action.result.data.group_id > 1);

				GO.calendar.CalendarDialog.superclass.show.call(this);
			},
			failure:function(form, action)
			{
				Ext.Msg.alert(GO.lang.strError, action.result.feedback)
			},
			scope: this
		});
	},
	save : function(hide)
	{        
		if(this.resource && this.name.getValue() && !this.selectGroup.getValue())
		{
			Ext.MessageBox.alert(GO.lang.strError, GO.calendar.lang.no_group_selected);
		}else
		{
			var tasklists = (GO.tasks && !this.resource) ? Ext.encode(this.tasklistsTab.getGridData()) : '';
		
			this.formPanel.form.submit({
				url:GO.url("calendar/calendar/submit"),
				params: {					
					'id': this.calendar_id,
					'tasklists':tasklists
				},
				waitMsg:GO.lang.waitMsgSave,
				success:function(form, action){

					if(action.result.id)
					{
						this.calendar_id=action.result.id;
						this.readPermissionsTab.setAcl(action.result.acl_id);
						this.exportButton.setDisabled(false);
						this.importTab.setDisabled(false);
					//this.loadAccount(this.calendar_id);
					}

					if(GO.tasks)
					{
						this.tasklistsTab.setModelId(action.result.id);
						this.tasklistsTab.store.commitChanges();
					}

					this.fireEvent('save', this, this.selectGroup.getValue());

					if(hide)
					{
						this.hide();
					}
				},

				failure: function(form, action) {
					var error = '';
					if(action.failureType=='client')
					{
						error = GO.lang.strErrorsInForm;
					}else
					{
						error = action.result.feedback;
					}

					Ext.MessageBox.alert(GO.lang.strError, error);
				},
				scope:this

			});
		}
			
	},
	showGroups : function(resource)
	{
		var f = this.formPanel.form.findField('resource_groups');
		f.container.up('div.x-form-item').setDisplayed(resource);

		f = this.formPanel.form.findField('show_bdays');
		f.container.up('div.x-form-item').setDisplayed(!resource);

		if(GO.tasks)
		{
			if(resource)
			{
				this.tabPanel.hideTabStripItem('calendar_visible_tasklists');
			}else
			{
				this.tabPanel.unhideTabStripItem('calendar_visible_tasklists');
			}
		}
	}
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ViewDialog.js 17814 2014-07-22 13:15:18Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.calendar.ViewDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'view',
			titleField:'name',
			title:GO.calendar.lang.view,
			formControllerUrl: 'calendar/view',
			width: 440,
			height: 600
		});
		
		GO.calendar.ViewDialog.superclass.initComponent.call(this);	
	},
	
	setRemoteModelId : function(remoteModelId)
	{
		GO.calendar.ViewDialog.superclass.setRemoteModelId.call(this,remoteModelId);
		this.calendarsGrid.setModelId(remoteModelId, true);
        this.groups.setModelId(remoteModelId);
	},
	
	buildForm : function () {
		
		this.calendarsGrid = new GO.base.model.multiselect.panel({
      title:'',
			region:'center',
      url:'calendar/viewCalendar',
      columns:[
				{header: GO.lang.strTitle, dataIndex: 'name'},
				{header:GO.lang.strUsername,dataIndex: 'username'}
			],
      fields:['id','name','username'],
      model_id:0
    });

		this.propertiesPanel = new Ext.Panel({
			title:GO.lang['strProperties'],			
			//cls:'go-form-panel',
			layout:'border',
			items:[
				new Ext.Panel({
				layout:'form',
				region:'north',
				height:110,
				defaultType: 'textfield',
				defaults: {
					anchor: '100%'
				},
				cls:'go-form-panel',
				waitMsgTarget:true,
				labelWidth: 75,
				border:false,
				items: [
					{
						fieldLabel: GO.lang.strName,
						name: 'name',
						allowBlank:false		
					},this.merge = new Ext.ux.form.XCheckbox({
						name:'merge',
						boxLabel: GO.calendar.lang.merge,
						hideLabel : true
					}),GO.calendar.ownColor = new Ext.ux.form.XCheckbox({
						name:'owncolor',
						boxLabel: GO.calendar.lang.ownColor,
						hideLabel : true,
						disabled : true,
						checked : true
					}),{
						xtype:'plainfield',
						fieldLabel:GO.calendar.lang.directUrl,
						name:'url',
						anchor:'100%'
					}
					]
				}),
				this.calendarsGrid
			]				
		});
		
		this.merge.on('check',function(checkbox,value) {
			if (value)
				GO.calendar.ownColor.setDisabled(false);
			else
				GO.calendar.ownColor.setDisabled(true);
		});

		this.addPanel(this.propertiesPanel);
        
        var groupColumns = [{
			header : GO.lang['strName'],
			dataIndex : 'name',
			menuDisabled:true,
			sortable: true
		}];
        
        this.addPanel (this.groups = new GO.base.model.multiselect.panel({
            title: GO.lang.strSelectGroups,
				anchor: '100% 50%',
				forceLayout:true,
				autoExpandColumn:'name',
				url:'calendar/viewGroup',
				columns: [{
                  header : GO.lang['strName'],
                  dataIndex : 'name',
                  menuDisabled:true,
                  sortable: true
              }],
				/* selectColumns:[{
					header : GO.lang['strName'],
					dataIndex : 'name',
					menuDisabled:true,
					sortable: true
				}], */
				fields:['id','name']
				//model_id: this.view_id //GO.settings.user_id
			})
          );
		this.addPermissionsPanel(new GO.grid.PermissionsPanel());
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: Portlet.js 16920 2014-02-26 14:44:19Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.SummaryGroupPanel = function(config)
{
	if(!config)
	{
		config = {};
	}
	
	config.store = new Ext.data.GroupingStore({
		reader: new Ext.data.JsonReader({
			totalProperty: "count",
			root: "results",
			id: "id",
			fields: [
			'id',
			'event_id',
			'name',
			'time',
			'start_time',
			'end_time',
			'description',
			'location',
			'private',
			'repeats',
			'day',
			'calendar_name'
			]
		}),
		baseParams: {
			task:'summary',
			'user_id' : GO.settings.user_id,
			'portlet' : true
		},
		proxy: new Ext.data.HttpProxy({
			url: GO.url("calendar/portlet/portletGrid")
		}),
		groupField:'day',
		sortInfo: {
			field: 'id',
			direction: 'ASC'
		},
		remoteGroup:true,
		remoteSort:true
	});

	config.store.on('load', function(){
		//do layout on Startpage
		this.ownerCt.ownerCt.ownerCt.doLayout();
	}, this);

	config.paging=false,			
	config.autoExpandColumn='summary-calendar-name-heading';


	config.columns=[
	{
		header:GO.lang.strDay,
		dataIndex: 'day'
	},
	{
		header:GO.lang.strTime,
		dataIndex: 'time',
		width:100,
		align:'right',
		groupable:false
	},
	{
		id:'summary-calendar-name-heading',
		header:GO.lang.strName,
		dataIndex: 'name',
		renderer:function(value, p, record){
			p.attr = 'ext:qtip="'+Ext.util.Format.htmlEncode(GO.calendar.formatQtip(record.data))+'"';
			return value;
		},
		groupable:false
	},{
		header:GO.calendar.lang.calendar,
		dataIndex: 'calendar_name',
		width:140
	}];
		
	config.view=  new Ext.grid.GroupingView({
		scrollOffset: 2,
		hideGroupedColumn:true,
		groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "'+GO.lang.items+'" : "'+GO.lang.item+'"]})',
		emptyText: GO.calendar.lang.noAppointmentsToDisplay,
		showGroupName:false
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	config.autoHeight=true;
	
	GO.calendar.SummaryGroupPanel.superclass.constructor.call(this, config);

//with auto expand column this works better otherwise you'll get a big scrollbar
/*this.store.on('load', function(){
		this.addClass('go-grid3-hide-headers');
	}, this, {single:true})*/
	
};


Ext.extend(GO.calendar.SummaryGroupPanel, Ext.grid.GridPanel, {
	
		
	afterRender : function()
	{
		GO.calendar.SummaryGroupPanel.superclass.afterRender.call(this);

		GO.dialogListeners.add('event',{
			save:function(){
				this.store.reload()
			},
			scope:this
		});		

		this.on("rowdblclick", function(grid, rowClicked, e){

			var record = grid.store.getAt(rowClicked);

			if(record.data.contact_id)
			{
				GO.linkHandlers["GO\\Addressbook\\Model\\Contact"].call(this, record.data.contact_id);
			}else
			{				
				GO.calendar.showEventDialog({
					event_id: record.data.event_id
				});
			}
		}, this);
		
		Ext.TaskMgr.start({
			run: function(){this.store.load();},
			scope:this,
			interval:900000
		});  
	}
	
});

GO.mainLayout.onReady(function(){
	
	if(GO.summary)
	{
		var calGrid = new GO.calendar.SummaryGroupPanel({
			//state causes it to load: id: 'summary-calendar-grid'
		});
		
		GO.summary.portlets['portlet-calendar']=new GO.summary.Portlet({
			id: 'portlet-calendar',
			//iconCls: 'go-module-icon-calendar',
			title: GO.calendar.lang.appointments,
			layout:'fit',
			tools: [{
				id: 'gear',
				handler: function(){
					if(!this.selectCalendarWin)
					{
						this.selectCalendarWin = new GO.base.model.multiselect.dialog({
							url:'calendar/portlet',
							columns:[{ header: GO.lang['strName'], dataIndex: 'name', sortable: true }],
							fields:['id','name'],
							title:GO.calendar.lang.visibleCalendars,
							model_id:GO.settings.user_id,
							listeners:{
								hide:function(){
									calGrid.store.reload();
								},
								scope:this
							}
						});
					}
					this.selectCalendarWin.show();
					
//					if(!this.manageCalsWindow)
//					{
//						this.manageCalsWindow = new Ext.Window({
//							layout:'fit',
//							items:this.PortletSettings =  new GO.calendar.PortletSettings(),
//							width:700,
//							height:400,
//							title:GO.calendar.lang.visibleCalendars,
//							closeAction:'hide',
//							buttons:[{
//								text: GO.lang.cmdSave,
//								handler: function(){
//									var params={
//										'task' : 'save_portlet'
//									};
//									if(this.PortletSettings.store.loaded){
//										params['calendars']=Ext.encode(this.PortletSettings.getGridData());
//									}
//									Ext.Ajax.request({
//										url: GO.settings.modules.calendar.url+'action.php',
//										params: params,
//										callback: function(options, success, response){
//											if(!success)
//											{
//												Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strRequestError']);
//											}else
//											{
//												//var responseParams = Ext.decode(response.responseText);
//												this.PortletSettings.store.reload();
//												this.manageCalsWindow.hide();
//
//												calGrid.store.reload();
//											}
//										},
//										scope:this
//									});
//								},
//								scope: this
//							}],
//							listeners:{
//								show: function(){
//									if(!this.PortletSettings.store.loaded)
//									{
//										this.PortletSettings.store.load();
//									}
//								},
//								scope:this
//							}
//						});
//					}
//					this.manageCalsWindow.show();
				}
			},{
				id:'close',
				handler: function(e, target, panel){
					panel.removePortlet();
				}
			}],
			items: calGrid,
			autoHeight:true
			
		});
	}
});

/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: ParticipantsPanel.js 19784 2016-01-26 13:56:16Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.Participant = Ext.data.Record.create([
// the "name" below matches the tag name to read, except "availDate"
// which is mapped to the tag "availability"
{
	name : 'id',
	type : 'string'
}, {
	name : 'name',
	type : 'string'
}, {
	name : 'email',
	type : 'string'
}, {
	name : 'create_permission',
	type : 'string'
},{
	name : 'available',
	type : 'string'
}, {
	name : 'status',
	type : 'string'
}, {
	name : 'is_organizer',
	type : 'int'
}

]);

GO.calendar.ParticipantsPanel = function(eventDialog, config) {

	this.eventDialog = eventDialog;

	if (!config) {
		config = {};
	}

	config.hideMode = 'offsets';

	config.store = new GO.data.JsonStore({
		url : GO.url('calendar/participant/store'),
		baseParams : {
			task : "participants"
		},
		fields : ['id', 'name', 'email', 'available','status', 'user_id', 'contact_id','is_organizer','create_permission']
	});
		
	var tbar = [{
		iconCls : 'btn-add',
		text : GO.lang.cmdAdd,
		cls : 'x-btn-text-icon',
		handler : function() {
			this.showAddParticipantsDialog();
		},
		scope : this
	}, {
		iconCls : 'btn-delete',
		text : GO.lang.cmdDelete,
		cls : 'x-btn-text-icon',
		handler : function() {
			this.gridPanel.deleteSelected();
		},
		scope : this
	}];

	if(GO.addressbook){
		this.selectContact = new GO.addressbook.SelectContact ({
			name: 'quick_add_contact',
			anchor: '100%',
			fieldLabel:GO.lang.cmdAdd,
			remoteSort: true,
			requireEmail:true
		});

		this.selectContact.on('select', function(combo, record)
		{
			if(record.data.go_user_id){
				GO.request({
						url:"calendar/participant/getUsers",
						params:{
							users: Ext.encode([record.data.go_user_id]),
							start_time : this.eventDialog.getStartDate().format('U'),
							end_time : this.eventDialog.getEndDate().format('U')
						},
						success:function(response, options, result){
							this.addParticipants(result);
						},
						scope:this
					});					
			}else
			{
				GO.request({
					url:"calendar/participant/getContacts",
					params:{
						contacts: Ext.encode([record.data.id]),
						start_time : this.eventDialog.getStartDate().format('U'),
						end_time : this.eventDialog.getEndDate().format('U')
					},
					success:function(response, options, result){
						this.addParticipants(result);
					},
					scope:this
				});	
			}
			combo.reset();
		}, this);

		this.selectContactPanel = new Ext.Panel({
			border : true,
			region:'north',
			height:30,
			bodyStyle:'padding:3px',
			layout:'form',
			items:[this.selectContact]
		});
	}
	
	this.gridPanel = new GO.grid.GridPanel(
	{
		layout:'fit',
		split:true,
		store: config.store,		
		region:'center',
		columns : [{
			header : GO.lang.strName,
			dataIndex : 'name'
		}, {
			header : GO.lang.strEmail,
			dataIndex : 'email'
		}, {
			header : GO.lang.strStatus,
			dataIndex : 'status',
			renderer : function(v) {
				switch (v) {
					case 'TENTATIVE' :
						return GO.calendar.lang.tentative;
						break;
						
					case 'DECLINED' :
						return GO.calendar.lang.declined;
						break;

					case 'ACCEPTED' :
						return GO.calendar.lang.accepted;
						break;

					case 'NEEDS-ACTION' :
						return GO.calendar.lang.notRespondedYet;
						break;
				}
			}
		}, {
			header : GO.lang.strAvailable,
			dataIndex : 'available',
			renderer : function(v) {

				var className = 'img-unknown';
				if(v!='?')
					className = v ? 'img-available' : 'img-unavailable';
				
				return '<div class="' + className + '"></div>';
			}
		}, {
			header : GO.calendar.lang.createPermission,
			dataIndex : 'create_permission',
			width:140,
			renderer : function(v) {

				var className = v ? 'img-available' : 'img-unavailable';
				
				return '<div class="' + className + '"></div>';
			}
		}, {
			header : GO.calendar.lang.isOrganizer,
			dataIndex : 'is_organizer',
			renderer : function(v) {
				var className = v ? 'img-available' : 'img-unavailable';		

				return '<div class="' + className + '"></div>';
			}
		}],
		view : new Ext.grid.GridView({
			autoFill : true,
			forceFit : true
		}),
		loadMask : {
			msg : GO.lang.waitMsgLoad
		},
		sm : new Ext.grid.RowSelectionModel(),
		deleteSelected : function(){
			var selectedRows = this.selModel.getSelections();
			for (var i = 0; i < selectedRows.length; i++) {
				selectedRows[i].commit();
				
				if(selectedRows[i].data.is_organizer){
					alert(GO.calendar.lang.cantRemoveOrganizer);
					return;
				}
				
				this.store.remove(selectedRows[i]);
			}
		}
	});
		
	
	Ext.apply(config, {
		title : GO.calendar.lang.participants,
		border : false,
		tbar:tbar,
		layout : GO.addressbook ? 'border' : 'fit',
		items: GO.addressbook ? [this.selectContactPanel, this.gridPanel] : [this.gridPanel]
	});

	config.store.setDefaultSort('name', 'ASC');

	GO.calendar.ParticipantsPanel.superclass.constructor.call(this, config);

};

Ext.extend(GO.calendar.ParticipantsPanel, Ext.Panel, {

	event_id : 0,
	
	newId: 0,
	
	loaded : false,

	/*
	 * afterRender : function() {
	 * GO.calendar.ParticipantsPanel.superclass.afterRender.call(this);
	 * 
	 * if(this.store.baseParams.package_id>0) { this.store.load(); }
	 * this.loaded=true; },
	 */

	getGridData : function(){
		return this.gridPanel.getGridData();
	},
	
	setEventId : function(event_id) {
		this.event_id = this.store.baseParams.event_id = event_id;
		this.store.loaded = false;
		if(this.event_id==0)
		{
			this.store.removeAll();
		}
		this.newId=0;		
		//this.inviteCheckbox.setValue(false);
//		this.importCheckbox.setValue(false);

//		if(this.isVisible()){
//			this.store.reload();
//		}
	},
	
//	onShow : function() {
//		if (!this.store.loaded) {
//			if(this.store.baseParams.event_id > 0)
//			{
//				this.store.load();
//			}else
//			{
//				this.addDefaultParticipant();
//			}			
//		}
//		GO.calendar.ParticipantsPanel.superclass.onShow.call(this);
//	},
	
	invitationRequired : function(){
		//invitation is required if there's a participant that is not the current user.
		
		if(this.store.getCount()>1)
			return true;
		
		var records = this.store.getRange();
		for(var i=0;i<records.length;i++)
		{
			if(!records[i].data.is_organizer)
				return true;
		}
	
		return false;
		
	},

	showAddParticipantsDialog : function() {
		/*if (!GO.addressbook) {
			var tpl = new Ext.XTemplate(GO.lang.moduleRequired);
			Ext.Msg.alert(GO.lang.strError, tpl.apply({
				module : GO.calendar.lang.addressbook
			}));
			return false;
		}*/
		if (!this.addParticipantsDialog) {
			this.addParticipantsDialog = new GO.dialog.SelectEmail({
				handler : function(grid, type) {
				
					if (grid.selModel.selections.keys.length > 0) {

						var selections = grid.selModel.getSelections();			
						
						var ids=[];
						for (var i=0; i<selections.length; i++) {
							ids.push(selections[i].data.id);
						}
						switch(type){
							
							case 'users':								
								

								GO.request({
									url:"calendar/participant/getUsers",
									params:{
										users: Ext.encode(ids),
										start_time : this.eventDialog.getStartDate().format('U'),
										end_time : this.eventDialog.getEndDate().format('U')
									},
									success:function(response, options, result){
										this.addParticipants(result);
									},
									scope:this
								});								
							break;
							
							case 'contacts':
								GO.request({
									url:"calendar/participant/getContacts",
									params:{
										contacts: Ext.encode(ids),
										start_time : this.eventDialog.getStartDate().format('U'),
										end_time : this.eventDialog.getEndDate().format('U')
									},
									success:function(response, options, result){
										this.addParticipants(result);
									},
									scope:this
								});	
								break;
								
							case 'companies':
								GO.request({
									url:"calendar/participant/getCompanies",
									params:{
										companies: Ext.encode(ids),
										start_time : this.eventDialog.getStartDate().format('U'),
										end_time : this.eventDialog.getEndDate().format('U')
									},
									success:function(response, options, result){
										this.addParticipants(result);
									},
									scope:this
								});	
								break;
								
							case 'mailings':
								GO.request({
									url:"calendar/participant/getAddresslists",
									params:{
										addresslists: Ext.encode(ids),
										start_time : this.eventDialog.getStartDate().format('U'),
										end_time : this.eventDialog.getEndDate().format('U')
									},
									success:function(response, options, result){
										this.addParticipants(result);
									},
									scope:this
								});	
								break;							
								
							case 'usergroups':
								GO.request({
									url:"calendar/participant/getUserGroups",
									params:{
										groups: Ext.encode(ids),
										start_time : this.eventDialog.getStartDate().format('U'),
										end_time : this.eventDialog.getEndDate().format('U')
									},
									success:function(response, options, result){
										this.addParticipants(result);
									},
									scope:this
								});				
								
								break;
							
						}
					
					}
				},
				scope : this
			});
		}
		this.addParticipantsDialog.show();
	},
	
	
	addParticipants : function(result){		
		var filtered=[];
		for(var i=0;i<result.results.length;i++){
			var email = result.results[i].email;
			var record = this.store.find("email", email);
			if(record==-1){
				filtered.push(result.results[i]);
			}
		}
		result.results=filtered;
		this.store.loadData(result, true);
	},
	
	reloadOrganizer : function(){
		
		var calendar_id = this.eventDialog.selectCalendar.getValue();
		if(!calendar_id)
			return;
		
		GO.request({
			maskEl:this.eventDialog.win.getEl(),
			url :'calendar/participant/loadOrganizer',
			params : {
				calendar_id : calendar_id,
				start_time : this.eventDialog.getStartDate().format('U'),
				end_time : this.eventDialog.getEndDate().format('U')
			},
			success : function(options, response, result) {
			
				var index = this.store.find("is_organizer", true);
				
				if(this.store.getCount()>1){
					//with more then one participant don't remove any participant.
					//with only one organizer the user didn't make any changes so we can replace it.
					var record = this.store.getAt(index);
					record.set('is_organizer',false);				
				}else
				{
					this.store.removeAt(index);
				}
				
				var index = this.store.find("email", result.organizer.email);
				if(index>-1)
					this.store.removeAt(index);
			
				this.store.loadData({results:[result.organizer]}, true);
				
			},
			scope : this
		});
	},
	
	reloadAvailability : function(){

		GO.request({
			url : "calendar/participant/reload",
			params : {
				event_id:this.event_id,
				participants : Ext.encode(this.getGridData()),
				start_time : this.eventDialog.getStartDate().format('U'),
				end_time : this.eventDialog.getEndDate().format('U')
			},
			success : function(options, response, result) {
				for (var i = 0; i < result.results.length; i++) {
					this.store.getAt(i).set('available', result.results[i]['available']);
				}
				this.store.commitChanges();
			},
			scope : this
		});
		
	},
	
	// Return array with name, email and user_id
	getParticipantData : function(){
		var records = this.store.getRange();
		var data = [];
		for (var i = 0; i < records.length; i++) {
			var participant = {};
			participant.name = records[i].get('name')
			participant.email = records[i].get('email');
			participant.user_id = records[i].get('user_id');
			data.push(participant);
		}
		return data;
	},
	
	getParticipantEmails : function() {
		var records = this.store.getRange();
		var emails = [];
		for (var i = 0; i < records.length; i++) {
			emails.push(records[i].get('email'));
		}
		return emails;
	},
					
	getParticipantNames : function() {
		var records = this.store.getRange();
		var names = [];
		for (var i = 0; i < records.length; i++) {
			names.push(records[i].get('name'));
		}
		return names;
	}

});

GO.calendar.AvailabilityCheckWindow = function(config) {
	config = config || {};

	var tpl = new Ext.XTemplate(
			'<div id="availability_date"></div>',
			'<table class="availability">',
			'<tr><td></td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("0", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("1", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("2", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("3", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("4", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("5", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("6", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("7", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("8", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("9", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("10", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("11", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("12", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("13", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("14", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("15", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("16", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("17", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("18", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("19", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("20", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("21", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("22", "G").format(GO.settings.time_format)
					+ '</td>',
			'<td colspan="4" class="availability_time">'
					+ Date.parseDate("23", "G").format(GO.settings.time_format)
					+ '</td>',

			'<tpl for=".">',
			'<tr>',
			'<td>{name}</td>',
			'<tpl if="this.hasFreeBusy(freebusy)">',
			'<tpl for="freebusy">',
			'<td id="time{time}"class="time {[values.busy == 1 ? "busy" : "free"]}"></td>',
			'</tpl>', '</tpl>', '<tpl if="!this.hasFreeBusy(freebusy)">',
			'<td colspan="96">' + GO.calendar.lang.noInformationAvailable
					+ '</td>', '</tpl>', '</tr>', '</tpl>', '</table>', {
				hasFreeBusy : function(freebusy) {
					return freebusy.length > 0;
				}
			});

	this.dataView = new Ext.DataView({
				store : new GO.data.JsonStore({
							url : GO.url('calendar/participant/freeBusyInfo'),						
							fields : ['name', 'email', 'freebusy'],
							baseParams : {
								event_id:0,
								date: '',
								resourceIds: '',
								participantData : []
							}
						}),
				tpl : tpl,
				autoHeight : true,
				emptyText : GO.calendar.lang.noParticipantsToDisplay,
				itemSelector : 'td.time',
				overClass : 'time-over'
			});

	this.dataView.on('click', function(dataview, index, node) {
				this.fireEvent('select', dataview, index, node);
			}, this);

	this.dataView.store.on('load', function() {
				Ext.get("availability_date")
						.update(this.dataView.store.baseParams.date);
			}, this);

	Ext.apply(config, {
				layout : 'fit',
				modal : false,
				height : 400,
				width : 900,
				closeAction : 'hide',
				title : GO.lang.strAvailability,
				items : {
					layout : 'fit',
					cls : 'go-form-panel',
					waitMsgTarget : true,
					items : this.dataView,
					autoScroll : true
				},
				tbar : [{
					iconCls : 'btn-left-arrow',
					text : GO.calendar.lang.previousDay,
					cls : 'x-btn-text-icon',
					handler : function() {
						var date = Date.parseDate(
								this.dataView.store.baseParams.date,
								GO.settings.date_format).add(Date.DAY, -1);
						this.dataView.store.baseParams.date = date
								.format(GO.settings.date_format);
						this.dataView.store.load();
					},
					scope : this
				}, {
					iconCls : 'btn-right-arrow',
					text : GO.calendar.lang.nextDay,
					cls : 'x-btn-text-icon',
					handler : function() {
						var date = Date.parseDate(
								this.dataView.store.baseParams.date,
								GO.settings.date_format).add(Date.DAY, 1);
						this.dataView.store.baseParams.date = date
								.format(GO.settings.date_format);
						this.dataView.store.load();
					},
					scope : this
				}],
				buttons : [{
							text : GO.lang.cmdClose,
							handler : function() {
								this.hide();
							},
							scope : this
						}]
			});

	GO.calendar.AvailabilityCheckWindow.superclass.constructor.call(this, config);
	
	this.addEvents({'select' : true});
}

Ext.extend(GO.calendar.AvailabilityCheckWindow, GO.Window, {

		show : function(config){
			
			this.dataView.store.baseParams.participantData=config.participantData;
			this.dataView.store.baseParams.date=config.date;
			this.dataView.store.baseParams.event_id=config.event_id;
			this.dataView.store.baseParams.resourceIds=config.resourceIds;
			this.dataView.store.load();
			
			GO.calendar.AvailabilityCheckWindow.superclass.show.call(this);
		}

});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @version $Id: SelectCalendar.js 17032 2014-03-12 09:41:25Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.SelectCalendar = function(config){

	config = config || {};

	if(!config.hiddenName)
		config.hiddenName='calendar_id';

	if(!config.fieldLabel)
	{
		config.fieldLabel=GO.calendar.lang.calendar;
	}

	Ext.apply(this, config);


	this.store = new GO.data.JsonStore({
		url: GO.url("calendar/calendar/calendarsWithGroup"),
		baseParams:{
			permissionLevel:GO.permissionLevels.create
		},
		fields:['id','name', 'group_name', 'user_name', 'group_id', 'customfields','permissionLevel'],
		remoteSort:true
	});

	if(!config.emptyText)
		this.emptyText=GO.lang.strPleaseSelect;

	GO.calendar.SelectCalendar.superclass.constructor.call(this,{
		displayField: 'name',
		valueField: 'id',
		triggerAction:'all',
		editable: true,
		selectOnFocus:true,
		forceSelection: true,
		typeAhead: true,
		pageSize:parseInt(GO.settings['max_rows_list']),
		mode:'remote',
        tpl: new Ext.XTemplate(
            '<tpl for=".">',
            '<tpl if="this.group_name != values.group_name">',
            '<tpl exec="this.group_name = values.group_name"></tpl>',
            '<h1>{group_name}</h1>',
            '</tpl>',
            '<div class="x-combo-list-item">{name}</div>',
            '</tpl>'
    	)
	});

}
Ext.extend(GO.calendar.SelectCalendar, GO.form.ComboBoxReset, {

});


GO.calendar.GroupsGrid = function(config){

	if(!config)
	{
		config = {};
	}

	config.title = GO.calendar.lang.resource_groups;
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.paging=true;
    
	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
		{
			header: GO.lang.strName,
			dataIndex: 'name'
		},{
			header: GO.lang.strOwner,
			dataIndex: 'user_name',
			sortable: false
		}]
	});

	
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']		
	});

	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
    
	config.tbar=[{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function()
		{
			GO.calendar.groupDialog.show();
		},
		scope: this
	},{
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function()
		{
			this.deleteSelected();
		},
		scope: this
	},
	'-'
	,
		this.searchField = new GO.form.SearchField({
			store: config.store,
			width:150,
			emptyText: GO.lang.strSearch
		})
	];

	GO.calendar.GroupsGrid.superclass.constructor.call(this, config);

	this.on('rowdblclick', function(grid, rowIndex)
	{
		var record = grid.getStore().getAt(rowIndex);	
		GO.calendar.groupDialog.show(record.data.id);
	}, this);


	this.on('show', function(){
		if(!this.store.loaded)
		{
			this.store.load();
		}
	},this, {
		single:true
	});

};

Ext.extend(GO.calendar.GroupsGrid, GO.grid.GridPanel);

GO.calendar.GroupDialog = function(config) {

	if (!config) {
		config = {};
	}
    
	this.buildForm();
	var focusFirstField = function() {
		this.propertiesPanel.items.items[0].focus();
	};
    
	config.collapsible = true;
	config.maximizable = true;
	config.layout = 'fit';
	config.modal = false;
	config.resizable = false;
	config.width = 550;
	config.height = 450;
	config.closeAction = 'hide';
	config.title = GO.calendar.lang.resource_group;
	config.items = this.formPanel;
	config.focus = focusFirstField.createDelegate(this);
	config.buttons = [{
		text : GO.lang['cmdOk'],
		handler : function() {
			this.submitForm(true);
		},
		scope : this
	}, {
		text : GO.lang['cmdApply'],
		handler : function() {
			this.submitForm();
		},
		scope : this
	}, {
		text : GO.lang['cmdClose'],
		handler : function() {
			this.hide();
		},
		scope : this
	}];

	GO.calendar.GroupDialog.superclass.constructor.call(this, config);
	this.addEvents({
		'save' : true
	});
    
};

Ext.extend(GO.calendar.GroupDialog, GO.Window, {
	show : function(group_id, config)
	{
		if (!this.rendered)
		{
			this.render(Ext.getBody());
		}
		this.formPanel.form.reset();
		this.tabPanel.setActiveTab(0);
		if (!group_id)
		{
			group_id = 0;
		}
		this.setGroupId(group_id);
        
		if (this.group_id > 0)
		{
			this.formPanel.load({
				url : GO.url("calendar/group/load"),
				waitMsg : GO.lang['waitMsgLoad'],
				success : function(form, action)
				{
					this.groupAdminsPanel.setModelId(action.result.data.id);
					
					if(this.group_id == 1)
					{
						this.tabPanel.hideTabStripItem('permissions-panel');
						this.tabPanel.hideTabStripItem(this.groupAdminsPanel);
						this.setTitle(GO.calendar.lang.calendar_group);
					}else
					{
						this.tabPanel.unhideTabStripItem('permissions-panel');
						this.tabPanel.unhideTabStripItem(this.groupAdminsPanel);
						
						
						this.setTitle(GO.calendar.lang.resource_group);
					}

					GO.calendar.GroupDialog.superclass.show.call(this);
				},
				failure : function(form, action)
				{
					GO.errorDialog.show(action.result.feedback)
				},
				scope : this
			});            
		} else
{			
			this.groupAdminsPanel.setModelId(0);
			GO.calendar.GroupDialog.superclass.show.call(this);
		}
	},
	setGroupId : function(group_id)
	{
		if(GO.customfields)
			this.disableCategoriesPanel.setModel(group_id,"GO\\Calendar\\Model\\Event");
		
		this.formPanel.form.baseParams['id'] = group_id;
		this.group_id = group_id;
	},
	submitForm : function(hide)
	{
		this.formPanel.form.submit({
			url : GO.url("calendar/group/submit"),			
			waitMsg : GO.lang['waitMsgSave'],
			success : function(form, action)
			{
				if (action.result.id)
				{
					this.groupAdminsPanel.setModelId(action.result.id);
					this.setGroupId(action.result.id);
				}
		
				var fields = (this.group_id == 1) ? action.result.fields : false;
				
				this.fireEvent('save', this, this.group_id, fields);
				
				if (hide)
				{
					this.hide();
				}
			},
			failure : function(form, action)
			{
				if (action.failureType == 'client')
				{
					Ext.MessageBox.alert(GO.lang['strError'],
						GO.lang['strErrorsInForm']);
				} else
{
					Ext.MessageBox.alert(GO.lang['strError'],
						action.result.feedback);
				}
			},
			scope : this
		});
	},
	buildForm : function()
	{
		this.propertiesPanel = new Ext.Panel({
			title : GO.lang['strProperties'],
			cls : 'go-form-panel',
			layout : 'form',
			autoScroll : true,
			items : [{
				xtype : 'textfield',
				name : 'name',
				anchor : '100%',
				fieldLabel : GO.lang.strName
			},{
				xtype:'xcheckbox',
				name:'show_not_as_busy',
				hideLabel: true,
				boxLabel:GO.calendar.lang.showNotBusy
			}]
		});


		var items = [this.propertiesPanel];

		this.groupAdminsPanel = new GO.base.model.multiselect.panel({
			title: GO.calendar.lang.admins,
			url:'calendar/groupAdmin',
			columns:[
				{header: GO.lang.strTitle, dataIndex: 'name'},
				{header:GO.lang.strEmail,dataIndex: 'email'}
			],
			fields:['id','name','email'],
			model_id:0
		});

		items.push(this.groupAdminsPanel);
		
		if(GO.customfields){
			this.disableCategoriesPanel = new GO.customfields.DisableCategoriesPanel();
			items.push(this.disableCategoriesPanel);
		}
        
		this.tabPanel = new Ext.TabPanel({
			activeTab : 0,
			deferredRender : false,
			border : false,
			items : items,
			anchor : '100% 100%'
		});
        
		this.formPanel = new Ext.form.FormPanel({
			waitMsgTarget : true,			
			border : false,
			baseParams : {
				id:0
			},
			items : this.tabPanel
		});        
	}
    
});


GO.calendar.ResourcesGrid = function(config){

	if(!config)
	{
		config = {};
	}

	config.title = GO.calendar.lang.resources;
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.paging=true;

	var columnModel =  new Ext.grid.ColumnModel([
	{
		header:GO.lang.strName,
		dataIndex: 'name',
		id:'name',
		sortable:true
	},{
		header:GO.calendar.lang.group,
		dataIndex: 'group_name',
		id:'group_name',
		hidden:true
	}]);

	config.cm=columnModel;
	config.view=new Ext.grid.GroupingView({
		autoFill: true,
		forceFit:true,
		groupTextTpl: '{text}',
		emptyText: GO.lang['strNoItems']
	});

	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	config.tbar=[{
		iconCls: 'btn-add',
		text: GO.lang.cmdAdd,
		disabled: !GO.settings.modules.calendar.write_permission,
		cls: 'x-btn-text-icon',
		handler: function(){
			GO.calendar.calendarDialog.show(0, true);
		},
		scope: this
	},{
		iconCls: 'btn-delete',
		disabled: !GO.settings.modules.calendar.write_permission,
		text: GO.lang.cmdDelete,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.deleteSelected();
		},
		scope:this
	},
	'-'
	,
		this.searchField = new GO.form.SearchField({
			store: config.store,
			width:150,
			emptyText: GO.lang.strSearch
		})
	];


	GO.calendar.ResourcesGrid.superclass.constructor.call(this, config);

	this.on('rowdblclick', function(grid, rowIndex)
	{
		var record = grid.getStore().getAt(rowIndex);
		GO.calendar.calendarDialog.show(record.data.id, true);
	}, this);
    
	this.on('show', function(){
		this.store.load();
	},this, {
		single:true
	});
    
};

Ext.extend(GO.calendar.ResourcesGrid, GO.grid.GridPanel);

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: PortletSettings.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Danny Wijffelaars <dwijffelaars@intermesh.nl>
 */
GO.calendar.PortletSettings = function(config){
	if(!config)
	{
		config = {};
	}
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;

	var CheckColumn = new GO.grid.CheckColumn({
        header: GO.calendar.lang.visible,
        dataIndex: 'visible',
        width: 55,
        disabled_field:''
    });

	var fields ={
		fields:['name', 'calendar_id'],
		columns:[{
			header: GO.lang.strTitle,
			dataIndex: 'name'
		},
		CheckColumn
	]
	};
	config.store = new GO.data.JsonStore({
		url: GO.settings.modules.calendar.url+ 'json.php',
		baseParams: {
			task: 'settings'
		},
		root: 'results',
		id: 'calendar_id',
		totalProperty:'total',
		fields:['calendar_id', 'name', 'visible'],
		remoteSort: true
	});

	var columnModel =  new Ext.grid.ColumnModel(fields.columns);
	
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	config.plugins = [CheckColumn];

	GO.calendar.PortletSettings.superclass.constructor.call(this, config);
};
Ext.extend(GO.calendar.PortletSettings, Ext.grid.GridPanel,{

	getGridData : function(){
		var data = {};

		for (var i = 0; i < this.store.data.items.length;  i++)
		{
			var r = this.store.data.items[i].data;

			data[i]={};

			for(var key in r)
			{
				data[i][key]=r[key];
			}
		}
		return data;
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: EventPanel.js 19228 2015-06-24 12:36:41Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.calendar.EventPanel = Ext.extend(GO.DisplayPanel,{
	model_name : "GO\\Calendar\\Model\\Event",

	stateId : 'cal-event-panel',

	editGoDialogId : 'event',

	editHandler : function(){		
		GO.calendar.showEventDialog({event_id: this.link_id});
	},
	
	updateToolbar : function(){
		
		GO.calendar.EventPanel.superclass.updateToolbar.call(this);
		
		
		this.editButton.setDisabled(!this.data.is_organizer);
		
	},
	
	initComponent : function(){
		
		this.loadUrl=('calendar/event/display');

		this.template =
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0">'+
//					'<tr>'+
//						'<td colspan="2" class="display-panel-heading">'+GO.calendar.lang.event+': {name}</td>'+
//					'</tr>'+
//					'<tr>'+
//						'<td colspan="2"><table><tr><td>'+GO.calendar.lang.calendar+': </td><td>{calendar_name}</td></tr></table></td>'+
//					'</tr>'+
					'<tr>'+
						'<td colspan="2">{event_html}</td>'+
					'</tr>'+					
				'</table>';

		if(GO.customfields)
		{
			this.template +=GO.customfields.displayPanelTemplate;
		}

		if(GO.tasks)
			this.template +=GO.tasks.TaskTemplate;

		if(GO.workflow){
			this.template +=GO.workflow.WorkflowTemplate;
		}
		
		if(GO.calendar)
			this.template += GO.calendar.EventTemplate;

		this.template +=GO.linksTemplate;		
		
		if(GO.lists)
			this.template += GO.lists.ListTemplate;

		if(GO.files)
		{
			Ext.apply(this.templateConfig, GO.files.filesTemplateConfig);
			this.template += GO.files.filesTemplate;
		}
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);


		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}

		GO.calendar.EventPanel.superclass.initComponent.call(this);
	}
});

GO.calendar.CategoriesGrid = Ext.extend(GO.grid.GridPanel,{
	changed : false,
	
	initComponent : function(){
		
		Ext.apply(this,{
			standardTbar:true,
			//store: GO.calendar.categoriesStore,
//			new GO.data.JsonStore({
//				url : GO.url('calendar/category/store'),
//				baseParams : {
//					calendar_id:0
//				},
//				root : 'results',
//				totalProperty : 'total',
//				id : 'id',
//				fields : ['id', 'name','color','calendar_id'],
//				remoteSort : true
//			}),
			border: false,
			title:GO.calendar.lang.categories,
			layout:'fit',
			paging:true,
			view:new Ext.grid.GridView({
				autoFill: true,
				forceFit: true,
				emptyText: GO.lang['strNoItems']		
			}),
			cm:new Ext.grid.ColumnModel({
				defaults:{
					sortable:true
				},
				columns:[
          {
						header: GO.lang.strName,
						dataIndex: 'name'
          },{
						header: GO.lang.color,
						dataIndex: 'color',
						renderer: this.renderColor
          },{
            header: GO.calendar.lang.calendar,
						dataIndex: 'calendar_id',
						sortable: false,
						hidden:true
          }
        ]
			})
		});

		GO.calendar.CategoriesGrid.superclass.initComponent.call(this);
	},
	
	show : function(){
		GO.calendar.CategoriesGrid.superclass.show.call(this);
		this.store.load();
	},
	
	setCalendarId : function(id){
		this.store.baseParams.calendar_id=id;
		this.setDisabled(id==0);
	},
	
	dblClick : function(grid, record, rowIndex){
		this.showCategoryDialog(record.id);
	},
	
	btnAdd : function(){				
		this.showCategoryDialog();	  	
	},
	showCategoryDialog : function(id){
		if(!this.categoryDialog){
			this.categoryDialog = new GO.calendar.CategoryDialog();

			this.categoryDialog.on('save', function(){   
				this.store.load();
				this.changed=true;	    			    			
			}, this);	
		}
		this.categoryDialog.setCalendarId(this.store.baseParams.calendar_id);
		this.categoryDialog.show(id);	  
	},
	deleteSelected : function(){
		GO.calendar.CategoriesGrid.superclass.deleteSelected.call(this);
		this.changed=true;
	},
	renderColor : function(val){
				return '<div style="display:inline-block; width:38px; height:14px; background-color:#'+val+'; margin-right:4px;"></div>';
	}
});


//
//
//
//GO.calendar.CategoriesGrid = function(config){
//
//	if(!config)
//		config = {};
//
//	config.title = GO.calendar.lang.categories;
//	config.layout='fit';
//	config.autoScroll=true;
//	config.split=true;
//	config.paging=true;
//
//	var columnModel =  new Ext.grid.ColumnModel({
//		defaults:{
//			sortable:true
//		},
//		columns:[
//		{
//			header: GO.lang.strName,
//			dataIndex: 'name'
//		},{
//			header: GO.lang.strOwner,
//			dataIndex: 'user_name',
//			sortable: false
//		}]
//	});
//
//
//	config.cm=columnModel;
//	config.view=new Ext.grid.GridView({
//		autoFill: true,
//		forceFit: true,
//		emptyText: GO.lang['strNoItems']
//	});
//
//	config.sm=new Ext.grid.RowSelectionModel();
//	config.loadMask=true;
//
//	config.tbar=[{
//		iconCls: 'btn-add',
//		text: GO.lang['cmdAdd'],
//		cls: 'x-btn-text-icon',
//		handler: function()
//		{								
//			GO.calendar.categoryDialog.show(0);					
//		},
//		scope: this
//	},{
//		iconCls: 'btn-delete',
//		text: GO.lang['cmdDelete'],
//		cls: 'x-btn-text-icon',
//		handler: function()
//		{
//			this.deleteSelected();
//		},
//		scope: this
//	}];
//
//	GO.calendar.CategoriesGrid.superclass.constructor.call(this, config);
//
//	this.on('rowdblclick', function(grid, rowIndex)
//	{
//		var record = grid.getStore().getAt(rowIndex);		
//		if(GO.settings.has_admin_permission || (record.data.user_id > 0))
//		{
//			GO.calendar.categoryDialog.show(record);
//		}
//	}, this);
//
//	this.on('show', function(){
//		if(!this.store.loaded)
//		{
//			this.store.load();
//		}
//	},this, {
//		single:true
//	});
//
//};
//
//Ext.extend(GO.calendar.CategoriesGrid, GO.grid.GridPanel);

GO.calendar.CategoryDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	hidePermissions : true,
	
	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'category',
			title:GO.calendar.lang.category,
			formControllerUrl: 'calendar/category',
      width: 550,
      height: 600
		});
		
		GO.calendar.CategoryDialog.superclass.initComponent.call(this);	
	},
	
	buildForm : function () {
		
		this.colorField = new GO.form.ColorField({
			fieldLabel : GO.lang.color,
			value : 'EBF1E2',
			anchor:'50%',
			name : 'color',
			colors : [
			'EBF1E2',
			'95C5D3',
			'FFFF99',
			'A68340',
			'82BA80',
			'F0AE67',
			'66FF99',
			'CC0099',
			'CC99FF',
			'996600',
			'999900',
			'FF0000',
			'FF6600',
			'FFFF00',
			'FF9966',
			'FF9900',
			/* Line 1 */
			'FB0467',
			'D52A6F',
			'CC3370',
			'C43B72',
			'BB4474',
			'B34D75',
			'AA5577',
			'A25E79',
			/* Line 2 */
			'FF00CC',
			'D52AB3',
			'CC33AD',
			'C43BA8',
			'BB44A3',
			'B34D9E',
			'AA5599',
			'A25E94',
			/* Line 3 */
			'CC00FF',
			'B32AD5',
			'AD33CC',
			'A83BC4',
			'A344BB',
			'9E4DB3',
			'9955AA',
			'945EA2',
			/* Line 4 */
			'6704FB',
			'6E26D9',
			'7033CC',
			'723BC4',
			'7444BB',
			'754DB3',
			'7755AA',
			'795EA2',
			/* Line 5 */
			'0404FB',
			'2626D9',
			'3333CC',
			'3B3BC4',
			'4444BB',
			'4D4DB3',
			'5555AA',
			'5E5EA2',
			/* Line 6 */
			'0066FF',
			'2A6ED5',
			'3370CC',
			'3B72C4',
			'4474BB',
			'4D75B3',
			'5577AA',
			'5E79A2',
			/* Line 7 */
			'00CCFF',
			'2AB2D5',
			'33ADCC',
			'3BA8C4',
			'44A3BB',
			'4D9EB3',
			'5599AA',
			'5E94A2',
			/* Line 8 */
			'00FFCC',
			'2AD5B2',
			'33CCAD',
			'3BC4A8',
			'44BBA3',
			'4DB39E',
			'55AA99',
			'5EA294',
			/* Line 9 */
			'00FF66',
			'2AD56F',
			'33CC70',
			'3BC472',
			'44BB74',
			'4DB375',
			'55AA77',
			'5EA279',
			/* Line 10 */
			'00FF00', '2AD52A',
			'33CC33',
			'3BC43B',
			'44BB44',
			'4DB34D',
			'55AA55',
			'5EA25E',
			/* Line 11 */
			'66FF00', '6ED52A', '70CC33',
			'72C43B',
			'74BB44',
			'75B34D',
			'77AA55',
			'79A25E',
			/* Line 12 */
			'CCFF00', 'B2D52A', 'ADCC33', 'A8C43B',
			'A3BB44',
			'9EB34D',
			'99AA55',
			'94A25E',
			/* Line 13 */
			'FFCC00', 'D5B32A', 'CCAD33', 'C4A83B',
			'BBA344', 'B39E4D',
			'AA9955',
			'A2945E',
			/* Line 14 */
			'FF6600', 'D56F2A', 'CC7033', 'C4723B',
			'BB7444', 'B3754D', 'AA7755',
			'A2795E',
			/* Line 15 */
			'FB0404', 'D52A2A', 'CC3333', 'C43B3B',
			'BB4444', 'B34D4D', 'AA5555', 'A25E5E',
			/* Line 16 */
			'FFFFFF', '949494', '808080', '6B6B6B',
			'545454', '404040', '292929', '000000']
		});
		
		
		this.propertiesPanel = new Ext.Panel({
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',
			layout:'form',
			items:[{
				xtype: 'textfield',
				fieldLabel: GO.lang['strName'],
				name: 'name',
				anchor:'95%',
				allowBlank:false
			},
			this.colorField
		]});

		this.addPanel(this.propertiesPanel);
		this.addPermissionsPanel(new GO.grid.PermissionsPanel({}));
	},
	
	setCalendarId : function(id){
		
		var hide = true;
		
		if(id == 0){
			hide = false;
		}
				
		this.hidePermissionsTab(hide);
		
		this.addBaseParam('calendar_id',id);
	},
	
	afterRender : function(){
		GO.calendar.CategoryDialog.superclass.afterRender.call(this);
				
		if(this.hidePermissions){
			this._tabPanel.hideTabStripItem(this.permissionsPanel);
		}
	},
	
	hidePermissionsTab : function(hide){
		
		this.hidePermissions = hide;

		if(hide){
			this._tabPanel.hideTabStripItem(this.permissionsPanel);
		} else {
			this._tabPanel.unhideTabStripItem(this.permissionsPanel);
		}
	}
});

GO.calendar.SelectDateDialog = function(config){

	if(!config)
	{
		config = {};
	}

	this.buildForm();

	var focusFirstField = function(){
		this.formPanel.items.items[0].focus();
	};

	config.layout='fit';
	config.modal=false;
	config.border=false;
	config.width=400;
	config.autoHeight=true;
	config.resizable=false;
	config.plain=true;
	config.shadow=false,
	config.title=GO.calendar.lang.copyEvent;
	config.closeAction='hide';
	config.items=this.formPanel;
	config.focus=focusFirstField.createDelegate(this);
	config.buttons=[{
		text:GO.lang['cmdOk'],
		handler: function()
		{
			this.beforeSubmit()
		},
		scope: this
	},{
		text:GO.lang['cmdClose'],
		handler: function()
		{
			this.hide()
		},
		scope: this
	}];

	GO.calendar.SelectDateDialog.superclass.constructor.call(this,config);

	this.addEvents({'updateEvent' : true});
}

Ext.extend(GO.calendar.SelectDateDialog, Ext.Window, {

	isCopy: false,
	event : null,
	repeats : false,
	offset : 0,
	view_id : 0,

	show : function(event, isCopy, repeats, view_id)
	{
		if(!this.rendered)
			this.render(Ext.getBody());

		this.event = event;

		this.isCopy = (isCopy) ? true : false;
		this.repeats = (repeats) ? true : false;
		this.view_id = (view_id) ? view_id : 0;

		var title = (this.isCopy) ? GO.calendar.lang.copyEvent : GO.calendar.lang.moveEvent;
		this.setTitle(title);

		this.datePicker.setValue(this.event.startDate.add(Date.DAY, 1));
		
		if (!this.event.read_only) {
			this.selectCalendar.setValue(this.event.calendar_id);
			this.selectCalendar.setRemoteText(this.event.calendar_name);
		}

		GO.calendar.SelectDateDialog.superclass.show.call(this);
	},
	beforeSubmit : function()
	{
		delete this.formPanel.form.baseParams.exception_for_event_id ;
		delete this.formPanel.form.baseParams.exception_date ;
		
		// use daylight saving times		
		this.offset = parseInt(this.datePicker.getValue().calculateDaysBetweenDates(new Date(this.event.startDate.clearTime())));
				
		// This one does not check daylight saving times
		//this.offset = Math.ceil((this.datePicker.getValue() - this.event.startDate) / (86400000));
		
		var calendar_id = this.selectCalendar.getValue();
		var update_calendar_id = (calendar_id != this.event.calendar_id) ? calendar_id : 0;
		if(update_calendar_id)
		{
			this.event.calendar_id = this.formPanel.form.baseParams.update_calendar_id = update_calendar_id;
		}
		
		this.formPanel.form.baseParams.id = this.event.event_id;
			this.formPanel.form.baseParams.offset_days = this.offset;
			
		if(this.isCopy)
		{
			this.formPanel.form.baseParams.duplicate = true;		
		}else
		{
			delete this.formPanel.form.baseParams.duplicate;			
			
			if(this.event.repeats && !this.repeats)
			{
				this.formPanel.form.baseParams.exception_for_event_id = this.event.event_id;
				this.formPanel.form.baseParams.exception_date = this.event.startDate.format("U");
			}
		}
		
		this.formPanel.form.baseParams.view_id = this.view_id;

		this.submitForm(update_calendar_id);
	},
	submitForm : function(update_calendar_id)
	{
		this.formPanel.form.submit(
		{
			waitMsg:GO.lang['waitMsgSave'],			
			success:function(form, action)
			{
				var new_event_id = (action.result.event_id) ? action.result.event_id : 0;

				var is_visible = (action.result.is_visible) ? action.result.is_visible : 0;


				this.fireEvent('updateEvent', this, new_event_id, is_visible);
				
				if(this.isCopy)
				{					
					delete(this.formPanel.form.baseParams.event_id);
					delete(this.formPanel.form.baseParams.offset);
				}else
				{
					delete(this.formPanel.form.baseParams.update_event_id);
					delete(this.formPanel.form.baseParams.offsetDays);

					if(this.formPanel.form.baseParams.repeats)
					{
						delete(this.formPanel.form.baseParams.repeats);
						delete(this.formPanel.form.baseParams.createException);
						delete(this.formPanel.form.baseParams.exceptionDate);
					}
				}
				if(update_calendar_id)
				{
					delete(this.formPanel.form.baseParams.update_calendar_id);					
				}				

				this.hide();
			},
			failure: function(form, action)
			{
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}else
				{
					error = action.result.feedback;
				}
				if(error)
				{
					Ext.MessageBox.alert(GO.lang['strError'], error);
				}
			},
			scope:this
		});
	},
	buildForm : function ()
	{
		this.datePicker = new Ext.DatePicker({
	    		xtype:'datepicker',
	    		format: GO.settings.date_format,
	    		fieldLabel:GO.lang.strDate
	    	});
		
		this.formPanel = new Ext.form.FormPanel({
			url: GO.url("calendar/event/submit"),
			baseParams:{},
			cls:'go-form-panel',
			labelWidth:75,
			waitMsgTarget:true,
			autoHeight:true,
			items:[
			{
				items:this.datePicker,
				width:220,
				style:'margin:auto;'
			},
			new GO.form.HtmlComponent({html:'<br />'}),
			this.selectCalendar = new GO.calendar.SelectCalendar({fieldLabel: GO.calendar.lang.calendar, anchor:'100%'})
			]
		});
	}
});

GO.calendar.RecurrenceDialog = function(config){

	if(!config)
	{
		config = {};
	}

	config.width=400;
	config.autoHeight=true;
	config.closeable=false;
	config.closeAction='hide';
	config.plain=true;
	config.border=false;
	config.closable=false;
	config.title=GO.calendar.lang.recurringEvent;
	config.modal=false;
	config.html=config.forDelete ? GO.calendar.lang.deleteRecurringEvent : GO.calendar.lang.editRecurringEvent;
	config.focus=function(){
		this.getFooterToolbar().items.get('single').focus();
	};
	config.buttons=[{
		itemId:'single',
		text: GO.calendar.lang.singleOccurence,
		handler: function()
		{
			this.fireEvent('single', this);
		},
		scope: this
	},{
		text: GO.calendar.lang.entireSeries,
		handler: function()
		{		
			this.fireEvent('entire', this);
		},
		scope: this
	},{
		text: GO.lang.cmdCancel,
		handler: function()
		{			
			this.fireEvent('cancel', this);
		},
		scope: this
	}]	

	GO.calendar.RecurrenceDialog.superclass.constructor.call(this,config);

	this.addEvents({
		'single' : true,
		'entire': true,
		'cancel': true
	});
}

Ext.extend(GO.calendar.RecurrenceDialog, Ext.Window, {

	show : function()
	{	
		GO.calendar.RecurrenceDialog.superclass.show.call(this);
	}
});

GO.calendar.ContextMenu = function(config){

	if(!config)
	{
		config = {};
	}

	config.items=[
	this.actionInfo = new Ext.menu.Item({
		iconCls: 'btn-properties',
		text:GO.calendar.lang.showInfo,
		cls: 'x-btn-text-icon',
		scope:this,
		handler: function()
		{
			this.showEventInfoDialog();
		}
	}),new Ext.menu.Separator(),
	this.actionCopy = new Ext.menu.Item({
		iconCls: 'btn-copy',
		text: GO.lang.copy,
		cls: 'x-btn-text-icon',
		scope:this,		
		disabled:false,
		handler: function()
		{
			this.showSelectDateDialog(true, false);
		}
	}),
	this.actionCut = new Ext.menu.Item({
		iconCls: 'btn-cut',
		text: GO.calendar.lang.move,
		cls: 'x-btn-text-icon',
		scope:this,
		disabled:true,
		handler: function()
		{
			if(this.event.repeats)
			{
				this.menuHandler();
			}else
			{
				this.showSelectDateDialog(false, false);
			}
		}
	}),new Ext.menu.Separator(),
	this.actionDelete = new Ext.menu.Item({
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		scope:this,
		disabled:true,
		handler: function()
		{
			this.fireEvent("deleteEvent", this);
		}
	}),'-',
	this.newMenuItem = new GO.NewMenuItem(),
	'-',
	this.actionExportAsIcs = new Ext.menu.Item({
		iconCls: 'btn-export',
		text: GO.calendar.lang['exportAsIcs'],
		cls: 'x-btn-text-icon',
		scope:this,
		handler: function()
		{
			if (!GO.util.empty(this.event) && this.event.event_id>0)
			window.open(GO.url('calendar/event/exportEventAsIcs')+'&event_id='+this.event.event_id);
		}
	})
	]

	if (GO.email) {
		this.actionCreateMail = new Ext.menu.Item({
			iconCls: 'btn-email',
			text:GO.calendar.lang.sendEmailParticipants,
			cls: 'x-btn-text-icon',
			scope:this,
			handler: function()
			{
				this.showCreateMailDialog();
			}
		});
		config.items.splice(1,0,this.actionCreateMail);
	}

	if(GO.timeregistration)
	{
		this.actionAddTimeRegistration = new Ext.menu.Item({
			text: GO.calendar.lang.addTimeRegistration,
			iconCls: 'go-menu-icon-timeregistration',
			cls: 'x-btn-text-icon',
			scope:this,
			handler: function()
			{
				this.showAddTimeRegistrationDialog();
			}
		});

		config.items.splice(1,0,this.actionAddTimeRegistration);
	}

/*
	this.selectDateDialog = new GO.calendar.SelectDateDialog();
	this.selectDateDialog.on('updateEvent', function(event, isCopy, repeats, offset, new_event_id)
	{
		this.fireEvent('updateEvent', this, event, isCopy, repeats, offset, new_event_id);
	}, this);			
	*/
	GO.calendar.ContextMenu.superclass.constructor.call(this,config);

	this.addEvents({
		'updateEvent' : true
	});

}

Ext.extend(GO.calendar.ContextMenu, Ext.menu.Menu, {

	event:null,
	view_id: 0,
	
	initComponent: function() {
		
		Ext.applyIf(this,{
			listeners: {
				beforeshow: function() {
//					console.log(this.event);
					if(this.event && !!this.event.is_virtual) {
						return false; // don't show menu for virtual items
					}
				},
				scope: this
			}
		});
		
		GO.calendar.ContextMenu.superclass.initComponent.call(this);
	},
	
	setEvent : function(event, view_id)
	{
		this.event = event;
		
		var isEvent = event.model_name == "GO\\Calendar\\Model\\Event";

		this.view_id = (view_id) ? view_id : 0;
		
		var isOrganizer = typeof(this.event.is_organizer)!='undefined' && this.event.is_organizer;

//		this.actionCopy.setDisabled(this.event.read_only);
		this.actionCut.setDisabled(this.event.read_only);
		
		if (GO.email) {
		// Disable "Create email for participants" when it's a private event and it's not yours
			if(this.event.private && this.event.user_id != GO.settings.user_id){
				this.actionCreateMail.setDisabled(true);
			}	else {
				this.actionCreateMail.setDisabled(false);
			}
		}
		
		if(this.event.private && this.event.user_id != GO.settings.user_id){
			this.actionCopy.setDisabled(true);
			this.actionInfo.setDisabled(true);
		} else {
			this.actionCopy.setDisabled(!isOrganizer);
			this.actionInfo.setDisabled(false);
		}
		
		var deleteEnabled=false;
//		if(isOrganizer){
//			deleteEnabled=true;
//		} else{ 
//			deleteEnabled=!this.event.read_only;
//		}
		
		if(this.event && isEvent && this.event.permission_level >= GO.permissionLevels.writeAndDelete){
				deleteEnabled=true;
		}
		
		this.actionDelete.setDisabled(!deleteEnabled);
		
//		this.actionInfo.setDisabled(!event.event_id);
		
		if(this.actionAddTimeRegistration)
			this.actionAddTimeRegistration.setDisabled(!event.event_id);
		

//		if (GO.email)
//			this.actionCreateMail.setDisabled(event.has_other_participants==0);

		this.newMenuItem.setLinkConfig({
			model_name:"GO\\Calendar\\Model\\Event",
			model_id:event.event_id,
			text:event.name
		});
	},
	
	showCreateMailDialog : function() {
		if (GO.email) {
			GO.request({
				url: 'calendar/event/participantEmailRecipients',
				params : {
					'event_id': this.event.event_id
				},
				success : function(response,options, result) {
					GO.email.showComposer({
						account_id: GO.moduleManager.getPanel('email').account_id,
						values:{
							to:result.to
						}
					});

				},
				scope : this
			});
		}
	},
	showAddTimeRegistrationDialog : function()
	{
		if(!this.addTimeRegistrationDialog)
		{
			this.addTimeRegistrationDialog = new GO.timeregistration.addTimeRegistrationDialog();
		}
		this.addTimeRegistrationDialog.show(this.event);
	},
	showSelectDateDialog : function(isCopy, repeat)
	{
		if(!this.selectDateDialog)
		{
			this.selectDateDialog = new GO.calendar.SelectDateDialog();


			this.selectDateDialog.on('updateEvent', function(obj, new_event_id, is_visible)
			{
				this.fireEvent('updateEvent', obj, new_event_id, is_visible);
			}, this);
		}
	
		this.selectDateDialog.show(this.event, isCopy, repeat, this.view_id);
	},
	showEventInfoDialog : function()
	{
		GO.linkHandlers["GO\\Calendar\\Model\\Event"].call(this, this.event.event_id);
	},
	menuHandler : function()
	{
		if(!this.menuRecurrenceDialog)
		{
			this.menuRecurrenceDialog = new GO.calendar.RecurrenceDialog();

			this.menuRecurrenceDialog.on('single', function()
			{
				this.showSelectDateDialog(false, false);
				this.menuRecurrenceDialog.hide();
			},this)

			this.menuRecurrenceDialog.on('entire', function()
			{
				this.showSelectDateDialog(false, true);
				this.menuRecurrenceDialog.hide();
			},this)

			this.menuRecurrenceDialog.on('cancel', function()
			{
				this.menuRecurrenceDialog.hide();
			},this)
		}
		this.menuRecurrenceDialog.show();
	}
});

GO.calendar.SelectCalendarDialog = function(config){

	if(!config)
	{
		config = {};
	}

	this.buildForm();

	var focusFirstField = function(){
		this.formPanel.items.items[0].focus();
	};

	config.layout='fit';
	config.title=GO.calendar.lang.selectCalendar;
	config.modal=false;
	config.border=false;
	config.width=400;
	config.autoHeight=true;
	config.resizable=false;
	config.plain=true;
	config.shadow=false,
	config.closeAction='hide';
	config.items=this.formPanel;
	config.focus=focusFirstField.createDelegate(this);
	config.buttons=[{
		text:GO.lang['cmdOk'],
		handler: function()
		{
			this.submitForm(true)
		},
		scope: this
	},{
		text:GO.lang['cmdClose'],
		handler: function()
		{
			this.hide()
		},
		scope: this
	}];

	GO.calendar.SelectCalendarDialog.superclass.constructor.call(this,config);

	this.addEvents({'calendar_selected' : true});
}

Ext.extend(GO.calendar.SelectCalendarDialog, Ext.Window, {
	
	submitForm : function(hide)
	{
		this.fireEvent('calendar_selected', this.selectCalendar.getValue());

		this.hide();
	},
	
	buildForm : function ()
	{
		 this.selectCalendar = new GO.form.ComboBox({
                        hiddenName:'cal_id',
			fieldLabel:GO.calendar.lang.calendar,
			valueField:'id',
			displayField:'name',
			store: new Ext.data.ArrayStore({
                                fields: ['id', 'name']
                        }),
			mode:'local',
			triggerAction:'all',
                        emptyText:GO.calendar.lang.selectCalendar,
			editable:false,
			selectOnFocus:true,
			forceSelection:true
                });

		this.formPanel = new Ext.FormPanel({
			cls:'go-form-panel',
			anchor:'100% 100%',
			bodyStyle:'padding:5px',
			defaults:{anchor: '95%'},
			defaultType:'textfield',
			autoHeight:true,
			waitMsgTarget:true,
			labelWidth:75,
			items: this.selectCalendar
		});
	},

	populateComboBox : function(records)
        {		
                var data = [];

                for(var i=0; i<records.length; i++)
                {
                        var calendar = []
                        calendar.push(records[i].id);
                        calendar.push(records[i].name);

                        data.push(calendar);
                }

                this.selectCalendar.store.loadData(data);
		var rec = this.selectCalendar.store.getAt(0);
		if(rec)
		{
			this.selectCalendar.setValue(rec.data.id);
		}
        }
	
});

GO.moduleManager.on('moduleconstructed',function(mm,moduleName,panel){
	if(moduleName=='settings'){

		var fieldset =new Ext.form.FieldSet({
			title:GO.calendar.lang.calendar,
			items:[{
				xtype:'textfield',
				name:'calendar_name_template',
				fieldLabel:GO.calendar.lang.globalsettings_templatelabel,
				width: 300
			},{
				xtype:'checkbox',
				name:'calendar_change_all_names',
				fieldLabel:GO.calendar.lang.globalsettings_allchangelabel,
				listeners: {
	  			 "check": function(cb, isenabled) {
						if(isenabled && !confirm(GO.calendar.lang.globalsettings_renameall))
							cb.setValue(false);
					},
					scope:this
				}
			}]
		});

		panel.add(fieldset);
	}
});

GO.calendar.ColorPickerDialog = function(config){

	if(!config)
	{
		config = {};
	}

	this.buildForm();

	var focusFirstField = function(){
		this.formPanel.items.items[0].focus();
	};

	config.layout='fit';
	config.title=GO.calendar.lang.calendarColor;
	config.modal=false;
	config.border=false;
	config.width=420;
	config.autoHeight=true;
	config.resizable=false;
	config.plain=true;
	config.shadow=false,
	config.closeAction='hide';
	config.items=this.formPanel;
	config.focus=focusFirstField.createDelegate(this);
	config.buttons=[{
		text:GO.lang['cmdOk'],
		handler: function()
		{
			this.submitForm(true)
		},
		scope: this
	},{
		text:GO.lang['cmdApply'],
		handler: function()
		{
			this.submitForm(false)
		},
		scope: this
	},{
		text:GO.lang['cmdClose'],
		handler: function()
		{
			this.hide()
		},
		scope: this
	}];

	GO.calendar.ColorPickerDialog.superclass.constructor.call(this,config);

	this.addEvents({'save' : true});
}

Ext.extend(GO.calendar.ColorPickerDialog, Ext.Window, {

	show : function ()
	{
		if(!this.rendered)
			this.render(Ext.getBody());

		this.formPanel.form.reset();
		this.editorGrid.store.load();

		GO.calendar.ColorPickerDialog.superclass.show.call(this);
	},
	submitForm : function(hide)
	{
		this.formPanel.form.submit(
		{
			url : GO.url('calendar/calendar/submitColors'),
			params: {
				griddata: Ext.encode(this.getGridData())
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action)
			{
				this.fireEvent('save');
				this.editorGrid.store.commitChanges();
				if(hide)
				{
					this.hide();
				}
			},
			failure: function(form, action)
			{
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}
				else
				{
					error = action.result.feedback;
				}
				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope:this
		});
	},

	getGridData : function(){

		var data = {};

		for (var i = 0; i < this.editorGrid.store.data.items.length;  i++)
		{
			var r = this.editorGrid.store.data.items[i].data;

			data[i]={};

			for(var key in r)
			{
				data[i][key]=r[key];
			}
		}

		return data;
	},
	buildForm : function ()
	{
		var fields ={
		fields:['id','name','color'],
		columns:[	{
			header: GO.calendar.lang.calendar,
			dataIndex: 'name'
		},{
			header: GO.calendar.lang.calendarColor,
			dataIndex: 'color',
			width: 30,
			renderer: function(value,meta,record) {
				return '<div style="background-color: #'+record.data.color+';border: 1px solid #666;width:70px;height:9px;margin-right:4px;float:left;"></div>';
			},
			editor: 
				new GO.form.ColorField({
					value : "EBF1E2"
//					fieldLabel : GO.lang.color,
//					value : GO.calendar.defaultBackground,
//					anchor:'50%',
//					name : 'color',
				})
			}]
		};


		var columnModel =  new Ext.grid.ColumnModel({
			defaults:{
				sortable:true
			},
			columns:fields.columns
		});

		var store = new GO.data.JsonStore({
			url : GO.url('calendar/calendar/loadColors'),
			fields: fields.fields,
			remoteSort: true
		});

		this.editorGrid = new Ext.grid.EditorGridPanel({
			height: 300,
			store: store,
			bbar: new Ext.PagingToolbar({
							cls: 'go-paging-tb',
							store: store,
							pageSize: parseInt(GO.settings['max_rows_list']),
							displayInfo: true,
							displayMsg: GO.lang['displayingItems'],
							emptyMsg: GO.lang['strNoItems']
						}),
			cm: columnModel,
			sm: new Ext.grid.RowSelectionModel(),
			view: new Ext.grid.GridView({
				autoFill: true,
				forceFit: true,
				emptyText: GO.lang['strNoItems']
			}),
			loadMask: true,
			clicksToEdit: 1
		});
		
		this.formPanel = new Ext.FormPanel({
//			cls:'go-form-panel',
			anchor:'100% 100%',		
			defaultType:'textfield',
			autoHeight:true,
			waitMsgTarget:true,
			labelWidth:75,
			items: this.editorGrid
		});
	}
});

GO.calendar.AttendanceWindow = Ext.extend(GO.dialog.TabbedFormDialog, {
	initComponent : function(){
		
		
		Ext.apply(this, {
			title:GO.calendar.lang.attendance,
			height: 460,
			
			width: 400,
			modal:true,
			enableApplyButton:false,
			formControllerUrl: 'calendar/attendance'
		});
		

		GO.calendar.AttendanceWindow.superclass.initComponent.call(this);
		
	},
	setExceptionDate : function(date){
		if(!date)
			delete this.formPanel.baseParams.exception_date;
		else
			this.formPanel.baseParams.exception_date=date;
	},
	
	afterLoad : function(remoteModelId, config, action){
		this.infoPanel.update(action.result.data.info)
	},
	buildForm : function(){
		
		
		var reminderValues = [['0', GO.calendar.lang.noReminder]];

		for (var i = 1; i < 60; i++) {
			reminderValues.push([i, i]);
		}
		
		this.reminderValue = new GO.form.NumberField({
			decimals:0,
			name : 'reminder_value',
//			minValue:1,
			width : 50,
			value : GO.calendar.defaultReminderValue
		});

		this.reminderMultiplier = new Ext.form.ComboBox({
			hiddenName : 'reminder_multiplier',
			triggerAction : 'all',
			editable : false,
			selectOnFocus : true,
			width : 148,
			forceSelection : true,
			mode : 'local',
			value : GO.calendar.defaultReminderMultiplier,
			valueField : 'value',
			displayField : 'text',
			store : new Ext.data.SimpleStore({
				fields : ['value', 'text'],
				data : [['60', GO.lang.strMinutes],
				['3600', GO.lang.strHours],
				['86400', GO.lang.strDays],
				['604800', GO.lang.strWeeks]

				]
			}),
			hideLabel : true,
			labelSeperator : ''
		});
		
		this.reminderComposite = new Ext.form.CompositeField({
			style:'margin-top:10px;',
			fieldLabel : GO.calendar.lang.reminder,
			items : [this.reminderValue,this.reminderMultiplier]
		});
		
		this.enableReminderCheckbox = new Ext.ux.form.XCheckbox({
			boxLabel : GO.calendar.lang.useReminder,
			name : 'enable_reminder',
			width : 'auto',
			hideLabel : true,
			listeners : {
				check : {
					fn : function(cb, checked) {
						this.reminderComposite.setDisabled(!checked);
					},
					scope : this
				}
			}
		});
		
		this.addPanel({
			cls:'go-form-panel',
			layout:'form',
			autoScroll:true,
			defaults:{
				anchor:'-20'
			},
			items:[{
				xtype:'radiogroup',
				hideLabel:true,
				columns:1,
				items:[
				{
					boxLabel: GO.calendar.lang.iWillAttend,
					name: 'status',
					inputValue: 'ACCEPTED'
				},{
					boxLabel: GO.calendar.lang.iWillNotAttend,
					name: 'status',
					inputValue: 'DECLINED'
				},{
					boxLabel: GO.calendar.lang.iMightAttend,
					name: 'status',
					inputValue: 'TENTATIVE'
				},{
					boxLabel: GO.calendar.lang.iWillDecideLater,
					name: 'status',
					inputValue: 'NEEDS-ACTION'
				}
				]
			},{
				hideLabel:true,
				name:'notify_organizer',
				xtype:'xcheckbox',
				boxLabel:GO.calendar.lang.notifyOrganizer
			}
//			{
//				xtype:'plainfield',
//				fieldLabel:GO.calendar.lang.organizer,
//				name:'organizer'
//			}
			,this.infoPanel = new Ext.form.FieldSet({
				title:GO.calendar.lang.eventInfo
			}),{
				xtype : 'fieldset',
				autoHeight : true,
				layout : 'form',
				title : GO.calendar.lang.reminder,
				items : [
					this.enableReminderCheckbox,
					this.reminderComposite
			]}]
		});
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: Calendar.js 21207 2017-05-31 13:07:07Z devdevilnl $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

Ext.ns("GO.calendar.dd");
 
GO.calendar.formatQtip = function(data,verbose)
{
	if (typeof(verbose)=='undefined')
		verbose = true;
	
	var df = 'Y-m-d H:i';
	
	if(!data.startDate)
		data.startDate = Date.parseDate(data.start_time, df);
	
	if(!data.endDate)
		data.endDate = Date.parseDate(data.end_time, df);
	
	if(!data.creationDate)
		data.creationDate = data.ctime ? Date.parseDate(data.ctime, df) : new Date();
	if(!data.modifyDate)
		data.modifyDate = data.mtime ? Date.parseDate(data.mtime, df) : new Date();
	
	var new_df = GO.settings.time_format;
	if(data.startDate.format('Ymd')!=data.endDate.format('Ymd'))
	{
		new_df = GO.settings.date_format+' '+GO.settings.time_format;
	}

	var str = GO.calendar.lang.startsAt+': '+data.startDate.format(new_df)+'<br />'+
	GO.calendar.lang.endsAt+': '+data.endDate.format(new_df);

	if(!GO.util.empty(data.duration))
		str += '<br />'+GO.calendar.lang.duration+': '+data.duration;

	if(!GO.util.empty(data.status))
	{
		str += '<br />'+GO.calendar.lang.status+': ';
		
		if(GO.calendar.lang.statuses[data.status]){
			str+=Ext.util.Format.htmlEncode(GO.calendar.lang.statuses[data.status]);
		}else
		{
			str+=data.status;
		}
	}

	if(!GO.util.empty(data.calendar_name))
	{
		str += '<br />'+GO.calendar.lang.calendar+': '+Ext.util.Format.htmlEncode(data.calendar_name);
	}

	if(!GO.util.empty(data.username))
	{
		str += '<br />'+GO.lang.strOwner+': '+Ext.util.Format.htmlEncode(data.username);
	}

	str += '<br />'+GO.lang.strCtime+': '+data.creationDate.format(GO.settings.date_format+' '+GO.settings.time_format);
	if (verbose)
		str += '<br />'+GO.lang.strMtime+': '+data.modifyDate.format(GO.settings.date_format+' '+GO.settings.time_format);
		
	if(verbose && !GO.util.empty(data.musername))
	{
		str += '<br />'+GO.lang.mUser+': '+Ext.util.Format.htmlEncode(data.musername);
	}
	
	if(!GO.util.empty(data.location))
	{
		str += '<br />'+GO.calendar.lang.location+': '+Ext.util.Format.htmlEncode(data.location);
	}
	
	if(!GO.util.empty(data.description))
	{
		str += '<br /><br />'+GO.util.nl2br(data.description);
	}
	if (!GO.util.empty(data.resources)) {
		str += '<br />'+GO.calendar.lang['usedResources']+':';
		for (var i in data.resources)
			str += '<br /> - '+Ext.util.Format.htmlEncode(data.resources[i]);
	}
	
	if (!GO.util.empty(data.resourced_calendar_name))
		str += '<br />'+GO.calendar.lang['resourceUsedIn']+': '+Ext.util.Format.htmlEncode(data.resourced_calendar_name);
	
	return str;
//	return Ext.util.Format.htmlEncode(str);
}

GO.calendar.MainPanel = function(config){
	
	if(!config)
	{
		config = {};
	}

	this.datePicker = new Ext.DatePicker({
		cls:'cal-date-picker',
		showToday:false,
		internalRender:true
	});
	
	this.datePicker.on("select", function(datePicker, DateObj){
		this.setDisplay({
			date: DateObj
		});
	},this);
		
	GO.calendar.calendarsStore = this.calendarsStore = new GO.data.JsonStore({
		url:GO.url("calendar/calendar/store"),
		fields:['id','name','comment','user_name','group_id', 'group_name','checked', 'project_id','tooltip'],
		remoteSort:true
	});


	this.viewsStore = new GO.data.JsonStore({
		url: GO.url('calendar/view/store'),
		baseParams: {
			limit:parseInt(GO.settings['max_rows_list'])
		},
		fields:['id','name','user_name','merge','owncolor'],
		remoteSort:true
	});

	GO.calendar.resourcesStore = this.resourcesStore = new Ext.data.GroupingStore({
		baseParams: {			
			resourcesOnly : 1,
			limit:parseInt(GO.settings['max_rows_list'])
		},
		reader: new Ext.data.JsonReader({
			root: 'results',
			id: 'id',
			totalProperty: 'total',
			fields:['id','name','comment','user_name','group_id', 'group_name','tooltip']
		}),
		proxy: new Ext.data.HttpProxy({
			url: GO.url("calendar/calendar/calendarsWithGroup")
		}),
		sortInfo:{
			field: 'name',
			direction: "ASC"
		},
		groupField:'group_name'
//		,remoteSort:true
	});

	this.calendarsStore.on('load', function(){
		if(this.state.displayType!='view' && this.group_id==1)
		{
			/*var record = this.calendarsStore.getById(this.state.calendars[0]);
			if(!record)
			{
				record = this.calendarsStore.getAt(0);				
			}*/
			//this.state.calendars = [record.data.id];
			this.state.applyFilter=true;
			this.setDisplay(this.state);
		}
	}, this);

//	if(GO.projects){
//		this.projectCalendarsStore.on('load', function(){
//			this.projectCalendarsList.setVisible(this.projectCalendarsStore.data.length);
//			this.calendarListPanel.doLayout();
//		}, this);
//	}

	this.viewsStore.on('load', function(){
		this.viewsList.setVisible(this.viewsStore.data.length);
		this.calendarListPanel.doLayout();
		
		if(this.state.displayType=='view' && this.viewsStore.data.length)
		{
			var displayConfig = {'view_id':this.state.view_id};
			this.setDisplay(displayConfig);
		}
	}, this);

	this.resourcesStore.on('load', function(){

		this.resourcesList.setVisible(this.resourcesStore.data.length);
		this.calendarListPanel.doLayout();

		if(this.state.displayType!='view' && this.group_id>1 && this.resourcesStore.data.length)
		{
			this.setDisplay(this.state);
		}
	}, this);

	

	this.calendarList = new GO.grid.MultiSelectGrid({
		title:GO.calendar.lang.calendars,
		store: this.calendarsStore,
		allowNoSelection:true,
		tools: [{
			text:GO.calendar.lang.colors,
			id:'gear',
			qtip:GO.calendar.lang.setColors,
			handler:function(){
				if(!GO.calendar.colorPickerDialog){
					GO.calendar.colorPickerDialog = new GO.calendar.ColorPickerDialog();
				}
				GO.calendar.colorPickerDialog.show();
				GO.calendar.colorPickerDialog.on("hide", function(){
					this.refresh();
				},this);
			},
			scope: this
		}],
		bbar: new GO.SmallPagingToolbar({
			items:[this.searchField = new GO.form.SearchField({
				store: this.calendarsStore,
				width:120,
				emptyText: GO.lang.strSearch
			})],
			store:this.calendarsStore,
			pageSize:GO.settings.config.nav_page_size
		})
	});

//	if(GO.projects){
//		this.projectCalendarsList = new GO.grid.MultiSelectGrid({
//			title:GO.projects.lang.projectCalendars,
//			store: this.projectCalendarsStore,
//			allowNoSelection:true,
//			bbar: new GO.SmallPagingToolbar({
//				store:this.calendarsStore,
//				pageSize:GO.settings.config.nav_page_size
//			})
//		});
//	}

	this.viewsList = new GO.grid.GridPanel({
		border: false,
		layout:'fit',
		title:GO.calendar.lang.views,
		store: this.viewsStore,
		cls: 'go-grid3-hide-headers',
		autoScroll:true,
		columns:[{
			header:GO.lang.strName,
			dataIndex: 'name',
			id:'name',
			width:188
		}],
		view:new Ext.grid.GridView({
			forceFit:true,
			autoFill:true
		}),
		sm: new Ext.grid.RowSelectionModel({singleSelect:true})
	});
	
	this.resourcesList = new GO.grid.GridPanel({
		border: false,
		title:GO.calendar.lang.resources,
		layout:'fit',
		store: this.resourcesStore,
		cls: 'go-grid3-hide-headers',
		autoScroll:true,
    paging:GO.settings.config.nav_page_size,
    bbar: new GO.SmallPagingToolbar({
			store:this.resourcesStore,
			pageSize:GO.settings.config.nav_page_size
		}),
		columns:[{
			header:GO.lang.strName,
			dataIndex: 'name',
			id:'name',
			width:188,
			renderer:function(value, p, record){
				if(!GO.util.empty(record.data.tooltip)) {
					p.attr = 'ext:qtip="'+Ext.util.Format.htmlEncode(record.data.tooltip)+'"';
				}
				return value;
			}
		},{
			header:GO.calendar.lang.group,
			dataIndex: 'group_name',
			id:'group_name',
			width:188,
			renderer:function(value, p, record){
				if(!GO.util.empty(record.data.tooltip)) {
					p.attr = 'ext:qtip="'+Ext.util.Format.htmlEncode(record.data.tooltip)+'"';
				} else {
					p.attr = 'ext:qtip="'+Ext.util.Format.htmlEncode(record.data.name)+'"';
				}
				return value;
			}
		}],
		view: new Ext.grid.GroupingView({
			forceFit:true,
			hideGroupedColumn:true,
			groupTextTpl: '{text} ({[values.rs.length]})'
		}),
		sm: new Ext.grid.RowSelectionModel({singleSelect:true})
	});

	var changeCalendar = function(grid, calendars, records)
	{
		if(records.length){
			var cal_ids = [];

			for (var i=0,max=records.length;i<max;i++) {
				cal_ids[i] = records[i].data.id;
			}

			var config = {
				calendars: cal_ids,
				group_id:1,
				merge:true,
				owncolor:true,
				project_id:records[0].data.project_id
			};

			this.setDisplay(config);
		}

	}
   
	this.calendarList.on('change', changeCalendar, this);

	if(this.projectCalendarsList)
		this.projectCalendarsList.on('change', changeCalendar, this);
	
	this.viewsList.on('rowclick', function(grid, rowIndex)
	{
		this.setDisplay({
				view_id: grid.store.data.items[rowIndex].id	
			});
	}, this);	

	this.resourcesList.on('rowclick', function(grid, rowIndex)
	{
        
		this.setDisplay({
			calendars: [grid.store.data.items[rowIndex].id],
			group_id: grid.store.data.items[rowIndex].data.group_id
		});		
	}, this);

	this.calendarListPanel = new Ext.Panel({
		border:true,
		region:'center',
		layoutConfig:{hideCollapseTool:true},
		layout:'accordion',
		tbar:[{
			iconCls:'cal-btn-home',
			text : GO.calendar.lang.myCalendar,
			handler : function() {
				this.setDisplay({
					group_id: 1,
					project_id:0,
					applyFilter:true,
					calendars: [GO.calendar.defaultCalendar['id']]
				});
			},
			scope : this
		},{
			iconCls:'btn-one-day',
			text : GO.lang.today,
			handler : function(){
				this.setDisplay({
					date: new Date().clearTime()
				});
			},
			scope : this
		}],
		items: [
		this.calendarList
		]
	});

	if(this.projectCalendarsList)
		this.calendarListPanel.add(this.projectCalendarsList);

	this.calendarListPanel.add(this.viewsList);
	this.calendarListPanel.add(this.resourcesList);
	
	var storeFields=['id','event_id','name','start_time','end_time','description', 'repeats', 'private','private_enabled','status','location', 'background', 'status_color', 'read_only','is_virtual', 'task_id', 'contact_id','calendar_name','calendar_id','all_day_event','username','duration', 'link_count','has_reminder', 'has_other_participants','participant_ids','ctime','mtime','musername', 'is_organizer', 'partstatus','model_name','permission_level','resources','resourced_calendar_name'];

	this.daysGridStore = new GO.data.JsonStore({
		url:GO.url('calendar/event/store'),
		root: 'results',
		id: 'id',
		fields:storeFields
	});
	
	this.daysGridStore.on('load', this.setCalendarBackgroundColors, this);
	
	this.monthGridStore = new GO.data.JsonStore({
		url:GO.url('calendar/event/store'),
		fields:storeFields
	});
	
	this.monthGridStore.on('load', this.setCalendarBackgroundColors, this);

	GO.calendar.daysGrid = this.daysGrid = new GO.grid.CalendarGrid(
	{
		id: 'days-grid',
		store: this.daysGridStore, 
		border: false,
		firstWeekday: parseInt(GO.settings.first_weekday),
		keys:[ {
				key:  Ext.EventObject.DELETE,
				fn: function(){
					this.deleteHandler();
				},
				scope: this
		}]
	});	
	
	this.monthGrid = new GO.grid.MonthGrid({
		id: 'month-grid',
		store: this.monthGridStore,
		border: false,
		layout:'fit',
		firstWeekday: parseInt(GO.settings.first_weekday),
		keys:[ {
				key:  Ext.EventObject.DELETE,
				fn: function(){
					this.deleteHandler();
				},
				scope: this
		}]
	});	
	
	this.viewGrid = new GO.grid.ViewGrid({
		id: 'view-grid',
		border: false,
		firstWeekday: parseInt(GO.settings.first_weekday),
		keys:[ {
				key:  Ext.EventObject.DELETE,
				fn: function(){
					this.deleteHandler();
				},
				scope: this
		}]
	});
	
	this.viewGrid.on('zoom', function(conf){
		conf.applyFilter=true;
		this.setDisplay(conf);
	}, this);	
	
	this.listGrid = new GO.calendar.ListGrid({
		id: 'list-grid',
		border: false,
		firstWeekday: parseInt(GO.settings.first_weekday)
	});
	
	this.listGrid.store.on('load', this.setCalendarBackgroundColors, this);

	this.daysGrid.store.on('load', function(){
	    GO.checker.params.calendar_calendars = this.daysGrid.store.baseParams.calendars;
	    GO.checker.params.calendar_start_time = this.daysGrid.store.baseParams.start_time;
	    GO.checker.params.calendar_end_time = this.daysGrid.store.baseParams.end_time;
	    
	    GO.calendar.activePanel = this.getActivePanel();

		this.calendarComments.setText(Ext.util.Format.htmlEncode(GO.calendar.activePanel.store.reader.jsonData.comment));
		this.calendarTitle.setText(Ext.util.Format.htmlEncode(GO.calendar.activePanel.store.reader.jsonData.title));

		this.calendar_name = GO.calendar.activePanel.store.reader.jsonData.calendar_name;
		this.calendar_id = GO.calendar.activePanel.store.reader.jsonData.calendar_id;

	},this);

	this.monthGrid.store.on('load', function(){
	    GO.checker.params.calendar_calendars = this.monthGrid.store.baseParams.calendars;
	    GO.checker.params.calendar_start_time = this.monthGrid.store.baseParams.start_time;
	    GO.checker.params.calendar_end_time = this.monthGrid.store.baseParams.end_time;

	    GO.calendar.activePanel = this.getActivePanel();

		this.calendarComments.setText(Ext.util.Format.htmlEncode(GO.calendar.activePanel.store.reader.jsonData.comment));
		this.calendarTitle.setText(Ext.util.Format.htmlEncode(GO.calendar.activePanel.store.reader.jsonData.title));

		this.calendar_name = GO.calendar.activePanel.store.reader.jsonData.calendar_name;
		this.calendar_id = GO.calendar.activePanel.store.reader.jsonData.calendar_id;
	},this);

	this.listGrid.store.on('load', function(){
	    GO.checker.params.calendar_calendars = this.listGrid.store.baseParams.calendars;
	    GO.checker.params.calendar_start_time = this.listGrid.store.baseParams.start_time;
	    GO.checker.params.calendar_end_time = this.listGrid.store.baseParams.end_time;

	    GO.calendar.activePanel = this.getActivePanel();

		this.calendarComments.setText(Ext.util.Format.htmlEncode(GO.calendar.activePanel.store.reader.jsonData.comment));
		this.calendarTitle.setText(Ext.util.Format.htmlEncode(GO.calendar.activePanel.store.reader.jsonData.title));

		this.calendar_name = GO.calendar.activePanel.store.reader.jsonData.calendar_name;
		this.calendar_id = GO.calendar.activePanel.store.reader.jsonData.calendar_id;
	},this);

	this.viewGrid.on('storeload', function(grid, count, mtime, params, response){
	    GO.checker.params.calendar_start_time = params.start_time;
	    GO.checker.params.calendar_end_time = params.end_time;
	    GO.checker.params.calendar_view_id = params.view_id;
	    
	    GO.calendar.activePanel = this.getActivePanel();
	    GO.calendar.activePanel.count = count;
	    GO.calendar.activePanel.mtime = mtime;

		this.calendarComments.setText(Ext.util.Format.htmlEncode(grid.jsonData.comment));
		this.calendarTitle.setText(Ext.util.Format.htmlEncode(grid.jsonData.title));

		this.calendar_name = grid.jsonData.calendar_name;
		this.calendar_id = grid.jsonData.calendar_id;
	}, this);


	this.daysGrid.on('deleteEvent', function(menuItem)
	{
		this.deleteHandler(menuItem);
	},this);
	this.monthGrid.on('deleteEvent', function()
	{
		this.deleteHandler();
	},this);
	this.listGrid.on('deleteEvent', function()
	{
		this.deleteHandler();
	},this);
	this.viewGrid.on('deleteEvent', function()
	{
		this.deleteHandler();
	},this);

	this.listStore = this.listGrid.store;

	this.displayPanel = new Ext.Panel({
		region:'center',
		titlebar: false,
		autoScroll:false,
		layout: 'card',
		activeItem: 0,
		border: true,
		split: true,
		cls: 'cal-display-panel',
		tbar: [this.calendarComments = new Ext.Toolbar.TextItem({
			text:'',
			cls:'cal-comment'
		}),'-',this.calendarTitle = new Ext.Toolbar.TextItem({
			text:'Calendar'
		}),'-',{
			iconCls: 'btn-left-arrow',
			//text: GO.lang.cmdPrevious,
			cls: 'x-btn-text-icon',
			handler: function(){
							
				/*var displayDate = this.getActivePanel().startDate;
				if(this.displayType=='month')
				{
					displayDate = displayDate.add(Date.MONTH, -1);
				}else
				{
					var days = this.days < 8 ? 7 : this.days;
					displayDate = displayDate.add(Date.DAY, -days);
				}*/

				this.setDisplay({
					date: this.getActivePanel().previousDate()
				});
			},
			scope: this
		},this.periodInfoPanel = new Ext.Panel({
			html: '',
			plain:true,
			border:true,
			cls:'cal-period'
		}),{
			iconCls: 'btn-right-arrow',
			//text: GO.lang.cmdNext,
			cls: 'x-btn-text-icon',
			handler: function(){
				/*var displayDate = this.getActivePanel().startDate;
				if(this.displayType=='month')
				{
					displayDate = displayDate.add(Date.MONTH, 1);
				}else
				{
					var days = this.days < 8 ? 7 : this.days;
					displayDate = displayDate.add(Date.DAY, days);
				}*/
							
				this.setDisplay({
					date: this.getActivePanel().nextDate()
				});
			},
			scope: this
		}],
		
						items: [this.daysGrid, this.monthGrid, this.viewGrid, this.listGrid]
	});
	

						
	var tbar = [{
	      	 	xtype:'htmlcomponent',
			html:GO.calendar.lang.name,
			cls:'go-module-title-tbar'
		},{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function(){
							
			GO.calendar.showEventDialog({
				calendar_id: this.calendar_id,
				calendar_name: this.calendar_name
			});
										
		},
		scope: this
	},{
			
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: this.deleteHandler,
		scope: this
	},{
			
		iconCls: 'btn-refresh',
		text: GO.lang['cmdRefresh'],
		cls: 'x-btn-text-icon',
		handler: function(){
			/*this.calendarsStore.load();
										this.viewsStore.load();
										this.setDisplay();*/
			this.init();
		},
		scope: this
	},{
		iconCls: 'btn-settings',
		text: GO.lang.administration,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.showAdminDialog();
		},
		scope: this
	},
	'-',
	this.dayButton = new Ext.Button({
		iconCls: 'btn-one-day',
		text: GO.calendar.lang.oneDay,
		cls: 'x-btn-text-icon',
		handler: function(){
			
			this.setDisplay({
				days:1,
				displayType: this.displayType == 'view' ? 'view' : 'days',
				calendar_name: this.calendar_name,
				view_id : this.view_id
			});
		},
		scope: this
	}),
	this.workWeekButton = new Ext.Button({
		iconCls: 'btn-five-days',
		text: GO.calendar.lang.fiveDays,
		cls: 'x-btn-text-icon',
		handler: function(){
			
			this.setDisplay({
				days: 5,
				displayType: this.displayType == 'view' ? 'view' : 'days',
				calendar_name: this.calendar_name,
				view_id : this.view_id
			});
		},
		scope: this
	}),
	this.weekButton = new Ext.Button({
		iconCls: 'btn-seven-days',
		text: GO.calendar.lang.sevenDays,
		cls: 'x-btn-text-icon',
		handler: function(){
		
			this.setDisplay({
				days: 7,
				displayType: this.displayType == 'view' ? 'view' : 'days',
				calendar_name: this.calendar_name,
				view_id : this.view_id
			});
		},
		scope: this
	}),this.monthButton= new Ext.Button({
		iconCls: 'btn-month',
		text: GO.calendar.lang.month,
		cls: 'x-btn-text-icon',
		handler: function(){
			
			this.setDisplay({
				displayType:'month',
				calendar_name: this.calendar_name,
				view_id : this.view_id
			});
		},
		scope: this
	}),
	this.listButton= new Ext.Button({
		iconCls: 'btn-list',
		text: GO.calendar.lang.list,
		cls: 'x-btn-text-icon',
		handler: function(item, pressed){
			
			this.setDisplay({
				displayType:'list',
				calendar_name: this.calendar_name,
				view_id : this.view_id
			});
			        		
		},
		scope: this
	}),
	'-',
	this.printButton = new Ext.Button({
		iconCls: 'btn-print',
		text:GO.lang.cmdPrint,
		menu:new Ext.menu.Menu({
				items:[{		
					text: GO.calendar.lang.cmdPrintView,
					handler: function(){

						var sD = this.getActivePanel().startDate;
						var eD = this.getActivePanel().endDate;

						var urlParams = {};

						urlParams.start_time = sD.format('Y-m-d');
						urlParams.end_time = eD.format('Y-m-d');
						urlParams.print	= true;

						if(!GO.util.empty(this.view_id))
							urlParams.view_id = this.view_id;
						else
							urlParams.calendars = Ext.encode(this.calendars);

						var url = GO.util.empty(this.view_id) ? GO.url('calendar/event/store',urlParams) : GO.url('calendar/event/viewStore',urlParams);

						window.open(url);
					},
					scope: this
				},{		
					text: GO.calendar.lang.cmdPrintCategoryCount,
					handler: function(){
						if(!GO.calendar.printCategoryCountDialog){
							GO.calendar.printCategoryCountDialog = new GO.calendar.PrintCategoryCountDialog();
						}	

						GO.calendar.printCategoryCountDialog.show(0,{});
					},
					scope: this
				},'-',
				{
					text: GO.lang['strDay'],
					handler: function () {
						var urlParams = {
							calendars: Ext.encode(this.calendars),
							date: +this.datePicker.getValue()/1000
						};
						window.open(GO.url('calendar/report/day',urlParams));
					},
					scope: this
				},
				{
					text: GO.calendar.lang['fiveDays'],
					handler: function () {
						var urlParams = {
							calendars: Ext.encode(this.calendars),
							date: +this.datePicker.getValue()/1000
						};
						window.open(GO.url('calendar/report/workweek',urlParams));
					},
					scope: this
				},
				{
					text: GO.lang['strWeek'],
					handler: function () {
						var urlParams = {
							calendars: Ext.encode(this.calendars),
							date: +this.datePicker.getValue()/1000
						};
						window.open(GO.url('calendar/report/week',urlParams));
					},
					scope: this
				},
				{
					text: GO.lang['strMonth'],
					handler: function () {
						var urlParams = {
							calendars: Ext.encode(this.calendars),
							date: +this.datePicker.getValue()/1000
						};
						window.open(GO.url('calendar/report/month',urlParams));
					},
					scope: this
				}]
			})
		})
	];
							
	for(var i=0;i<GO.calendar.extraToolbarItems.length;i++)
	{
		tbar.push(GO.calendar.extraToolbarItems[i]);
	}
		
		
	config.layout='border';
	config.border=false;
	config.tbar= new Ext.Toolbar({
			cls:'go-head-tb',
			items: tbar
		});

	config.items=[
		this.westPanel = new Ext.Panel({
			region:'west',
			titlebar: false,
			autoScroll:false,
			//closeOnTab: true,
			width: 230,
			split:true,
			layout:'border',
			border:false,
			//plain:true,
			items:[
			new Ext.Panel({
				region:'north',
				border:true,
				autoHeight:true,
				split:false,
				cls:'go-date-picker-wrap-outer',
				baseCls:'x-plain',
				items:[
					new Ext.Panel({
						cls:'go-date-picker-wrap',
						items:[this.datePicker]
					})
				]
			}),
			this.calendarListPanel]
		}),
		this.centerPanel = new Ext.Panel({
			layout:'fit',
			region:'center',
			items: [this.displayPanel]
		})
	];		
		
	GO.calendar.MainPanel.superclass.constructor.call(this, config);	
}

Ext.extend(GO.calendar.MainPanel, Ext.Panel, {
	/*
	 * The type of display. Can be days, month or view
	 */
	displayType : 'days',
	lastCalendarDisplayType : 'days',
	state : false,
	calendarId : 0,
	viewId : 0,
	group_id: 1,
	
	setCalendarBackgroundColors : function(){

		
		var view = this.calendarList.getView();
		view.refresh();
		
		var store = this.getActivePanel().store;
		
		if(store.reader.jsonData.backgrounds){
			
			
			var rowIndex;
			
			for(var cal_id in store.reader.jsonData.backgrounds){					
				rowIndex = this.calendarList.store.indexOfId(parseInt(cal_id));		
				if(rowIndex>-1){
					var rowEl = Ext.get(view.getRow(rowIndex));		
					if(rowEl)
						rowEl.applyStyles("background-color: #"+store.reader.jsonData.backgrounds[cal_id]);				
				}
			}
		}
	},


	onShow : function(){        
		GO.calendar.MainPanel.superclass.onShow.call(this);
		this.daysGrid.scrollToLastPosition();

		if(GO.calendar.activePanel){
			if(GO.calendar.activePanel.id != 'view-grid')
			{
				GO.calendar.activePanel.store.reload();
			}else
			{
				GO.calendar.activePanel.reload();
			}
		}
	},
	afterRender : function(){
		GO.calendar.MainPanel.superclass.afterRender.call(this);

		if(GO.tasks){
			GO.dialogListeners.add('tasks',{
				scope:this,
				save:function(){
					if(this.isVisible()){
						this.refresh();
					}
				}
			});
		}		

		GO.dialogListeners.add('event',{
			scope:this,
			save:function(newEvent, oldDomId){

				if(this.displayType=='list')
				{
					this.setDisplay();
				}else
				{
					var activeGrid = this.getActivePanel();

					//var oldDomId = activeGrid.domIds[newEvent.event_id] ? activeGrid.domIds[newEvent.event_id][0] : false;
					//reload grid if old or new event repeats. Do not reload if an occurence of a repeating event is modified
					if(newEvent.repeats || !oldDomId || !activeGrid.remoteEvents[oldDomId] || activeGrid.remoteEvents[oldDomId].repeats)
					{
						if(this.displayType=='view')
							activeGrid.reload();
						else
							activeGrid.store.reload();
					}else
					{
						//var remove_id = newEvent.exception_event_id ? newEvent.exception_event_id : newEvent.event_id;
						
						activeGrid.removeEvent(oldDomId);

						switch(this.displayType)
						{
							case 'month':
								
								for(var i=0,found=false; i<this.calendars.length && !found; i++)
								{
									if(this.calendars[i] == newEvent.calendar_id)
									{
									
										var domIds = this.monthGrid.addMonthGridEvent(newEvent);

										GO.calendar.eventDialog.oldDomId=domIds[0];
									}
								}
								break;
							case 'days':								
								for(var i=0,found=false; i<this.calendars.length && !found; i++)
								{
									if(this.calendars[i] == newEvent.calendar_id)
									{
										var eventRecord = new GO.calendar.CalendarEvent(newEvent);
										this.daysGridStore.add(eventRecord);
										GO.calendar.eventDialog.oldDomId=this.daysGrid.lastDomId;

										found = true;
									}
								}							
								break;

							case 'view':
								GO.calendar.eventDialog.oldDomId=this.viewGrid.addViewGridEvent(newEvent);
								break;
						}
					}
				}
			}
		});
		
		GO.calendar.groupDialog = new GO.calendar.GroupDialog();
		GO.calendar.groupDialog.on('save', function(e, group_id, fields)
		{			
			if(group_id == 1)
			{
				GO.calendar.defaultGroupFields = fields;
			}			
			GO.calendar.groupsGrid.store.load({
				callback:function(){
					if(GO.calendar.eventDialog)
						GO.calendar.eventDialog.resourceGroupsStore.reload();
				},
				scope:this
			});
			
								
		},this);
		

//		if(GO.calendar.openState){
//			this.state=GO.calendar.openState;
//			if(!this.state.calendars && !this.state.view_id)
//				this.state.calendars=[GO.calendar.defaultCalendar.id];
//		}else
//		{
			this.state = Ext.state.Manager.get('calendar-state');
			if(!this.state)
			{
				this.state = {
					displayType:'days',
					days: 5,
					calendars:[GO.calendar.defaultCalendar.id],
					view_id: 0
				};
			}else
			{
				this.state = Ext.decode(this.state);
			}
			
			
//			console.log(this.state);

			if(this.state.displayType=='view')
				this.state.displayType='days';

//			if(!this.state.calendars)
			this.state.calendars=[GO.calendar.defaultCalendar.id];
			
			this.state.view_id=0;
			this.state.group_id=1;
//		}

		if(GO.calendar.openState)
			this.state = Ext.apply(this.state, GO.calendar.openState);

		/*this.state.applyFilter=true;
		this.calendarsStore.on('load', function(){
			this.state.applyFilter=false;
		}, this, {single:true});*/
				
		this.init();	
		this.createDaysGrid();

		/*this.on('show', function(){
			this.refresh();
		}, this);		*/
	},
	
	init : function(){

		GO.request({
			maskEl:this.getEl(),
			url: "core/multiRequest",
			params:{
				requests:Ext.encode({
					views:{r:"calendar/view/store", start:0, limit:GO.settings.config.nav_page_size},				
					calendars:{r:"calendar/calendar/store", start:0, limit:GO.settings.config.nav_page_size},
					//categories:{r:"calendar/category/store", start:0, fetch_all: 1, limit:GO.settings.config.nav_page_size},
					resources:{r:"calendar/calendar/calendarsWithGroup","resourcesOnly":1, start:0, limit:GO.settings.config.nav_page_size}
				})
			},
			
			success: function(options, response, result)
			{
				this.calendarsStore.loadData(result.calendars);
				this.viewsStore.loadData(result.views);
				//this.categoryStore.loadData(result.categories);
				this.resourcesStore.loadData(result.resources);				
			},
			scope:this
		});
	},
	
	deleteHandler : function(menuItem){
			
		switch(this.displayType)
		{
			case 'days':
				var event = this.daysGrid.getSelectedEvent();
				var callback = function(event, refresh){					
					if(refresh)
					{
						this.daysGrid.store.reload();
					}else
					{
						this.daysGrid.removeEvent(event.domId);						
					}
				};			
				break;
			
			case 'month':
				var event = this.monthGrid.getSelectedEvent();
				var callback = function(event, refresh){
					if(refresh)
					{
						this.monthGrid.store.reload();
					}else
					{
						this.monthGrid.removeEvent(event.domId);
					}
				};			
				break;
			
			case 'view':
				var event = this.viewGrid.getSelectedEvent();
				var callback = function(event, refresh){
					if(refresh)
					{
						this.viewGrid.reload();
					}else
					{
						this.viewGrid.removeEvent(event.domId);
					}
				};			
				break;
			
			case 'list':
				var event = this.listGrid.getSelectedEvent();
				var callback = function(event, refresh){
					if(refresh)
					{
						this.listGrid.store.reload();
					}else
					{
						this.listGrid.removeEvent();//will remove the selected row.
					}					
				};			
				break;
		}
		
		// If the event is a "all day" event and you are invited by somebody else, then deleting the 
		if(!event && menuItem && menuItem.contextMenu.event){
			event = menuItem.contextMenu.event;
			this.deleteEvent(event, callback);
			return;
		}
		
		if(event && (!event.read_only || !event.is_organizer) && !event.task_id & !event.contact_id)				
//		console.log(event);
//		if(event && !event.task_id & !event.contact_id)
		{
			this.deleteEvent(event, callback);
		}
	},
	
	getActivePanel : function(){
		switch(this.displayType)
		{
			case 'days':
				return this.daysGrid;			
				break;
			
			case 'month':
				return this.monthGrid;			
				break;
			
			case 'view':
				return this.viewGrid;			
				break;
			
			case 'list':
				return this.listGrid;			
				break;
		}
		
	},
	
	updatePeriodInfoPanel : function (){
		
		/*var html = '';
		var displayDate = this.getActivePanel().configuredDate;
		
		if(this.displayType=='month')
		{
			html = displayDate.format('F, Y');
		}else
		{
			if(this.days<8){
				html = GO.lang.strWeek+' '+displayDate.format('W');
			}else
			{
				html = displayDate.format('W')+' - '+displayDate.add(Date.DAY,this.days).format('W');
			}
		}*/
		
		this.periodInfoPanel.body.update(this.getActivePanel().periodDisplay);
	},
	
	
	deleteEvent : function(event, callback){
		
		//store them here so the already created window can use these values
		if(event.repeats)
		{
			this.currentDeleteEvent = event;
			this.currentDeleteCallback = callback;
			
				
			if(!this.recurrenceDialog)
			{
				this.recurrenceDialog = new GO.calendar.RecurrenceDialog({
					forDelete:true
				});

				this.recurrenceDialog.on('single', function()
				{
					var params={
						exception_date: this.currentDeleteEvent.startDate.format("U"),
						id: this.currentDeleteEvent.event_id
					};

//					if(event.has_other_participants)
//					{
//						params.send_cancellation = (confirm(GO.calendar.lang.sendCancellation)) ? 1 : 0;
//					}
					
					this.sendDeleteRequest(params, this.currentDeleteCallback, this.currentDeleteEvent);

					this.recurrenceDialog.hide();
				},this)

				this.recurrenceDialog.on('entire', function()
				{
					var params={						
						id: this.currentDeleteEvent.event_id
					};

//					if(event.has_other_participants)
//					{
//						params.send_cancellation = (confirm(GO.calendar.lang.sendCancellation)) ? 1 : 0;
//					}
					
					this.sendDeleteRequest(params, this.currentDeleteCallback, this.currentDeleteEvent, true);

					this.recurrenceDialog.hide();
				},this)

				this.recurrenceDialog.on('cancel', function()
				{
					this.recurrenceDialog.hide();
				},this)
			}
		
			this.recurrenceDialog.show();
		}else
		{
			Ext.MessageBox.confirm(GO.lang.strConfirm, GO.lang.strDeleteSelectedItem, function(btn){
				if(btn=='yes')
				{
					var params={
						//task: 'delete_event',
						id: event.event_id
					};
					
//					if(event.has_other_participants)
//					{
//						params.send_cancellation = (confirm(GO.calendar.lang.sendCancellation)) ? 1 : 0;
//					}
					
					this.sendDeleteRequest(params, callback, event);
				}
			}, this);
		}
	},
	
	sendDeleteRequest : function(params, callback, event, refresh)
	{
		GO.request({
			maskEl:this.getEl(),
			url: 'calendar/event/delete',
			params: params,
			success:function(options, response,result){
				if(!result.success)
				{
					Ext.MessageBox.alert(GO.lang.strError, result.feedback);
				}else
				{					
					if(result.askForCancelNotice){
						
						var msg = result.is_organizer ? 
							GO.calendar.lang.notifyCancelParticipants :
							GO.calendar.lang.notifyCancelOrganizer
						
						Ext.Msg.show({
							title:GO.calendar.lang.sendNotificationTitle,
							msg: msg,
							buttons: Ext.Msg.YESNO,
							fn: function(buttonId, text, config){
								params.send_cancel_notice=buttonId=='yes'?1:0;
								this.sendDeleteRequest(params, callback, event, refresh);
							},
							//animEl: 'elId',
							icon: Ext.MessageBox.QUESTION,
							scope:this
					 });
					}else
					{
						callback.call(this, event, refresh);
					}				
				}
			},
			scope:this
		});
	},

	/*
	 * 
	 * displayType: 'days', 'month', 'view'
	 * days: number of days to display in days grid
	 * calendar_id: calendar to display
	 * view_id: view to display
	 * 
	 * date: the date to display
	 * 
	 * 
	 */
	
	setDisplay : function(config){
		if(!config)
		{
			config = {};
		}
		
		if(config.calendar_id)
			config.calendars=[config.calendar_id];

		if(config.group_id)
		{
			this.group_id=config.group_id;
		}

		if(typeof(config.project_id) !='undefined')
		{
			this.project_id=config.project_id;
		}

		config.title = '';
		var record;
		if(config.view_id){
			
			this.state.displayType="view";
			this.state.view_id=config.view_id;
			
			if(!this.viewsStore.loaded){
				this.viewsStore.load({
					callback:function(){
						this.setDisplay(config);
					},
					scope:this
				});
				return;
			} else {
			
				record = this.viewsStore.getById(config.view_id);

				config.merge=record.get('merge');
				config.owncolor=record.get('owncolor');
			}
		}

		if(config.displayType)
		{							
			this.displayType=config.displayType;
		}else if(config.calendars)
		{
			this.displayType=this.lastCalendarDisplayType;
		}else if(config.view_id)
		{
			if (config.merge=='0')
				this.displayType='view';
			else
				this.displayType=this.lastCalendarDisplayType;
		}
	
		var saveState = config.days && config.days!=this.state.days || config.displayType && config.displayType!=this.state.displayType;

		this.state.displayType=this.displayType;
			
		if(this.displayType!='view')
		{
			this.lastCalendarDisplayType=this.displayType;
		}
		
		switch(this.displayType)
		{
			case 'month':
				this.displayPanel.getLayout().setActiveItem(1);
				break;
			
			case 'days':					
				this.displayPanel.getLayout().setActiveItem(0);
				break;
			
			case 'view':
				this.displayPanel.getLayout().setActiveItem(2);
				break;
			
			case 'list':
				this.displayPanel.getLayout().setActiveItem(3);
				break;
		}
		
		this.monthButton.setDisabled(this.displayType=='view');
		this.listButton.setDisabled(this.displayType=='view');

		if (config.calendars) {
			this.view_id=0;
			this.calendar_id = config.calendars.indexOf(GO.calendar.defaultCalendar.id)>-1 ? GO.calendar.defaultCalendar.id : config.calendars[0];
			this.calendars=config.calendars;
			this.daysGridStore.baseParams['calendars']=Ext.encode(config.calendars);
			this.monthGridStore.baseParams['calendars']=Ext.encode(config.calendars);
			this.listGrid.store.baseParams['calendars']=Ext.encode(config.calendars);
		}
		
		if (typeof(config.merge)!='undefined'){
			this.merge=config.merge;
			this.owncolor = config.owncolor;
		}		

		if(config.calendar_name)
		{
			this.calendar_name=config.calendar_name;
		}

		if(config.view_id)
		{
			this.view_id=config.view_id;
			this.viewGrid.setViewId(config.view_id);
		}

		

		this.daysGridStore.baseParams['owncolor']=this.owncolor;
		this.monthGridStore.baseParams['owncolor']=this.owncolor;
		this.listGrid.store.baseParams['owncolor']=this.owncolor;

		if (this.merge=='1' && this.view_id) {
			this.daysGridStore.baseParams['view_id']=this.view_id;
			this.monthGridStore.baseParams['view_id']=this.view_id;
			this.listGrid.store.baseParams['view_id']=this.view_id;
			
		} else {
			this.daysGridStore.baseParams['view_id']=null;
			this.monthGridStore.baseParams['view_id']=null;
			this.listGrid.store.baseParams['view_id']=null;			
		}
		
		if(config.unixtime){
			config.date = Date.parseDate(config.unixtime,'U');
		}

		if(config.date)
		{
			this.datePicker.setValue(config.date);
			
			if(!config.days)
			{				
				config.days = this.type=='days' ?  this.daysGrid.days : this.viewGrid.days;
			}
			this.daysGrid.setDate(config.date,config.days,this.displayType=='days');
			this.monthGrid.setDate(config.date,this.displayType=='month');
			this.viewGrid.setDate(config.date,config.days, this.displayType=='view');
			this.listGrid.setDate(config.date,config.days, this.displayType=='list');
			
			this.days=config.days;
		}else if(config.days && this.displayType!='month')
		{
			this.daysGrid.setDays(config.days, this.displayType=='days');
			this.viewGrid.setDays(config.days, this.displayType=='view');
			this.listGrid.setDays(config.days, this.displayType=='list');
			
			this.days=config.days;
		}else
		{
			if(config.days)
			{
				this.days=config.days;
			}
			
			switch(this.displayType)
			{				
				case 'month':
					this.monthGridStore.reload();
					break;
				
				case 'days':					
					this.daysGridStore.reload();
					break;
				
				case 'view':
					this.viewGrid.load();
					break;
				
				case 'list':
					this.listGrid.store.reload();
					break;
			}
		}
		
		
		this.dayButton.toggle(this.displayType=='days' && this.days==1);
		this.workWeekButton.toggle(this.displayType=='days' && this.days==5);
		this.weekButton.toggle(this.displayType=='days' && this.days==7);
		
		this.monthButton.toggle(this.displayType=='month');
		this.listButton.toggle(this.displayType=='list');
		
		this.updatePeriodInfoPanel();
		

		this.state={
			displayType:this.displayType,
			days: this.days,
			calendars:this.calendars,
			view_id: this.view_id,
			merge:this.merge,
			owncolor:this.owncolor
		};

		if(saveState)
		{
			this.saveState();
		}		
		
		this.clearGrids(config);
	},
	
	clearGrids : function(config){
		var selectGrid, clearGrids=[];
		if(this.view_id>0){
			selectGrid = this.viewsList;

			selectGrid.expand();

			this.resourcesList.getSelectionModel().clearSelections();
			
			var sr = selectGrid.getStore().getById(config.view_id);
			var sr_index = selectGrid.getStore().indexOf(sr);

			selectGrid.getSelectionModel().selectRow(sr_index);
//			selectGrid.getSelectionModel().selectRecords(rr);
			
			clearGrids.push(this.calendarList);
			if(this.projectCalendarsList)
				clearGrids.push(this.projectCalendarsList);
		}else
		{
			this.viewsList.getSelectionModel().clearSelections();
			
			if(this.group_id==1){
				
				selectGrid = this.calendarList;				
				this.resourcesList.getSelectionModel().clearSelections();

				selectGrid.expand();

				if(config.applyFilter)
					selectGrid.applyFilter(this.calendars, true);
			}else
			{
				clearGrids.push(this.calendarList);
				selectGrid = this.resourcesList;

				var records=[];
				for(var i=0,max=this.calendars.length;i<max;i++){
					records.push(selectGrid.store.getById(this.calendars[i]));
				}
				selectGrid.getSelectionModel().selectRecords(records);
				selectGrid.expand();
			}					
		}

		for(var i=0,max=clearGrids.length;i<max;i++){
			//clearGrids[i].allowNoSelection=true;
			clearGrids[i].applyFilter('clear', true);
			//clearGrids[i].allowNoSelection=false;
		}
	},
	
	saveState : function()
	{
		var state = {
			displayType: this.displayType,
			days: this.days
//			calendars:this.calendars
		};
		
//		console.log(state);

		Ext.state.Manager.set('calendar-state', Ext.encode(state));
	},
	
	refresh : function() {
		this.setDisplay();
	},
      
	createDaysGrid : function()
	{
		
		this.daysGrid.on("eventResize", function(grid, event, actionData, domIds){

			var params = {
				duration_end_time : actionData.end_time
			};

//			if(event.has_other_participants)
//				params.send_invitation=confirm(GO.calendar.lang.sendInvitationUpdate) ? 1 : 0;
			
			if(actionData.singleInstance)
			{				
				params['exception_date']=actionData.dragDate.format("U");
				params['exception_for_event_id']=event['event_id'];
			}else
			{
				params.id=event['event_id'];
			}
  		
			GO.request({
				url: 'calendar/event/submit',
				params: params,
				success: function(options,  response, result)
				{					
					if(event.repeats)
					{
						grid.store.reload();
					}

					GO.calendar.handleMeetingRequest(result);					
				}
			});
				
		}, this);
		
		
		this.daysGrid.on("create", function(CalGrid, newEvent){
			var formValues={};
				
			formValues['start_date'] = newEvent['startDate'];//.format(GO.settings['date_format']);
			formValues['start_time'] = newEvent['startDate'].format(GO.settings.time_format);
				
			formValues['end_date'] = newEvent['endDate'];//.format(GO.settings['date_format']);
			formValues['end_time'] = newEvent['endDate'].format(GO.settings.time_format);
			
				
			GO.calendar.showEventDialog({
				values: formValues,
				calendar_id: this.calendar_id
			});
				
		}, this);
			
		this.monthGrid.on("create", function(grid, date){
		
			var now = new Date.parseDate(new Date().format("H"), "H");
		
			var i = parseInt(new Date().format("i"));
			if (i > 30) {
				i = 45;
			} else if (i > 15) {
				i = 30;
			} else if (i > 0) {
				i = 15;
			} else {
				i = 0;
			}			
			now = now.add(Date.MINUTE, i);
			
			var formValues={
				start_date: date,
				end_date: date,
				start_time: now.format(GO.settings.time_format),
				end_time: now.add(Date.HOUR, 1).format(GO.settings.time_format)				
			};
				
			GO.calendar.showEventDialog({
				values: formValues,
				calendar_id: this.calendar_id
			});
		}, this);
		
		this.monthGrid.on('changeview', function(grid, days, date){
			this.setDisplay({
				displayType:'days',
				days:days,
				date: date
			});
		}, this);
		
		this.daysGrid.on("eventDblClick", this.onDblClick, this);
		this.monthGrid.on("eventDblClick", this.onDblClick, this);
		this.viewGrid.on("eventDblClick", this.onDblClick, this);
		
		
		this.monthGrid.on("move", this.onEventMove,this);
		this.daysGrid.on("move", this.onEventMove,this);

		this.viewGrid.on("move", function(grid, event, actionData, domIds){

			var params = {				
				id : event['event_id']
			};

//			if(event.has_other_participants)
//				params.send_invitation=confirm(GO.calendar.lang.sendInvitationUpdate) ? 1 : 0;
			
			if(actionData.offset)
				params['offset']=actionData.offset;
			
			if(actionData.offsetDays)
				params['offset_days']=actionData.offsetDays;
			
			if(event.repeats && actionData.singleInstance)
			{
				params['exception_date']=actionData.dragDate.format(grid.dateTimeFormat);				
			}
			
			if(actionData.calendar_id)
			{
				params['calendar_id']=actionData.calendar_id;
			}
			 		
			Ext.Ajax.request({
				url: GO.url('calendar/event/submit'),
				params: params,
				callback: function(options, success, response)
				{
					var responseParams = Ext.decode(response.responseText);
					if(!responseParams.success)
					{
						Ext.MessageBox.alert(GO.lang.strError, responseParams.feedback);
					}else
					{
						if(event.repeats && !actionData.singleInstance)
						{
							grid.reload();
						}else if(responseParams.new_event_id)
						{
							grid.setNewEventId(domIds, responseParams.new_event_id);
						}
						
						GO.calendar.handleMeetingRequest(responseParams);
					}
				}
			});	  		
	  		
		},this);
		
		
		this.viewGrid.on("create", function(grid, date, timeOfDay, calendar_id){

			var formValues={
				start_date: date,
				end_date: date
			};
			
			switch(timeOfDay){
				case 'allday':
					formValues.all_day_event=true;
				break;
				
				case 'morning':
					formValues.start_time = new Date.parseDate("08","H").format(GO.settings.time_format);
					formValues.end_time = new Date.parseDate("09","H").format(GO.settings.time_format);
				break;
				
				case 'afternoon':
					formValues.start_time = new Date.parseDate("12","H").format(GO.settings.time_format);
					formValues.end_time = new Date.parseDate("13","H").format(GO.settings.time_format);
				break;
				
				case 'evening':
					formValues.start_time = Date.parseDate("18","H").format(GO.settings.time_format);
					formValues.end_time = new Date.parseDate("19","H").format(GO.settings.time_format);
				break;
			}
			
			
				
			GO.calendar.showEventDialog({
				values: formValues,
				calendar_id: calendar_id
			});
		}, this);
	},
	  
	onDblClick : function(grid, event, actionData){
		
	
		switch(event.model_name){
			case "GO\\Tasks\\Model\\Task":
				GO.tasks.showTaskDialog({
					task_id : event.task_id
				})	
			break;
			
			case "GO\\Adressbook\\Model\\Contact":
				GO.linkHandlers["GO\\Addressbook\\Model\\Contact"].call(this, event['contact_id']);
			break;
			
			case "GO\\Calendar\\Model\\Event":
				if(event.permission_level<GO.permissionLevels.write)
					return;
		
				if(!event.is_organizer){
					// You are not authorised to edit this event because you are not the organizer.
					// Show message to the user
					//Ext.Msg.alert(GO.calendar.lang.errorOrganizerOnlyTitle, GO.calendar.lang.errorOrganizerOnly);

					if(!this.attendanceWindow){
						this.attendanceWindow = new GO.calendar.AttendanceWindow ();
						this.attendanceWindow.on('save', function(){
							this.refresh();
						}, this);
					}			
					this.attendanceWindow.show(event.event_id);
					if(event.repeats && actionData.singleInstance)
					{
						this.attendanceWindow.setExceptionDate(event['startDate'].format("U"));
					}else
					{
						this.attendanceWindow.setExceptionDate(false);
					}
					return;
				}

				if(event.read_only && !event.contact_id && !event.task_id)
					return false;

				if(event.repeats && actionData.singleInstance)
				{
					GO.calendar.showEventDialog({
						exception_date: event['startDate'].format("U"),
						event_id: event['event_id'],
						oldDomId : event.domId
					});
				}else
				{
					GO.calendar.showEventDialog({
						event_id: event['event_id'],
						oldDomId : event.domId
					});		
				}
			break;			
		}
	},
    
	onEventMove : function(grid, event, actionData, domIds){

		var params = {
			//task : 'update_grid_event',
			//id : event['event_id']
		};

		if(actionData.offset)
			params['offset']=actionData.offset;

		if(actionData.offsetDays)
			params['offset_days']=actionData.offsetDays;

		if(event.repeats && actionData.singleInstance)
		{			
			params['exception_date']=actionData.dragDate.format("U");
			params['exception_for_event_id']=event['event_id'];
			params['repeats']=true;
		}else
		{
			params['id']=event['event_id'];
		}

		if(actionData.calendar_id)
		{
			params['calendar_id']=actionData.calendar_id;
		}

//		if(event.has_other_participants)
//			params.send_invitation=confirm(GO.calendar.lang.sendInvitationUpdate) ? 1 : 0;

		GO.request({
			url: 'calendar/event/submit',
			params: params,
			success: function(response, options, result)
			{

//				if(event.repeats && !actionData.singleInstance)
//				{
//					grid.store.reload();
//				}else if(responseParams.id)
//				{
//					grid.setNewEventId(domIds, responseParams.id);
//				}
				if(event.repeats)
					grid.store.reload();

				GO.calendar.handleMeetingRequest(result);
				
			},
			fail : function(response, options, result){
				grid.store.reload();
			}
			
		});
	},

	showAdminDialog : function() {
		
		if(!this.adminDialog)
		{
			
			this.writableCalendarsStore = new GO.data.JsonStore({
				url: GO.url("calendar/calendar/store"),
				baseParams: {
					permissionLevel: GO.permissionLevels.write
				},
				fields:['id','name','user_name'],
				remoteSort:true,
				sortInfo: {
					field: 'name',
					direction: 'ASC'
				}
			});

			
			this.writableViewsStore = new GO.data.JsonStore({
				
				url: GO.url("calendar/view/store"),
				baseParams:{
					permissionLevel:GO.permissionLevels.write
				},
				fields:['id','name','user_name','merge'],
				remoteSort:true,
				sortInfo: {
					field: 'name',
					direction: 'ASC'
				}
			});

			this.writableResourcesStore = new Ext.data.GroupingStore({
				baseParams: {
					resourcesOnly : '1',
					permissionLevel:GO.permissionLevels.write
				},
				reader: new Ext.data.JsonReader({
					root: 'results',
					id: 'id',
					totalProperty: 'total',
					fields:['id','name','user_name','group_name']
				}),
				proxy: new Ext.data.HttpProxy({
					url: GO.url("calendar/calendar/calendarsWithGroup")
				}),
				groupField:'group_name',
				remoteSort:true,
				remoteGroup:true,
				sortInfo: {
					field: 'name',
					direction: 'ASC'
				}
			}),

            
			
			this.calendarDialog = GO.calendar.calendarDialog = new GO.calendar.CalendarDialog();
			this.calendarDialog.on('save', function(e, group_id)
			{
				this.adminDialog.madeChanges=true;
				if(group_id > 1)
				{
					this.writableResourcesStore.reload();
				} else
				{
					this.writableCalendarsStore.reload();
				}
			}, this);

			this.calendarDialog.on('calendarimport', function(){this.adminDialog.madeChanges=true;}, this);

			var tbar = [{
				iconCls: 'btn-add',
				text: GO.lang.cmdAdd,
				disabled: !GO.settings.modules.calendar.write_permission,
				cls: 'x-btn-text-icon',
				handler: function(){
					this.calendarDialog.show(0, false);
				},
				scope: this
			},{				
				iconCls: 'btn-delete',
				text: GO.lang.cmdDelete,
				disabled: !GO.settings.modules.calendar.write_permission,
				cls: 'x-btn-text-icon',
				handler: function(){
					this.calendarsGrid.deleteSelected();
				},
				scope:this
			}]

			if(GO.customfields)
			{
				tbar.push(new Ext.Button({
					iconCls: 'btn-settings',
					disabled: !GO.settings.modules.calendar.write_permission,
					text: GO.customfields.lang.customfields,
					cls: 'x-btn-text-icon',
					handler: function()
					{
						GO.calendar.groupDialog.show(1);
					},
					scope: this
				}));
			}

			tbar.push('-');
//			tbar.push(new Ext.Button({			    
//				iconCls: 'btn-settings',
//				text: GO.lang.strPermissions,
//				disabled: !GO.settings.modules.calendar.write_permission,
//				cls: 'x-btn-text-icon',
//				handler: function(){
//					if(!GO.calendar.permissionsDialog)
//					{
//						GO.calendar.permissionsDialog = new GO.calendar.PermissionsDialog();
//					}
//					GO.calendar.permissionsDialog.show(0);
//				},
//				scope: this
//			}));

			tbar.push(new GO.form.SearchField({
				store: this.writableCalendarsStore,
				width:150
			}));

			this.calendarsGrid = new GO.grid.GridPanel( {
				title: GO.calendar.lang.calendars,
				paging: true,
				border: false,
				store: this.writableCalendarsStore,
				deleteConfig: {
					callback:function(){
						this.adminDialog.madeChanges=true;
					},
					scope:this
				},
				columns:[{
					header:GO.lang.strName,
					dataIndex: 'name',
					sortable:true
				},{
					header:GO.lang.strOwner,
					dataIndex: 'user_name'
				}],
				view:new  Ext.grid.GridView({
					autoFill:true
				}),
				sm: new Ext.grid.RowSelectionModel(),
				loadMask: true,
				tbar:tbar
				
			});		
            
			this.calendarsGrid.on("rowdblclick", function(grid, rowClicked, e)
			{
				this.calendarDialog.show(grid.selModel.selections.keys[0], false);
			}, this);
			
			this.viewDialog = new GO.calendar.ViewDialog();
			
			this.viewDialog.on('save', function(){
				this.writableViewsStore.reload();
				this.adminDialog.madeChanges=true;
			}, this);

			this.viewsGrid = new GO.grid.GridPanel( {
				title: GO.calendar.lang.views,
				paging: true,
				border: false,
				store: this.writableViewsStore,
				deleteConfig: {
					callback:function(){
						this.adminDialog.madeChanges=true;
					},
					scope:this
				},
				columns:[{
					header:GO.lang.strName,
					dataIndex: 'name',
					sortable:true
				},{
					header:GO.lang.strOwner,
					dataIndex: 'user_name'
				}
				],
				view:new  Ext.grid.GridView({
					autoFill:true
				}),
				sm: new Ext.grid.RowSelectionModel(),
				loadMask: true,
				tbar: [{					
					iconCls: 'btn-add',
					text: GO.lang.cmdAdd,
//					disabled: !GO.settings.modules.calendar.write_permission,
					cls: 'x-btn-text-icon',
					handler: function(){
						this.viewDialog.show();
					},
					scope: this
				},{
					iconCls: 'btn-delete',
					text: GO.lang.cmdDelete,
//					disabled: !GO.settings.modules.calendar.write_permission,
					cls: 'x-btn-text-icon',
					handler: function(){
						this.viewsGrid.deleteSelected();
					},
					scope:this
				},
				'-',
						this.searchField = new GO.form.SearchField({
							store: this.writableViewsStore,
							width:150,
							emptyText: GO.lang.strSearch
						})]
			});
			
			this.viewsGrid.on("rowdblclick", function(grid, rowClicked, e){
				this.viewDialog.show(grid.selModel.selections.keys[0]);
			}, this);
			
			this.viewsGrid.on('show', function(){
				this.writableViewsStore.load();
			},this, {
				single:true
			});
			
			GO.calendar.groupsGrid = this.groupsGrid = new GO.calendar.GroupsGrid({
				title:GO.calendar.lang.resource_groups,
				layout:'fit',
				store:GO.calendar.groupsStore,
				deleteConfig: {
					callback:function(){						
						this.adminDialog.madeChanges=true;
					},
					scope:this
				}
			});
			            
			this.resourcesGrid = new GO.calendar.ResourcesGrid({
				title:GO.calendar.lang.resources,
				layout:'fit',
				store:this.writableResourcesStore,
				deleteConfig: {
					callback:function(){						                   
						this.adminDialog.madeChanges=true;
					},
					scope:this
				}
			});

			this.categoriesGrid = new GO.calendar.CategoriesGrid({
				title:GO.calendar.lang.globalCategories,
				layout:'fit',
				store:GO.calendar.globalOnlyCategoriesStore
			});

			GO.calendar.categoryDialog = new GO.calendar.CategoryDialog();
			GO.calendar.categoryDialog.on('save', function()
			{
				GO.calendar.categoriesStore.reload();		
			},this);

			var items = [this.calendarsGrid,this.viewsGrid];
			if(GO.settings.modules.calendar.write_permission)
			{
				items.push(this.groupsGrid);
			}

			items.push(this.resourcesGrid);
			if(GO.settings.modules.calendar.write_permission)
			{				
				items.push(this.categoriesGrid);
			}
            
			this.adminDialog = new Ext.Window({
				title: GO.calendar.lang.administration,
				layout:'fit',
				modal:true,
				minWidth:300,
				minHeight:300,
				height:400,
				width:600,
				closeAction:'hide',
				madeChanges:false,//used for reloading other stuff in the calendar
				items: new Ext.TabPanel({
					border:false,
					activeTab:0,
					items:items
				}),
				buttons:[{
					text:GO.lang.cmdClose,
					handler: function(){
						this.adminDialog.hide()
					},
					scope: this
				}]
			});

			this.adminDialog.on('hide', function(){
				if(this.adminDialog.madeChanges){

					this.init();

					if(GO.calendar.eventDialog){
						GO.calendar.eventDialog.initialized=false;
					}					
					this.adminDialog.madeChanges=false;
				}
			}, this);
			
		}
		this.writableCalendarsStore.load();
		this.adminDialog.show();			
	}
});


GO.calendar.extraToolbarItems = [];

GO.moduleManager.addModule('calendar', GO.calendar.MainPanel, {
	title : GO.calendar.lang.calendar,
	iconCls : 'go-tab-icon-calendar'
});

GO.mainLayout.onReady(function(){
	GO.calendar.groupsStore = new GO.data.JsonStore({
		url: GO.url("calendar/group/store"),
		fields:['id','name','user_name','fields','acl_id'],
		remoteSort: true
	}),

	GO.calendar.categoriesStore = new GO.data.JsonStore({
		url : GO.url('calendar/category/store'),
		baseParams : {
			calendar_id:0
		},
		root : 'results',
		totalProperty : 'total',
		id : 'id',
		fields : ['id', 'name','color','calendar_id'],
		remoteSort : true
	}),
	
	GO.calendar.globalOnlyCategoriesStore = new GO.data.JsonStore({
		url : GO.url('calendar/category/store'),
		baseParams : {
			calendar_id:0,
			global_categories:1
		},
		root : 'results',
		totalProperty : 'total',
		id : 'id',
		fields : ['id', 'name','color','calendar_id'],
		remoteSort : true
	}),
	
	GO.calendar.globalCategoriesStore = new GO.data.JsonStore({
		url : GO.url('calendar/category/store'),
		baseParams : {
			calendar_id:0,
			global_categories:1
		},
		root : 'results',
		totalProperty : 'total',
		id : 'id',
		fields : ['id', 'name','color','calendar_id'],
		remoteSort : true
	}),

	GO.newMenuItems.push({
		text: GO.calendar.lang.appointment,
		iconCls: 'go-model-icon-GO\\Calendar\\Model\\Event',
		handler:function(item, e){

			var eventShowConfig = item.parentMenu.eventShowConfig || {};
			eventShowConfig.link_config=item.parentMenu.link_config

			GO.calendar.showEventDialog(eventShowConfig);
		}
	});

	//GO.checker is not available in some screens like accept invitation from calendar
	if(GO.checker){

		GO.checker.on('check', function(checker, data){
			var tp = GO.mainLayout.getModulePanel('calendar');
			if(tp && tp.isVisible() && data.calendar)
			{			
				if(GO.calendar.activePanel.id != 'view-grid')
				{
					if((GO.calendar.activePanel.store.reader.jsonData.count_events_only != data.calendar.count) || (GO.calendar.activePanel.store.reader.jsonData.mtime != data.calendar.mtime))
					{
						GO.calendar.activePanel.store.reload();
					}
				}else
				{
					if((GO.calendar.activePanel.count != data.calendar.count) || (GO.calendar.activePanel.mtime != data.calendar.mtime))
					{
						GO.calendar.activePanel.reload();
					}
				}
			}
		});
	}
});

GO.calendar.showEventDialog = function(config){

	if(!GO.calendar.eventDialog)
		GO.calendar.eventDialog = new GO.calendar.EventDialog();	

	GO.calendar.eventDialog.show(config);
}

GO.linkHandlers["GO\\Calendar\\Model\\Event"]=function(id){
	//GO.calendar.showEventDialog({event_id:id});
	if(!GO.calendar.eventLinkWindow){
		var eventPanel = new GO.calendar.EventPanel();
		GO.calendar.eventLinkWindow = new GO.LinkViewWindow({
			title: GO.calendar.lang.appointment,
			closeAction:'hide',
			items: eventPanel,
			eventPanel: eventPanel
		});
	}
	GO.calendar.eventLinkWindow.eventPanel.load(id);
	GO.calendar.eventLinkWindow.show();
	return GO.files.eventLinkWindow;
};

GO.quickAddPanel.addButton(new Ext.Button({
	iconCls:'img-calendar-add',
	cls: 'x-btn-icon', 
	tooltip:GO.calendar.lang.appointment,
	handler:function(item, e){
		GO.calendar.showEventDialog({});
	},
	scope: this
}),0);

GO.linkPreviewPanels["GO\\Calendar\\Model\\Event"]=function(config){
	var config = config || {};
	return new GO.calendar.EventPanel(config);
}

GO.calendar.openCalendar = function(displayConfig){
		var mp = GO.mainLayout.initModule('calendar');
		displayConfig.applyFilter=true;
		if(mp.rendered){
			mp.setDisplay(displayConfig);
			mp.show();
		}else
		{
			GO.calendar.openState=displayConfig;
			mp.show();
		}
//	}else
//	{
//		GO.calendar.openState=displayConfig;
//		GO.mainLayout.on('render', function(){
//			 GO.mainLayout.openModule('calendar');
//		});
//	}
	
}


GO.calendar.handleMeetingRequest=function(responseResult){
	
	if (responseResult.askForMeetingRequestForNewParticipants && responseResult.isNewEvent) {
		Ext.Msg.show({
			title:GO.calendar.lang.notifyParticipants,
			msg: GO.calendar.lang.sendNotificationToNewParticipants,
			buttons: {
				yes:GO.calendar.lang.newParticipants,
				no:GO.calendar.lang.allParticipants,
				cancel:GO.calendar.lang.noParticipants
			},
			fn: function(buttonId, text, config){
				if(buttonId=='yes'){
					GO.request({
						url:"calendar/event/sendMeetingRequest",
						params:{
							event_id:responseResult.id,
							new_participants_only: true,
							is_update:responseResult.is_update
						}
					})
				} else if (buttonId=='no') {
					GO.request({
						url:"calendar/event/sendMeetingRequest",
						params:{
							event_id:responseResult.id,
							is_update:responseResult.is_update
						}
					})
				} else {
					GO.request({
						url:"calendar/participant/clearNewParticipantsSession"
					});
				}
			},
			scope: this,
			icon: Ext.MessageBox.QUESTION
	 });
	} else if (responseResult.askForMeetingRequest && responseResult.isNewEvent){
		
		Ext.Msg.show({
			title:GO.calendar.lang.notifyParticipants,
			msg: GO.calendar.lang.sendNotification,
			buttons: Ext.Msg.YESNO,
			fn: function(buttonId, text, config){
				if(buttonId=='yes'){
					GO.request({
						url:"calendar/event/sendMeetingRequest",
						params:{
							event_id:responseResult.id,
							is_update:responseResult.is_update
						}
					})
				} else {
					GO.request({
						url:"calendar/participant/clearNewParticipantsSession"
					});
				}
			},
			icon: Ext.MessageBox.QUESTION
	 });
	} else {
		GO.request({
			url:"calendar/participant/clearNewParticipantsSession"
		});
	}
}



/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @version $Id: MonthGrid.js 20164 2016-06-23 13:31:47Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */


GO.grid.MonthGrid = Ext.extend(Ext.Panel, {
	/**
     * @cfg {String} The components handles dates in this format
     */
	dateFormat : 'Y-m-d',
	/**
     * @cfg {String} The components handles dates in this format
     */
	dateTimeFormat : 'Y-m-d H:i',

	timeFormat : 'H:i',
	/**
     * @cfg {Number} Start day of the week. Monday or sunday
     */
	firstWeekday : 1,
	/**
     * @cfg {Date} The date set by the user
     */
	configuredDate : false,
	/**
     * @cfg {Date} The date where the grid starts. This can be recalculated after a user sets a date
     */
	startDate : false,

	//private var that is used when an event is dragged to another location
	dragEvent : false,

	//all the grid appointments are stored in this array. First index is day and second is the dom ID.
	appointments : Array(),

	//The remote database ID's can be stored in this array. Useful for database updates
	remoteEvents : Array(),

	remoteEventsById : Array(),

	//domids that need to be moved along with another. When an event spans multiple days
	domIds : Array(),

	//eventIdToDomId : {},

	//amount of days to display
	days : 1,

	selected : Array(),

	writePermission : false,

	/**
   * The amount of space to reserve for the scrollbar (defaults to 19 pixels)
   * @type Number
   */
	scrollOffset: 22,

	gridEvents : {},

	weekNumberWidth : 16,

	dayNameHeight : 16,

	nextId : 0,

	periodDisplay : '',
	
	// private
	initComponent : function(){
		this.autoScroll=true;
		this.addEvents({
			'showday' :true,
			/**
		     * @event click
		     * Fires when this button is clicked
		     * @param {Button} this
		     * @param {EventObject} e The click event
		     */
			"create" : true,
			/**
		     * @event toggle
		     * Fires when the "pressed" state of this button changes (only if enableToggle = true)
		     * @param {Button} this
		     * @param {Boolean} pressed
		     */
			"move" : true,
			"eventResize" : true,
			"eventDblClick" : true,
			"deleteEvent" : true

		});

		if(this.store){
			this.setStore(this.store, true);
		}

		if(!this.startDate)
		{
			//lose time
			var date = new Date();
			this.startDate=Date.parseDate(date.format(this.dateFormat), this.dateFormat);
		}

		this.configuredDate=this.startDate;

		GO.grid.MonthGrid.superclass.initComponent.call(this);
	},

	//build the html grid
	afterRender : function(){

		GO.grid.MonthGrid.superclass.afterRender.call(this);

		//important to do here. Don't remember why :S
		this.setDate(this.startDate, false);



		//if this is not set the grid does not display well when I put a load mask on it.
		//this.body.setStyle("overflow", "hidden");

		//Don't select things inside the grid
		this.body.unselectable();

		//this.renderMonthView();

		this.setStore(this.store);

		this.initDD();
	},

	renderMonthView : function()
	{
		this.body.update('');

		var currentMonthStr = this.configuredDate.format('Ym');
		var currentDate = new Date();
		var currentDateStr = currentDate.format('Ymd');

		var weekDay=0;
		var cellClass = '';
		var dateFormat;

		this.cellWrap = Ext.DomHelper.append(this.body,{
			tag:'div',
			id:'cal-monthGrid-wrap'
		}, true);


		this.gridCells={};
		this.weekNumberCells=[];
		this.dayNameCells=[];

		var cell = Ext.DomHelper.append(this.cellWrap,
		{
			tag: 'div',
			style: 'width:'+(this.dayNameHeight-1)+'px',
			cls: 'cal-monthgrid-week-no'
		}, true);

		Ext.DomHelper.append(cell,{
			tag: 'div',
			cls: 'x-monthGrid-cell-day-text',
			html: '&nbsp;'
		}, true);

		for(var i=this.firstWeekday; i<7+this.firstWeekday; i++)
		{
			var dayName = (i == 7) ? GO.lang.full_days[0] : GO.lang.full_days[i];

			var cell = Ext.DomHelper.append(this.cellWrap,
			{
				tag: 'div',
				cls: 'cal-monthgrid-week-no'
			}, true);

			Ext.DomHelper.append(cell,{
				tag: 'div',
				cls: 'x-monthGrid-cell-day-text',
				html: dayName
			}, true);

			this.dayNameCells.push(cell);
		}

		for(var day=0;day<this.days;day++)
		{
			var dt = this.startDate.add(Date.DAY, day);
			
			//workaround IE bug:
			if(dt.format('H')==23) dt = dt.add(Date.HOUR, 2);
		
			if(day == 0 || dt.format('j')==1)
			{
				dateFormat = 'j F';
			}else
			{
				dateFormat = 'j';
			}

			var weekday = dt.format('w');
			var monthStr = dt.format('Ym');
			var dateStr = dt.format('Ymd');


			if(weekday==this.firstWeekday)
			{
				var weekNo = dt.format('W');

				var cell = Ext.DomHelper.append(this.cellWrap,
				{
					tag: 'div',
					style: 'width:'+(this.weekNumberWidth-1)+'px',
					cls: 'cal-monthgrid-week-no'
				}, true);

				var weekLink = Ext.DomHelper.append(cell,{
					tag: 'a',
					cls: 'x-monthGrid-cell-day-text',
					href: '#',
					id:'wl-'+dateStr,
					html: weekNo
				}, true);

				weekLink.on('click', this.onWeekClick, this);

				this.weekNumberCells.push(cell);
			}



			if(dateStr==currentDateStr)
			{
				cellClass = 'cal-monthGrid-cell x-monthGrid-cell-today';
			}else if(monthStr==currentMonthStr && (weekday==0 || weekday==6))
			{
				cellClass = 'cal-monthGrid-cell x-monthGrid-cell-weekend';
			}else if (monthStr==currentMonthStr)
			{
				cellClass = 'cal-monthGrid-cell x-monthGrid-cell-current';
			}else
			{
				cellClass = 'cal-monthGrid-cell';
			}

			var id = 'd'+dateStr;

			var cell = Ext.DomHelper.append(this.cellWrap,
			{
				tag: 'div',
				id: id,
				cls: cellClass
			}, true);
			
			cell.on('click', this.onAddClick, this);

			var dayLink = Ext.DomHelper.append(cell,{
				tag: 'a',
				cls: 'x-monthGrid-cell-day-text',
				href: '#',
				html: dt.format(dateFormat)
			}, true);

			dayLink.on('click', this.onDayClick, this);

			this.gridCells[dateStr]=cell;
		}
		this.syncSize();
	},

	onMoreClick : function(e, target)
	{
		var cell = Ext.get(target).findParent('div.cal-monthGrid-cell', 3);
		var date = Date.parseDate(cell.id.substring(1, cell.id.length),'Ymd');
		this.fireEvent('changeview', this, 1, date);
		e.stopEvent();
	},

	onWeekClick : function(e, target){
		var date = Date.parseDate(target.id.substring(3, target.id.length),'Ymd');
		this.fireEvent('changeview', this, 7, date);
		e.stopEvent();
	},
	
	onDayClick : function(e, target){
		var cell = Ext.get(target).findParent('div.cal-monthGrid-cell', 3);
		var date = Date.parseDate(cell.id.substring(1, cell.id.length),'Ymd');
		this.fireEvent('changeview', this, 1, date);
		e.stopEvent();
	},

	onAddClick : function(e, target){
//		var cell = Ext.get(target).findParent('div.cal-monthGrid-cell', 3);
		var date = Date.parseDate(target.id.substring(1, target.id.length),'Ymd');
		if(date){ // in firefox this event somehow also fires on events
			this.fireEvent('create', this, date);
			e.stopEvent();
		}
	},

	onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){
		Ext.grid.GridPanel.superclass.onResize.apply(this, arguments);

		this.syncSize();
		this.checkOverflow();
	},

	calcCellSize : function (ctSize, scrollOffsetUsed)
	{
		this.cellHeight = ((ctSize['height']-this.dayNameHeight) /(this.days/7));
		if(this.cellHeight<100)
		{
			this.cellHeight=100;
			if(!scrollOffsetUsed)
			{
				ctSize['width']-= this.scrollOffset;
			}
		}

		this.cellWidth = ((ctSize['width']-this.weekNumberWidth)/7);
		if(this.cellWidth<100)
		{
			this.cellWidth=100;
			ctSize['height']-= this.scrollOffset;

			if(!scrollOffsetUsed)
			{
				this.calcCellSize(ctSize, true);
			}
		}

		this.cellHeight=Math.floor(this.cellHeight);
		this.cellWidth=Math.floor(this.cellWidth);


	},

	checkOverflow : function(){
		if(this.overflowIndicators)
		{
			for(var i=0;i<this.overflowIndicators.length;i++)
				this.overflowIndicators[i].remove();
		}

		this.overflowIndicators=[];

		for(var i in this.gridCells)
		{
			if(this.gridCells[i].dom.scrollHeight>this.gridCells[i].dom.clientHeight+1) //+1 is for rounding issues on chrome
			{
				var el = Ext.DomHelper.append(this.gridCells[i],
				{
					tag: 'a',
					cls: 'cal-overflow-indicator',
					href: '#',
					html: GO.lang.more+'...'
				}, true);

				el.on('click', this.onMoreClick, this);

				var pos = this.gridCells[i].getXY();
				el.setXY(pos);
				this.overflowIndicators.push(el);
			}
		}
	},

	syncSize : function(){

		if(this.cellWrap)
		{
			//get content size of element
			var ctSize = this.container.getSize(true);
			this.calcCellSize(ctSize);

			this.cellWrap.setSize(this.cellWidth*7+this.weekNumberWidth, this.cellHeight*(this.days/7));

			for(var i in this.gridCells)
			{
				this.gridCells[i].setSize(this.cellWidth, this.cellHeight);
			}

			for(var i=0;i<this.dayNameCells.length;i++)
			{
				this.dayNameCells[i].setWidth(this.cellWidth);
			}

			for(var i=0;i<this.weekNumberCells.length;i++)
			{
				this.weekNumberCells[i].setHeight(this.cellHeight);
			}

			for(var d in this.gridEvents)
			{
				for(var i=0;i<this.gridEvents[d].length;i++)
					this.gridEvents[d][i].setWidth(this.cellWidth-3);
			}


		}
	},

	initDD :  function(){

		var dragZone = new GO.calendar.dd.MonthDragZone(this.body, {
			ddGroup: 'month-grid',
			scroll: false,
			monthGrid: this
		});

		var dropTarget = new GO.calendar.dd.MonthDropTarget(this.body, {
			ddGroup: 'month-grid',
			onNotifyDrop : function(dd, e, data) {

				//number of seconds moved

				var dragTime = data.dragDate.format('U');
				var dropTime = data.dropDate.format('U');

				var offsetDays = Math.round((dropTime-dragTime)/86400);

				var actionData = {
					offsetDays:offsetDays,
					dragDate: data.ddel.eventData.startDate //data.dragDate
					};

				var remoteEvent = this._elementIdToEvent(data.item.id);

				if(!remoteEvent.read_only)
				{
					if(remoteEvent['repeats'])
					{
						this.handleRecurringEvent("move", remoteEvent, actionData);
					}else
					{
						this.removeEvent(remoteEvent.domId);
						delete remoteEvent.domId;
						remoteEvent.repeats=false;
						remoteEvent.startDate = remoteEvent.startDate.add(Date.DAY, offsetDays);
						remoteEvent.endDate = remoteEvent.endDate.add(Date.DAY, offsetDays);
						remoteEvent.start_time = remoteEvent.startDate.format('U');
						remoteEvent.end_time = remoteEvent.endDate.format('U');
						var domIds = this.addMonthGridEvent(remoteEvent);

						this.fireEvent("move", this, remoteEvent, actionData, domIds);

						this.clearSelection();
					}
				}
			},
			scope : this
		});
	},

	setStore : function(store, initial){
		if(!initial && this.store){
			this.store.un("beforeload", this.reload);
			this.store.un("datachanged", this.reload);
			this.store.un("clear", this.reload);
		}
		if(store){
			store.on("beforeload", this.mask, this);
			store.on("datachanged", this.reload, this);
			store.on("clear", this.reload, this);

		}
		this.store = store;
	},

	setStoreBaseParams : function(){
		this.store.baseParams['start_time']=this.startDate.format(this.dateTimeFormat);
		this.store.baseParams['end_time']=this.endDate.format(this.dateTimeFormat);
	},

	getFirstDateOfWeek : function(date)
	{
		//Calculate the first day of the week
		var weekday = date.getDay();
		if(weekday<this.firstWeekday)
			weekday=7;

		return date.add(Date.DAY, this.firstWeekday-weekday);
	},
	mask : function()
	{
		if(this.rendered)
		{
			this.body.mask(GO.lang.waitMsgLoad,'x-mask-loading');
		}
	},
	unmask : function()
	{
		if(this.rendered)
		{
			this.body.unmask();
		}
	},
	getSelectedEvent : function()
	{
		if(this.selected && this.selected.length > 0)
		{
			return this._elementIdToEvent(this.selected[0].id);
		}
	},
	isSelected : function(eventEl)
	{
		for (var i=0;i<this.selected.length;i++)
		{
			if(this.selected[i].id==eventEl)
			{
				return true;
			}
		}
		return false;
	},
	clearSelection : function()
	{
		for (var i=0;i<this.selected.length;i++)
		{
			this.selected[i].removeClass('x-calGrid-selected');
		}
		this.selected=[];
	},
	selectEventElement : function(eventEl)
	{
		if(!this.isSelected(eventEl))
		{
			this.clearSelection();

			var elements = this.getRelatedDomElements(eventEl.id);

			for (var i=0;i<elements.length;i++)
			{
				var element = Ext.get(elements[i]);
				if(element)
				{
					element.addClass('x-calGrid-selected');
					element.focus();
					this.selected.push(element);
				}
			}
		}

	},

	showContextMenu : function(e, event)
	{		
		if(!this.contextMenu)
		{
			this.contextMenu = new GO.calendar.ContextMenu();

			this.contextMenu.on('deleteEvent', function()
			{
				this.fireEvent("deleteEvent", this);
			},this);
			
			this.contextMenu.on('updateEvent', function(obj, new_event_id)
			{				
				var event = obj.event;
				var calendar_visible = false;
				var calendars = Ext.decode(this.store.baseParams['calendars']);
				for(var i=0; i<calendars.length && !calendar_visible; i++)
				{
					if(calendars[i] == event.calendar_id)
					{
						calendar_visible = true;
					}
				}

				if(obj.isCopy)
				{
					if(calendar_visible)
					{
//						if(event.repeats)
//						{
							this.store.reload();
//						}else
//						{
//							var newEvent = GO.util.clone(event);

//							delete(newEvent.id);
//
//							newEvent.event_id = new_event_id;
//							newEvent.startDate = Date.parseDate(newEvent.start_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
//							newEvent.endDate = Date.parseDate(newEvent.end_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
//							newEvent.start_time=newEvent.startDate.format(this.dateTimeFormat);
//							newEvent.end_time=newEvent.endDate.format(this.dateTimeFormat);
//
//							this.addMonthGridEvent(newEvent);
//						}
					}
				}else
				{
					if(obj.repeats)
					{
						this.store.reload();
					}else
					{
						this.removeEvent(event.domId);
						delete event.domId;

						if(calendar_visible)
						{							
							event.startDate = Date.parseDate(event.start_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							event.endDate = Date.parseDate(event.end_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							event.start_time=event.startDate.format(this.dateTimeFormat);
							event.end_time=event.endDate.format(this.dateTimeFormat);

							this.addMonthGridEvent(event);
						}
					}
				}
			},this);
		}

		e.stopEvent();
		//this.contextMenu.setParticipants(event.participant_ids);
		this.contextMenu.setEvent(event);
		this.contextMenu.showAt(e.getXY());
	},
	
	addMonthGridEvent : function (eventData)
	{
		if(eventData.id  == undefined)
		{
			eventData.id = this.nextId++;
		}
		//the start of the day the event starts
		var eventStartDay = Date.parseDate(eventData.startDate.format('Ymd'),'Ymd');
		var eventEndDay = Date.parseDate(eventData.endDate.format('Ymd'),'Ymd');

		//get unix timestamps
		var eventStartTime = eventStartDay.format('U');
		var eventEndTime = eventEndDay.format('U');

		//ceil required because of DST changes!
		var daySpan = Math.round((eventEndTime-eventStartTime)/86400)+1;
		//var daySpan = Math.round((eventEndTime-eventStartTime)/86400);
		
		
		// Fix for not displaying a multiday event on the last day when the endtime is set to 0:00
		if(daySpan > 1 && eventData.endDate.format(GO.settings.time_format) === '0:00'){
			daySpan--; // decrease the daySpan with one day.
		}
		
		var domIds = [];

		for(var i=0;i<daySpan;i++)
		{
			var date = eventStartDay.add(Date.DAY, i);

			eventData.domId = Ext.id();
			domIds.push(eventData.domId);

			//related events for dragging
			if(daySpan>1)
			{
				if(!this.domIds[eventData.id])
				{
					this.domIds[eventData.id]=[];
				}
				this.domIds[eventData.id].push(eventData.domId);
			}

			var col = Ext.get('d'+date.format('Ymd'));

			if(col)
			{
				var text = '';
				if(GO.calendar.showStatuses && !GO.util.empty(eventData.status_color))
					text += '<span class="x-calGrid-event-status" style="background-color:#'+eventData.status_color+';"></span>';				

				if(daySpan==1){
					if(GO.util.empty(eventData.all_day_event))
					{
						text += eventData.startDate.format(GO.settings.time_format)+'&nbsp;';
					}
					text += eventData['name'];
				}else
				{
					if(i==0){
						text += '<div class="cal-arrow-left"></div>'
						if(GO.util.empty(eventData.all_day_event))
							text += eventData.startDate.format(GO.settings.time_format)+'&nbsp;';
						text += eventData['name'];
					}else if(i==daySpan-1){
						text += eventData['name']+'&nbsp;';
						if(GO.util.empty(eventData.all_day_event))
							text += eventData.endDate.format(GO.settings.time_format);
						text += '<div class="cal-arrow-right"></div>';
					}else
					{
						text += '<div class="cal-arrows"></div>&nbsp;'+eventData['name'];
					}
				}
				
				var cls = "x-calGrid-month-event-container cal-event-partstatus-"+eventData.partstatus;

//				if(eventData.link_count>0){
//					cls +=' cal-has-links'
//				}

				if(eventData.link_count>0){
					text +='<span class="cal-has-links"></span>';
				}
				if (eventData["private_enabled"])
					text += '<span class="cal-is-private"></span>';
				if (eventData.has_reminder==1)
					text += '<span class="cal-has-reminders"></span>';
				if (eventData.repeats)
					text += '<span class="cal-recurring"></span>';
				
				if (!GO.util.empty(eventData.resources))
					text += '<span class="cal-resources"></span>';
				
				var domCfg = {
					tag: 'div',
					id: eventData.domId,
					cls: cls,
					style:"background-color:#"+eventData.background+';width:'+(this.eventWidth)+'px',
					html: text,
					"ext:qtip": GO.calendar.formatQtip(eventData),
					"ext:qtitle":Ext.util.Format.htmlEncode(eventData.name),
					"event_id" : eventData.id,
					tabindex:0//tabindex is needed for focussing and events
				};
				
				var dateStr = date.format('Ymd');
				if(!this.gridEvents[dateStr])
				{
					this.gridEvents[dateStr]=[];
				}
				
				var eventBefore = false;
				
				if(eventData.all_day_event){
					for(var x=0;x<this.gridEvents[dateStr].length;x++){
						var domId = this.gridEvents[dateStr][x].id;
						var existingEvent = this.remoteEvents[domId];
	//					console.log(d.name+" "+d.startDate+' > '+eventData.name+" "+eventData.startDate);
						if(existingEvent && existingEvent.name>eventData.name){
							eventBefore=Ext.get(domId);
							break;
						}
					}
				}
				
				
				var event = eventBefore ? Ext.DomHelper.insertBefore(eventBefore,	domCfg, true) : Ext.DomHelper.append(col,	domCfg, true);

				

				this.gridEvents[dateStr].push(event);

				this.registerEvent(eventData.domId, eventData);

				//if(!eventData.read_only)
				//{
					event.on('click', function(e, eventEl){
						eventEl = Ext.get(eventEl).findParent('div.x-calGrid-month-event-container', 2, true);

						this.selectEventElement(eventEl);
						this.clickedEventId=eventEl.id;

						e.stopEvent();
					}, this);
				//}

				event.on('dblclick', function(e, eventEl){

					eventEl = Ext.get(eventEl).findParent('div.x-calGrid-month-event-container', 2, true);

//					this.clickedEventId=eventEl.id;

					//this.eventDoubleClicked=true;
					var event = this._elementToEvent(eventEl);

					if(event['repeats'] && this.writePermission)
					{
//						if(!event.read_only)
							this.handleRecurringEvent("eventDblClick", event, {});
					}else
					{
						this.fireEvent("eventDblClick", this, event, {
							singleInstance : this.writePermission
							});
					}
					
					e.stopEvent();

				}, this);

				event.on('contextmenu', function(e, eventEl)
				{
					var container = Ext.get(eventEl).findParent('div.x-calGrid-month-event-container', 2, true);

					this.selectEventElement(container);
						
					var theEventData = this._elementToEvent(eventEl);
					
					if (theEventData.model_name=='GO\\Tasks\\Model\\Task') {
						if (GO.tasks) {
							if (!this.taskContextMenu)
								this.taskContextMenu = new GO.calendar.TaskContextMenu();

							e.stopEvent();
							this.taskContextMenu.setTask(theEventData);
							this.taskContextMenu.showAt(e.getXY());
						}
					} else {
	//					var event = this._elementIdToEvent(this.clickedEventId);
						this.showContextMenu(e, theEventData);
					}
				},this);
			}
		}

		if(!this.loading)
			this.checkOverflow();

		return domIds;
	},

	removeEventByRemoteId : function(remote_id){
		var domIds = this.getEventDomElements(remote_id);
		if(domIds){
			for(var i=0, max=domIds.length;i<max;i++){
				this.removeEvent(domIds[i]);
			}
		}
	},


	/*
	 * Removes a single event and it's associated dom elements
	 */
	removeEvent : function(domId){
		var ids = this.getRelatedDomElements(domId);

		if(ids)
		{
			for(var i=0;i<ids.length;i++)
			{
				var el = Ext.get(ids[i]);
				if(el)
				{
					el.removeAllListeners();
					el.remove();
				}
				this.unregisterDomId(ids[i]);
			}
		}

		this.checkOverflow();
	},

	unregisterDomId : function(domId)
	{
		delete this.remoteEvents[domId];

		var found = false;

		for(var e in this.domIds)
		{
			for(var i=0;i<this.domIds[e].length;i++)
			{
				if(this.domIds[e][i]==domId)
				{
					this.domIds[e].splice(i,1);
					found=true;
					break;
				}
			}
			if(found)
			{
				break;
			}
		}
	},


	setNewEventId : function(domIds, new_event_id){
		for(var i=0,max=domIds.length;i<max;i++){
			this.remoteEvents[domIds[i]].event_id=new_event_id;
		}
	},

	handleRecurringEvent : function(fireEvent, event, actionData){

		//store them here so the already created window can use these values
		this.currentRecurringEvent = event;
		this.currentFireEvent=fireEvent;
		this.currentActionData = actionData;

		if(!this.recurrenceDialog)
		{
			this.recurrenceDialog = new GO.calendar.RecurrenceDialog();

			this.recurrenceDialog.on('single', function()
			{
				this.currentActionData.singleInstance=true;

				var remoteEvent = this.currentRecurringEvent;
				var newEvent = GO.util.clone(remoteEvent);

				var domIds=[];

				if(this.currentActionData.offsetDays)
				{
					this.removeEvent(remoteEvent.domId);
					newEvent.repeats=false;
					newEvent.startDate = newEvent.startDate.add(Date.DAY, this.currentActionData.offsetDays);
					newEvent.endDate = newEvent.endDate.add(Date.DAY, this.currentActionData.offsetDays);
					newEvent.start_time = newEvent.startDate.format('U');
					newEvent.end_time = newEvent.endDate.format('U');
					domIds=this.addMonthGridEvent(newEvent);
				}

				this.fireEvent(this.currentFireEvent, this, remoteEvent , this.currentActionData, domIds);

				this.recurrenceDialog.hide();
			},this)

			this.recurrenceDialog.on('entire', function()
			{
				this.currentActionData.singleInstance=false;

				this.fireEvent(this.currentFireEvent, this, this.currentRecurringEvent, this.currentActionData);
				this.recurrenceDialog.hide();
			},this)

			this.recurrenceDialog.on('cancel', function()
			{
				this.recurrenceDialog.hide();
				this.reload();
			},this)
		}

		this.recurrenceDialog.show();
	},
	clearGrid : function()
	{
		this.gridEvents={};
		this.appointments=Array();
		this.remoteEvents=Array();
		this.domIds=Array();
	},
	setDate : function(date, load)
	{
		var oldStartDate = this.startDate;
		var oldEndDate = this.endDate;

		this.configuredDate = date;

		//calculate first date of month
		var firstDateOfMonth = date.getFirstDateOfMonth();
		var lastDateOfMonth = date.getLastDateOfMonth();

		//start at the monday of the week the current month starts in
		this.startDate=this.getFirstDateOfWeek(firstDateOfMonth);

		var startTime = this.startDate.format('U');
		var endTime = lastDateOfMonth.format('U');

		var daysToShow = ((endTime-startTime)/86400)+1;

		var rows = Math.ceil(daysToShow/7);

		this.days = rows*7;

		this.endDate = this.startDate.add(Date.DAY, this.days);
		this.setStoreBaseParams();

		this.periodDisplay=this.configuredDate.format('F, Y');


		if(this.loadRequired || (!oldEndDate || !oldStartDate || oldEndDate.getElapsed(this.endDate)!=0 || oldStartDate.getElapsed(this.startDate)!=0))
		{
			if(load)
			{
				this.store.reload();
			}else
			{
				this.loadRequired=true;
			}
		}
	},

	nextDate : function(){
		var d=this.configuredDate.add(Date.MONTH, 1);
		return d;
	},

	previousDate : function(){
		var d= this.configuredDate.add(Date.MONTH, -1);
		return d;
	},

	reload : function()
	{
		/*this.clearGrid();
  	if(!this.monthView)
  	{
  		this.createHeadings();
  	}    	*/
		this.load();
	},

	load : function()
	{
		if(this.rendered)
		{
			this.loading=true;
			this.clearGrid();
			this.renderMonthView();

			this.writePermission = this.store.reader.jsonData.write_permission;

			var records = this.store.getRange();

			for(var i = 0, len = records.length; i < len; i++){

				var startDate = Date.parseDate(records[i].data['start_time'], this.dateTimeFormat);
				var endDate = Date.parseDate(records[i].data['end_time'], this.dateTimeFormat);

				var eventData = records[i].data;
				eventData['startDate']=startDate;
				eventData['endDate']=endDate;

				this.addMonthGridEvent (eventData);
			}

			this.nextId = records.length;

			this.checkOverflow();

			this.unmask();

			this.loading=false;
			this.loadRequired=false;
		}

	},
	/**
   * An array of domId=>database ID should be kept so that we can figure out
   * which event to update when it's modified.
   * @param {String} domId The unique DOM id of the element
   * @param {String} remoteId The unique database id of the element
   * @return void
   */
	registerEvent : function(domId, eventData)
	{
		this.remoteEvents[domId]=eventData;
		this.remoteEventsById[eventData.id]=eventData;
	/*if(!this.eventIdToDomId[eventData.event_id])
		{
			this.eventIdToDomId[eventData.event_id]=[];
		}
		this.eventIdToDomId[eventData.event_id].push(domId);*/

	},

	getEventDomElements : function(id)
	{
		return GO.util.clone(this.domIds[id]);
	},

	getRelatedDomElements : function(eventDomId)
	{
		var eventData = this.remoteEvents[eventDomId];

		if(!eventData)
		{
			return false;
		}
		var domElements = this.getEventDomElements(eventData.id);

		if(!domElements)
		{
			domElements = [eventDomId];
		}
		return domElements;
	},

	_elementIdToEvent : function(elementId)
	{
		this.remoteEvents[elementId]['domId']=elementId;
		return this.remoteEvents[elementId];
	},
	
	_elementToEvent : function(eventEl) {
		var eventElement = new Ext.Element(eventEl);
		var eventIdString = eventElement.getAttribute('event_id');
		return this.remoteEventsById[eventIdString];
	}
	
});


GO.calendar.dd.MonthDragZone = function(el, config) {
	config = config || {};
	Ext.apply(config, {
		ddel: document.createElement('div')
	});
	GO.calendar.dd.MonthDragZone.superclass.constructor.call(this, el, config);
};

Ext.extend(GO.calendar.dd.MonthDragZone, Ext.dd.DragZone, {
	onInitDrag: function(e) {

		if(!this.monthGrid.writePermission || this.monthGrid.remoteEvents[this.dragData.item.id]['private'] || this.monthGrid.remoteEvents[this.dragData.item.id]['read_only'])
		{
			return false;
		}else
		{
			this.ddel.innerHTML = this.dragData.item.dom.innerHTML;
			this.ddel.className = this.dragData.item.dom.className;
			this.ddel.style.width = this.dragData.item.getWidth() + "px";
			this.proxy.update(this.ddel);
			
			this.ddel.eventData = this.monthGrid.remoteEvents[this.dragData.item.id];

			this.eventDomElements = this.monthGrid.getRelatedDomElements(this.dragData.item.id);

			var td = Ext.get(this.dragData.item).findParent('div.cal-monthGrid-cell', 3, true);

			//this.proxyCount = eventDomElements.length;
			this.eventProxies=[];
			this.proxyDragPos = 0;
			for(var i=0;i<this.eventDomElements.length;i++)
			{
				this.eventProxies.push(Ext.DomHelper.append(document.body,
				{
					tag: 'div',
					id: Ext.id(),
					cls: "x-calGrid-month-event-proxy",
					style: "width:"+this.ddel.style.width+"px;"
				},true));

				if (this.eventDomElements[i]==this.dragData.item.id)
				{
					this.proxyDragPos=i;
				}else
				{
					//hide event element
					var el = Ext.get(this.eventDomElements[i]);
					if(el)
					{
						el.setStyle({
							'position' : 'absolute',
							'top':-10000,
							'display':'none'
						});
					}
				}
			}
		}
	},

	removeEventProxies : function(){
		var proxies = Ext.query('div.x-calGrid-month-event-proxy');
		for (var i=0;i<proxies.length;i++)
		{
			Ext.get(proxies[i]).remove();
		}

		delete this.lastTdOverId;

		//unhide event elements
		for(var i=0;i<this.eventDomElements.length;i++)
		{
			var el = Ext.get(this.eventDomElements[i]);
			if(el)
			{
				el.setStyle({
					'position' : 'static',
					'top': '',
					'display':'block'
				});
			}
		}
	},

	afterRepair : function(){
		GO.calendar.dd.MonthDragZone.superclass.afterRepair.call(this);

		this.removeEventProxies();

	},
	getRepairXY: function(e, data) {
		data.item.highlight('#e8edff');
		return data.item.getXY();
	},
	getDragData: function(e) {
		if(!this.monthGrid.writePermission)
		{
			return false;
		}else
		{
			var target = Ext.get(e.getTarget());

			if(target.hasClass('x-calGrid-month-event-container') && this.monthGrid.remoteEvents[target.id]['read_only'])
			{
				return false;
			}

			var td = target.parent();
			var dragDate = Date.parseDate(td.id.substr(1),'Ymd');

			if(target.hasClass('x-calGrid-month-event-container') && !this.monthGrid.remoteEvents[target.id]['private']) {
				return {
					ddel:this.ddel,
					item:target,
					dragDate: dragDate
				};
			}else
			{
				return false;
			}
		}
	}
});


GO.calendar.dd.MonthDropTarget = function(el, config) {
	GO.calendar.dd.MonthDropTarget.superclass.constructor.call(this, el, config);
};
Ext.extend(GO.calendar.dd.MonthDropTarget, Ext.dd.DropTarget, {
	notifyDrop: function(dd, e, data) {
		var remoteEvent = this.scope._elementIdToEvent(data.item.id);
		if(!this.scope.writePermission || remoteEvent.read_only)
		{
			return false;
		}else
		{
			var target = Ext.get(e.getTarget()).findParent('div.cal-monthGrid-cell', 3, true);

			data.dropDate = Date.parseDate(target.id.substr(1),'Ymd');

			dd.removeEventProxies();

			this.el.removeClass(this.overClass);
			target.appendChild(data.item);

			if(this.onNotifyDrop)
			{
				if(!this.scope)
				{
					this.scope=this;
				}

				var onNotifyDrop = this.onNotifyDrop.createDelegate(this.scope);
				onNotifyDrop.call(this, dd, e, data);
			}
			return true;
		}
	},

	notifyOver : function(dd, e, data){
		var tdOver = Ext.get(e.getTarget()).findParent('div.cal-monthGrid-cell', 3, true);

		if(tdOver)
		{
			if(dd.lastTdOverId!=tdOver.id)
			{
				var currentTd=tdOver;
				for(var i=0;i<dd.proxyDragPos;i++)
				{
					if(currentTd)
					{
						var nextTd = currentTd.prev('div.cal-monthGrid-cell');
						currentTd = nextTd;
					}
					if(nextTd)
					{
						dd.eventProxies[i].insertAfter(nextTd.first());
						dd.eventProxies[i].setStyle({
							'position' : 'static',
							'top': '',
							'display':'block'
						});
					}else
					{
						dd.eventProxies[i].setStyle({
							'position' : 'absolute',
							'top':-10000,
							'display':'none'
						});
					}
				}

				dd.eventProxies[i].insertAfter(tdOver.first());
				var currentTd=tdOver;
				for(var i=dd.proxyDragPos+1;i<dd.eventProxies.length;i++)
				{
					if(currentTd)
					{
						var nextTd = currentTd.next('div.cal-monthGrid-cell');

						currentTd = nextTd;
					}

					if(nextTd)
					{
						dd.eventProxies[i].insertAfter(nextTd.first());
						dd.eventProxies[i].setStyle({
							'position' : 'static',
							'top': '',
							'display':'block'
						});
					}else
					{
						dd.eventProxies[i].setStyle({
							'position' : 'absolute',
							'top':-10000,
							'display':'none'
						});
					}
				}

			}

			dd.lastTdOverId=tdOver.id;
		}
		return this.dropAllowed;
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: ViewGrid.js 21056 2017-04-11 08:22:02Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

 
GO.grid.ViewGrid = Ext.extend(Ext.Panel, {
	/**
     * @cfg {String} The components handles dates in this format
     */
	dateFormat : 'Y-m-d',
	/**
     * @cfg {String} The components handles dates in this format
     */
	dateTimeFormat : 'Y-m-d H:i',
	
	timeFormat : 'H:i',
	/**
     * @cfg {Number} Start day of the week. Monday or sunday
     */
	firstWeekday : 1,
	/**
     * @cfg {Date} The date set by the user
     */
	configuredDate : false,
	/**
     * @cfg {Date} The date where the grid starts. This can be recalculated after a user sets a date
     */
	startDate : false,

	categories: '[]',

	//private var that is used when an event is dragged to another location
	dragEvent : false,
	
	//all the grid appointments are stored in this array. First index is day and second is the dom ID.
	appointments : Array(),
	
	//The remote database ID's can be stored in this array. Useful for database updates
	remoteEvents : Array(),
	
	//An object with the event_id as key and the value is an array with dom id's
	domIds : Array(),
	
	//amount of days to display
	days : 1,
	
	selected : Array(),
	
	view_id : 0,
	
	//a collection of all the gridcells
	gridCells : Array(),

	nextId : 0,

	periodDisplay : '',

	// private
	initComponent : function(){
		GO.grid.ViewGrid.superclass.initComponent.call(this);
	
		this.addEvents({
			/**
		     * @event click
		     * Fires when this button is clicked
		     * @param {Button} this
		     * @param {EventObject} e The click event
		     */
			"create" : true,
			/**
		     * @event toggle
		     * Fires when the "pressed" state of this button changes (only if enableToggle = true)
		     * @param {Button} this
		     * @param {Boolean} pressed
		     */
			"move" : true,
			"eventResize" : true,
			"eventDblClick" : true,
			"zoom" : true,
			"storeload": true
	
		});
	    
   

		if(!this.startDate)
		{
			//lose time
			var date = new Date();
			this.startDate=Date.parseDate(date.format(this.dateFormat), this.dateFormat);
		}
		
		this.configuredDate=this.startDate;
	},
    
	setViewId : function(view_id)
	{
		this.view_id=view_id;
	//this.load();
	},

	//build the html grid
	onRender : function(ct, position){
		
		GO.grid.ViewGrid.superclass.onRender.apply(this, arguments);
		
		//important to do here. Don't remember why :S
		this.setDate(this.startDate, false);
		

		
		//if this is not set the grid does not display well when I put a load mask on it.
		this.body.setStyle("overflow", "hidden");
		
		//Don't select things inside the grid
		this.body.unselectable();

		//this.renderViewView();
		
		this.initDD();
	},
	
	renderView : function()
	{
	
		this.body.update('');
        
		//get content size of element
		var ctSize = this.container.getSize(true);
		
		//column width is the container size minus the time column width
		var columnWidth = (ctSize['width']-150)/this.days;
        
		//generate table for headings and all day events
		this.headingsTable = Ext.DomHelper.append(this.body,
		{
			tag: 'table',
			id: Ext.id(),
			cls: "x-calGrid-headings-table",
			style: "width:"+ctSize['width']+"px;"
				
		},true);
			
		var tbody = Ext.DomHelper.append(this.headingsTable,
		{
			tag: 'tbody'
		}, true);
		this.headingsRow = Ext.DomHelper.append(tbody,
		{
			tag: 'tr',
			children:{
				tag:'td',
				style:'width:200px',
				cls: "x-calGrid-heading"
			}
		}, true);
			
			
		var yearPos = GO.settings.date_format.indexOf('Y');
		var dateFormat = 'D '+GO.settings.date_format.substring(0, yearPos-1);
		
		for(var day=0;day<this.days;day++)
		{	
			
			var dt = this.startDate.add(Date.DAY, day);
			//create grid heading
			var heading = Ext.DomHelper.append(this.headingsRow,
			{
				tag: 'td',
				cls: "x-calGrid-heading",
				style: "width:"+(columnWidth)+"px",
				html: dt.format(dateFormat)
			}
          );
		}
		

		//for the scrollbar
		Ext.DomHelper.append(this.headingsRow,
		{
			tag: 'td', 
			style: "width:"+(this.scrollOffset-3)+"px;height:0px",
			cls: "x-calGrid-heading"
		});
	
	
		//create container for the grid
		this.gridContainer = Ext.DomHelper.append(this.body,
		{
			tag: 'div',
			cls: "x-calGrid-grid-container"
		}, true);

		//calculate gridContainer size
		var headingsHeight = this.headingsTable.getHeight();

		var gridContainerHeight = ctSize['height']-headingsHeight;
		this.gridContainer.setSize(ctSize['width'],gridContainerHeight );
			
			
		
		this.gridTable = Ext.DomHelper.append(this.gridContainer,
		{
			tag: 'table', 
			id: Ext.id(), 
			cls: "x-viewGrid-table", 
			style: "width:"+ctSize['width']-this.scrollWidth+"px;"
			
		},true);
		
		this.tbody = Ext.DomHelper.append(this.gridTable,
		{
			tag: 'tbody'
		}, true);
		
		this.gridCells = {};
		
				
		//The keys of this array is jsons time_of_day value the value the language
//    var timeFormat = (GO.settings.time_format === 'g:i a') ? 'ga'  : GO.settings.time_format;
           
				
		var timeOfDay = {
							'allday': GO.calendar.lang.viewDay,
              'morning': GO.calendar.lang.viewMorning,
              'afternoon': GO.calendar.lang.viewAfternoon,
              'evening': GO.calendar.lang.viewEvening
            };
						
		//for(var calendar_id in this.jsonData)
		for(var i=0,max=this.jsonData.results.length;i<max;i++)
		{
			
			var gridRow =  Ext.DomHelper.append(this.tbody,
			{
					tag: 'tr',
					cls: 'x-viewGrid-row-allday'
			});

			var calendar_id=this.jsonData.results[i].view_calendar_id;
			
			var cell = Ext.DomHelper.append(gridRow, {
				tag: 'td', 
				cls: 'x-viewGrid-calendar-name-cell',
				rowspan: 4,
				style:'width:150px'
			}, true);	
            
			var link = Ext.DomHelper.append(cell, {
				tag: 'a', 
				id: 'view_cal_'+calendar_id,
				href:'#',
				cls:'normal-link',
				html:this.jsonData.results[i].view_calendar_name
			}, true);

			link.on('click', function(e, target){			
				e.preventDefault();
				var calendar_id = target.id.substring(9);

				var calendar =this.getCalendar(calendar_id);

				this.fireEvent('zoom', {
					group_id: calendar.group_id,
					calendar_id: calendar_id,
					calendar_name:target.innerHTML,
					title:target.innerHTML
				});
			}, this);
             
					

			this.gridCells[calendar_id]={};
            
			for(var time in timeOfDay) {
				if(time!='allday'){
					gridRow =  Ext.DomHelper.append(this.tbody,
					{
						tag: 'tr',
						cls: 'x-viewGrid-row-'+time
					});
				}

				var borderStyle = 'border:0; border-bottom:1px dashed #ddd; border-right:1px solid #ddd;';
				if(time === 'evening')
					borderStyle='border-top:0;';

				Ext.DomHelper.append(gridRow, {
					tag: 'td', 
					cls: 'x-viewGrid-calendar-name-cell',
					style:'width:25px; color: #666; padding: 2px; '+borderStyle,
					html: '<div style="height:20px">'+ timeOfDay[time]+'</div>'
				}, true);

				for(var day=0;day<this.days;day++)
				{	
					var dt = this.startDate.add(Date.DAY, day)

					this.gridCells[calendar_id][dt.format('Ymd')+time] = Ext.DomHelper.append(gridRow,{
						tag: 'td', 
						id: 'cal'+calendar_id+'_day'+dt.format('Ymd')+'_time'+time, 
						cls: 'x-viewGrid-cell x-viewGrid-cell-'+time,
						style:'width:'+columnWidth+'px; '+borderStyle
					}, true);
					
					
					this.gridCells[calendar_id][dt.format('Ymd')+time].on('click', this.onAddClick, this);

				}	
				
			}
		}
		
		
	},

	getCalendar : function(id){		
		for(var i=0;i<this.jsonData.results.length;i++){
			if(this.jsonData.results[i].calendar_id==id)
				return this.jsonData.results[i];
		}
		return false;
	},

	removeEventByRemoteId : function(remote_id){
		var domIds = this.getEventDomElements(remote_id);
		if(domIds){
			for(var i=0, max=domIds.length;i<max;i++){
				this.removeEvent(domIds[i]);
			}
		}
	},
	
	/*
	 * Removes a single event and it's associated dom elements
	 */
	removeEvent : function(domId){		
		var ids = this.getRelatedDomElements(domId);
		
		if(ids)
		{
			for(var i=0;i<ids.length;i++)
			{
				var el = Ext.get(ids[i]);
				if(el)
				{
					el.removeAllListeners();
					el.remove();
				}					
				this.unregisterDomId(ids[i]);
			}			
		}
	
		
	},
	
	unregisterDomId : function(domId)
	{
		delete this.remoteEvents[domId];
		
		var found = false;
		
		for(var e in this.domIds)
		{
			for(var i=0;i<this.domIds[e].length;i++)
			{
				if(this.domIds[e][i]==domId)
				{
					this.domIds[e].splice(i,1);
					found=true;
					break;
				}
			}
			if(found)
			{
				break;
			}
		}
		
	/*found=false;
		
		for(var e in this.eventIdToDomId)
		{
			for(var i=0;i<this.eventIdToDomId[e].length;i++)
			{
				if(this.eventIdToDomId[e][i]==domId)
				{
					this.eventIdToDomId[e].splice(i,1);
					found=true;
					break;
				}
			}
			if(found)
			{
				break;
			}
		}*/
	},
	
	setNewEventId : function(domIds, new_event_id){
		for(var i=0,max=domIds.length;i<max;i++){
			this.remoteEvents[domIds[i]].event_id=new_event_id;
		}
	},
  
	initDD :  function(){
		
		var dragZone = new GO.calendar.dd.ViewDragZone(this.body, {
			ddGroup: 'view-grid',
			scroll: false,
			viewGrid: this
		});
        
		var dropTarget = new GO.calendar.dd.ViewDropTarget(this.body, {
			ddGroup: 'view-grid',
			onNotifyDrop : function(dd, e, data) {
        		
				//number of seconds moved
				var dragTime = data.dragDate.format('U');
				var dropTime = data.dropDate.format('U');
	    		
				var offsetDays = Math.round((dropTime-dragTime)/86400);
	    		
				var actionData = {
					offsetDays:offsetDays,
					dragDate: data.dragDate,
					calendar_id: data.calendar_id
				};
	
				var remoteEvent = this.elementToEvent(data.item.id);
					
				if(remoteEvent['repeats'])
				{
					this.handleRecurringEvent("move", remoteEvent, actionData);
				}else
				{
					
						
					this.removeEvent(remoteEvent.domId);
					delete remoteEvent.domId;
					remoteEvent.repeats=false;
					remoteEvent.calendar_id=data.calendar_id;
					remoteEvent.startDate = remoteEvent.startDate.add(Date.DAY, offsetDays);
					remoteEvent.endDate = remoteEvent.endDate.add(Date.DAY, offsetDays);
					remoteEvent.start_time = remoteEvent.startDate.format('U');
					remoteEvent.end_time = remoteEvent.endDate.format('U');
					var domIds = this.addViewGridEvent(remoteEvent);

					this.fireEvent("move", this, remoteEvent, actionData, domIds);
				}
			},
			scope : this
		});
	},
	
	onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){
		if(this.gridContainer)
		{
			this.gridContainer.setSize(adjWidth, adjHeight);
			this.headingsTable.setWidth(adjWidth);
			this.gridTable.setWidth(adjWidth);
		}

	},
	
	getFirstDateOfWeek : function(date)
	{
		//Calculate the first day of the week		
		var weekday = date.getDay();
		var offset = this.firstWeekday-weekday;
		if(offset>0)
		{
			offset-=7;
		}
		return date.add(Date.DAY, offset);
	},
	
	mask : function()
	{
		if(this.rendered)
		{
			this.body.mask(GO.lang.waitMsgLoad,'x-mask-loading');
		}
	},
	
	unmask : function()
	{
		if(this.rendered)
		{
			this.body.unmask();		
		}
	},
	
		


	
	getSelectedEvent : function()
	{
		if(this.selected)
		{
			return this.elementToEvent(this.selected[0].id);
		}
	},
	isSelected : function(eventEl)
	{
		for (var i=0;i<this.selected.length;i++)
		{
			if(this.selected[i].id==eventEl)
			{
				return true;
			}
		}
		return false;
	},
	
	clearSelection : function()
	{
		for (var i=0;i<this.selected.length;i++)
		{
			this.selected[i].removeClass('x-calGrid-selected');
		}
		this.selected=[];
	},
	
	selectEventElement : function(eventEl)
	{
		if(!this.isSelected(eventEl))
		{
			this.clearSelection();
			
			var elements = this.getRelatedDomElements(eventEl.id);
			
			for (var i=0;i<elements.length;i++)
			{			
				var element = Ext.get(elements[i]);
				if(element)
				{
					element.addClass('x-calGrid-selected');
					element.focus();
					this.selected.push(element);
				}
			}
		}

	},

	showContextMenu : function(e, event)
	{
		if(!this.contextMenu)
		{
			this.contextMenu = new GO.calendar.ContextMenu();

			this.contextMenu.on('deleteEvent', function()
			{
				this.fireEvent("deleteEvent", this);
			},this);

			this.contextMenu.on('updateEvent', function(obj, new_event_id, calendar_visible)
			{
				var event = obj.event;

				if(obj.isCopy)
				{
					if(calendar_visible)
					{
						if(event.repeats)
						{
							this.reload();
						}else
						{
							var newEvent = GO.util.clone(event);
							delete(newEvent.id);
							delete(newEvent.domId);

							newEvent.event_id = new_event_id;
							newEvent.startDate = Date.parseDate(newEvent.start_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							newEvent.endDate = Date.parseDate(newEvent.end_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							newEvent.start_time=newEvent.startDate.format(this.dateTimeFormat);
							newEvent.end_time=newEvent.endDate.format(this.dateTimeFormat);

							this.addViewGridEvent(newEvent);
							
						}
					}
				}else
				{
					if(obj.repeats)
					{
						this.reload();
					}else
					{
						this.removeEvent(event.domId);
						delete event.domId;

						if(calendar_visible)
						{
							event.startDate = Date.parseDate(event.start_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							event.endDate = Date.parseDate(event.end_time, this.dateTimeFormat).add(Date.DAY, obj.offset);
							event.start_time=event.startDate.format(this.dateTimeFormat);
							event.end_time=event.endDate.format(this.dateTimeFormat);

							this.addViewGridEvent(event);
						}
					}				
				}
			},this);
		}

		e.stopEvent();
		this.contextMenu.setParticipants(event.participant_ids);
		this.contextMenu.setEvent(event, this.view_id);
		this.contextMenu.showAt(e.getXY());
	},
	
	getTimeOfDay : function(eventData){

		var hour = eventData.startDate.format('G');
		var endhour = eventData.endDate.format('G');
		
		var date= eventData.startDate.format('Ymd');
		var enddate = eventData.endDate.format('Ymd');
		
		if(date!=enddate || endhour-hour>=6)
			return 'allday';
		else if(hour >= 0 && hour < 12)
			return "morning";
		else if(hour >= 12 && hour < 18)
			return "afternoon";
		else if(hour >= 18)
			return "evening";
	},
	
	addViewGridEvent : function (eventData)
	{
		if(eventData.id  == undefined)
		{
			eventData.id = this.nextId++;
		}		
		
		//the start of the day the event starts
		var eventStartDay = Date.parseDate(eventData.startDate.format('Ymd'),'Ymd');
		var eventEndDay = Date.parseDate(eventData.endDate.format('Ymd'),'Ymd');
		
		//get unix timestamps
		var eventStartTime = eventStartDay.format('U');
		var eventEndTime = eventEndDay.format('U');
			
		//ceil required because of DST changes!
		var daySpan = Math.round((eventEndTime-eventStartTime)/86400)+1;
		
		var domIds=[];;
		for(var i=0;i<daySpan;i++)
		{
			var date = eventStartDay.add(Date.DAY, i);
			
			
			var domId = eventData.domId ? eventData.domId : Ext.id();

			domIds.push(domId);
			
			//related events for dragging
			if(daySpan>1)
			{
				if(!this.domIds[eventData.id])
				{
					this.domIds[eventData.id]=[];
				}				
				this.domIds[eventData.id].push(domId);
			}

			// If the calendar_id is not given, then we cannot show the event/task in the calendar view
			if(eventData['calendar_id']){	
				var col = this.gridCells[eventData['calendar_id']][date.format('Ymd')+this.getTimeOfDay(eventData)];
			}
			
			if(col)
			{
				var text = '';
				if(eventData.startDate.format('G')!='0')
				{
					text += eventData.startDate.format(GO.settings.time_format)+'-'+eventData.endDate.format(GO.settings.time_format)+'&nbsp;';
				}				
				text += eventData['name'];
			
				var cls = "x-viewGrid-event-container  cal-event-partstatus-"+eventData.partstatus;

//				if(eventData.link_count>0){
//					cls +=' cal-has-links'
//				}

				if(eventData.link_count>0){
					text +='<span class="cal-has-links"></span>';
				}
				if (eventData["private_enabled"])
					text += '<span class="cal-is-private"></span>';
				if (eventData.has_reminder==1)
					text += '<span class="cal-has-reminders"></span>';
				if (eventData.repeats)
					text += '<span class="cal-recurring"></span>';

				if (!GO.util.empty(eventData.resources))
					text += '<span class="cal-resources"></span>';

				var event = Ext.DomHelper.append(col,
				{
					tag: 'div',
					id: domId,
					cls: cls,
					style:"background-color:#"+eventData.background,
					html: text,
					"ext:qtitle":Ext.util.Format.htmlEncode(eventData.name),
					"ext:qtip": GO.calendar.formatQtip(eventData),
					tabindex:0//tabindex is needed for focussing and events
				}, true);
					
				this.registerEvent(domId, eventData);
				
				
				
				event.on('click', function(e, eventEl){
				
					eventEl = Ext.get(eventEl).findParent('div.x-viewGrid-event-container', 2, true);
					
					this.selectEventElement(eventEl);					
					this.clickedEventId=eventEl.id;
					
					e.stopEvent();
		
				}, this);
				
				event.on('dblclick', function(e, eventEl){
					
					eventEl = Ext.get(eventEl).findParent('div.x-viewGrid-event-container', 2, true);
					
					//this.eventDoubleClicked=true;
					var event = this.elementToEvent(this.clickedEventId);
					
					if(event['repeats'] && event.permission_level>=GO.permissionLevels.write)
					{
						if(!event.read_only)
							this.handleRecurringEvent("eventDblClick", event, {});
					}else
					{
						
						this.fireEvent("eventDblClick", this, event, {
							singleInstance : event.permission_level>=GO.permissionLevels.write
						});
					}
					
					e.stopEvent();
					
				}, this);

				event.on('contextmenu', function(e, eventEl)
				{										
					var event = this.elementToEvent(this.clickedEventId);
					this.showContextMenu(e, event);
				}, this);
			}
		}
		
		return domIds;
	},
	
	onAddClick : function(e, target){

		var dateAndTime = target.id.split('_');

		//ID format: cal1_day20130318_timeallday
		var dateStr = dateAndTime[1].substring(3, dateAndTime[1].length);
		var timeOfDay = dateAndTime[2].substring(4, dateAndTime[2].length);
		var date = Date.parseDate(dateStr,'Ymd');
		var calendar_id = parseInt(dateAndTime[0].substring(3, dateAndTime[0].length));
		if(date){ // in firefox this event somehow also fires on events
			this.fireEvent('create', this, date, timeOfDay, calendar_id);
			e.stopEvent();
		}
	},

	removeEventFromArray : function (day, event_id)
	{
		for(var i=0;i<this.appointments[day].length;i++)
		{
			if(this.appointments[day][i].id==event_id)
			{
				return this.appointments[day].splice(i,1);				
			}
		}
		return false;
	},

	inAppointmentsArray : function (id, appointments)
	{
		for(var i=0;i<appointments.length;i++)
		{
			if(appointments[i].id==id)
			{
				return true;
			}
		}
		return false;
	},


	
	handleRecurringEvent : function(fireEvent, event, actionData){
		
		//store them here so the already created window can use these values
		this.currentRecurringEvent = event;
		this.currentFireEvent=fireEvent;
		this.currentActionData = actionData;
		
		if(!this.recurrenceDialog)
		{
			this.recurrenceDialog = new GO.calendar.RecurrenceDialog();

			this.recurrenceDialog.on('single', function()
			{
				this.currentActionData.singleInstance=true;

				var remoteEvent = this.currentRecurringEvent;
				var newEvent = GO.util.clone(remoteEvent);
				
				var domIds=[];

				if(this.currentActionData.offsetDays)
				{
					this.removeEvent(remoteEvent.domId);
					newEvent.calendar_id=this.currentActionData.calendar_id;
					newEvent.repeats=false;
					newEvent.startDate = newEvent.startDate.add(Date.DAY, this.currentActionData.offsetDays);
					newEvent.endDate = newEvent.endDate.add(Date.DAY, this.currentActionData.offsetDays);
					newEvent.start_time = newEvent.startDate.format('U');
					newEvent.end_time = newEvent.endDate.format('U');
					this.addViewGridEvent(newEvent);
				}

				this.fireEvent(this.currentFireEvent, this, remoteEvent , this.currentActionData, domIds);
		
				this.recurrenceDialog.hide();
			},this)

			this.recurrenceDialog.on('entire', function()
			{
				this.currentActionData.singleInstance=false;

				this.fireEvent(this.currentFireEvent, this, this.currentRecurringEvent, this.currentActionData);
				this.recurrenceDialog.hide();
			},this)

			this.recurrenceDialog.on('cancel', function()
			{
				this.recurrenceDialog.hide();
				this.reload(); 
			},this)
			
		}
		this.recurrenceDialog.show();

		
	},


    
    
	clearGrid : function()
	{
		this.appointments=Array();		
		this.remoteEvents=Array();
		this.domIds=Array();
	},	
	
	setDays : function(days, load)
	{
		this.setDate(this.configuredDate, days, load);		
	},

	setDate : function(date, days, load)
	{  	
		if(days)
		{
			this.days=days;
		}
  	
		this.configuredDate = date;    	

		if(this.days>4)
		{
			this.startDate = this.getFirstDateOfWeek(date);
		}else
		{
			this.startDate = date;
		}

	    	
		this.endDate = this.startDate.add(Date.DAY, this.days);

		this.periodDisplay = GO.lang.strWeek+' '+this.startDate.format('W');

		if(load)
			this.reload(); 
	},

	nextDate : function(){
		return this.startDate.add(Date.DAY, this.days>4 ? 7 : 1);
	},

	previousDate : function(){
		return this.startDate.add(Date.DAY, this.days>4 ? -7 : -1);
	},
  
	reload : function()
	{
		this.load();  	
	},
  
	load : function(params)
	{
  	
		if(!params)
		{
			params={};
		}

		params['view_id']=this.view_id;
		params['start_time']=this.startDate.format(this.dateTimeFormat);
		params['end_time']=this.endDate.format(this.dateTimeFormat);

		params['categories'] = this.categories;

		GO.request({
			maskEl:this.body,
			url: "calendar/event/viewStore",
			params: params,
			success: function(options, response, result)
			{								
				this.jsonData = result;

				this.clearGrid();

				this.renderView();


				var total=0;
				var mtime=0;
				//for(var calendar_id in this.jsonData)
				for(var n=0;n<this.jsonData.results.length;n++)
				{
					var events = this.jsonData.results[n].results;

					total += events.length;
					for(var i=0; i< events.length;i++)
					{
						var eventData = events[i];
						eventData['startDate'] = Date.parseDate(events[i]['start_time'], this.dateTimeFormat);
						eventData['endDate'] = Date.parseDate(events[i]['end_time'], this.dateTimeFormat);

						this.addViewGridEvent(eventData);

						if(eventData['mtime'] > mtime)
						{
							mtime = eventData['mtime'];
						}
					}
				}

				this.nextId = total;					

				this.fireEvent("storeload", this, total, mtime, params, response);

			},
			scope:this		
		});
	},
	/**
   * An array of domId=>database ID should be kept so that we can figure out
   * which event to update when it's modified.
   * @param {String} domId The unique DOM id of the element
   * @param {String} remoteId The unique database id of the element     
   * @return void
   */
	registerEvent : function(domId, eventData)
	{
		this.remoteEvents[domId]=eventData;
  	
	/*if(!this.domIds[eventData.event_id])
		{
			this.domIds[eventData.event_id]=[];
		}
	
		this.domIds[eventData.event_id].push(domId);*/
	},
  
	getEventDomElements : function(id)
	{
		return GO.util.clone(this.domIds[id]);
	},
  
	getRelatedDomElements : function(eventDomId)
	{
		var eventData = this.remoteEvents[eventDomId];
  	
		if(!eventData)
		{
			return false;
		}
		var domElements = this.getEventDomElements(eventData.id);
  	
		if(!domElements)
		{
			domElements = [eventDomId];
		}
		return domElements;
	},
  
	elementToEvent : function(elementId, allDay)
	{
		this.remoteEvents[elementId].domId=elementId;
		return this.remoteEvents[elementId];
	}/*,

    // private
    destroy : function(){
    	
    	this.store.un("beforeload", this.reload, this);
        this.store.un("datachanged", this.reload, this);
        this.store.un("clear", this.reload, this);
        
        this.el.update('');
		
		GO.grid.CalendarGrid.superclass.destroy.call(this);
		
		delete this.el;
		this.rendered=false;
		
    }*/

});


GO.calendar.dd.ViewDragZone = function(el, config) {
	config = config || {};
	Ext.apply(config, {
		ddel: document.createElement('div')
	});
	GO.calendar.dd.ViewDragZone.superclass.constructor.call(this, el, config);
};
 
Ext.extend(GO.calendar.dd.ViewDragZone, Ext.dd.DragZone, {
	onInitDrag: function(e) {
		this.ddel.innerHTML = this.dragData.item.dom.innerHTML;
		this.ddel.className = this.dragData.item.dom.className;
		this.ddel.style.width = this.dragData.item.getWidth() + "px";
		this.proxy.update(this.ddel);
	    
		this.eventDomElements = this.viewGrid.getRelatedDomElements(this.dragData.item.id);
	    
		//var td = Ext.get(this.dragData.item).findParent('td', 10, true);
	    
		//this.proxyCount = eventDomElements.length;
	    
		this.eventProxies=[];
		this.proxyDragPos = 0;
		for(var i=0;i<this.eventDomElements.length;i++)
		{
			this.eventProxies.push(Ext.DomHelper.append(document.body,
			{
				tag: 'div',
				id: Ext.id(),
				cls: "x-viewGrid-event-proxy",
				style: "width:"+this.ddel.style.width+"px;"
			},true));
			
			if (this.eventDomElements[i]==this.dragData.item.id)
			{
				this.proxyDragPos=i;
			}else
			{
				//hide event element
				var el = Ext.get(this.eventDomElements[i]);
				if(el)
					el.setStyle({
						'position' : 'absolute',
						'top':-10000,
						'display':'none'
					});
			}
		}
	},
	
	removeEventProxies : function(){
		var proxies = Ext.query('div.x-viewGrid-event-proxy');
		for (var i=0;i<proxies.length;i++)
		{
			Ext.get(proxies[i]).remove();
		}
		
		delete this.lastTdOverId;		
		
		//unhide event elements
		for(var i=0;i<this.eventDomElements.length;i++)
		{
			var el = Ext.get(this.eventDomElements[i]);
			if(el)
				el.setStyle({
					'position' : 'static',
					'top': '',
					'display':'block'
				});
		}
	},
	
	afterRepair : function(){
		GO.calendar.dd.ViewDragZone.superclass.afterRepair.call(this);
		
		this.removeEventProxies();
		
	},
	getRepairXY: function(e, data) {
		data.item.highlight('#e8edff');
		return data.item.getXY();
	},
	getDragData: function(e) {
		var target = Ext.get(e.getTarget());
    
		if(target.hasClass('x-viewGrid-event-container'))
		{
			var td = target.parent();
	    
			var dateIndex = td.id.indexOf('_day')+4;
			var calendar_id = td.id.substr(3,dateIndex-7);
			var calendar = this.viewGrid.getCalendar(calendar_id);
            
            var event = this.viewGrid.remoteEvents[target.id];
			
			if(!event['private'] && calendar.write_permission)
			{
				var dateStr = td.id.substr(dateIndex,8);
				var dragDate = Date.parseDate(dateStr,'Ymd');
		    
	     
				return {
					ddel:this.ddel,
					item:target, //DOM node
                    event:event, //Event properties
					dragDate: dragDate
				};
			}
			return false;
		}
            
	}
});


GO.calendar.dd.ViewDropTarget = function(el, config) {
	GO.calendar.dd.ViewDropTarget.superclass.constructor.call(this, el, config);
};
Ext.extend(GO.calendar.dd.ViewDropTarget, Ext.dd.DropTarget, {
	notifyDrop: function(dd, e, data) {
 		
		var td = Ext.get(e.getTarget()).findParent('td', 10, true);
		if(!td)
		{
			return false;
		}
		var dateIndex = td.id.indexOf('_day')+4;
	 		 
		var calendar_id = td.id.substr(3,dateIndex-7);
		var calendar = this.scope.getCalendar(calendar_id);
		    
		if(!calendar || !calendar.write_permission)
		{
			return false;
		}
	 		
	        
		var dateStr = td.id.substr(dateIndex,8);
		data.dropDate = Date.parseDate(dateStr,'Ymd');
	    
		data.calendar_id=td.id.substr(3,dateIndex-7);
	
		dd.removeEventProxies();
	 		   	
		this.el.removeClass(this.overClass);
		td.appendChild(data.item);
	    
	    
		if(this.onNotifyDrop)
		{
			if(!this.scope)
			{
				this.scope=this;
			}
				
			var onNotifyDrop = this.onNotifyDrop.createDelegate(this.scope);
			onNotifyDrop.call(this, dd, e, data);
		}
		return true;
	},
    
	notifyOver : function(dd, e, data){
		var tdOver = Ext.get(e.getTarget()).findParent('td.x-viewGrid-cell-'+this.scope.getTimeOfDay(data.event), 10, true);
         
		if(tdOver)
		{
			var dateIndex = tdOver.id.indexOf('_day');
			var calendar_id = tdOver.id.substr(3,dateIndex-3);

			var calendar = this.scope.getCalendar(calendar_id);
                        
			if(calendar && calendar.write_permission)
			{
				if(dd.lastTdOverId!=tdOver.id)
				{
					var currentTd=tdOver;
					for(var i=0;i<dd.proxyDragPos;i++)
					{
						if(currentTd)
						{
							var nextTd = currentTd.prev('td.x-viewGrid-cell-'+this.scope.getTimeOfDay(data.event));
							currentTd = nextTd;
						}
						if(nextTd)
						{
							//dd.eventProxies[i].insertAfter(nextTd.first());
							nextTd.insertFirst(dd.eventProxies[i].id);
							dd.eventProxies[i].setStyle({
								'position' : 'static',
								'top': '',
								'display':'block'
							});
						}else
						{
							dd.eventProxies[i].setStyle({
								'position' : 'absolute',
								'top':-10000,
								'display':'none'
							});
						}
					}
		        	
					tdOver.insertFirst(dd.eventProxies[i]);
					//dd.eventProxies[i].insertAfter(tdOver.first());
					var currentTd=tdOver;
					for(var i=dd.proxyDragPos+1;i<dd.eventProxies.length;i++)
					{
						if(currentTd)
						{
							var nextTd = currentTd.next('td.x-viewGrid-cell-'+this.scope.getTimeOfDay(data.event));
							currentTd = nextTd;
						}
		        		
						if(nextTd)
						{
							//dd.eventProxies[i].insertAfter(nextTd.first());
							nextTd.insertFirst(dd.eventProxies[i].id);
		        			 			
							dd.eventProxies[i].setStyle({
								'position' : 'static',
								'top': '',
								'display':'block'
							});
						}else
						{
							dd.eventProxies[i].setStyle({
								'position' : 'absolute',
								'top':-10000,
								'display':'none'
							});
						}
					}
		        	
				}
		        
				dd.lastTdOverId=tdOver.id;
				return this.dropAllowed;
			}
		}
		return false;
	}
    
});

GO.calendar.TaskContextMenu = function(config){

	if(!config)
	{
		config = {};
	}

	config.items=[
	this.actionInfo = new Ext.menu.Item({
		iconCls: 'btn-properties',
		text:GO.calendar.lang.showInfo,
		cls: 'x-btn-text-icon',
		scope:this,
		handler: function()
		{
			this.showTaskInfoDialog();
		}
	})
	]

	GO.calendar.TaskContextMenu.superclass.constructor.call(this,config);

}

Ext.extend(GO.calendar.TaskContextMenu, Ext.menu.Menu, {

	task:null,
	view_id: 0,
	
	setTask : function(task)
	{
		this.task = task;
	},
	
	showTaskInfoDialog : function()
	{
		GO.linkHandlers["GO\\Tasks\\Model\\Task"].call(this, this.task.task_id);
	}
//	,
//	menuHandler : function()
//	{
//		if(!this.menuRecurrenceDialog)
//		{
//			this.menuRecurrenceDialog = new GO.calendar.RecurrenceDialog();
//
//			this.menuRecurrenceDialog.on('single', function()
//			{
//				this.showSelectDateDialog(false, false);
//				this.menuRecurrenceDialog.hide();
//			},this)
//
//			this.menuRecurrenceDialog.on('entire', function()
//			{
//				this.showSelectDateDialog(false, true);
//				this.menuRecurrenceDialog.hide();
//			},this)
//
//			this.menuRecurrenceDialog.on('cancel', function()
//			{
//				this.menuRecurrenceDialog.hide();
//			},this)
//		}
//		this.menuRecurrenceDialog.show();
//	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id:
 * @copyright Copyright Intermesh
 * @author Wilmar van Beusekom <wilmar@intermesh.nl>
 */

GO.mediawiki.MainPanel = function(config){

	if(!config)
	{
		config = {};
	}

	config.tbar= new Ext.Toolbar({
		cls: 'go-head-tb',
		items:[new Ext.Button({
			iconCls: 'btn-refresh',
			cls: 'x-btn-text-icon',
			text: GO.lang['cmdRefresh'],
			handler:function(){
				GO.mediawiki.iFrameComponent.setUrl(GO.mediawiki.settings.externalUrl);
			},
			scope: this
		})
		]
		});

	if(GO.settings.modules.mediawiki.write_permission)
	{
		config.tbar.addItem('-');
		this.settingsButton = new Ext.Button({
			iconCls: 'btn-settings',
			text: GO.lang.administration,
			cls: 'x-btn-text-icon',
			handler: function(){
				if(!this.settingsDialog)
				{
					this.settingsDialog = new GO.mediawiki.SettingsDialog();
				}
				this.settingsDialog.show();
			},
			scope: this
		});
		config.tbar.addItem(this.settingsButton);
	}

	GO.mediawiki.iFrameComponent = new GO.panel.IFrameComponent({
		url: GO.mediawiki.settings.externalUrl
	});

	config.layout='fit';
	config.items = [GO.mediawiki.iFrameComponent];

	config.title = GO.mediawiki.settings.title;

	GO.mediawiki.MainPanel.superclass.constructor.call(this, config);

}

Ext.extend(GO.mediawiki.MainPanel, Ext.Panel,{

	beforeRender : function() {
		GO.request({
			url: 'mediawiki/settings/load', //GO.settings.modules.mediawiki.url + 'json.php',
			scope: this,
			success: function(response,options) {
				var responseParams = Ext.decode(response.responseText);
				if (responseParams.success) {
					GO.mediawiki.settings.externalUrl = responseParams.data.external_url;
					GO.mediawiki.iFrameComponent.setUrl(GO.mediawiki.settings.external_url);
					GO.mediawiki.settings.title = responseParams.data.title;
					this.title = responseParams.title;
				} else {
					Ext.Msg.alert(GO.lang['strError'], responseParams.feedback);
				}
			}
		})
	}

});

GO.moduleManager.addModule('mediawiki', GO.mediawiki.MainPanel, {
	title : 'Wiki',
	iconCls : 'go-tab-icon-tasks'
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id:
 * @copyright Copyright Intermesh
 * @author Wilmar van Beusekom <wilmar@intermesh.nl>
 */

GO.mediawiki.SettingsDialog = function(config){
	if(!config)
	{
		config={};
	}

	this.buildForm();

	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=550;
	config.autoHeight=true;
	config.closeAction='hide';
	config.title= GO.lang.cmdSettings;
	config.items=this.formPanel;
	config.buttons=[{
		text: GO.lang.cmdOk,
		handler: function(){
			this.submitForm(true);
			this.hide();
		},
		scope:this
	},{
		text: GO.lang.cmdClose,
		handler: function(){
			this.hide();
		},
		scope:this
	}];

	GO.mediawiki.SettingsDialog.superclass.constructor.call(this, config);
}

Ext.extend(GO.mediawiki.SettingsDialog, Ext.Window,{

	show : function(establishment_id) {
		if(!this.rendered)
			this.render(Ext.getBody());
		this.formPanel.form.reset();
		this.formPanel.load({
				url : GO.url('mediawiki/settings/load'), // GO.settings.modules.mediawiki.url+'json.php',
				success:function(form, action)
				{
					GO.mediawiki.SettingsDialog.superclass.show.call(this);
				},
				failure:function(form, action)
				{
					Ext.Msg.alert(GO.lang['strError'], action.result.feedback)
				},
				scope: this
			});
	},

	submitForm : function(hide){
		this.formPanel.form.submit(
		{
			url: GO.url('mediawiki/settings/save'),
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				var response = Ext.decode(action.response.responseText);
				if (response.success) {
					GO.mediawiki.settings.externalUrl = response.data.external_url;
					GO.mediawiki.settings.title = response.data.title;
					GO.mediawiki.iFrameComponent.setUrl(GO.mediawiki.settings.externalUrl);
				} else {
					Ext.Msg.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});
	},

	buildForm : function() {
		this.panel = new Ext.Panel({
			border:false,
			layout : 'form',
			bodyStyle:'padding:5px',
			waitMsgTarget:true,
			labelAlign:'top',
			autoHeight:true,
			//height : 150,
			items:[this.externalUrlField = new Ext.form.TextField({
				name : 'external_url',
				fieldLabel : GO.mediawiki.lang.externalUrl,
				anchor : '100%',
				allowBlank : false
			}),this.titleField = new Ext.form.TextField({
				name : 'title',
				fieldLabel : GO.mediawiki.lang.title,
				anchor : '100%',
				allowBlank : false
			})]
		});
		this.formPanel = new Ext.form.FormPanel({
			waitMsgTarget:true,
			url: GO.url('mediawiki/settings/load'),
			border: false,
			autoHeight:true,
			items: this.panel
		});
	}
});


if(!GO.customfields)
{
	Ext.namespace("GO.customfields");
	GO.customfields.types={};
}

/*
 * This object will have keys that are link types.
 * 
 * Eg. :
 * 
 * GO.customfields.types[2]={name: 'Contacts', panels : [new GO.customfields.CustomeFormPanel()]};
 * 
 * The array will be filled by scripts.inc.php files in each module that supports custom fields
 *
 */

GO.customfields.TypePanel = Ext.extend(GO.grid.GridPanel, {
	
	initComponent : function(){
		
		this.layout='fit';
		
		this.ddGroup='cfFieldsDD';
		
		this.store = new Ext.data.GroupingStore({
			reader: new Ext.data.JsonReader({
        totalProperty: "count",
		    root: "results",
		    id: "id",
		    fields:[
		    'id',
		    'name', 
		    'datatype', 
				'type',
				'required',
		    'category_name',
		    'category_id',
				'column_name',
				'unique_values'
		    ]}),
		    
	  		baseParams: {
					//task:'all_fields', 
					extends_model:""
				},
			proxy: new Ext.data.HttpProxy({
		      //url: GO.settings.modules.customfields.url+'json.php'
					url:GO.url('customfields/field/store')
		  }),        
	    groupField:'category_name',
	    remoteSort:true,
	    remoteGroup:true
	  });
	  
	  this.enableDragDrop=true;
	  this.title=GO.customfields.lang.customfields;
	  this.columns=[
				{
					header:GO.customfields.lang.category,
					dataIndex: 'category_name',
					width: 120
				},
				{
					header:GO.lang['strName'],
					dataIndex: 'name'
				},
				{
					header:GO.lang['strType'],
					dataIndex: 'type'
				},
				{
					header:GO.customfields.lang['required'],
					dataIndex: 'required',
					hidden:true
				},
				{
					header:'Database name',
					dataIndex: 'column_name'
				},
				{
					header:GO.customfields.lang['uniqueValues'],
					dataIndex: 'unique_values'
				}];
	 this.view= new Ext.grid.GroupingView({
				autoFill:true,
				forceFit:true,
		    hideGroupedColumn:true,
		    groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})',
		   	emptyText: GO.customfields.lang.noFields,
		   	showGroupName:false
			});
			
		this.disabled=true;
			
		this.sm=new Ext.grid.RowSelectionModel();
		this.loadMask=true;
		
		this.tbar=new Ext.Toolbar([{
				iconCls: 'btn-add',							
				text: GO.lang['cmdAdd'],
				cls: 'x-btn-text-icon',
				handler: function(){

					if(!GO.customfields.categoriesStore.data.items[0])
					{
						alert(GO.customfields.lang.createCategoryFirst);
					}else
					{
						this.fieldDialog.show();
					}
				},
				scope: this
			},{	
				iconCls: 'btn-delete',
				text: GO.lang['cmdDelete'],
				cls: 'x-btn-text-icon',
				handler: function(){
					this.deleteSelected();
				},
				scope: this
			},{
				iconCls: 'btn-folder',
				text: GO.customfields.lang.manageCategories,
				cls: 'x-btn-text-icon',
				handler: function(){
					if(!this.categoriesDialog)
					{
						this.categoriesDialog = new GO.customfields.CategoriesDialog();
						this.categoriesDialog.on('change', function(){this.store.reload();}, this);						
					}
					this.categoriesDialog.show(this.store.baseParams.extends_model);
				},
				scope: this
				
			}]);
		
		this.fieldDialog = new GO.customfields.FieldDialog();
		this.fieldDialog.on('save', function(){
			this.store.reload();
		}, this);
		
		this.on('rowdblclick', function(grid){
			var selectionModel = grid.getSelectionModel();
			var record = selectionModel.getSelected();
						
			this.fieldDialog.show(record.id);
		}, this);
		
		//this.tbar.setDisabled(true);
		
		GO.customfields.TypePanel.superclass.initComponent.call(this);
	},
	
	afterRender : function(){
		
		GO.customfields.TypePanel.superclass.afterRender.call(this);
		//enable row sorting
		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody, 
		{
			ddGroup : 'cfFieldsDD',
			copy:false,
			notifyDrop : this.notifyDrop.createDelegate(this)
		});
	},
	
	notifyDrop : function(dd, e, data)
	{
		var sm=this.getSelectionModel();
		var rows=sm.getSelections();
		var dragData = dd.getDragData(e);
		var cindex=dragData.rowIndex;
		if(cindex=='undefined')
		{
			cindex=this.store.data.length-1;
		}
		var dropRowData = this.store.getAt(cindex);
		
		
		for(i = 0; i < rows.length; i++) 
		{								
			var rowData=this.store.getById(rows[i].id);
			
			//set new group field
			rowData.set(this.store.groupField, dropRowData.get(this.store.groupField));
			rowData.set('category_id', dropRowData.get('category_id'));
			
		
			if(!this.copy){
				this.store.remove(this.store.getById(rows[i].id));
			}
			
			this.store.insert(cindex,rowData);
		}
		
		//save sort order							
		var records = [];

  	for (var i = 0; i < this.store.data.items.length;  i++)
  	{			    	
			records.push({id: this.store.data.items[i].get('id'), sort_index : i, category_id: this.store.data.items[i].get('category_id')});
  	}
		
		GO.request({
			url:'customfields/field/saveSort',
			params:{
				fields:Ext.encode(records)
			}
		})
		
//		Ext.Ajax.request({
//			url: GO.settings.modules.customfields.url+'action.php',
//			params: {
//				task: 'save_fields_sort_order',
//				fields: Ext.encode(records)
//			}
//		});
//					
		
	},
	
	setLinkType : function(extends_model)
	{
		this.setDisabled(false);
		this.fieldDialog.setExtendModel(extends_model);
		this.store.baseParams.extends_model=extends_model;
		GO.customfields.categoriesStore.baseParams.extends_model=extends_model;
		GO.customfields.categoriesStore.load();
	}
	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @version $Id: FieldDialog.js 19873 2016-03-01 10:55:30Z michaelhart86 $
 * @author Merijn Schering <mschering@intermesh.nl>
 */


GO.customfields.FieldDialog = function(config){

	if(!config)
		config={};

	this.extendModel = false;

	this.nameField = new Ext.form.TextField({
		name: 'name',
		anchor:'-20',
		allowBlank:false,
		fieldLabel: GO.lang['strName']
	});


	this.categoryField = new GO.form.ComboBox({
		fieldLabel: GO.customfields.lang.category,
		hiddenName:'category_id',
		anchor:'-20',
		store: GO.customfields.categoriesStore,
		value:'text',
		valueField:'id',
		displayField:'name',
		mode: 'local',
		triggerAction: 'all',
		editable: false,
		selectOnFocus:true,
		forceSelection: true
	});

	this.typeField = new GO.form.ComboBox({
		fieldLabel: GO.lang.strType,
		hiddenName:'datatype',
		anchor:'-20',
		store: new GO.data.JsonStore({
			fields: ['className', 'type','hasLength'],
			sortInfo : {
				field:'text',
				direction:'ASC'
			},
			url:GO.url('customfields/field/types'),
			baseParams:{extend_model:this.extendModel}
		}),
		value:'GO\\Customfields\\Customfieldtype\\Text',
		valueField:'className',
		displayField:'type',
		allowBlank:false,
		typeAhead: true,
		mode: 'local',
		triggerAction: 'all',
		editable: false,
		selectOnFocus:true,
		forceSelection: true
	});

	this.typeField.on('GO\\Customfields\\Customfieldtype\\Select', function(combo, record, index){
		this.typeChange(combo, record.data.value);
	}, this);

	this.typeField.on('change', this.typeChange, this);


	this.maxLengthField = new GO.form.NumberField({
		name: 'max_length',
		value: 50,
		fieldLabel: GO.customfields.lang['maxLength'],
		minValue: 0,
//		maxValue: 255,
		decimals: 0,
		disabled: true
	});

	this.typeField.on('select', function(combo,record,index){
		this.maxLengthField.setDisabled(!record.data['hasLength']);
		this.maxLengthField.setVisible(record.data['hasLength']);
	}, this);

	this.prefixField = new Ext.form.TextField({
		name: 'prefix',
		anchor:'-20',
		allowBlank:true,
		maxLength: 32,
		fieldLabel: GO.customfields.lang.prefix
	});
	
	this.suffixField = new Ext.form.TextField({
		name: 'suffix',
		anchor:'-20',
		allowBlank:true,
		maxLength: 32,
		fieldLabel: GO.customfields.lang.suffix
	});

	this.functionField = new Ext.form.TextField({
		name: 'function',
		anchor:'-20',
		allowBlank:true,
		fieldLabel: GO.lang.strFunction
	});

	var textComponent = new GO.form.HtmlComponent({
		html: GO.customfields.lang.numberField+GO.customfields.lang.usableOperators
	});


	this.optionsGrid = new GO.customfields.SelectOptionsGrid();
	this.optionsGrid.setVisible(false);


	this.treeSelectOptions = new GO.customfields.TreeSelectOptions();
	this.treeSelectOptions.setVisible(false);


	this.functionPanel = new Ext.form.FieldSet({
		title: GO.customfields.lang.functionProperties,
		autoHeight: true,
		border: true,
		items: [textComponent, this.functionField]
	});

	this.functionPanel.setVisible(false);

	//See Elite/views/extjs3/Customfield.js
	this.extraOptions = new Ext.Panel({layout:'form'});
	this.phpExtraOptions = new Ext.Panel({layout:'form'});

	this.formPanel = new Ext.FormPanel({
		labelWidth:140,
		//	autoHeight:true,
		anchor:'100%',
		autoScroll:true,
		waitMsgTarget:true,
		bodyStyle:'padding:5px;',
		items: [
		this.nameField,
		this.typeField,
		this.extraOptions,
		this.phpExtraOptions,
		this.maxLengthField,
		this.prefixField,
		this.suffixField,
		this.multiSelectCB = new Ext.ux.form.XCheckbox({
			name:'multiselect',
			fieldLabel:GO.customfields.lang.multiselect,
			listeners:{
				check:function(cb, check){
					this.max.getEl().up('.x-form-item').setDisplayed(check);
				},
				scope:this
			},
			plugins:[new Ext.ux.FieldHelp(GO.customfields.lang.multiselectForLastSlaveOnly)]
		}),
		this.heightField = new GO.form.NumberField({
			name:'height',
			decimals:0,
			width:40,
			value:100,
			fieldLabel:GO.customfields.lang.height
		}),
		this.max = new GO.form.NumberField({
			name:'max',
			decimals:0,
			width:40,
			value:0,
			fieldLabel:GO.customfields.lang.maxOptions,
			plugins:[new Ext.ux.FieldHelp(GO.customfields.lang.zeroMeansUnlimited)]
		}),
		this.masterTree = new GO.form.PlainField({
			name:'master_tree',
			fieldLabel:'Master select'
		}),
		this.categoryField,
		this.decimalsField = new GO.form.NumberField({
			name:'number_decimals',
			decimals:0,
			width:40,
			value:2,
			fieldLabel:GO.customfields.lang.nDecimals
		}),
		this.addressbookIdsField = new Ext.form.TextField({
			name:'addressbook_ids',
			maxLength:255,
			fieldLabel:GO.customfields.lang.addressbookIds,
			hidden: true,
			disabled: true,
			anchor: '-20'
		}),
		this.requiredCB = new Ext.ux.form.XCheckbox({
			xtype:'xcheckbox',
			name:'required',
			fieldLabel:GO.customfields.lang.required
		}),
		this.hideInGridCB = new Ext.ux.form.XCheckbox({
			xtype:'xcheckbox',
			name:'exclude_from_grid',
			fieldLabel:GO.customfields.lang.excludeFromGrid
		}),
		this.uniqueCB = new Ext.ux.form.XCheckbox({
			xtype:'xcheckbox',
			name:'unique_values',
			fieldLabel:GO.customfields.lang['uniqueValues']
		}),
		this.regexField = new Ext.form.TextField({
			disabled:true,
			name:'validation_regex',
			fieldLabel:GO.customfields.lang.validationRegexp,
			anchor:'-20'
		}),this.helptextField = new Ext.form.TextField({
			xtype:'textfield',
			anchor:'-20',
			name:'helptext',
			fieldLabel:GO.customfields.lang.helpText
		}),
		this.functionPanel,
		this.optionsGrid,
		this.treeSelectOptions
		],
		baseParams:{
			field_id:0
		}
	});


	var focusName = function(){
		this.nameField.focus();
	};

	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=true;
	config.width=500;
	config.height=520;
	//config.autoHeight=true;
	config.closeAction='hide';
	config.title= GO.lang.field;
	config.items= this.formPanel;
	config.focus= focusName.createDelegate(this);
	config.buttons=[{
		text: GO.lang['cmdOk'],
		handler: function(){
			this.submitForm(true);
		},
		scope: this
	},{
		text: GO.lang['cmdApply'],
		handler: function(){
			this.submitForm();
		},
		scope:this
	},{
		text: GO.lang['cmdClose'],
		handler: function(){
			this.hide();
		},
		scope:this
	}
	];

	config.listeners={
		render:function(){
			this.typeField.store.load();
		},
		scope:this
	}


	GO.customfields.FieldDialog.superclass.constructor.call(this, config);


	this.addEvents({
		'save' : true
	});
}

Ext.extend(GO.customfields.FieldDialog, Ext.Window,{

	loadData: {}, // will save the loaded data when form shows

	typeChange : function(combo, newValue)
	{
		this.addressbookIdsField.setVisible(newValue=='GO\\Addressbook\\Customfieldtype\\Contact' || newValue=='GO\\Addressbook\\Customfieldtype\\Company');
		this.addressbookIdsField.setDisabled(newValue!='GO\\Addressbook\\Customfieldtype\\Contact' && newValue!='GO\\Addressbook\\Customfieldtype\\Company');

		var useSuffixPrefix = newValue=='GO\\Customfields\\Customfieldtype\\Text' || newValue=='GO\\Customfields\\Customfieldtype\\Number' || newValue=='GO\\Customfields\\Customfieldtype\\FunctionField';
		this.prefixField.setVisible(useSuffixPrefix);
		this.prefixField.setDisabled(!useSuffixPrefix);
		this.suffixField.setVisible(useSuffixPrefix);
		this.suffixField.setDisabled(!useSuffixPrefix);

		this.helptextField.setDisabled(newValue=='GO\\Customfields\\Customfieldtype\\Infotext');
		this.requiredCB.setDisabled(newValue=='GO\\Customfields\\Customfieldtype\\Infotext');
		this.decimalsField.setDisabled(newValue!='GO\\Customfields\\Customfieldtype\\Number');
		this.decimalsField.setVisible(newValue=='GO\\Customfields\\Customfieldtype\\Number');

		this.nameField.setHeight(newValue=='GO\\Customfields\\Customfieldtype\\Infotext' ? 120 : 22);

		this.treeSelectOptions.setVisible(newValue=='GO\\Customfields\\Customfieldtype\\Treeselect');
		if(newValue=='GO\\Customfields\\Customfieldtype\\Treeselect')
		{
			this.treeSelectOptions.setFieldId(this.field_id);
		}

		this.masterTree.container.up('div.x-form-item').setDisplayed(newValue=='GO\\Customfields\\Customfieldtype\\TreeselectSlave');

		this.functionPanel.setVisible(newValue=='GO\\Customfields\\Customfieldtype\\FunctionField');
		if(newValue=='GO\\Customfields\\Customfieldtype\\FunctionField')
		{
			this.functionPanel.doLayout();
		}

		this.multiSelectCB.container.up('div.x-form-item').setDisplayed(newValue=='GO\\Customfields\\Customfieldtype\\Select' || newValue=='GO\\Customfields\\Customfieldtype\\TreeselectSlave');

		this.multiSelectCB.helpTextEl.setDisplayed(newValue=='GO\\Customfields\\Customfieldtype\\TreeselectSlave');

		this.heightField.container.up('div.x-form-item').setDisplayed(newValue=='GO\\Customfields\\Customfieldtype\\Textarea');

		this.optionsGrid.setVisible(newValue=='GO\\Customfields\\Customfieldtype\\Select');
		if(newValue=='GO\\Customfields\\Customfieldtype\\Select')
		{
			this.optionsGrid.setFieldId(this.field_id);
		}

		this.regexField.setDisabled(newValue!='GO\\Customfields\\Customfieldtype\\Text');

		// Select deselect mother in Datatype to customize dialog (implementation in Php-Customfield datatype)
		if(GO.customfields.dataTypes[this.oldValue] && GO.customfields.dataTypes[this.oldValue].onDeselect) {
			GO.customfields.dataTypes[this.oldValue].onDeselect(this);
		}
		if(GO.customfields.dataTypes[newValue] && GO.customfields.dataTypes[newValue].onSelect) {
			GO.customfields.dataTypes[newValue].onSelect(this);
		}

		this.syncShadow();
		this.center();

		this.oldValue = newValue;
	},
	oldValue : 'GO\\Customfields\\Customfieldtype\\Text',

	show : function (field_id) {

		if(!this.typeField.store.loaded){
			this.typeField.store.load({
				callback:function(){
					this.typeField.setValue("GO\\Customfields\\Customfieldtype\\Text");
					this.show(field_id);
				},
				scope:this
			});
			return;
		}

		if(!this.rendered){
			this.render(Ext.getBody());
			this.max.getEl().up('.x-form-item').setDisplayed(false);
		}
		//this.formPanel.form.reset();

		this.setFieldId(field_id);

		if(field_id>0)
		{
			this.formPanel.load({
				url:GO.url('customfields/field/load'),
				success:function(form, action)
				{
					var response = Ext.decode(action.response.responseText);
					this.loadData = response.data;
					this.typeChange(this.typeField, this.typeField.getValue());

					GO.customfields.FieldDialog.superclass.show.call(this);

					this.maxLengthField.setDisabled(!response.data['hasLength']);
					this.maxLengthField.setVisible(response.data['hasLength']);
				},
				failure:function(form, action)
				{
					GO.errorDialog.show(action.result.feedback)
				},
				scope: this

			});
		}else
		{
			this.loadData = {};
			this.formPanel.form.reset();
			if(!this.lastCategoryId)
				this.lastCategoryId=GO.customfields.categoriesStore.data.items[0].id;

			if(GO.customfields.categoriesStore.getById(this.lastCategoryId))
				this.categoryField.setValue(this.lastCategoryId);
			else
				this.categoryField.selectFirst();

			this.typeChange(this.typeField, 'GO\\Customfields\\Customfieldtype\\Text');
			this.maxLengthField.setDisabled(false);
			this.maxLengthField.setVisible(true);
			GO.customfields.FieldDialog.superclass.show.call(this);
		}
	},

	setCategoryId : function(category_id)
	{
		this.formPanel.baseParams['category_id']=category_id;

	},

	setExtendModel : function(extend_model){

		if(extend_model!=this.extendModel){
			this.typeField.store.loaded=false;
			this.extendModel = extend_model;
			this.typeField.store.baseParams.extend_model = this.extendModel;
		}
	},

	setFieldId : function(field_id)
	{
		this.formPanel.form.baseParams['id']=field_id;
		this.field_id=field_id;
		if(this.typeField.getValue()=='GO\\Customfields\\Customfieldtype\\Select')
			this.optionsGrid.setFieldId(field_id);

		if(this.typeField.getValue()=='GO\\Customfields\\Customfieldtype\\Treeselect')
			this.treeSelectOptions.setFieldId(field_id);
	},

//	submitForm : function(hide){
//
//		if (this.uniqueCB.getValue()==true) {
//			Ext.Msg.show({
//				title: GO.customfields.lang['makeUnique'],
//				icon: Ext.MessageBox.WARNING,
//				msg: GO.customfields.lang['makeUniqueRUSure'],
//				buttons: Ext.Msg.YESNO,
//				scope:this,
//				fn: function(btn) {
//					if (btn=='yes') {
//						this._submitForm(hide);
//					}
//				}
//			});
//		} else {
//			this._submitForm(hide);
//		}
//
//	},

	submitForm : function(hide) {
		this.formPanel.form.submit(
		{
			submitEmptyText: false,
			//url:GO.settings.modules.customfields.url+'action.php',
			url:GO.url('customfields/field/submit'),
			params: {
				//'task' : 'save_field',
				'select_options' : Ext.encode(this.optionsGrid.getGridData())
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){

				this.fireEvent('save', this);

				if(action.result.id)
				{
					this.setFieldId(action.result.id);
				}

				if(hide)
				{
					this.hide();
				}

				this.lastCategoryId=this.categoryField.getValue();

				this.optionsGrid.store.commitChanges();

			},
			failure: function(form, action) {
				if(action.failureType == 'client')
				{
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});
	}
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: CategoryDialog.js 15954 2013-10-17 12:04:36Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.customfields.CategoryDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	initComponent : function(){
		
		Ext.apply(this, {
			title:GO.customfields.lang.category,
			formControllerUrl: 'customfields/category',
			height:600
		});
		
		GO.customfields.CategoryDialog.superclass.initComponent.call(this);	
	},
	buildForm : function () {

		this.propertiesPanel = new Ext.Panel({
			url: GO.settings.modules.customfields.url+'action.php',
			border: false,
			baseParams: {task: 'category'},			
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',waitMsgTarget:true,			
			layout:'form',
			autoScroll:true,
			items:[{
				xtype: 'textfield',
			  name: 'name',
				anchor: '100%',
			  allowBlank:false,
			  fieldLabel: GO.lang.strName
			}]				
		});

		this.addPanel(this.propertiesPanel);	
 
    this.addPermissionsPanel(new GO.grid.PermissionsPanel({levels:[GO.permissionLevels.read,GO.permissionLevels.write,GO.permissionLevels.manage]}));    
	},	
	setType : function(extends_model)
	{
		this.formPanel.baseParams['extends_model']=extends_model;		
	}
});

GO.customfields.CategoriesPanel = Ext.extend(GO.grid.GridPanel, {
	changed : false,
	initComponent : function(){
		
		this.layout='fit';
		
		
		this.store = GO.customfields.categoriesStore;
		this.enableDragDrop=true;
	  this.columns=[
				{
					header:GO.lang['strName'],
					dataIndex: 'name'
				}];
	 this.view= new Ext.grid.GridView({
				autoFill:true,
				forceFit:true		    
			});
			
	this.ddGroup='cfCategoriesDD';
			
		this.sm=new Ext.grid.RowSelectionModel();
		this.loadMask=true;
		
		this.tbar=[{
				iconCls: 'btn-add',							
				text: GO.lang['cmdAdd'],
				cls: 'x-btn-text-icon',
				handler: function(){				
					this.categoryDialog.setType(this.store.baseParams.link_type);	
		    	this.categoryDialog.show();
				},
				scope: this
			},{	
				iconCls: 'btn-delete',
				text: GO.lang['cmdDelete'],
				cls: 'x-btn-text-icon',
				handler: function(){
					this.deleteSelected();
				},
				scope: this
			}];
		
		this.categoryDialog = new GO.customfields.CategoryDialog();
		this.categoryDialog.on('save', function(){
			this.store.reload();
			this.changed=true;
		}, this);
		
		this.on('rowdblclick', function(grid){
			var selectionModel = grid.getSelectionModel();
			var record = selectionModel.getSelected();
						
			this.categoryDialog.show(record.id);
		}, this);
		
	
		
		GO.customfields.CategoriesPanel.superclass.initComponent.call(this);
	},
	
	afterRender : function(){
		
		GO.customfields.CategoriesPanel.superclass.afterRender.call(this);
		//enable row sorting
		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody, 
		{
			ddGroup : 'cfCategoriesDD',
			copy:false,
			notifyDrop : this.notifyDrop.createDelegate(this)
		});
	},
	
	notifyDrop : function(dd, e, data)
	{
		var sm=this.getSelectionModel();
		var rows=sm.getSelections();
		var dragData = dd.getDragData(e);
		var cindex=dragData.rowIndex;
		if(cindex=='undefined')
		{
			cindex=this.store.data.length-1;
		}	
		
		for(i = 0; i < rows.length; i++) 
		{								
			var rowData=this.store.getById(rows[i].id);
			
			if(!this.copy){
				this.store.remove(this.store.getById(rows[i].id));
			}
			
			this.store.insert(cindex,rowData);
		}
		
		//save sort order							
		var records = [];
  	for (var i = 0; i < this.store.data.items.length;  i++)
  	{			    	
			records.push({id: this.store.data.items[i].get('id'), sort_index : i});
  	}
  	
  	this.changed=true;
		
//		Ext.Ajax.request({
//			url: GO.settings.modules.customfields.url+'action.php',
//			params: {
//				task: 'save_categories_sort_order',
//				categories: Ext.encode(records)
//			}
//		});			

		GO.request({
			url:'customfields/category/saveSort',
			params:{
				categories:Ext.encode(records)
			}
		})
		
	}
	
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: CategoriesDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

 
GO.customfields.CategoriesDialog = function(config){
	
	
	if(!config)
	{
		config={};
	}
		
	this.categoriesPanel = new GO.customfields.CategoriesPanel({
	});
	

	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=500;
	config.height=300;
	config.closeAction='hide';
	config.title= GO.customfields.lang.categories;					
	config.items= this.categoriesPanel;
	config.buttons=[{
			text: GO.lang['cmdClose'],
			handler: function(){
				if(this.categoriesPanel.changed)
				{
					this.fireEvent('change');
					this.categoriesPanel.changed=false;
				}
				this.hide();
				
			},
			scope:this
		}					
	];
	

	
	GO.customfields.CategoriesDialog.superclass.constructor.call(this, config);
	
	this.addEvents({'change':true});
	
}

Ext.extend(GO.customfields.CategoriesDialog, Ext.Window,{
	
	
	show : function (link_type) {		
		if(!this.rendered)
			this.render(Ext.getBody());
			
		if(this.categoriesPanel.store.baseParams['link_type']=link_type)
		{
			this.setLinkType(link_type);
			this.categoriesPanel.store.load();
		}
		GO.customfields.FieldDialog.superclass.show.call(this);
	},
	
	setLinkType : function(link_type)
	{
		this.categoriesPanel.store.baseParams['link_type']=link_type;
		
	}	
});

GO.customfields.CustomFormPanel = function(config)
{
	if(!config)
	{
		config={};
	}
	
	config.autoScroll=true;
	config.border=false;
	config.hideLabel=true;
	config.hideMode='offsets';
	config.layout='form';
	config.defaultType = 'textfield';
	config.cls='go-form-panel';
	config.labelWidth=140;
	

	config.items=[];
	
	var formField;
	
	for(var i=0;i<config.customfields.length;i++)
	{
		var cf_cfg = {};
		if(config.customfields[i].readOnly) {
			cf_cfg.readOnly = config.customfields[i].readOnly;
			cf_cfg.hideTrigger = true;
		}
		formField = GO.customfields.getFormField(config.customfields[i],cf_cfg);
		if(formField)
			config.items.push(formField);
	}		
	

	GO.customfields.CustomFormPanel.superclass.constructor.call(this, config);		
}
Ext.extend(GO.customfields.CustomFormPanel, Ext.Panel,{

	setAllowBlank : function(item, allowBlank){
		item.allowBlank=allowBlank;
		
		//special datetime field that has twop fields
		if(item.df){
			item.df.allowBlank=allowBlank;
			item.tf.allowBlank=allowBlank;
		}
	},
	
	disableValidation : function(){
		this.items.each(function(i){
			
			this.setAllowBlank(i, true);
		}, this);
	},
	enableValidation : function(){
		for(var i=0;i<this.customfields.length;i++)
		{
			if(!GO.util.empty(this.customfields[i].required)){
				var index = this.items.findIndex('name', this.customfields[i].dataname);
				if (index<0)
					index = this.items.findIndex('hiddenName', this.customfields[i].dataname);
				if(index){
					this.setAllowBlank(this.items.itemAt(index), false);
					
				}
			}
		}
	}
});

Ext.reg('customformpanel', GO.customfields.CustomFormPanel);

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: SelectOptionsGrid.js 19873 2016-03-01 10:55:30Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */



GO.customfields.SelectOptionsGrid = function(config){
	if(!config)
	{
		config = {};
	}

	config.title = GO.customfields.lang.SelectOptions;
	config.layout='fit';
	config.anchor='-20';
	config.autoScroll=true;
	config.split=true;
	//config.height=200;
	config.autoHeight=true;
	
	//config.disabled=true;
	var fields ={
		fields:['id','text'],
		columns:[	{
			sortable:false,
			hideable:false,
			menuDisabled:true,
			header: GO.lang.strText,
			dataIndex: 'text',
			editor: new Ext.form.TextField()
		}]
	};


	config.store = new GO.data.JsonStore({
			//url: GO.settings.modules.customfields.url+'json.php',
			url: GO.url("customfields/field/selectOptions"),
			baseParams: {
				//'task': 'field_options',
				'field_id' : 0
				},
			root: 'results',
			totalProperty: 'total',
			id: 'id',
			fields:['id','text'],
			remoteSort:true
		});

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:fields.columns
	});

	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	config.clicksToEdit=1;



	var Option = Ext.data.Record.create([
	// the "name" below matches the tag name to read, except "availDate"
	// which is mapped to the tag "availability"
	{
		name: 'id',
		type: 'int'
	},

	{
		name: 'text',
		type: 'string'
	}
	]);

	config.enableDragDrop=true;
	config.listeners={
		scope:this,
		render:function(){
			//enable row sorting
			var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody,
			{
				ddGroup : 'cfSelectOptionsDD',
				copy:false,
				notifyDrop : this.notifyDrop.createDelegate(this)
			});
		}
	}
	config.ddGroup='cfSelectOptionsDD';

	config.tbar=[{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function(){
			var e = new Option({
				id: '0',
				text:''
			});
			this.stopEditing();
			var rowIndex = this.store.getCount();
			this.store.insert(rowIndex, e);
			this.startEditing(rowIndex, 0);
		},
		scope: this
	},{
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function(){
			var selectedRows = this.selModel.getSelections();
			for(var i=0;i<selectedRows.length;i++)
			{
				selectedRows[i].commit();
				this.store.remove(selectedRows[i]);
			}
		},
		scope: this
	},{
		iconCls: 'btn-upload',
		text:GO.lang.cmdImport,
		handler:this.importSelectOptions,
		scope:this
	}];
	GO.customfields.SelectOptionsGrid.superclass.constructor.call(this, config);

};
Ext.extend(GO.customfields.SelectOptionsGrid, Ext.grid.EditorGridPanel,{
	importSelectOptions : function(){

		if(GO.util.empty(this.store.baseParams.field_id)){
			alert(GO.customfields.lang.clickApplyFirst);
			return false;
		}

		if(!this.importDialog)
		{
			this.importDialog = new GO.customfields.ImportDialog({
				importText:GO.customfields.lang.importText,
				task: 'import_select_options',
				listeners:{
					scope:this,
					importSelectOptions:function(){this.store.reload();}
				}
			});

		}
		this.importDialog.upForm.baseParams.field_id=this.store.baseParams.field_id;
		this.importDialog.show();
	},

	notifyDrop : function(dd, e, data)
	{
		var sm=this.getSelectionModel();
		var rows=sm.getSelections();
		var dragData = dd.getDragData(e);
		var cindex=dragData.rowIndex;
		if(cindex=='undefined')
		{
			cindex=this.store.data.length-1;
		}

		for(i = 0; i < rows.length; i++)
		{
			var rowData=this.store.getById(rows[i].id);

			if(!this.copy){
				this.store.remove(this.store.getById(rows[i].id));
			}

			this.store.insert(cindex,rowData);
		}

		//save sort order
		var records = [];
  	for (var i = 0; i < this.store.data.items.length;  i++)
  	{
			records.push({id: this.store.data.items[i].get('id'), sort_index : i});
  	}
	},
	setFieldId : function(field_id){
		//this.setDisabled(!field_id);
		if(field_id!=this.store.baseParams.field_id){
			this.store.baseParams.field_id=field_id;

			if(GO.util.empty(field_id)){
				this.store.loaded=false;
				this.store.removeAll();
			}else
			{
				this.store.load();
			}
		}
	},

	getGridData : function(){

		var data = {};

		for (var i = 0; i < this.store.data.items.length;  i++)
		{
			var r = this.store.data.items[i].data;

			data[i]={};

			for(var key in r)
			{
				data[i][key]=r[key];
			}
		}

		return data;
	},
	setIds : function(ids)
	{
		for(var index in ids)
		{
			if(index!="remove")
			{
				this.store.getAt(index).set('id', ids[index]);
			}
		}
	}
});






GO.customfields.TreeSelectOptions = function(config){

	config = config || {};

	Ext.apply(config, {
		animate:true,
		height:200,
		disapled:true,
		autoScroll:true,
		loader: new GO.base.tree.TreeLoader({
			dataUrl:GO.url('customfields/fieldTreeSelectOption/tree'),
			baseParams:{
				field_id:0
			}
		}),
		enableDrag:true,
		containerScroll: true,
		border: true
	});

	config.tbar=[{
		text:GO.lang.cmdAdd,
		handler:function(){
			var node = this.selModel.getSelectedNode();
			if(!node)
			{
				node=this.rootNode;
			}

			var newNode = new Ext.tree.AsyncTreeNode({
				text: '',
				id: '0',
				expanded:true,
				children:[],
				iconCls:'folder-default'
			});

			newNode = node.appendChild(newNode);

			this.treeEditor.triggerEdit(newNode);
		},
		scope:this,
		iconCls:'btn-add'
	},'-',
	{
		text:GO.lang.cmdDelete,
		iconCls:'btn-delete',
		handler:function(){
			var node = this.selModel.getSelectedNode();
			if(!node)
			{
				alert(GO.lang.noItemSelected);
				return false;
			}
			GO.request({
				url:'customfields/fieldTreeSelectOption/delete',
				params:{					
					id:node.id					
				},
				success: function(response, options, result)
				{
					if(!result.success)
					{
						this.reload();
						alert(result.feedback);
					}else
					{
						if(node.parentNode){
							node.parentNode.reload();
							node.destroy();
						}else
						{
							this.rootNode.reload();
						}
					}
				},
				scope:this
			});
		},
		scope:this
	},{
		iconCls: 'btn-upload',
		text:GO.lang.cmdImport,
		handler:this.importSelectOptions,
		scope:this
	}];


	


	GO.customfields.TreeSelectOptions.superclass.constructor.call(this, config);

	this.treeEditor = new Ext.tree.TreeEditor(
		this,
		new Ext.form.TextField({
			cancelOnEsc:true,
			completeOnEnter:true,
			maskRe:/[^:]/
		}),
		{
			listeners:{
				complete  : this.afterEdit,
				beforecomplete  : function( editor, value, startValue){
					value=value.trim();
					if(GO.util.empty(value)){
						editor.focus();
						return false;
					}
				},
				scope:this
			}
		});

	// set the root node
	this.rootNode = new Ext.tree.AsyncTreeNode({
		text: 'Root',
		draggable:false, // disable root node dragging
		id:'root',
		iconCls:'folder-default',
		editable:false
	});
	this.setRootNode(this.rootNode);
}

Ext.extend(GO.customfields.TreeSelectOptions,Ext.tree.TreePanel, {
	importSelectOptions : function(){

		if(!this.importDialog)
		{
			this.importDialog = new GO.customfields.ImportDialog({
				importText:GO.customfields.lang.treeImportText,
				task:'treeselect_import',				
				listeners:{
					scope:this,
					importSelectOptions:function(){this.rootNode.reload();}
				}
			});

		}
		this.importDialog.upForm.baseParams.field_id=	this.getLoader().baseParams.field_id;
		this.importDialog.show();
	},

	setFieldId : function(field_id){
		this.setDisabled(!field_id);
		this.getLoader().baseParams.field_id=field_id;
		if(field_id>0)
		{			
			this.rootNode.reload();
		}
	},

	afterEdit : function(editor, text, oldText ){

		GO.request({
			url:'customfields/fieldTreeSelectOption/submit',
			params:{				
				parent_id:editor.editNode.parentNode.id=='root' ? 0 : editor.editNode.parentNode.id,
				id:editor.editNode.id,
				field_id:this.loader.baseParams.field_id,
				name:text
			},
			success: function(response, options, result)
			{
				if(!result.success)
				{
					if(editor.editNode.id=='0')
						editor.editNode.destroy();

					alert(result.feedback);
				}

				if(result.id)
					editor.editNode.setId(result.id);
			},
			scope:this
		});
	}
});

GO.customfields.ImportDialog = Ext.extend(Ext.Window, {

	initComponent : function(){

		this.title=GO.lang.cmdImport;

		this.width=500;
		this.autoHeight=true;

		this.closeAction='hide';

		this.uploadFile = new GO.form.UploadFile({
			inputName : 'importfile',
			max:1
		});

		this.upForm = new Ext.form.FormPanel({
			fileUpload:true,
			waitMsgTarget:true,
			baseParams:{field_id:0},
			items: [new GO.form.HtmlComponent({
				html: this.importText+'<br /><br />'
			}),
			this.uploadFile],
			cls: 'go-form-panel'
		});

		this.items=[

		this.upForm];

		this.buttons=[
		{
			text:GO.lang.cmdOk,
			handler: this.uploadHandler,
			scope: this
		},
		{
			text:GO.lang['cmdClose'],
			handler: function(){this.hide()},
			scope: this
		}];

		this.addEvents({'importSelectOptions': true});

		GO.customfields.ImportDialog.superclass.initComponent.call(this);
	},
	uploadHandler : function(){
		this.upForm.form.submit({
			waitMsg:GO.lang.waitMsgUpload,
			url:this.task  == 'treeselect_import' ? GO.url('customfields/field/importTreeSelectOptions') : GO.url('customfields/field/importSelectOptions'),
			success:function(form, action){
				this.uploadFile.clearQueue();
				this.hide();

				this.fireEvent('importSelectOptions');
			},
			failure: function(form, action) {
				if(action.failureType == 'client')
				{
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);
				} else {

					var fb = action.result.feedback.replace(/BR/g,'<br />');

					Ext.MessageBox.alert(GO.lang['strError'], fb);
				}
			},
			scope: this
		});
	}
});



GO.customfields.dataTypes={
	"GO\\Customfields\\Customfieldtype\\User":{
		label : GO.lang.strUser,
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.name;

			f=Ext.apply(f, {
				xtype: 'selectuser',
				idValuePair:true,
				startBlank:true,
				forceSelection:true,
				hiddenName:customfield.dataname,
				anchor:'-20',
				valueField:'cf'
			});

			return f;
		}
    },
	"GO\\Customfields\\Customfieldtype\\Datetime":{
		label:'Date time',
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.anchor;

			return Ext.apply(f, {
				xtype:'datetime',
				width : 300
//				timeFormat: GO.settings['time_format'],
//				dateFormat:GO.settings['date_format'],
//				hiddenFormat: GO.settings['date_format']+" "+GO.settings['time_format']
			});
		}
	},

	"GO\\Customfields\\Customfieldtype\\Date" : {
		label:'Date',
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.anchor;

			return Ext.apply(f, {
				xtype:'datefield',
				format: GO.settings['date_format'],
				width : 120
			});
		}
	},

	"GO\\Customfields\\Customfieldtype\\Number" : {
		label : 'Number',
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);
			delete f.anchor;

			if (!GO.util.empty(customfield.prefix) || !GO.util.empty(customfield.suffix)) {				
				return {
					anchor:'-20',
					xtype: 'compositefield',
					fieldLabel: f.fieldLabel,
					items: [
						Ext.apply({
							xtype:'numberfield',
							decimals: customfield.number_decimals,
							width:120,
							name: customfield.dataname,
							allowBlank: GO.util.empty(customfield.required)
						}, config),
						{
							xtype: 'plainfield',
							value: customfield.suffix,
							hideLabel: true,
							columnWidth: '.1'
						}
					]
				}
			} else {
				return Ext.apply(f, {
					xtype:'numberfield',
					decimals: customfield.number_decimals,
					width:120
				});
			}
		}
	},
	"GO\\Customfields\\Customfieldtype\\Checkbox" :{
		label: 'Checkbox',
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.fieldLabel;

			return Ext.apply(f, {
				xtype:'xcheckbox',
				boxLabel: customfield.name,
				hideLabel: true
			});
		}
	},
	"GO\\Customfields\\Customfieldtype\\BinaryCombobox" :{
		label: 'Binary Combobox',
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.fieldLabel;

			return Ext.apply(f, {
				xtype:'combo',
				fieldLabel: customfield.name,
				hiddenName: customfield.dataname,
				store: new Ext.data.ArrayStore({
						storeId: 'binaryStore',
						idIndex: 0,
						fields:['value','label'],
						data: [
							['0',GO.lang['cmdNo']],
							['1',GO.lang['cmdYes']]
						]
					}),
				valueField:'value',
				displayField:'label',
				mode:'local',
				allowBlank: false,
				triggerAction: 'all'
			});
		}
	},
	"GO\\Customfields\\Customfieldtype\\Textarea" : {
		label : 'Textarea',
		getFormField : function(customfield, config){
			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

                        if(!customfield.height)
                        {
                               customfield.height = 40;
                        }

			return Ext.apply(f, {
				xtype:'textarea',
				height:parseInt(customfield.height),
				maxLength: Number.MAX_VALUE
			}, config);
		}
	},
	"GO\\Customfields\\Customfieldtype\\Html" : {
		label : 'HTML',
		getFormField : function(customfield, config){
			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			return Ext.apply(f, {
				xtype:'xhtmleditor',
				height:200,
				maxLength: Number.MAX_VALUE
			}, config);
		}
	},
	"GO\\Customfields\\Customfieldtype\\Select" : {
		label : 'Select',
		getFormField : function(customfield, config){
			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);
			var store = new GO.data.JsonStore({
				//url: GO.settings.modules.customfields.url+'json.php',
				url:GO.url('customfields/field/selectOptions'),
				baseParams: {
					//'task': 'field_options',
					'field_id' : customfield.customfield_id//customfield.id.replace("col_","")
				},
				root: 'results',
				totalProperty: 'total',
				id: 'id',
				fields:['id','text'],
				remoteSort:true
			});

			if(GO.util.empty(customfield.multiselect)){
				return Ext.apply(f, {
					xtype:'combo',
					store: store,
					valueField:'text',
					displayField:'text',
					mode: 'remote',
					triggerAction: 'all',
					editable: true,
					selectOnFocus:true,
					forceSelection:true
				}, config);
			}else
			{
				return Ext.apply(f, {
					max:parseInt(customfield.max),
					allowAddNewData:true, //otherwise every value will be looked up at the server. We don't want that.
					xtype:'superboxselect',
					resizable: true,
					store: store,
					mode: 'remote',
					displayField: 'text',
					displayFieldTpl: '{text}',
					valueField: 'text',
					forceSelection : true,
					valueDelimiter:'|',
					hiddenName:customfield.dataname,
					anchor:'-20',
					allowBlank: GO.util.empty(customfield.required),
					queryDelay: 0,
					triggerAction: 'all'
				});
			}
		}
	},
	/*
	 * A GO\Customfields\Customfieldtype\Treeselectconsists of one master and one or more slave comboboxes.
	 * The slave is loaded with data depending on the selection of it's parent.
	 * The last slave can be a multiselect combo (superboxselect).
	 */
	"GO\\Customfields\\Customfieldtype\\Treeselect" : {
		label : 'Tree select',
		getFormField : function(customfield, config){

			//store the slaves of this GO\Customfields\Customfieldtype\Treeselectin an array
			if(!GO.customfields.slaves)
				GO.customfields.slaves={};

			var treemaster_field_id = !GO.util.empty(customfield.treemaster_field_id) ? customfield.treemaster_field_id : customfield.id;

			if(!GO.customfields.slaves[treemaster_field_id])
				GO.customfields.slaves[treemaster_field_id]={};

			GO.customfields.slaves[treemaster_field_id][parseInt(customfield.nesting_level)]=customfield.dataname;

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			var isMaster = customfield.nesting_level==0;

			var store = new GO.data.JsonStore({
				//url: GO.settings.modules.customfields.url+'json.php',
				url: GO.url('customfields/fieldTreeSelectOption/store'),
				baseParams: {
					//'task': 'tree_select_options_combo',
					'field_id' : treemaster_field_id,
					parent_id: (isMaster) ? 0 : -1
				},
				root: 'results',
				totalProperty: 'total',
				id: 'id',
				fields:['id','name','name_with_id'],
				remoteSort:true
			});

			delete f.name;

			if(GO.util.empty(customfield.multiselect)){
				return Ext.apply(f, {
					treemaster_field_id:treemaster_field_id,
					nesting_level:parseInt(customfield.nesting_level),
					xtype:'combo',
					store: store,
					hiddenName:customfield.dataname,
					valueField:'name_with_id',
					displayField:'name',
					mode: 'remote',
					triggerAction: 'all',
					editable: true,
					selectOnFocus:true,
					forceSelection:true,
					listeners:{
						scope:this,
						select:function(combo, record, index){
							var nextNestingLevel=combo.nesting_level+1;
							var formPanel = combo.findParentByType('form');
							while(GO.customfields.slaves[combo.treemaster_field_id][nextNestingLevel]){

								var field = formPanel.form.findField(GO.customfields.slaves[combo.treemaster_field_id][nextNestingLevel]);
								if(!field)
									field = formPanel.form.findField(GO.customfields.slaves[combo.treemaster_field_id][nextNestingLevel]+'[]');

								if(nextNestingLevel==combo.nesting_level+1) //is first upcoming slave
									field.store.baseParams.parent_id=record.id;
								else
									field.store.baseParams.parent_id = -1;
								field.lastQuery = null;
								field.clearValue();

								nextNestingLevel++;
							}
						},
						render:function(combo){
							//var formPanel = combo.findParentByType("form");
							//
							var formPanel = combo.findParentBy(function(p){
								if(p.form)
									return true;
							});
							//add listener to form to set the correct form values and store parameters
							if(!GO.util.empty(formPanel) && !formPanel["GO\\Customfields\\Customfieldtype\\TreeselectListenerAdded"]){
								formPanel["GO\\Customfields\\Customfieldtype\\TreeselectListenerAdded"]=true;

								formPanel.on('actioncomplete', function(form, action){
									if(action.type=='load'){
										form.items.each(function(field){
											//check if this field is a tree select
											if(field.treemaster_field_id){

												var nextField=false;
												var nextNestingLevel=field.nesting_level+1;
												if(GO.customfields.slaves[field.treemaster_field_id][nextNestingLevel]){

													nextField = formPanel.form.findField(GO.customfields.slaves[field.treemaster_field_id][nextNestingLevel]);
													if(!nextField)
														nextField = formPanel.form.findField(GO.customfields.slaves[field.treemaster_field_id][nextNestingLevel]+'[]');
												}
												var v = field.getValue();

												if(v){
													if(!field.valueDelimiter){
														//normal combo

														v=v.split(':');
														if(v.length>1){

															if(nextField)
																nextField.store.baseParams.parent_id=v[0];

															// Check if the value has colons in it, then put them back
															var vl = v[1];
															if(v.length>2){
																for(var i=2;i<v.length;i++){
																	vl = vl+':'+v[i];
																}
															}

															field.setRawValue(vl);
														}
													}
												}else
												{
													//empty value
													if(field.nesting_level==0) // is master
														field.store.baseParams.parent_id=0;
													else
														field.store.baseParams.parent_id= -1;
													field.clearValue();
												}
												field.lastQuery = null;

											}

										});
									}
								});
							}
						}
					}
				}, config);
			}else
			{
				//if (combo.nesting_level!=0)
					store.baseParams.parent_id=-1;
				//only the last slave can be a multiselect combo
				return Ext.apply(f, {
					allowAddNewData:true,
					//itemId:customfield.dataname,
					max:parseInt(customfield.max),
					treemaster_field_id:treemaster_field_id,
					nesting_level:parseInt(customfield.nesting_level),
					xtype:'superboxselect',
					resizable: true,
					store: store,
					mode: 'remote',
					displayField:'name',
					displayFieldTpl: '{name}',
					valueField: 'name_with_id',
					forceSelection : true,
					valueDelimiter:'|',
					hiddenName:customfield.dataname,
					anchor:'-20',
					allowBlank: GO.util.empty(customfield.required),
					queryDelay: 0,
					triggerAction: 'all'
				}, config);
			}

		}
	},
	"GO\\Customfields\\Customfieldtype\\TreeselectSlave" : {
		label:'Tree select slave',
		getFormField : function(customfield, config){
			return GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Treeselect"].getFormField(customfield, config);
		}
	},
	"GO\\Customfields\\Customfieldtype\\Heading": {
		label : 'Heading',
		getFormField : function(customfield, config){
			return new GO.form.HtmlComponent(Ext.apply({
				html: "<h1 class=\"cf-heading\">"+customfield.name+"</h1>"
			}, config));
		}
	},
	"GO\\Customfields\\Customfieldtype\\FunctionField" : {
		label : 'Function',
		getFormField : function(customfield, config){
			return new Ext.form.Hidden(Ext.apply({
				name: customfield.dataname
			}, config));
//			return false;
		}
	},
	"GO\\Customfields\\Customfieldtype\\Text": {
		label : 'Text',
		getFormField : function(customfield, config){

			config = config || {};

			if(!GO.util.empty(customfield.validation_regex)){

				if(!GO.util.empty(customfield.validation_modifiers))
					config.regex=new RegExp(customfield.validation_regex, customfield.validation_modifiers);
				else
					config.regex=new RegExp(customfield.validation_regex);
			}

			if(!GO.util.empty(customfield.helptext))
				config.plugins=new Ext.ux.FieldHelp(customfield.helptext);

			var fieldLabel = customfield.name;
			if(!GO.util.empty(customfield.required))
				fieldLabel+='*';

			if(customfield.max_length){
				config.maxLength=customfield.max_length;
			}

			if (!GO.util.empty(customfield.prefix) || !GO.util.empty(customfield.suffix)) {
				
				if (!GO.util.empty(customfield.prefix))
					fieldLabel = fieldLabel+' ('+customfield.prefix+')';
				
				var compositeItems = [
						Ext.apply({
							xtype:'textfield',
							name: customfield.dataname,
							anchor:'-20',
							allowBlank: GO.util.empty(customfield.required)
						}, config)]
				
				if (!GO.util.empty(customfield.suffix))
					compositeItems.push(						{
							xtype: 'plainfield',
							value: customfield.suffix,
							hideLabel: true,
							columnWidth: '.1'
						});
				
				return {
					anchor:'-20',
					xtype: 'compositefield',
					fieldLabel: fieldLabel,
					items: compositeItems
				}
			} else {
				return Ext.apply({
					xtype:'textfield',
					name: customfield.dataname,
					fieldLabel: fieldLabel,
					anchor:'-20',
					allowBlank: GO.util.empty(customfield.required)
				}, config);
			}

		}
	},
	"GO\\Customfields\\Customfieldtype\\ReadonlyText": {
		label : 'Text (Read only)',
		getFormField : function(customfield, config){

			config = config || {};

			if(!GO.util.empty(customfield.validation_regex)){

				if(!GO.util.empty(customfield.validation_modifiers))
					config.regex=new RegExp(customfield.validation_regex, customfield.validation_modifiers);
				else
					config.regex=new RegExp(customfield.validation_regex);
			}

			if(!GO.util.empty(customfield.helptext))
				config.plugins=new Ext.ux.FieldHelp(customfield.helptext);

			var fieldLabel = customfield.name;
			if(!GO.util.empty(customfield.required))
				fieldLabel+='*';

			if(customfield.max_length){
				config.maxLength=customfield.max_length;
			}

			if (!GO.util.empty(customfield.prefix) || !GO.util.empty(customfield.suffix)) {
				
				if (!GO.util.empty(customfield.prefix))
					fieldLabel = fieldLabel+' ('+customfield.prefix+')';
				
				var compositeItems = [
						Ext.apply({
							xtype:'textfield',
							name: customfield.dataname,
							anchor:'-20',
							allowBlank: GO.util.empty(customfield.required)
						}, config)]
				
				if (!GO.util.empty(customfield.suffix))
					compositeItems.push(						{
							xtype: 'plainfield',
							value: customfield.suffix,
							hideLabel: true,
							columnWidth: '.1'
						});
				
				return {
					anchor:'-20',
					xtype: 'compositefield',
					fieldLabel: fieldLabel,
					items: compositeItems
				}
			} else {
				return Ext.apply({
					xtype:'textfield',
					name: customfield.dataname,
					fieldLabel: fieldLabel,
					anchor:'-20',
					allowBlank: GO.util.empty(customfield.required),
					disabled:true
				}, config);
			}

		}
	},
	"GO\\Customfields\\Customfieldtype\\EncryptedText": {
		label : 'Encrypted text',
		getFormField : function(customfield, config) {
			config = config || {};

			if(!GO.util.empty(customfield.validation_regex))
				config.regex=new RegExp(customfield.validation_regex);

			if(!GO.util.empty(customfield.helptext))
				config.plugins=new Ext.ux.FieldHelp(customfield.helptext);

			var fieldLabel = customfield.name;
			if(!GO.util.empty(customfield.required))
				fieldLabel+='*';

			return Ext.apply({
				xtype:'textfield',
				name: customfield.dataname,
				fieldLabel: fieldLabel,
				anchor:'-20',
				allowBlank: GO.util.empty(customfield.required)
			}, config);
		}
	},
	"GO\\Customfields\\Customfieldtype\\Infotext": {
		label : 'Info text',
		getFormField : function(customfield, config){

			config = config || {};

			return Ext.apply({
				xtype:'htmlcomponent',
				html: customfield.name,
				style:'font-size:12px;margin-bottom:15px;'
			}, config);
		}
	},
	"GO\\Customfields\\Customfieldtype\\Yesno" : {
		label : 'Yes No Field',
		getFormField : function(customfield, config){
			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			var store = new Ext.data.SimpleStore({
				id: 'id',
				fields:['id','text'],
				data: [['0',GO.customfields.lang.undef],
							['1',GO.lang.cmdYes],
							['-1',GO.lang.cmdNo]],
				remoteSort:false
			});

			delete f.name;

			return Ext.apply(f, {
				xtype:'combo',
				store: store,
				valueField:'id',
				displayField:'text',
				hiddenName:customfield.dataname,
				mode: 'local',
				editable: false,
				triggerAction : 'all',
				selectOnFocus:true,
				forceSelection:true
			}, config);
		}
	},
	"GO\\Customfields\\Customfieldtype\\UserGroup" : {
		label : GO.lang.strGroup,
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.name;
			
			return Ext.apply(f, {
				xtype: 'selectgroup',
				idValuePair:true,
				hiddenName:customfield.dataname,
				forceSelection:true,				
				valueField:'cf',
				customfieldId: customfield.dataname
			});
		}
	}
};


GO.customfields.nonGridTypes = ['GO\\Customfields\\Customfieldtype\\Textarea','GO\\Customfields\\Customfieldtype\\Html', 'GO\\Customfields\\Customfieldtype\\Header', 'GO\\Customfields\\Customfieldtype\\Infotext'];

GO.customfields.addColumns=function(link_type, fields){
	if(GO.customfields.columns[link_type])
	{
		for(var i=0;i<GO.customfields.columns[link_type].length;i++)
		{
			if(GO.customfields.nonGridTypes.indexOf(GO.customfields.columns[link_type][i].datatype)==-1){
                                if(GO.customfields.columns[link_type][i].exclude_from_grid != 'true')
                                {
                                        fields.fields.push(GO.customfields.columns[link_type][i].dataIndex);
                                        fields.columns.push(GO.customfields.columns[link_type][i]);
                                }
			}
		}
	}
}

GO.customfields.getMatchingFieldNamesMap = function(sourceLinkId, targetLinkId){

	var sourceFields={};
	for(var i=0;i<GO.customfields.types[sourceLinkId].panels.length;i++)
	{
		var p = GO.customfields.types[sourceLinkId].panels[i];
		for(var n=0;n<p.customfields.length;n++){
			sourceFields[p.customfields[n]['name']]=p.customfields[n]['dataname'];
		}
	}

	var map = {};
	for(var i=0;i<GO.customfields.types[targetLinkId].panels.length;i++)
	{
		var p = GO.customfields.types[targetLinkId].panels[i];
		for(var n=0;n<p.customfields.length;n++){
			if(sourceFields[p.customfields[n]['name']]){
				map[sourceFields[p.customfields[n]['name']]]=p.customfields[n]['dataname'];
			}
		}
	}
	return map;
}

GO.customfields.getFormField = function(customfield, config){

	config = config || {};
	if(!GO.customfields.dataTypes[customfield.datatype]){
		GO.log("Could not find custom field of type: "+customfield.datatype+". Is this module installed?");
		return false;
	}

	return GO.customfields.dataTypes[customfield.datatype].getFormField(customfield, config);

}


GO.customfields.MainPanel = function(config){

	if(!config)
	{
		config = {};
	}

	var northPanel = new Ext.Panel({
		region: 'north',
		cls:'go-form-panel',
		waitMsgTarget:true,
		html: '<div class="go-important-icon">'+GO.customfields.lang.restart.replace('Group-Office', GO.settings.config.product_name)+'</div>',
		border: true,
		split: true,
		height:55,
		resizable:false

	});

	this.typePanel = new GO.customfields.TypePanel({
		region:'center',
		border: true
	});

	var navData = [];

	for(var link_type in GO.customfields.types)
	{
		navData.push([link_type, GO.customfields.types[link_type].name]);
	}

	var navStore = new Ext.data.SimpleStore({
		fields: ['link_type', 'name'],
		data : navData
	});

	this.navMenu= new GO.grid.SimpleSelectList({
		store: navStore
	});


	this.navMenu.on('click', function(dataview, index){

		var link_type = dataview.store.data.items[index].data.link_type;
		this.typePanel.setLinkType(link_type);
		this.typePanel.store.load();

	}, this);

	this.navPanel = new Ext.Panel({
		region:'west',
		title:GO.lang.menu,
		autoScroll:true,
		width: 150,
		split:true,
		resizable:true,
		items:this.navMenu
	});



	config.items=[
	northPanel,
	this.navPanel,
	this.typePanel
	];

	config.tbar=new Ext.Toolbar({
		cls:'go-head-tb',
		items:[{
                xtype:'htmlcomponent',
                html:GO.customfields.lang.name,
                cls:'go-module-title-tbar'
        },new Ext.Button({
			iconCls: 'btn-setting',
			text: GO.customfields.lang['manageBlocks'],
			cls: 'x-btn-text-icon',
			handler: function(){
				if (!GO.customfields.manageBlocksWindow) {
					GO.customfields.manageBlocksWindow = new GO.Window({
						title : GO.customfields.lang['manageBlocks'],
						items: [this.manageBlocksGrid = new GO.customfields.ManageBlocksGrid({layout:'fit',height:490})],
						width: 800,
						height: 600,
						layout: 'fit'
					});
					GO.customfields.manageBlocksWindow.on('show',function(){
						this.manageBlocksGrid.store.load();
					},this);
				}
				GO.customfields.manageBlocksWindow.show();
			},
			scope: this
		})]
	});

	config.layout='border';
	GO.customfields.MainPanel.superclass.constructor.call(this, config);

};


Ext.extend(GO.customfields.MainPanel, Ext.Panel, {
	afterRender : function(){
		GO.customfields.MainPanel.superclass.afterRender.call(this);
	}
});


GO.customfields.categoriesStore = new GO.data.JsonStore({
	//url: GO.settings.modules.customfields.url+'json.php',
	url:GO.url('customfields/category/store'),
	totalProperty: "count",
	baseParams:{
		link_type:0
	},
	root: "results",
	id: "id",
	fields:[
	'id',
	'name'
	]
});


GO.customfields.displayPanelTemplate =
	'<tpl if="customfields.length">'+
	'<tpl for="customfields">'+
'{[this.collapsibleSectionHeader(values.name, "cf-"+parent.panelId+"-"+values.id, "cf-"+values.id)]}'+
'<table cellpadding="0" cellspacing="0" border="0" class="display-panel" id="cf-{parent.panelId}-{id}">'+

'<tpl for="fields">'+
'<tpl if="!value">'+
'<tr>'+
'<td class="table_header_links" colspan="2">{name}</td>'+
'</tr>'+
'</tpl>'+
'<tpl if="value && value.length">'+
	'<tr>'+
	'<td>{name}:</td>'+
	'{[GO.customfields.renderType(values)]}'+
	'</tr>'+
'</tpl>'+
'</tpl>'+
'</table>'+
'</tpl>'+
'</tpl>';

GO.customfields.renderType = function(data) {
	switch(data.datatype) {
		case 'GO\\Customfields\\Customfieldtype\\FunctionField':
		case 'GO\\Customfields\\Customfieldtype\\Number':
			return '<td style="text-align: right;">'+data.value+'</td>';
		case 'GO\\Files\\Customfieldtype\\File':
			return '<td>'+data.value+'</td>'; /* '<td>'+data.value+'</td>'+
				'<td style="white-space:nowrap;"><a onclick="" style="display:block;float: right;" class="go-icon btn-edit" href="#">&nbsp;</a></td>';*/
		default:
			return '<td>'+data.value+'</td>';
	}
};

GO.customfields.displayPanelBlocksTemplate =
'<tpl if="items_under_blocks">'+'<tpl if="items_under_blocks.length">'+
	'<tpl for="items_under_blocks">'+
	'{[this.collapsibleSectionHeader(values.block_name, "block-"+parent.panelId+"-"+values.id,"block")]}'+
//	'{[this.collapsibleSectionHeader(values.block_name, "block-"+parent.panelId+"-"+values.id, "block-"+values.id)]}'+
		'<table cellpadding="0" cellspacing="0" border="0" class="display-panel" id="block-{parent.panelId}-{values.id}">'+
			'<tpl for="items">'+
				'<tr>'+
				'<td class="table_header_links" style="width:30px;">'+
					'<div class="display-panel-link-icon go-model-icon-{[this.replaceWithUnderscore(values.model_name)]}" ext:qtip="{values.type}">'+'</div>'+
				'</td>'+
				'<td class="table_header_links">'+
					'<a href="#" onclick="GO.linkHandlers[\'{[values.model_name.replace(/\\\\/g, \'\\\\\\\\\')]}\'].call(this,{model_id});">{item_name}</a>'+
				'</td>'+
				'</tr>'+
			'</tpl>'+
		'</table>'+
	'</tpl>'+
'</tpl>'+'</tpl>';



/*
 * This will add the module to the main tabpanel filled with all the modules
 */

if(GO.settings.modules.customfields.write_permission)
{
	GO.moduleManager.addModule('customfields', GO.customfields.MainPanel, {
		title : GO.customfields.lang.customfields,
		iconCls : 'go-tab-icon-customfields',
		admin :true
	});
}else
{
	GO.moduleManager.onAddModule('customfields');
}


GO.customfields.CategoryFormPanel = function(config)
{
	if(!config)
	{
		config = {};
	}

	GO.customfields.CategoryFormPanel.superclass.constructor.call(this, config);
}

Ext.extend(GO.customfields.CategoryFormPanel, Ext.Panel,{

	setSelectedFileIds : function(selected_file_ids) {
		if (typeof(selected_file_ids)=='undefined')
			this.selected_file_ids = new Array();
		else
			this.selected_file_ids = selected_file_ids;
	},

	submitForm : function() {
		this.form.submit({
			url:GO.settings.modules.customfields.url+'action.php',
			params: {
				'task' : 'bulk_edit',
				'selected_file_ids' : Ext.encode(this.selected_file_ids)
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				Ext.Msg.alert(GO.customfields.lang.success, GO.customfields.lang.appliedToSelection)
			},
			failure: function(form, action) {
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}else
				{
					error = action.result.feedback;
				}

				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope:this

		});
	}
});

GO.customfields.DisableCategoriesPanel = Ext.extend(Ext.Panel, {
	initComponent : function(){
		
		this.formPanel = new Ext.Panel({
			region:'north',
			layout:'form',
			cls:'go-form-panel',
			height:40,
			items:this.enableCB = new Ext.form.Checkbox({				
				name:'enabled_customfield_categories',
				hideLabel:true,
				boxLabel:GO.customfields.lang.enableSelectedCategories,
				listeners:{
					scope:this,
					render:function(cb){
						
						cb.getEl().on('click',function(){
							GO.request({
								url:"customfields/category/enableDisabledCategories",
								params:{
									enabled:cb.getValue(),
									model_id:this.model_id,
									model_name:this.model_name
								},
								success:function(response, options, result){
									this.categoriesGrid.setDisabled(!cb.getValue());
								},
								scope:this
							});
						}, this);
					}
				}
			})
		});
		
		var store = new GO.data.JsonStore({
			url: GO.url("customfields/category/enabled"),
			baseParams:{
				model_id:0,
				model_name:""
			},
			fields:['id', 'name', 'checked'],
			remoteSort: true
		});
		
		this.categoriesGrid= new GO.grid.MultiSelectGrid({
			region:'center',
			loadMask:true,
			store: store,
			width: 210,
			split:true,
			disabled:true,
			allowNoSelection:true,
			listeners:{
				scope:this,
				change:function(grid, ids, records){
					GO.request({
						url:"customfields/category/setEnabled",
						params:{
							categories:Ext.encode(ids),
							model_id:this.model_id,
							model_name:this.model_name
						},
						success:function(response, options, result){
							
						}
					});
				}
			}
		});
		
		
		Ext.apply(this, {
			layout:'border',		
			disabled:true,
			items:[this.formPanel, this.categoriesGrid],
			listeners:{
				scope:this,
				show:function(){
					this.loadPanel();
				},
				render:function(){
					this.loadPanel();
				}
			}			
		});		
		
		if(!this.title)
			this.title=GO.customfields.lang.enabledCustomFields;
		
		GO.customfields.DisableCategoriesPanel.superclass.initComponent.call(this);
	},
	
	loadPanel : function(){
		if(this.isVisible()){
			this.categoriesGrid.store.load({
				scope:this,
				callback:function(){
					//this.enableCB.suspendEvents();
					this.enableCB.setValue(!GO.util.empty(this.categoriesGrid.store.reader.jsonData.enabled_customfield_categories));
					this.categoriesGrid.setDisabled(GO.util.empty(this.categoriesGrid.store.reader.jsonData.enabled_customfield_categories));
					//this.enableCB.resumeEvents();
				}
			});
		}
	},
	
	/**
	 * Set the model to edit.
	 * 
	 * @param int model_id
	 * @param string model_name The name of the model that controls the disabled categories. eg. GO\Addressbook\Model\Addressbook controls them for GO\Addressbook\Model\Contact
	 */
	setModel : function(model_id, model_name){
		this.setDisabled(!model_id);
		this.model_id=this.categoriesGrid.store.baseParams.model_id=model_id;
		this.model_name=this.categoriesGrid.store.baseParams.model_name=model_name;
	}
});

GO.customfields.disableTabs = function(tabPanel, responseResult, root) {	
	if(!root)
		root='customfields';
		
	if(typeof(tabPanel)=='undefined') {
		return false;
	}
	
	for (var i=0; i<tabPanel.items.items.length; i++) {
		
		var panel = tabPanel.items.items[i];
		
		if (typeof(panel.category_id)!='undefined') {

			if(!responseResult[root].disable_categories){
				tabPanel.unhideTabStripItem(panel);
				panel.enableValidation();
			}else
			{
				if(responseResult[root].enabled_categories.indexOf(panel.category_id)>-1){
					tabPanel.unhideTabStripItem(panel);
					panel.enableValidation();
				}else{	
					tabPanel.hideTabStripItem(panel);
					panel.disableValidation();
				}
			}
		}
	}
}

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 */
 
GO.customfields.ManageBlockDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	initComponent : function(){
		
		Ext.apply(this, {
			titleField:'id',
			goDialogId:'block',
			title:GO.customfields.lang['block'],
			formControllerUrl: 'customfields/block',
			height:200
		});
		
		GO.customfields.ManageBlockDialog.superclass.initComponent.call(this);	
	},
	buildForm : function () {

		this.propertiesPanel = new Ext.Panel({
			border: false,
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',waitMsgTarget:true,			
			layout:'form',
			autoScroll:true,
			items:[{
				xtype: 'textfield',
			  name: 'name',
				anchor: '100%',
			  allowBlank:false,
			  fieldLabel: GO.lang.strName
			}, this.selectCustomfieldBox = new GO.form.ComboBox({
				fieldLabel: GO.customfields.lang['customfield'],
				hiddenName:'field_id',
				anchor:'-20',
				store: new GO.data.JsonStore({
					url:GO.url('customfields/blockField/selectStore'),
					totalProperty: "total",
					root: "results",
					id: "id",
					fields:[
						'id',
						'full_info',
						'name',
						'datatype',
						'extends_model'
					]
				}),
				valueField:'id',
				displayField:'full_info',
				mode: 'remote',
				triggerAction: 'all',
				editable: false,
				selectOnFocus:true,
				forceSelection: true
			}),this.datatypeField = new GO.form.PlainField({
				name: 'datatype',
				fieldLabel: GO.customfields.lang['cfDatatype']
			}),this.extendsModelField = new GO.form.PlainField({
				name: 'extends_model',
				fieldLabel: GO.customfields.lang['cfUsedIn']
			})]
		});

		this.selectCustomfieldBox.on('change',function(combo,newValue,oldValue){
			var record = combo.store.getById(newValue);
			this._updateModelNames(record);
		}, this);

		this.selectCustomfieldBox.store.on('load', function(){
			var fieldId = this.selectCustomfieldBox.getValue();
			if (fieldId > 0)
				var record = this.selectCustomfieldBox.store.getById(fieldId);
			if (!GO.util.empty(record))
				this._updateModelNames(record);
		}, this);

		this.addPanel(this.propertiesPanel);	
 
	},
	
	afterLoad : function(remoteModelId, config, action){
		this.selectCustomfieldBox.store.load();
	},

	_updateModelNames : function(customFieldRecord) {
		this.datatypeField.setValue(GO.customfields.lang[customFieldRecord.data['datatype']]);
		this.extendsModelField.setValue(GO.customfields.lang[customFieldRecord.data['extends_model']]);
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 */



GO.customfields.ManageBlocksGrid = function(config){
	if(!config)
	{
		config = {};
	}

	config.layout='fit';
	config.anchor='-20';
	config.autoScroll=true;
	config.split=true;
	//config.height=200;
	
	//config.disabled=true;
	var fields ={
		fields:['id','name','col_id','customfield_name','customfield_datatype','extends_model'],
		columns:[{
			header: 'ID',
			dataIndex: 'id',
			width: 50,
			sortable: true
		},{
			header: GO.lang.strName,
			dataIndex: 'name',
			width: 100,
			sortable: true
		},{
			header: GO.customfields.lang['customfieldID'],
			dataIndex: 'col_id',
			width: 80,
			sortable: true
		},{
			header: GO.customfields.lang['cfDatatype'],
			dataIndex: 'customfield_datatype',
			width: 150,
			sortable: true,
			renderer: function(v) {
				return GO.customfields.lang[v];
			}
		},{
			header: GO.customfields.lang['cfUsedIn'],
			dataIndex: 'extends_model',
			width: 150,
			sortable: true,
			renderer: function(v) {
				return GO.customfields.lang[v];
			}
		}]
	};

	config.store = new GO.data.JsonStore({
			//url: GO.settings.modules.customfields.url+'json.php',
			url: GO.url("customfields/block/manageStore"),
			root: 'results',
			totalProperty: 'total',
			id: 'id',
			fields: fields.fields,
			remoteSort:true
		});

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:fields.columns
	});

	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	
	config.paging=true;

	config.clicksToEdit=1;

	config.tbar=[{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function(){
			this.showManageBlockDialog(0);
		},
		scope: this
	},{
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function(){
			this.deleteSelected();
		},
		scope: this
	}];
	GO.customfields.ManageBlocksGrid.superclass.constructor.call(this, config);

	this.on('rowdblclick',function(grid,rowIndex,event){
		var record = grid.store.getAt(rowIndex);
		this.showManageBlockDialog(record.data.id);
	}, this);

};
Ext.extend(GO.customfields.ManageBlocksGrid, GO.grid.GridPanel,{
	showManageBlockDialog : function(blockId)
	{
		if (!GO.customfields.manageBlockDialog) {
			
			GO.customfields.manageBlockDialog = new GO.customfields.ManageBlockDialog();
			GO.customfields.manageBlockDialog.on('save',function(){
				this.store.load();
			},this);
			
		}
		GO.customfields.manageBlockDialog.show(blockId);
	}
});






GO.customfields.EnableBlocksPanel = Ext.extend(Ext.Panel, {
	initComponent : function(){
		
		var checkColumn = new GO.grid.CheckColumn({
			header: GO.customfields.lang['enabled'],
			dataIndex: 'enabled',
			width: 80,
			listeners:{
				scope:this,
				change:function(record, checked){
					GO.request({
						url:"customfields/block/enable",
						params:{
							enable: checked,
							block_id:record.data.id,
							model_id:this.model_id,
							model_name:this.model_name
						},
						success:function(response, options, result){
							this.loadGridStore();
						},
						scope: this
					});
				}
			}
		});
		
		this.enableBlocksGrid= new GO.grid.GridPanel({
			region:'center',
			loadMask:true,
			store: new GO.data.JsonStore({
				url: GO.url("customfields/block/enableStore"),
				baseParams:{
					model_id:0,
					model_name:""
				},
				fields:['id','name','enabled','col_id','customfield_name','customfield_datatype','extends_model'],
				remoteSort: true
			}),
			plugins: [checkColumn],
			paging: true,
			cm : new Ext.grid.ColumnModel({
				defaults:{
					sortable:true
				},
				columns:[checkColumn,{
					header: 'ID',
					dataIndex: 'id',
					width: 50,
					sortable: true
				},{
					header: GO.lang.strName,
					dataIndex: 'name',
					width: 100,
					sortable: true
				},{
					header: GO.customfields.lang['customfieldID'],
					dataIndex: 'col_id',
					width: 80,
					sortable: true
				},{
					header: GO.customfields.lang['modelTypeListed'],
					dataIndex: 'extends_model',
					width: 150,
					sortable: true,
					renderer: function(v) {
						return GO.customfields.lang[v];
					}
				},{
					header: GO.customfields.lang['listedUnder'],
					dataIndex: 'customfield_datatype',
					width: 150,
					sortable: true,
					renderer: function(v) {
						return GO.customfields.lang[v];
					}
				}]
			}),
			width: 210,
			split:true,
			allowNoSelection:true
		});
		
		
		Ext.apply(this, {
			layout:'fit',		
			items:[this.enableBlocksGrid],
			listeners:{
				scope:this,
				show:function(){
					this.loadGridStore();
				}
			}			
		});		
		
		if(!this.title)
			this.title=GO.customfields.lang['enableBlocks'];
		
		GO.customfields.EnableBlocksPanel.superclass.initComponent.call(this);
	},
	
	/**
	 * Set the model to edit.
	 * 
	 * @param int model_id
	 * @param string model_name The name of the model that controls the disabled categories. eg. GO\Addressbook\Model\Addressbook controls them for GO\Addressbook\Model\Contact
	 */
	setModel : function(model_id, model_name){
		this.setDisabled(GO.util.empty(model_id) || GO.util.empty(model_name));
		this.model_id=this.enableBlocksGrid.store.baseParams.model_id=model_id;
		this.model_name=this.enableBlocksGrid.store.baseParams.model_name=model_name;
	},
	
	loadGridStore : function() {
		this.enableBlocksGrid.store.load();
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: SelectCompany.js 20726 2016-12-16 10:04:54Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */


GO.addressbook.SelectCompany = function(config){
	
	if(!config.valueField)
		config.valueField='id';
		
	config.displayField='name_and_name2';
	
	if(!config.tpl)
		config.tpl = '<tpl for="."><div class="x-combo-list-item">{' + config.displayField + '} ({addressbook_name})</div></tpl>';


//	Ext.apply(this, config);
	
	var customfieldId = config.customfieldId || '';

	if (typeof(config.fields)=='undefined') {
		config.fields = {
			columns:[],
			fields:['id', 'name_and_name2', 'post_address', 'post_address_no', 'post_zip', 'post_city', 'post_state', 'post_country', 'vat_no', 'crn','email','invoice_email','cf','addressbook_name']
		};
	}
		
	if(!this.fieldLabel){
		this.fieldLabel=GO.addressbook.lang.company;
	}

	if(GO.customfields)
	{
		GO.customfields.addColumns("GO\\Addressbook\\Model\\Company", config.fields);
	}

	if (typeof(config.store)=='undefined') {
		this.store = new GO.data.JsonStore({
			url: GO.url("addressbook/company/selectCompany"),
			baseParams: {				
				addressbook_id : this.addressbook_id,		
				noMultiSelectFilter:true,
				customfield_id : customfieldId
			},
			root: 'results',
			id: 'id',
			totalProperty:'total',
			fields: config.fields.fields,
			remoteSort: true
		});
		this.store.setDefaultSort('name', 'asc');		
	}
	
	config.triggerAction='all';
	config.selectOnFocus=true;
	config.pageSize = parseInt(GO.settings['max_rows_list']);

	GO.addressbook.SelectCompany.superclass.constructor.call(this,config
//	{		
//		triggerAction: 'all',
//		selectOnFocus:true,
//		pageSize: parseInt(GO.settings['max_rows_list'])
//	}
	);
	
}
Ext.extend(GO.addressbook.SelectCompany, GO.form.ComboBoxReset);

Ext.ComponentMgr.registerType('selectcompany', GO.addressbook.SelectCompany);

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: SelectContact.js 20726 2016-12-16 10:04:54Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */


GO.addressbook.SelectContact = function(config){

	if(!config.displayField)
		config.displayField='name';
	
	if(!config.valueField)
		config.valueField='id';

	if(!config.tpl)
		config.tpl = '<tpl for="."><div class="x-combo-list-item">{' + config.displayField + '} ({ab_name}) <tpl if="department">({department})</tpl> <tpl if="go_user_id&gt;0"><div class="go-model-icon-GO_Base_Model_User" style="width:16px;height:16px;display:inline-block;vertical-align:middle"></div></tpl></div></tpl>';

	var customfieldId = config.customfieldId || '';

	var fields = {fields: ['id', 'cf', 'name', 'salutation', 'email', 'first_name', 'middle_name','last_name', 'home_phone', 'work_phone', 'cellular', 'cellular2', 'company_id','company_name','address','address_no','zip','city','state','country','ab_name','go_user_id','department'], columns:[]};
	if(GO.customfields)
	{
		GO.customfields.addColumns("GO\\Addressbook\\Model\\Contact", fields);
	}
	
	config.store = new GO.data.JsonStore({
	    url: GO.url("addressbook/contact/selectContact"),
	    baseParams: {	    	
				addressbook_id : config.addressbook_id,
				requireEmail: config.requireEmail ? '1' : '0',
				no_user_contacts: config.noUserContacts ? '1' : '0',
				customfield_id : customfieldId
			},
	    totalProperty:'total',	    
      fields: fields.fields,
	    remoteSort: true
	});
	
	config.store.setDefaultSort('name', 'asc');

	config.triggerAction='all';
	config.selectOnFocus=true;
	config.pageSize=parseInt(GO.settings['max_rows_list']);

	GO.addressbook.SelectContact.superclass.constructor.call(this,config);
	
}
Ext.extend(GO.addressbook.SelectContact, GO.form.ComboBoxReset,{
	
	selectContactById : function(contact_id, callback, scope){
		this.getStore().load({
			params:{
				contact_id:contact_id
			},
			callback:function(){
				this.setValue(contact_id);
				
				if(callback){
					
					var record = this.store.getAt(0);
		
					if(!scope)
						scope=this;
					callback.call(scope, this, record);
				}
			},
			scope:this
		});
		
	}
});

Ext.ComponentMgr.registerType('selectcontact', GO.addressbook.SelectContact);

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: Stores.js 15954 2013-10-17 12:04:36Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.addressbooksStoreFields = new Array('id','name','user_name', 'acl_id','user_id','contactCustomfields','companyCustomfields','default_salutation', 'checked');


GO.addressbook.readableAddressbooksStore = new GO.data.JsonStore({
			url: GO.url('addressbook/addressbook/store'),
			baseParams: {
				'permissionLevel' : GO.permissionLevels.read,
				limit:parseInt(GO.settings['max_rows_list'])

				},
			root: 'results', 
			totalProperty: 'total', 
			id: 'id',
			fields: GO.addressbook.addressbooksStoreFields,
			remoteSort: true
		});

GO.addressbook.writableAddressbooksStore = new GO.data.JsonStore({
			url: GO.url('addressbook/addressbook/store'),
			baseParams: {
				'permissionLevel' : GO.permissionLevels.write,
				limit:parseInt(GO.settings['max_rows_list'])
				},
			root: 'results', 
			totalProperty: 'total', 
			id: 'id',
			fields: GO.addressbook.addressbooksStoreFields,
			remoteSort: true
		});

GO.addressbook.writableAddresslistsStore = new GO.data.JsonStore({
    url: GO.url("addressbook/addresslist/store"),
    baseParams: {
        permissionLevel: GO.permissionLevels.write,
				limit:0
    },
    fields: ['id', 'name', 'user_name','acl_id'],
    remoteSort: true
});
		
GO.addressbook.writableAddresslistsStore.on('load', function(){
	GO.addressbook.writableAddresslistsStore.on('load', function(){
    GO.addressbook.readableAddresslistsStore.load();
	}, this);
}, this, {single:true});
		
GO.addressbook.readableAddresslistsStore = new GO.data.JsonStore({
    url: GO.url("addressbook/addresslist/store"),
    baseParams: {
        permissionLevel: GO.permissionLevels.read
    },
    fields: ['id', 'name', 'user_name','acl_id', 'checked'],
    remoteSort: true
});



/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: ManageDialog.js 20499 2016-10-06 11:38:46Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.ManageDialog = Ext.extend(GO.dialog.TabbedFormDialog, {
	
	initComponent : function(){

		Ext.apply(this, {
			title:GO.addressbook.lang.cmdManageDialog,
			formControllerUrl: 'addressbook/settings',
			width:900,
			height:600
		});
		
		GO.addressbook.ManageDialog.superclass.initComponent.call(this);	
	},
	
	buildForm : function(){
		
		this.addressbooksGrid = new GO.addressbook.ManageAddressbooksGrid();
		this.templatesGrid = new GO.addressbook.TemplatesGrid();
		this.addresslistsGrid = new GO.addressbook.AddresslistsGrid();
		
		this.addPanel(this.addressbooksGrid);
		this.addPanel(this.templatesGrid);
		this.addPanel(this.addresslistsGrid);
		
		if(GO.settings.has_admin_permission){
			this.exportPermissionsTab = new GO.grid.PermissionsPanel({
				title:GO.addressbook.lang.exportPermission,
				hideLevel:true
			});
			this.addPanel(this.exportPermissionsTab);
		}
	},
	
	show : function(){
		if(!this.rendered){
			this.render(Ext.getBody());
		}

		if(GO.settings.has_admin_permission){
			this.exportPermissionsTab.setAcl(GO.addressbook.export_acl_id);
		}
		
		GO.addressbook.ManageDialog.superclass.show.call(this);
	}
});

GO.addressbook.ManageAddressbooksGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
	
	config.title = GO.addressbook.lang.addressbooks;
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.store = GO.addressbook.writableAddressbooksStore	
	
	config.paging=true;

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
		{
	  	header: 'ID', 
	  	dataIndex: 'id',
			hidden:true
	  },
	  {
	  	header: GO.lang['strName'], 
	  	dataIndex: 'name'
	  },
	  {
	  	header: GO.addressbook.lang['cmdOwner'], 
	  	dataIndex: 'user_name' ,
	  	sortable: false
	  }
	]
	});
	
	config.cm=columnModel;
	
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.addressbook.lang.noAddressbooks		
	}),
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	
	config.tbar=[
			{ 
				iconCls: 'btn-add', 
				text: GO.lang.cmdAdd, 
				cls: 'x-btn-text-icon', 
				handler: function(){
					this.addressbookDialog.show();
				},
				disabled: !GO.settings.modules.addressbook.write_permission,
				scope: this
			},
			{
				iconCls: 'btn-delete', 
				text: GO.lang.cmdDelete, 
				cls: 'x-btn-text-icon', 
				handler: function(){
					this.deleteSelected();
				}, 
				disabled: !GO.settings.modules.addressbook.write_permission,
				scope: this
			},'-',new GO.form.SearchField({
				store: config.store,
				width:150
			})
		];
	
	GO.addressbook.ManageAddressbooksGrid.superclass.constructor.call(this, config);
	
	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);	
		
		this.addressbookDialog.show(record.id);
		
		}, this);

	// Moved here from Stores.js to let this event only fire from within the
	// administration grid.
	this.store.on('load', function(){
		GO.addressbook.readableAddressbooksStore.load();
	}, this);
};


Ext.extend(GO.addressbook.ManageAddressbooksGrid, GO.grid.GridPanel,{
	
	afterRender : function()
	{
		GO.addressbook.ManageAddressbooksGrid.superclass.afterRender.call(this);
		
		if(!GO.addressbook.writableAddressbooksStore.loaded)
		{
			GO.addressbook.writableAddressbooksStore.load();
		}

		this.addressbookDialog = new GO.addressbook.AddressbookDialog();
		this.addressbookDialog.on('save', function(){
			GO.addressbook.writableAddressbooksStore.load();
			GO.addressbook.readableAddressbooksStore.load();
		});
	},
	
	onShow : function(){
		GO.addressbook.ManageAddressbooksGrid.superclass.onShow.call(this);
		if(!GO.addressbook.writableAddressbooksStore.loaded)
		{
			GO.addressbook.writableAddressbooksStore.load();
		}
	}
	
});


GO.addressbook.AddressbookDialog = Ext.extend(GO.dialog.TabbedFormDialog, {

	initComponent : function(){
		
		Ext.apply(this, {
			titleField:'name',
			title:GO.addressbook.lang.addressbook,
			formControllerUrl: 'addressbook/addressbook',
			width:800,
			height:540
			//fileUpload:true
		});
		
		GO.addressbook.AddressbookDialog.superclass.initComponent.call(this);	
	},
	
	afterSubmit : function(action){
		var modelCreated = action.result.id>0;
		this.importPanel.setDisabled(!modelCreated);
	},
	
	beforeSubmit : function(params) {		
		this.formPanel.baseParams.importBaseParams = Ext.encode({'addressbook_id':this.remoteModelId});
		
		GO.addressbook.AddressbookDialog.superclass.beforeSubmit.call(this);	
	},
	buildForm : function(){
		
		this.propertiesPanel = new Ext.Panel({
			title:GO.addressbook.lang.cmdPanelProperties,
			layout: 'form',
			labelWidth: 140,
			defaultType: 'textfield',
			border: false,
			bodyStyle:'padding:5px',
			defaults: {anchor:'100%'},
			//cls:'go-form-panel',
			items:[
			{
				fieldLabel: GO.lang['strName'],
				name: 'name',
				allowBlank: false
			},
			this.selectUser = new GO.form.SelectUser({
				fieldLabel: GO.lang['strUser'],
				disabled : !GO.settings.has_admin_permission,
				allowBlank: false
			}),{
				xtype:'panel',
				border:false,
				layout:'column',
				items:[{
					border:false,
					layout:'form',
					columnWidth:.8,
					items:{
						xtype:'textfield',
						fieldLabel: GO.addressbook.lang['defaultSalutation'],
						name: 'default_salutation',
						allowBlank: false,
						anchor:'99%',
						value:GO.addressbook.lang.defaultSalutationExpression
					}
				},{
					columnWidth:.2,
					border:false,
					items:{
						xtype:'button',
						handler:function(){this.propertiesPanel.form.findField('default_salutation').setValue(GO.addressbook.lang.defaultSalutationExpression);},
						scope:this,
						text:GO.lang.cmdReset
					}
				}]
			},
			{
				xtype:'fieldset',
				title:GO.addressbook.lang.explanationVariables,
				border:true,
				layout:'column',
				autoHeight:true,
				items:[{
					border:false,
					columnWidth:.2,
					html:	'['+GO.addressbook.lang.cmdSir+'/'+GO.addressbook.lang.cmdMadam+']<br />'+
							'{title}<br />'+
							'{initials}<br />'+
							'{first_name}<br />'+
							'{middle_name}<br />'+
							'{last_name}'
				},{
					columnWidth:.8,
					border:false,
					html:	GO.addressbook.lang.explanationSex+
							'<br />'+GO.lang.strTitle+
							'<br />'+GO.lang.strInitials+
							'<br />'+GO.lang.strFirstName+
							'<br />'+GO.lang.strMiddleName+
							'<br />'+GO.lang.strLastName
				}]
			},{
				xtype:'panel',
				border:false,
				items:[this.deleteAllItemsButton = new Ext.Button({
					xtype:'button',
					text:GO.lang.deleteAllItems,
					handler:function(){
						Ext.Msg.show({
							title: GO.lang.deleteAllItems,
							icon: Ext.MessageBox.WARNING,
							msg: GO.lang.deleteAllItemsAreYouSure,
							buttons: Ext.Msg.YESNO,
							scope:this,
							fn: function(btn) {
								if (btn=='yes') {
									GO.request({
										timeout:300000,
										maskEl:Ext.getBody(),
										url:'addressbook/addressbook/truncate',
										params:{
											addressbook_id:this.remoteModelId
										},
										scope:this
									});
								}
							}
						});
					},
					scope:this
				}),
				this.removeDuplicatesButton =new Ext.Button({
					style:'margin-top:10px',
					xtype:'button',
					text:GO.lang.removeDuplicates,
					handler:function(){

						window.open(GO.url('addressbook/addressbook/removeDuplicates',{addressbook_id:this.remoteModelId}))

					},
					scope:this
				})]
			}
			]
		});
		
		this.addPanel(this.propertiesPanel);
		
		this.importDialogs = {};
		
		this.addPanel(this.importPanel = new Ext.Panel({
			title:GO.lang.cmdImport,
			layout: 'form',
			items: [],
			defaults: {anchor:'100%'},
			border: false,
			labelWidth: 150,
			toolbars: [],
			cls:'go-form-panel',
			items: [
				this.fileTypeCB = new GO.form.ComboBox({
					hiddenName: 'fileType',
					fieldLabel: GO.addressbook.lang.cmdFormLabelFileType,
					store: new Ext.data.ArrayStore({
						storeId: 'fileTypeStore',
						idIndex: 0,
						fields:['value','label'],
						data: [
							['CSV','CSV (Comma Separated Values)'],
							['VCard','VCF (vCard)'],
							['XLS','XLS(X)']
						]
					}),
					valueField:'value',
					displayField:'label',
					mode:'local',
					editable:false,
					allowBlank: false,
					triggerAction: 'all',
					value: 'CSV'
				}), this.controllerNameCB = new GO.form.ComboBox({
					hiddenName: 'controller',
					fieldLabel: GO.lang.cmdImport,
					store: new Ext.data.ArrayStore({
						storeId: 'controllersStore',
						idIndex: 0,
						fields:['value','label'],
						data: [
							['GO\\Addressbook\\Controller\\Contact',GO.addressbook.lang.contacts],
							['GO\\Addressbook\\Controller\\Company',GO.addressbook.lang.companies]
						]
					}),
					valueField:'value',
					displayField:'label',
					mode:'local',
					editable:false,
					allowBlank: false,
					triggerAction: 'all',
					value: 'GO\\Addressbook\\Controller\\Company'
				}),new Ext.Panel({
					layout: 'form',
					border: false,
					items: [
						new Ext.Button({
							text: GO.lang.cmdContinue,
							width: '20%',
							handler: function(){
								var controllerName = this.controllerNameCB.getValue();		
								var fileType = this.fileTypeCB.getValue();
								if (!GO.util.empty(controllerName) && !GO.util.empty(fileType)) {
									if ( !this.importDialogs[fileType] )
										this.importDialogs[fileType] = {};
									if ( !this.importDialogs[fileType][controllerName] ) {
											this.importDialogs[fileType][controllerName] = new GO.base.model.ImportDialog({
												importBaseParams : { addressbook_id : this.remoteModelId },
												controllerName : controllerName,
												fileType: fileType,
												excludedAttributes : ['ctime','mtime','user_id', 'contact_name','link_id','files_folder_id',
													'user_id','email_allowed','go_user_id'],
												modelContainerIdName : 'addressbook_id',
												possibleUpdateFindAttributes : ['email']
											});
										}
									this.importDialogs[fileType][controllerName].show(this.remoteModelId);
								}
							},
							scope: this
						})
					]
				})
			]
		}));
		
		this.fileTypeCB.on('select',function(combo,record,index){
			if (record.id=='VCard')
				this.controllerNameCB.setValue('GO\\Addressbook\\Controller\\Contact');
			this.controllerNameCB.setDisabled(record.id!='CSV' && record.id!='XLS');
		},this);
		
//		this.addPanel( this.importPanel = new GO.base.model.ImportPanel({
//			filetypes:[
//				['csv','CSV (Comma Separated Values)'],
//				['vcf','VCF (vCard)']
//			],
//			controllers:[
//				['GO_Addressbook_Controller_Contact',GO.addressbook.lang.contacts],
//				['GO_Addressbook_Controller_Company',GO.addressbook.lang.companies]
//			],
//			importBaseParams:[
//				{'addressbook_id':this.remoteModelId}
//			]
//		}));
		
		this.addPermissionsPanel(new GO.grid.PermissionsPanel());
		
		if(GO.customfields){
			this.disableContactsCategoriesPanel = new GO.customfields.DisableCategoriesPanel({
				title:GO.addressbook.lang.contactCustomFields
			});
			this.addPanel(this.disableContactsCategoriesPanel);
			
			this.disableCompaniesCategoriesPanel = new GO.customfields.DisableCategoriesPanel({
				title:GO.addressbook.lang.companyCustomFields
			});
			this.addPanel(this.disableCompaniesCategoriesPanel);
			
			this.enableBlocksPanel = new GO.customfields.EnableBlocksPanel();
			this.addPanel(this.enableBlocksPanel);
		}
	},
	
	beforeLoad : function(remoteModelId, config){
		this.importPanel.setDisabled(!(remoteModelId>0));
	},
	
	setRemoteModelId : function(remoteModelId){
		
		if(GO.customfields){
			this.disableContactsCategoriesPanel.setModel(remoteModelId, "GO\\Addressbook\\Model\\Contact");
			this.disableCompaniesCategoriesPanel.setModel(remoteModelId, "GO\\Addressbook\\Model\\Company");
			this.enableBlocksPanel.setModel(remoteModelId,"GO\\Addressbook\\Model\\Addressbook");
		}
		
		this.removeDuplicatesButton.setDisabled(!remoteModelId);
		this.deleteAllItemsButton.setDisabled(!remoteModelId);
		
		return GO.addressbook.AddressbookDialog.superclass.setRemoteModelId.call(this, remoteModelId);
	}
});


GO.addressbook.AddresbooksGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
	
	config.title = GO.addressbook.lang.cmdPanelAddressbook;
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	if(!config.store)
		config.store = GO.addressbook.readableAddressbooksStore;

	Ext.apply(config, {
		allowNoSelection:true,
		bbar: new GO.SmallPagingToolbar({
			items:[this.searchField = new GO.form.SearchField({
				store: config.store,
				width:120,
				emptyText: GO.lang.strSearch
			})],
			store:config.store,
			pageSize:GO.settings.config.nav_page_size
		})
	});
	
	GO.addressbook.AddresbooksGrid.superclass.constructor.call(this, config);
};


Ext.extend(GO.addressbook.AddresbooksGrid, GO.grid.MultiSelectGrid, {
	
	type: '',
	afterRender : function()
	{	
		GO.addressbook.AddresbooksGrid.superclass.afterRender.call(this);	

		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody, {
			ddGroup : 'AddressBooksDD',
			notifyDrop : this.onNotifyDrop.createDelegate(this)
		});	
	},
	setType : function(type)
	{
		this.type = type;
	},
	onNotifyDrop : function(source, e, data)
	{	
		var selections = source.dragData.selections;
        var dropRowIndex = this.getView().findRowIndex(e.target);
        var book_id = this.getView().grid.store.data.items[dropRowIndex].id;

		var show_confirm = false;
		var move_items = [];
		for(var i=0; i<selections.length; i++)
		{
			move_items.push(selections[i].id);
			if(selections[i].json.company_id > 0)
			{
				show_confirm = true;
				//company_id = selections[i].json.company_id;
			}
		}
		
		if(!show_confirm && this.type == 'company')
		{
			show_confirm = true;
		}
			
		if(book_id > 0 && (!show_confirm || confirm(GO.addressbook.lang.moveAll)))
		{
			GO.request({
				url: 'addressbook/'+this.type+'/changeAddressbook',
				params: {
//					task:'drop_' + this.type,
					book_id:book_id,
					items:Ext.encode(move_items)
				}
			});			
			
			this.fireEvent('drop', this.type);
			
			return true;
		}else
		{
			return false;
		}	
	}
	
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ReadPanelContact.js 20201 2016-07-07 09:25:28Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.ContactReadPanel = Ext.extend(GO.DisplayPanel,{
	
	model_name : "GO\\Addressbook\\Model\\Contact",

	stateId : 'ab-contact-panel',

	editGoDialogId : 'contact',
	
	editHandler : function(){
		GO.addressbook.showContactDialog(this.model_id);		
	},	
	
	initComponent : function(){	
		
		this.loadUrl=('addressbook/contact/display');
		
		this.template = 
				'{[this.collapsibleSectionHeader(GO.addressbook.lang.contact+": "+ values.name, "contactpane-"+values.panelId, "name")]}'+
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="contactpane-{panelId}">'+
//				'<tr>'+
//						'<td colspan="2" class="display-panel-heading">'+GO.addressbook.lang.contact+': {name}</td>'+
//				'</tr>'+
					
					'<tr>'+
						
						// PERSONAL DETAILS+ 1e KOLOM
						'<td valign="top">'+
							'<table cellpadding="0" cellspacing="0" border="0">'+

								'<tr>'+
									'<td>ID:</td><td>{id}</td>'+
								'</tr>'+
								'<tr>'+
									'<td>'+GO.addressbook.lang.addressbook+':</td><td>{addressbook_name}</td>'+
								'</tr>'+
								//NAME
								'<tr>'+
									'<td>' +
										'<tpl if="!GO.util.empty(title)">'+
											'{title} '+
										'</tpl>'+
										'{name}'+
										'<tpl if="!GO.util.empty(suffix)">'+
											', {suffix} '+
										'</tpl>'+
										'<br />'+
										'<div class="readPanelSubHeading">'+GO.addressbook.lang.privateAddress+':</div>'+
										'<tpl if="!GO.util.empty(google_maps_link)">'+
											'<a href="{google_maps_link}" target="_blank">'+
										'</tpl>'+
										'{formatted_address}'+
										'<tpl if="!GO.util.empty(google_maps_link)">'+
											'</a>'+
										'</tpl>'+
									'</td>'+
								'</tr>'+
							'</table>'+
						'</td>'+
						'<tpl if="photo_url">'+
							'<td rowspan="2" align="right">' +
							
								'<tpl if="write_permission">'+
									'<img src="{photo_url}" class="ab-photo" style="cursor:pointer;" onClick="GO.addressbook.showContactDialog({id}, \\{activeTab:1\\} );"/>' +
								'</tpl>'+
								
								'<tpl if="!write_permission">'+
									'<a href="{original_photo_url}" target="_blank">'+
									'<img src="{photo_url}" class="ab-photo" />' +
									'</a>'+
								'</tpl>'+
								
							'</td>' +
						'</tpl>'+
					'</tr>' +

					'<tr>' +
						// COMPANY DETAILS
						'<td valign="top">'+
							'<table cellpadding="0" cellspacing="0" border="0">'+
								
								//INITIALS
								'<tpl if="!GO.util.empty(initials)">'+
									'<tr>'+
										'<td>' + GO.lang['strInitials'] + ':</td><td> {initials}</td>'+
									'</tr>'+						
								'</tpl>'+
	
								//BIRTHDAY							
								'<tpl if="!GO.util.empty(birthday)">'+
									'<tr>'+
										'<td>' + GO.lang['strBirthday'] + ':</td><td> {birthday}</td>'+
									'</tr>'+						
								'</tpl>'+
							'</table>'+
						'</td>'+
					'</tr>'+

					
				'<tpl if="this.isContactFieldset(values)">'+
					
						//CONTACT DETAILS
				'</table>'+
				
				'{[this.collapsibleSectionHeader(GO.addressbook.lang.cmdFieldsetContact, "contactpane2-"+values.panelId, "name")]}'+
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="contactpane2-{panelId}">'+
						
						'<tr>'+
							// CONTACT DETAILS+ 1e KOLOM
							'<td valign="top">'+
								'<table cellpadding="0" cellspacing="0" border="0">'+
									
									//EMAIL							
									'<tpl if="!GO.util.empty(email)">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth">' + GO.lang['strEmail'] + ':</td><td>{[this.mailTo(values.email, values.name)]}</td>'+
										'</tr>'+						
									'</tpl>'+
		
									//EMAIL2							
									'<tpl if="!GO.util.empty(email2)">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth">' + GO.lang['strEmail'] + ' 2:</td><td>{[this.mailTo(values.email2, values.name)]}</td>'+
										'</tr>'+						
									'</tpl>'+
		
									//EMAIL3							
									'<tpl if="!GO.util.empty(email3)">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth">' + GO.lang['strEmail'] + ' 3:</td><td>{[this.mailTo(values.email3, values.name)]}</td>'+
										'</tr>'+						
									'</tpl>'+
									
									'<tpl if="this.isPhoneFieldset(values)">'+
										'<tr><td colspan="2">&nbsp;</td></tr>'+
										
										//PHONE							
										'<tpl if="!GO.util.empty(home_phone)">'+
											'<tr>'+
												'<td class="contactCompanyLabelWidth">' + GO.addressbook.lang['contactHome_phone'] + ':</td><td>{[GO.util.callToLink(values.home_phone)]}</td>'+
											'</tr>'+						
										'</tpl>'+

										//CELLULAR							
										'<tpl if="!GO.util.empty(cellular)">'+
											'<tr>'+
												'<td class="contactCompanyLabelWidth">' + GO.lang['strCellular'] + ':</td><td>{[GO.util.callToLink(values.cellular)]}</td>'+
											'</tr>'+						
										'</tpl>'+
										
										//CELLULAR2							
										'<tpl if="!GO.util.empty(cellular2)">'+
											'<tr>'+
												'<td class="contactCompanyLabelWidth">' + GO.lang['cellular2'] + ':</td><td>{[GO.util.callToLink(values.cellular2)]}</td>'+
											'</tr>'+						
										'</tpl>'+
										
										//FAX							
										'<tpl if="!GO.util.empty(fax)">'+
											'<tr>'+
												'<td class="contactCompanyLabelWidth">' + GO.addressbook.lang['contactFax'] + ':</td><td>{fax}</td>'+
											'</tr>'+						
										'</tpl>'+
										
									'</tpl>'+ //end this.isPhoneFieldset()
								'</table>'+
							'</td>'+
							
								// SOCIAL MEDIA URLs
							'<tpl if="this.isSocialMediaFieldset(values)">'+
									'<tr>'+
										'<td>'+
												'<tpl if="!GO.util.empty(url_linkedin)">'+
													'<a href="{url_linkedin}" target="_blank"><div class="linkedin-icon"></div></a>'+
												'</tpl>'+
												'<tpl if="!GO.util.empty(url_facebook)">'+
													'<a href="{url_facebook}" target="_blank"><div class="facebook-icon"></div></a>'+
												'</tpl>'+
												'<tpl if="!GO.util.empty(url_twitter)">'+
													'<a href="{url_twitter}" target="_blank"><div class="twitter-icon"></div></a>'+
												'</tpl>'+
												'<tpl if="!GO.util.empty(skype_name)">'+
													'<a href="skype:{skype_name}?call"><div class="skype-icon" title="'+GO.addressbook.lang['callOnSkype']+'"></div></a>'+
												'</tpl>'+
										'</td>'+
									'</tr>'+
							'</tpl>'+
							
							
							'<tpl if="this.isWorkPhoneFieldset(values)">'+
							
								// CONTACT DETAILS+ 2e KOLOM
								'<td valign="top">'+
									'<table cellpadding="0" cellspacing="0" border="0">'+
										
										//PHONE WORK							
										'<tpl if="!GO.util.empty(work_phone)">'+
											'<tr>'+
												'<td class="contactCompanyLabelWidth">' + GO.lang['strWorkPhone'] + ':</td><td>{[GO.util.callToLink(values.work_phone)]}</td>'+
											'</tr>'+						
										'</tpl>'+
			
										//FAX WORK							
										'<tpl if="!GO.util.empty(work_fax)">'+
											'<tr>'+
												'<td class="contactCompanyLabelWidth">' + GO.lang['strWorkFax'] + ':</td><td>{work_fax}</td>'+
											'</tr>'+						
										'</tpl>'+
										
										'<tpl if="!GO.util.empty(homepage)">'+
											'<tr>'+
												'<td class="contactCompanyLabelWidth">' + GO.addressbook.lang['companyHomepage'] + ':</td><td><a href="{homepage}" target="_blank">{homepage}</a></td>'+
											'</tr>'+						
										'</tpl>'+
										
									'</table>'+							
								'</td>'+
							
							'</tpl>'+ //end this.isPhoneFieldset()
							
						'</tr>'+
					'</table>'+	
				'</tpl>'+
									
									

				// COMPANY DETAILS
		
				'<tpl if="this.isCompanyFieldset(values)">'+
					'{[this.collapsibleSectionHeader(GO.addressbook.lang.cmdFieldsetCompany, "companypane-"+values.panelId, "name")]}'+
				
					'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="companypane-{panelId}">'+	
//						'<tr>'+
//							'<td colspan="2" class="display-panel-heading">' + GO.addressbook.lang['cmdFieldsetCompany'] + '</td>'+
//						'</tr>'+
						
						'<tr>'+
							
							'<td valign="top" colspan="2">'+
								'<table cellpadding="0" cellspacing="0" border="0" width="100%">'+
									
									//COMPANY NAME
									'<tpl if="!GO.util.empty(company_name)">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth" colspan="2"><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Addressbook\\\\\\\\Model\\\\\\\\Company\'].call(this,{company_id});">{company_name}</a></td>'+
										'</tr>'+						
									'</tpl>'+
									'<tpl if="!GO.util.empty(company_name2)">'+
										'<tr>'+
											'<td colspan="2">{company_name2}</td>'+
										'</tr>'+						
									'</tpl>'+
									
									//COMPANY ADDRESS						
									'<tpl if="!GO.util.empty(company_formatted_address) || !GO.util.empty(company_formatted_post_address)">'+
										'<tr>'+
											'<tpl if="!GO.util.empty(company_formatted_address)">'+
												'<td style="width: 50%;vertical-align:top;padding:10px 0;">'+
												
													'<div class="readPanelSubHeading">'+GO.addressbook.lang['cmdFieldsetVisitAddress'] + '</div>'+
													'<tpl if="!GO.util.empty(company_google_maps_link)">'+
														'<a href="{company_google_maps_link}" target="_blank">'+
													'</tpl>'+
													'{company_formatted_address}'+
													'<tpl if="!GO.util.empty(company_google_maps_link)">'+
														'</a>'+
													'</tpl>'+												
												'</td>'+
											'</tpl>'+
											
											'<tpl if="!GO.util.empty(company_formatted_post_address)">'+
												'<td style="width: 50%;vertical-align:top;padding:10px 0;">'+												
													'<div class="readPanelSubHeading">'+GO.addressbook.lang['cmdFieldsetPostAddress'] + '</div>'+
													'<tpl if="!GO.util.empty(company_google_maps_post_link)">'+
														'<a href="{company_google_maps_post_link}" target="_blank">'+
													'</tpl>'+
													'{company_formatted_post_address}'+
													'<tpl if="!GO.util.empty(company_google_maps_post_link)">'+
														'</a>'+
													'</tpl>'+
												'</td>'+
											'</tpl>'+
											
										'</tr>'+						
									'</tpl>'+
									
									//COMPANY PHONE
									'<tpl if="!GO.util.empty(company_phone)">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth">' + GO.lang['strPhone'] + ':</td><td>{[GO.util.callToLink(values.company_phone)]}</td>'+
										'</tr>'+						
									'</tpl>'+
									
									//COMPANY EMAIL			
									'<tpl if="!GO.util.empty(company_email)">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth">' + GO.lang['strEmail'] + ':</td><td>{[this.mailTo(values.company_email, values.company_name)]}</td>'+
										'</tr>'+						
									'</tpl>'+

								'</table>'+
							'</td>'+
														
						'</tr>'+

				'</tpl>'+
									
									
			
					
					
					
					
				'<tpl if="this.isWorkFieldset(values)">'+


						//WORK DETAILS
						'<tr>'+
							'<td colspan="2" class="display-panel-heading">' + GO.addressbook.lang['cmdFieldsetWork'] + '</td>'+
						'</tr>'+
						
						'<tr>'+
							// CONTACT DETAILS+ 1e KOLOM
							'<td colspan="2" valign="top" class="contactCompanyDetailsPanelKolom60">'+
								'<table cellpadding="0" cellspacing="0" border="0">'+
								
									//FUNCTION							
									'<tpl if="!GO.util.empty(values[\'function\'])">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth">' + GO.lang['strFunction'] + ':</td><td>{function}</td>'+
										'</tr>'+						
									'</tpl>'+

									//DEPARTMENT							
									'<tpl if="!GO.util.empty(department)">'+
										'<tr>'+
											'<td class="contactCompanyLabelWidth">' + GO.lang['strDepartment'] + ':</td><td>{department}</td>'+
										'</tr>'+						
									'</tpl>'+																	

								'</table>'+							
							'</td>'+							
						'</tr>'+
					'</table>'+
				'</tpl>'+
				'</table>'+
				
				'<tpl if="!GO.util.empty(values[\'comment\'])">'+
					'{[this.collapsibleSectionHeader(GO.addressbook.lang.cmdFormLabelComment, "commentpane-"+values.panelId, "comment")]}'+
					'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="commentpane-{panelId}">'+
						'<tr>'+
							'<td colspan="2">{comment}</td>'+
						'</tr>'+
					'</table>'+
				'</tpl>';
				
				if(GO.lists)
					this.template += GO.lists.ListTemplate;
				
				if(GO.customfields)
				{
					this.template +=GO.customfields.displayPanelTemplate;
					this.template +=GO.customfields.displayPanelBlocksTemplate;
				}


			if(GO.tasks)
				this.template +=GO.tasks.TaskTemplate;
			
			if(GO.workflow){
				this.template +=GO.workflow.WorkflowTemplate;
			}

			if(GO.calendar)
				this.template += GO.calendar.EventTemplate;

			this.template +=GO.linksTemplate;
				
			
		Ext.apply(this.templateConfig, {
			replaceWithUnderscore: function(str){
				if(!GO.util.empty(str)){
					str = str.replace(/\\/g,"_");
				}
				return str;
			},
			addSlashes : function(str)
			{
				str = GO.util.html_entity_decode(str, 'ENT_QUOTES');
				str = GO.util.add_slashes(str);
				return str;
			},
			mailTo : function(email, name) {
			
				if(GO.email && GO.settings.modules.email.read_permission)
				{
					return '<a href="#" onclick="GO.email.showAddressMenu(event, \''+this.addSlashes(email)+'\',\''+this.addSlashes(name)+'\');">'+email+'</a>';
				}else
				{
					return '<a href="mailto:'+email+'">'+email+'</a>';
				}
			},

			
			isContactFieldset: function(values){
				if(!GO.util.empty(values['email']) ||
					!GO.util.empty(values['email2']) ||
					!GO.util.empty(values['email3']) ||
					!GO.util.empty(values['home_phone']) ||
					!GO.util.empty(values['fax']) ||
					!GO.util.empty(values['cellular']) ||
					!GO.util.empty(values['cellular2']) ||
					!GO.util.empty(values['work_phone']) ||
					!GO.util.empty(values['work_fax']) ||
					!GO.util.empty(values['homepage'])	)
				{
					return true;
				} else {
					return false;
				}
			},	
							
		isCompanyFieldset: function(values){
			if(!GO.util.empty(values['company_name']) ||
				!GO.util.empty(values['company_formatted_address']) ||
				!GO.util.empty(values['company_email']) ||
				!GO.util.empty(values['company_phone'])			)
			{
				return true;
			} else {
				return false;
			}
		},			
							
		isPhoneFieldset : function(values)
			{
				if(!GO.util.empty(values['home_phone']) ||
					!GO.util.empty(values['fax']) ||
					!GO.util.empty(values['cellular']) ||
					!GO.util.empty(values['cellular2']) )
				{
					return true;
				} else {
					return false;
				}
			},
			isWorkPhoneFieldset : function(values)
			{
				if(!GO.util.empty(values['work_phone']) ||
					!GO.util.empty(values['work_fax'])  ||
					!GO.util.empty(values['homepage']) )
				{
					return true;
				} else {
					return false;
				}
			},
			isWorkFieldset : function(values)
			{
				if(
					!GO.util.empty(values['function']) ||
					!GO.util.empty(values['department']))
				{
					return true;
				} else {
					return false;
				}
			},
			isSocialMediaFieldset : function(values)
			{
				if(!GO.util.empty(values['url_linkedin']) ||
					!GO.util.empty(values['url_facebook']) ||
					!GO.util.empty(values['url_twitter']) ||
					!GO.util.empty(values['skype_name']))
				{
					return true;
				} else {
					return false;
				}
			},
			GoogleMapsCityStreet : function(values)
			{
				var google_url = 'http://maps.google.com/maps?q=';
				
				if(!GO.util.empty(values['address']) && !GO.util.empty(values['city']))
				{
					if(!GO.util.empty(values['address_no']))
					{
						return '<a href="' + google_url + values['address'] + '+' + values['address_no'] + '+' + values['city'] + '" target="_blank" >' + values['address'] + ' ' + values['address_no'] + '</a>';	
					} else {
						return '<a href="' + google_url + values['address'] + '+' + values['city'] + '" target="_blank" >' + values['address'] + '</a>';						
					}
				} else {
					return values['address'] + ' ' + values['address_no'];
				}
			}
		});		
		
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);
		
		
		if(GO.files)
		{
			Ext.apply(this.templateConfig, GO.files.filesTemplateConfig);
			this.template += GO.files.filesTemplate;
		}
		
		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}
		
		this.template += GO.createModifyTemplate;
		
		GO.addressbook.ContactReadPanel.superclass.initComponent.call(this);
		
		if(GO.tasks)
		{
			this.scheduleCallItem = new GO.tasks.ScheduleCallMenuItem();
			this.newMenuButton.menu.add(this.scheduleCallItem);
		}
		
		if (GO.smscampaigns) {
			this.newMenuButton.menu.add({
				itemId : 'sms',
				text: GO.smscampaigns.lang['singleSms'],
				iconCls: 'go-model-icon-GO_Email_Model_ImapMessage',
				handler:function(item, e){
					if (!GO.smscampaigns.singleSmsDialog)
						GO.smscampaigns.singleSmsComposer = new GO.smscampaigns.SingleSmsComposer();

					GO.smscampaigns.singleSmsComposer.show(this.model_id,this.data['last_name']);
				},
				scope: this
			});
		}
		
	},
	
	createTopToolbar : function(){
		var tbar = GO.addressbook.ContactReadPanel.superclass.createTopToolbar.call(this);
		
		if(GO.settings.modules.users.read_permission){
			tbar.splice(tbar.length-2,0,this.createUserButton = new Ext.Button({
					iconCls:'btn-add',
					text:GO.addressbook.lang.createUser,
					disabled:true,
					handler:function(){
						
						if(GO.util.empty(this.data.go_user_id)){

							var username =this.data.last_name;

							var arr = this.data.email.split('@');
							if(arr[0])
								username = arr[0];

							GO.users.showUserDialog(0, {
								loadParams:{contact_id: this.data.id, addressbook_id: this.data.addressbook_id},
								values:{
									first_name:this.data.first_name,
									middle_name:this.data.middle_name,
									last_name:this.data.last_name,
									email:this.data.email,
									username:username
								}
							});		
							
						}else
						{
							GO.users.showUserDialog(this.data.go_user_id);
						}
					},
					scope:this
				}));
		}
		
		tbar.splice(tbar.length-2,0,
			this.mergeButton = new Ext.Button({
			iconCls: 'btn-add',
			text: GO.lang.merge,
			scope:this,
			disabled:true,
			handler: function()
			{
				if(!this.selectMergeLinksWindow)
				{
					this.selectMergeLinksWindow = new GO.dialog.MergeWindow({
						displayPanel:this
					});
				}			

				this.selectMergeLinksWindow.show();
			}
		}));
		return tbar;
	},
	
	setData : function(data)
	{
		GO.addressbook.ContactReadPanel.superclass.setData.call(this, data);
		
		if(this.createUserButton){
			this.createUserButton.setDisabled(false);
			if(GO.util.empty(this.data.go_user_id))
				this.createUserButton.setText(GO.addressbook.lang.createUser);
			else
				this.createUserButton.setText(GO.addressbook.lang.editUser);
		}
		
		this.mergeButton.setDisabled(!data.write_permission)
		
		if(data.write_permission)
		{
			if(this.scheduleCallItem)
			{				
				var name = this.data.name;
				
				if(this.data.work_phone!='')
				{
					name += ' ('+this.data.work_phone+')';
				}else if(this.data.cellular!='')
				{
					name += ' ('+this.data.cellular+')';
				}else if(this.data.home_phone!='')
				{
					name += ' ('+this.data.home_phone+')';
				}
				
				this.scheduleCallItem.setLinkConfig({
					name: name,
					model_id: this.data.id, 
					model_name:"GO\\\\Addressbook\\\\Model\\\\Contact",
					callback:this.reload,
					scope: this
				});
			}
		}
		
		
		this.newMenuButton.menu.taskShowConfig= {contact_id:this.data.id};
		
	}	
});			

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ReadPanelCompany.js 19324 2015-08-18 10:17:13Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.CompanyReadPanel = Ext.extend(GO.DisplayPanel,{
	
	model_name : "GO\\Addressbook\\Model\\Company",

	stateId : 'ab-company-panel',

	editGoDialogId : 'company',
	
	editHandler : function(){
		GO.addressbook.showCompanyDialog(this.model_id);		
	},	
	
	initComponent : function(){
		
		this.loadUrl = ("addressbook/company/display");
 
			this.template = ''+
				'{[this.collapsibleSectionHeader(GO.addressbook.lang.company+": "+ values.name, "companypane2-"+values.panelId, "name")]}'+
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="companypane2-{panelId}">'+
//				'<tr>'+
//						'<td colspan="3" class="display-panel-heading">'+GO.addressbook.lang.company+': {name}</td>'+
//				'</tr>'+
					/*'<tr>'+
						'<tpl if="this.isCompanySecondColumn(values)">'+
							'<td colspan="2" valign="top" class="display-panel-heading">'+
						'</tpl>'+

						'<tpl if="this.isCompanySecondColumn(values) == false">'+
							'<td valign="top" class="display-panel-heading">'+
						'</tpl>'+
						
							GO.addressbook.lang['cmdCompanyDetailsFor'] + ' <b>{name}</b>'+
						'</td>'+
					'</tr>'+*/

				// CONTACT DETAILS+ 1e KOLOM

				'<tr>'+
					'<tpl if="this.isCompanySecondColumn(values)">'+
						'<td colspan="2" style="vertical-align:top;">'+
					'</tpl>'+
					'<tpl if="this.isCompanySecondColumn(values) == false">'+
						'<td>'+
					'</tpl>'+
					'<table><tr><td>ID:</td><td>{id}</td>'+
						'<td colspan="2" style="vertical-align:top;">'+GO.addressbook.lang.addressbook+':</td><td>{addressbook_name}</td>'+'</tr>'+
					'</table>'+
					'</td>'+					
					
					'<tpl if="photo_url">'+
						'<td align="right">' +

							'<tpl if="write_permission">'+
								'<img src="{photo_url}" class="ab-photo" style="cursor:pointer;" onClick="GO.addressbook.showCompanyDialog({id}, \\{activeTab:1\\} );"/>' +
							'</tpl>'+

							'<tpl if="!write_permission">'+
								'<a href="{original_photo_url}" target="_blank">'+
								'<img src="{photo_url}" class="ab-photo" />' +
								'</a>'+
							'</tpl>'+

						'</td>' +
					'</tpl>'+
					
				'</tr>'+
				'</table>'+
				
				'{[this.collapsibleSectionHeader(GO.addressbook.lang.cmdFieldsetContact, "contactpane2-"+values.panelId, "name")]}'+
				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="contactpane2-{panelId}">'+
				

				'<tr>'+

					'<tpl if="this.isCompanySecondColumn(values)">'+
						'<tpl if="this.isAddressPost(values)">'+
							'<td valign="top" class="contactCompanyDetailsPanelKolom">'+
						'</tpl>'+

						'<tpl if="this.isAddressPost(values) == false">'+
							'<td colspan="2" valign="top" class="contactCompanyDetailsPanelKolom100">'+
						'</tpl>'+
					'</tpl>'+

					'<tpl if="this.isCompanySecondColumn(values) == false">'+
						'<td valign="top" class="contactCompanyDetailsPanelKolom100">'+
					'</tpl>'+

						'<table cellpadding="0" cellspacing="0" border="0">'+
							'<tpl if="this.isAddressPost(values) != false">'+
							'<tr>'+
								'<td colspan="2" class="readPanelSubHeading">' + GO.addressbook.lang['cmdFieldsetVisitAddress'] + '</td>'+
							'</tr>'+
							'</tpl>'+

							// LEGE REGEL
							'<tr>'+
								'<td>'+
								'<b>{name}</b><tpl if="!GO.util.empty(name2)"><br />{name2}</tpl><br />'+
							//ADDRESS
							'<tpl if="!GO.util.empty(google_maps_link)">'+
								'<a href="{google_maps_link}" target="_blank">'+
							'</tpl>'+
							'{formatted_address}'+
							'<tpl if="!GO.util.empty(google_maps_link)">'+
								'</a>'+
							'</tpl>'+

						'</table>'+
					'</td>'+


					// CONTACT DETAILS+ 2e KOLOM
					'<tpl if="this.isAddressPost(values)">'+
						'<tpl if="this.isAddressVisit(values)">'+
							'<td colspan="2" valign="top" class="contactCompanyDetailsPanelKolom">'+
						'</tpl>'+

						'<tpl if="this.isAddressVisit(values) == false">'+
							'<td colspan="3" valign="top" class="contactCompanyDetailsPanelKolom100">'+
						'</tpl>'+

							'<table cellpadding="0" cellspacing="0" border="0">'+

								'<tr>'+
									'<td colspan="3" class="readPanelSubHeading">' + GO.addressbook.lang['cmdFieldsetPostAddress'] + '</td>'+
								'</tr>'+

								// LEGE REGEL
								'<tr>'+
									'<td>'+

								//ADDRESS
								'<b>{name}</b><br />'+
								'<tpl if="!GO.util.empty(post_google_maps_link)">'+
									'<a href="{post_google_maps_link}" target="_blank">'+
								'</tpl>'+
								'{post_formatted_address}'+
								'<tpl if="!GO.util.empty(post_google_maps_link)">'+
									'</a>'+
								'</tpl>'+
							'</table>'+
						'</td>'+
					'</tpl>'+
				'</tr>'+
				
				
					'<tr>'+	
						// COMPANY DETAILS+ 1e KOLOM
						'<tpl if="this.isCompanySecondColumn(values)">'+
							'<tpl if="this.isBankVat(values)">'+
								'<td valign="top" class="contactCompanyDetailsPanelKolom">'+
							'</tpl>'+
							
							'<tpl if="this.isBankVat(values) == false">'+
								'<td colspan="2" valign="top" class="contactCompanyDetailsPanelKolom100">'+
							'</tpl>'+							
						'</tpl>'+
						
						'<tpl if="this.isCompanySecondColumn(values) == false">'+
							'<td valign="top" class="contactCompanyDetailsPanelKolom100">'+
						'</tpl>'+
																		
							'<table cellpadding="0" cellspacing="0" border="0">'+						
								
								//PHONE							
								'<tpl if="!GO.util.empty(phone)">'+
									'<tr>'+
										'<td class="contactCompanyLabelWidth">' + GO.lang['strPhone'] + ':</td><td>{[GO.util.callToLink(values.phone)]}</td>'+
									'</tr>'+						
								'</tpl>'+

								//FAX							
								'<tpl if="!GO.util.empty(fax)">'+
									'<tr>'+
										'<td class="contactCompanyLabelWidth">' + GO.lang['strFax'] + ':</td><td>{fax}</td>'+
									'</tr>'+						
								'</tpl>'+								
								
								//EMAIL							
								'<tpl if="!GO.util.empty(email)">'+
									'<tr>'+
										'<td class="contactCompanyLabelWidth">' + GO.lang['strEmail'] + ':</td><td>{[this.mailTo(values.email, values.full_name)]}</td>'+
									'</tr>'+						
								'</tpl>'+		
								
								//HOMEPAGE
								'<tpl if="!GO.util.empty(homepage)">'+
									'<tr>'+
										'<td class="contactCompanyLabelWidth">' + GO.lang['strHomepage'] + ':</td><td><a href="{homepage}" target="_blank">{homepage}</a></td>'+
									'</tr>'+
								'</tpl>'+
											
																										
							'</table>'+
						'</td>'+
						
						'<tpl if="this.isBankVat(values)">'+
							// COMPANY DETAILS+ 2e KOLOM
							'<td colspan="2" valign="top" class="contactCompanyDetailsPanelKolom">'+
								'<table cellpadding="0" cellspacing="0" border="0">'+												
									
									//BANK_NO
									'<tpl if="!GO.util.empty(bank_no)">'+
										'<tr>'+
											'<td>' + GO.addressbook.lang['cmdFormLabelBankNo'] + ':</td><td>{bank_no}</td>'+
										'</tr>'+						
									'</tpl>'+
									
									'<tpl if="!GO.util.empty(iban)">'+
										'<tr>'+
											'<td>' + GO.addressbook.lang.iban+ ':</td><td>{iban}</td>'+
										'</tr>'+						
									'</tpl>'+
									
									'<tpl if="!GO.util.empty(crn)">'+
										'<tr>'+
											'<td>' + GO.addressbook.lang.crn+ ':</td><td>{crn}</td>'+
										'</tr>'+						
									'</tpl>'+

									//VAT_NO							
									'<tpl if="!GO.util.empty(vat_no)">'+
										'<tr>'+
											'<td>' + GO.addressbook.lang['cmdFormLabelVatNo'] + ':</td><td>{vat_no}</td>'+
										'</tr>'+						
									'</tpl>'+

									
								'</table>'+
							'</td>'+
						'</tpl>'+					
					'</tr>'+
					
					
					
					
					'</table>'+		

					'<tpl if="!GO.util.empty(comment)">'+						
						'<table cellpadding="0" cellspacing="0" border="0" class="display-panel">'+
						'<tr>'+
							'<td class="display-panel-heading">' + GO.addressbook.lang['cmdFormLabelComment'] + '</td>'+
						'</tr>'+
						'<tr>'+
							'<td>{comment}</td>'+
						'</tr>'+
						'</table>'+
					'</tpl>'+		
					
					
					'<tpl if="employees.length">'+
					'{[this.collapsibleSectionHeader("'+GO.addressbook.lang.cmdPanelEmployees+'","employees")]}'+
						'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="employees">'+
						//LINK DETAILS
//						'<tr>'+
//							'<td colspan="4" class="display-panel-heading">'+GO.addressbook.lang.cmdPanelEmployees+'</td>'+
//						'</tr>'+
						
						'<tr>'+
							'<td width="16" class="display-panel-links-header">&nbsp;</td>'+
							'<td class="table_header_links">' + GO.lang['strName'] + '</td>'+
							'<td class="table_header_links">' + GO.lang['strFunction'] + '</td>'+
							'<td class="table_header_links">' + GO.lang['strEmail'] + '</td>'+							
						'</tr>'+	
											
						'<tpl for="employees">'+
							'<tr>'+
								'<td><div class="go-icon go-model-icon-GO_Addressbook_Model_Contact"></div></td>'+
								'<td><a href="#" onclick="GO.linkHandlers[\'GO\\\\\\\\Addressbook\\\\\\\\Model\\\\\\\\Contact\'].call(this, {id});">{name}</a></td>'+
								'<td>{function}</td>'+
								'<td>{[this.mailTo(values.email, values.name)]}</td>'+
							'</tr>'+							
						'</tpl>'+
						'</table>'+
					'</tpl>';

			if(GO.lists)
				this.template += GO.lists.ListTemplate;

			if(GO.customfields)
			{
				this.template +=GO.customfields.displayPanelTemplate;
				this.template +=GO.customfields.displayPanelBlocksTemplate;
			}
			
			if(GO.workflow){
				this.template +=GO.workflow.WorkflowTemplate;
			}
								
			if(GO.tasks)
				this.template +=GO.tasks.TaskTemplate;

			if(GO.calendar)
				this.template += GO.calendar.EventTemplate;

			this.template +=GO.linksTemplate;
			
	  Ext.apply(this.templateConfig,{
			replaceWithUnderscore: function(str){
				if(!GO.util.empty(str)){
					str = str.replace(/\\/g,"_");
				}
				return str;
			},
		  addSlashes : function(str)
			{
				str = GO.util.html_entity_decode(str, 'ENT_QUOTES');
				str = GO.util.add_slashes(str);
				return str;
			},
			mailTo : function(email, name) {
			
				if(GO.email && GO.settings.modules.email.read_permission)
				{
					return '<a href="#" onclick="GO.email.showAddressMenu(event, \''+this.addSlashes(email)+'\',\''+this.addSlashes(name)+'\');">'+email+'</a>';
				}else
				{
					return '<a href="mailto:'+email+'">'+email+'</a>';
				}
			},
			
			isCompanySecondColumn : function(values)
			{
				if(
					this.isBankVat(values) ||
					this.isAddressPost(values) ||
					!GO.util.empty(values['homepage'])
				)
				{
					return true;
				} else {
					return false;
				}
			},
			isBankVat : function(values)
			{
				if(
					!GO.util.empty(values['bank_no']) ||
					!GO.util.empty(values['vat_no']) 	||
					!GO.util.empty(values['iban']) 	||
					!GO.util.empty(values['crn'])
					
				)
				{
					return true;
				} else {
					return false;
				}
			},	
			isAddress : function(values)
			{
				if(
					!GO.util.empty(values['address']) ||
					!GO.util.empty(values['address_no']) ||
					!GO.util.empty(values['zip']) ||
					!GO.util.empty(values['city']) ||
					!GO.util.empty(values['state']) ||
					!GO.util.empty(values['country']) ||
					!GO.util.empty(values['post_address']) ||
					!GO.util.empty(values['post_address_no']) ||
					!GO.util.empty(values['post_zip']) ||
					!GO.util.empty(values['post_city']) ||
					!GO.util.empty(values['post_state']) ||
					!GO.util.empty(values['post_country'])
				)
				{
					return true;
				} else {
					return false;
				}
			},	
			isAddressVisit : function(values)
			{
				if(
					!GO.util.empty(values['address']) ||
					!GO.util.empty(values['address_no']) ||
					!GO.util.empty(values['zip']) ||
					!GO.util.empty(values['city']) ||
					!GO.util.empty(values['state']) ||
					!GO.util.empty(values['country'])
				)
				{
					return true;
				} else {
					return false;
				}
			},
			isAddressPost : function(values)
			{
				if(
					!GO.util.empty(values['post_address']) ||
					!GO.util.empty(values['post_address_no']) ||
					!GO.util.empty(values['post_zip']) ||
					!GO.util.empty(values['post_city']) ||
					!GO.util.empty(values['post_state']) ||
					!GO.util.empty(values['post_country'])					
				)
				{
					return true;
				} else {
					return false;
				}				
			},
			GoogleMapsCityStreet : function(values)
			{
				var google_url = 'http://maps.google.com/maps?q=';
				
				if(!GO.util.empty(values['address']) && !GO.util.empty(values['city']))
				{
					if(!GO.util.empty(values['address_no']))
					{
						return '<a href="' + google_url + values['address'] + '+' + values['address_no'] + '+' + values['city'] + '" target="_blank" >' + values['address'] + ' ' + values['address_no'] + '</a>';	
					} else {
						return '<a href="' + google_url + values['address'] + '+' + values['city'] + '" target="_blank" >' + values['address'] + '</a>';						
					}
				} else {
					return values['address'] + ' ' + values['address_no'];
				}
			}
		});
		
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);		
		
		if(GO.files)
		{
			Ext.apply(this.templateConfig, GO.files.filesTemplateConfig);
			this.template += GO.files.filesTemplate;
		}
		
		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}
				
		this.template += GO.createModifyTemplate;
				
//		this.template+='</div>';		
			
		GO.addressbook.CompanyReadPanel.superclass.initComponent.call(this);
		
//		if(GO.tasks)
//		{
//			this.scheduleCallItem = new GO.tasks.ScheduleCallMenuItem();
//			this.newMenuButton.menu.add(this.scheduleCallItem);
//		}
	},
	createTopToolbar : function(){
		var tbar = GO.addressbook.ContactReadPanel.superclass.createTopToolbar.call(this);
		

		tbar.splice(tbar.length-2,0,
			this.mergeButton = new Ext.Button({
			iconCls: 'btn-add',
			text: GO.lang.merge,
			scope:this,
			disabled:true,
			handler: function()
			{
				if(!this.selectMergeLinksWindow)
				{
					this.selectMergeLinksWindow = new GO.dialog.MergeWindow({
						displayPanel:this
					});
				}			

				this.selectMergeLinksWindow.show();
			}
		}));
		
		return tbar;
	},
	setData : function(data)
	{
		GO.addressbook.CompanyReadPanel.superclass.setData.call(this, data);
		
		if(this.mergeButton)
			this.mergeButton.setDisabled(!data.write_permission)
					
//		if(data.write_permission)
//		{
//			if(this.scheduleCallItem)
//			{				
//				var name = this.data.name;
//				
//				if(this.data.phone!='')
//				{
//					name += ' ('+this.data.phone+')';
//				}
//				
//				this.scheduleCallItem.setLinkConfig({
//					name: name,
//					model_id: this.data.id, 
//					model_name:"GO\\Addressbook\\Model\\Company",
//					callback:this.reload,
//					scope: this
//				});
//			}
//		}
		this.newMenuButton.menu.taskShowConfig= {company_id:this.data.id};
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: ContactDialog.js 20952 2017-03-20 07:59:18Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */


GO.addressbook.ContactDialog = function(config)
{
	config = config || {};

	this.goDialogId = 'contact';
	this.originalPhotoUrl = Ext.BLANK_IMAGE_URL;

	this.personalPanel = new GO.addressbook.ContactProfilePanel();

	GO.addressbook.ContactPhoto = Ext.extend(Ext.BoxComponent, {
		autoEl : {
				tag: 'img',
				cls:'ab-photo',
				src:Ext.BLANK_IMAGE_URL
			},
	
		setPhotoSrc : function(url)
		{
			var now = new Date();
			if (this.el)
				this.el.set({
					src: GO.util.empty(url) ? Ext.BLANK_IMAGE_URL : url
				});
			this.setVisible(true);
		}
	});

	this.contactPhoto = new GO.addressbook.ContactPhoto();

	this.deleteImageCB = new Ext.form.Checkbox({
		boxLabel: GO.addressbook.lang.deleteImage,
		labelSeparator: '',
		name: 'delete_photo',
		allowBlank: true,
		hideLabel:true,
		disabled:true
	});

	this.uploadFile = new GO.form.UploadFile({
		inputName : 'image',
		max: 1
	})

	this.fullImageButton = new Ext.Button({
			text:GO.addressbook.lang.downloadFullImage,
			disabled:false,
			handler:function(){
				window.open(this.originalPhotoUrl,'_blank');
			},
			scope:this
		});

	this.photoPanel = new Ext.Panel({
		title : GO.addressbook.lang.photo,
		layout: 'form',
		border:false,
		cls : 'go-form-panel',		
		autoScroll:true,
		labelAlign:'top',
		items:[	{
				style:'margin-bottom:15px',
				xtype:'button',
				text:GO.addressbook.lang.searchForImages,
				scope:this,
				handler:function(){
					var f= this.formPanel.form;
					var mn = f.findField('middle_name').getValue();
					
					if(mn)
						mn = ' '+mn+' ';
					else
						mn = ' ';
					
					var name = f.findField('first_name').getValue()+mn+f.findField('last_name').getValue();
					var sUrl = 'http://www.google.com/search?tbm=isch&q="'+encodeURIComponent(name)+'"';
					window.open(sUrl);
				}
			},
			{
				
				xtype:'textfield',
				fieldLabel:GO.addressbook.lang.downloadPhotoUrl,
				name:'download_photo_url',
				anchor:'100%'
			},{
				style:'margin-top:15px;margin-bottom:10px;',
				html:GO.addressbook.lang.orBrowseComputer+':',
				xtype:'htmlcomponent'
			},
			this.uploadFile,
			{
				style:'margin-top:15px',
				html:GO.addressbook.lang.currentImage+':',
				xtype:'htmlcomponent'
			},
			this.contactPhoto,
			this.deleteImageCB,
			this.fullImageButton
		]
	});

	this.commentPanel = new Ext.Panel({
		title: GO.addressbook.lang['cmdPanelComments'], 
		layout: 'fit',
		forceLayout:true,
		border:false,
		items: [ new Ext.form.TextArea({
			name: 'comment',
			fieldLabel: '',
			hideLabel: true,
			anchor:'100% 100%'
		})
		]
	});
	
	this.personalPanel.on('show', 
		function()
		{ 
			var firstName = Ext.get('first_name');					
			if (firstName)
			{
				firstName.focus();
			}
		}, this);
		
	this.commentPanel.on('show', function(){ 
		this.formPanel.form.findField('comment').focus();
	}, this);
	
	//var selectMailingsPanel = new GO.addressbook.SelectMailingsPanel();
	
	this.socialMediaPanel = new Ext.Panel({
		title: GO.addressbook.lang['cmdPanelSocialMedia'], 
		layout: 'form',
		border:false,
		cls : 'go-form-panel',	
		items: [ new Ext.form.TextField({
			name: 'url_linkedin',
			fieldLabel: GO.addressbook.lang['linkedinUrl'],
			anchor:'-20',
			maxLength: 100
		}), new Ext.form.TextField({
			name: 'url_facebook',
			fieldLabel: GO.addressbook.lang['facebookUrl'],
			anchor:'-20',
			maxLength: 100
		}), new Ext.form.TextField({
			name: 'url_twitter',
			fieldLabel: GO.addressbook.lang['twitterUrl'],
			anchor:'-20',
			maxLength: 100
		}), new Ext.form.TextField({
			name: 'skype_name',
			fieldLabel: GO.addressbook.lang['skypeName'],
			anchor:'-20',
			maxLength: 100
		}) ]
	});
	
	var items = [
		this.personalPanel,
		this.photoPanel,
		this.socialMediaPanel,
		this.commentPanel
	];
	 
	// Remove the original comment panel if it is set in the settings of the user.
	if(GO.comments && GO.comments.hideOriginalTab('contact')){
		items.pop();
	}
	
	this.selectAddresslistsPanel = new GO.addressbook.SelectAddresslistsPanel();
				
	items.push(this.selectAddresslistsPanel);
	
	if(GO.customfields && GO.customfields.types["GO\\Addressbook\\Model\\Contact"])
	{
		for(var i=0;i<GO.customfields.types["GO\\Addressbook\\Model\\Contact"].panels.length;i++)
		{
			items.push(GO.customfields.types["GO\\Addressbook\\Model\\Contact"].panels[i]);
		}
	}

	if(GO.comments){
		this.commentsGrid = new GO.comments.CommentsGrid({title:GO.comments.lang.comments});
		items.push(this.commentsGrid);
	}

	this.formPanel = new Ext.FormPanel({
		waitMsgTarget:true,
		baseParams: {},
		border: false,
		fileUpload : true,
		items: [
		this.tabPanel = new Ext.TabPanel({
			border: false,
			activeTab: 0,
			hideLabel: true,
			deferredRender: false,
			enableTabScroll:true,
			anchor:'100% 100%',
			items: items
		})
		]
	});
	
	
	//this.downloadDocumentButton = new Ext.Button();

	this.collapsible=true;
	this.id= 'addressbook-window-new-contact';
	this.layout= 'fit';
	this.modal=false;
	this.shadow= false;
	this.border= false;
	this.height= 640;
	
	//autoHeight= true;
	this.width= 820;
	this.plain= true;
	this.closeAction= 'hide';
	//this.iconCls= 'btn-addressbook-contact';
	this.title= GO.addressbook.lang['cmdContactDialog'];
	this.items= this.formPanel;
	this.buttons= [
	{
		text: GO.lang['cmdOk'],
		handler:function(){
			this.saveContact(true);
		},
		scope: this
	},
	/*{
		text: GO.lang['cmdApply'],
		handler: function(){
			this.saveContact();
		},
		scope: this
	},*/
	{
		text: GO.lang['cmdClose'],
		handler: function()
		{
			this.hide();
		},
		scope: this
	}
	];
	
	var focusFirstField = function(){
		this.formPanel.form.findField('first_name').focus(true);
	};
	
	this.focus= focusFirstField.createDelegate(this);
	
	
	this.personalPanel.formAddressBooks.on({
					scope:this,
					change:function(sc, newValue, oldValue){
						var record = sc.store.getById(newValue);
						GO.customfields.disableTabs(this.tabPanel, record.data,'contactCustomfields');	
					}
				});
	
	
	GO.addressbook.ContactDialog.superclass.constructor.call(this, config);
	
	this.addEvents({
		'save':true
	});

//	if (GO.customfields) {
//		this.personalPanel.formAddressBooks.on('select',function(combo,record,index){
//			var allowed_cf_categories = record.data.allowed_cf_categories.split(',');
//			this.updateCfTabs(allowed_cf_categories);
//		},this);
//	}
}

Ext.extend(GO.addressbook.ContactDialog, GO.Window, {

	show : function(contact_id, config)
	{
		
		var config = config || {};
	
		if(!this.rendered)
		{
			this.render(Ext.getBody());
		}
		
		if(!GO.addressbook.writableAddresslistsStore.loaded)
		{
			GO.addressbook.writableAddresslistsStore.load({
				callback:function(){
					//var values = GO.util.empty(contact_id) ? this.formPanel.form.getValues() : {};
					this.show(contact_id, config);
//					delete values.addressbook_id;
//					delete values.iso_address_format;
//					delete values.salutation;
//					this.formPanel.form.setValues(values);
				},
				scope:this
			});
		}else if(!GO.addressbook.writableAddressbooksStore.loaded)
		{
			GO.addressbook.writableAddressbooksStore.load(
			{
				callback:function(){
					//var values = GO.util.empty(contact_id) ? this.formPanel.form.getValues() : {};
					this.show(contact_id, config);
//					delete values.addressbook_id;
//					delete values.iso_address_format;
//					delete values.salutation;
//					this.formPanel.form.setValues(values);
				},
				scope:this
			});
		}else
		{
			this.formPanel.form.reset();

	
			if(contact_id)
			{
				this.contact_id = contact_id;
			} else {
				this.contact_id = 0;
			}
			
			if(!GO.util.empty(config.addresslistIds))
				this.setAddresslistCheckBoxes(config.addresslistIds);
						
//			if(this.contact_id > 0)
//			{
				this.loadContact(this.contact_id, config);
//			} else {
//				this.setPhoto(0);
//				GO.addressbook.ContactDialog.superclass.show.call(this);
//			}
			//var abRecord = this.personalPanel.formAddressBooks.store.getById(this.personalPanel.formAddressBooks.getValue());
			
			if(config.activeTab)
				this.tabPanel.setActiveTab(config.activeTab);
			else
				this.tabPanel.setActiveTab(0);
		}

	},


	/*setAddressbookId : function(addressbook_id)
	{
		this.personalPanel.formAddressBooks.setValue(addressbook_id);
		this.personalPanel.formCompany.store.baseParams['addressbook_id'] = addressbook_id;			
		this.addressbook_id = addressbook_id;
	},*/
	
	loadContact : function(id, config)
	{
		this.beforeLoad();
		
		var params = config.values || {};
		params.id = id;
		
		this.formPanel.form.load({
			url:GO.url('addressbook/contact/load'),
			params:params,
			success: function(form, action) {
				
//				if(!action.result.data.write_permission)
//				{
//					GO.errorDialog.show(GO.lang['strNoWritePermissions']);						
//				}else
//				{		

					if(config && config.values)
						this.formPanel.form.setValues(config.values);

					this.personalPanel.setAddressbookID(action.result.data.addressbook_id);
					this.formPanel.form.findField('addressbook_id').setRemoteText(action.result.remoteComboTexts.addressbook_id);
					this.formPanel.form.findField('company_id').setRemoteText(action.result.remoteComboTexts.company_id);
					if(!GO.util.empty(action.result.data.photo_url))
						this.setPhoto(action.result.data.photo_url);
					if(!GO.util.empty(action.result.data.original_photo_url))
						this.setOriginalPhoto(action.result.data.original_photo_url);

					if(GO.customfields)
						GO.customfields.disableTabs(this.tabPanel, action.result);	
					
					if (!GO.util.empty(config.contactData)) {
						this.personalPanel.formFirstName.setValue(config.contactData['first_name']);
						this.personalPanel.formMiddleName.setValue(config.contactData['middle_name']);
						this.personalPanel.formLastName.setValue(config.contactData['last_name']);
						this.personalPanel.formTitle.setValue(config.contactData['title']);
						this.personalPanel.formAfternameTitle.setValue(config.contactData['suffix']);
						this.personalPanel.sexCombo.setValue(config.contactData['sex']);
						this.personalPanel.formBirthday.setValue(config.contactData['birthday']);
						if (!GO.util.empty(this.personalPanel.formEmail))
							this.personalPanel.formEmail.setValue(config.contactData['email']);
						this.personalPanel.formEmail2.setValue(config.contactData['email2']);
						this.personalPanel.formEmail3.setValue(config.contactData['email3']);
						this.personalPanel.formHomePhone.setValue(config.contactData['home_phone']);
						this.personalPanel.formFax.setValue(config.contactData['fax']);
						this.personalPanel.formCellular.setValue(config.contactData['cellular']);
						this.personalPanel.formHomepage.setValue(config.contactData['homepage']);
						this.personalPanel.formAddress.setValue(config.contactData['address']);
						this.personalPanel.formAddressNo.setValue(config.contactData['address_no']);
						this.personalPanel.formPostal.setValue(config.contactData['zip']);
						this.personalPanel.formCity.setValue(config.contactData['city']);
						this.personalPanel.formState.setValue(config.contactData['state']);
						this.personalPanel.formCountry.setValue(config.contactData['country']);
						this.personalPanel.formWorkPhone.setValue(config.contactData['work_phone']);
						this.personalPanel.formWorkFax.setValue(config.contactData['work_fax']);
//						this.personalPanel.formCompany.setValue(config.contactData['company_id']);
						this.personalPanel.formDepartment.setValue(config.contactData['department']);
						this.personalPanel.formFunction.setValue(config.contactData['function']);
					}
					
					if(GO.comments){
						if(action.result.data['id'] > 0){
							if (!GO.util.empty(action.result.data['action_date'])) {
								this.commentsGrid.actionDate = action.result.data['action_date'];
							} else {
								this.commentsGrid.actionDate = false;
							}
							this.commentsGrid.setLinkId(action.result.data['id'], 'GO\\Addressbook\\Model\\Contact');
							this.commentsGrid.store.load();
							this.commentsGrid.setDisabled(false);
						} else {
							this.commentsGrid.setDisabled(true);
						}
					}
					
					this.afterLoad(action);
					
					GO.addressbook.ContactDialog.superclass.show.call(this);
				//}
			},
			scope: this
		});
	},
	
		
	afterLoad  : function(action){		
		if(!GO.util.empty(action.result.data.original_photo_url))
			this.setOriginalPhoto(action.result.data.original_photo_url);
		else
			this.setOriginalPhoto("");
		
		if(!GO.util.empty(action.result.data.photo_url))
			this.setPhoto(action.result.data.photo_url);
		else
			this.setPhoto("");
	},
	
	beforeLoad  : function(){
		
	},
	
	saveContact : function(hide)
	{		
		var company = this.personalPanel.formCompany.getRawValue();

		this.formPanel.form.submit({
			waitMsg:GO.lang['waitMsgSave'],
			url:GO.url('addressbook/contact/submit'),			
			params:
			{				
				id : this.contact_id,
				company: company
			},
			success:function(form, action){
				
				if (!action.result.success) {
					
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
					
				} else {
				
					if(action.result.id)
					{
						this.contact_id = action.result.id;
					}
					this.uploadFile.clearQueue();
					this.fireEvent('save', this, this.contact_id);

					GO.dialog.TabbedFormDialog.prototype.refreshActiveDisplayPanels.call(this);

					//this.personalPanel.setContactID(this.contact_id);
					if(!GO.util.empty(action.result.photo_url))
						this.setPhoto(action.result.photo_url);
					else
						this.setPhoto("");

					if(!GO.util.empty(action.result.original_photo_url))
						this.setOriginalPhoto(action.result.original_photo_url);
					else
						this.setOriginalPhoto("");				

					if (hide)
					{
						this.hide();
					}
				
				}
				
			},
			failure: function(form, action) {				
				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});
	},
	setOriginalPhoto : function(url){
		this.originalPhotoUrl = url;
	},
	setPhoto : function(url)
	{
		this.contactPhoto.setPhotoSrc(url);
		this.deleteImageCB.setValue(false);
		this.deleteImageCB.setDisabled(url=='');
	},
	
	setAddresslistCheckBoxes : function(addresslistIds) {
		for (var i=0; i<addresslistIds.length; i++) {
			var field = this.formPanel.find('name', 'addresslist_'+addresslistIds[i]);
			if (!GO.util.empty(field))
				field[0].setValue(true);
		}
	}
	
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: CompanyDialog.js 20952 2017-03-20 07:59:18Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.CompanyDialog = function(config)
{
	Ext.apply(this, config);

	this.goDialogId = 'company';
	
	this.personalPanel = new GO.addressbook.CompanyProfilePanel();	    
		    
	
				
	GO.addressbook.CompanyPhoto = Ext.extend(Ext.BoxComponent, {
		autoEl : {
				tag: 'img',
				cls:'ab-photo',
				src:Ext.BLANK_IMAGE_URL
			},
	
		setPhotoSrc : function(url)
		{
			if (this.el)
				this.el.set({
					src: GO.util.empty(url) ? Ext.BLANK_IMAGE_URL : url
				});
			this.setVisible(true);
		}
	});

	this.companyPhoto = new GO.addressbook.CompanyPhoto();

	this.deleteImageCB = new Ext.form.Checkbox({
		boxLabel: GO.addressbook.lang.deleteImage,
		labelSeparator: '',
		name: 'delete_photo',
		allowBlank: true,
		hideLabel:true,
		disabled:true
	});

	this.uploadFile = new GO.form.UploadFile({
		inputName : 'image',
		max: 1
	})

	this.fullImageButton = new Ext.Button({
			text:GO.addressbook.lang.downloadFullImage,
			disabled:false,
			handler:function(){
				window.open(this.originalPhotoUrl,'_blank');
			},
			scope:this
		});

	this.photoPanel = new Ext.Panel({
		title : GO.addressbook.lang.photo,
		layout: 'form',
		border:false,
		cls : 'go-form-panel',		
		autoScroll:true,
		labelAlign:'top',
		items:[	{
				style:'margin-bottom:15px',
				xtype:'button',
				text:GO.addressbook.lang.searchForImages,
				scope:this,
				handler:function(){
					var f= this.companyForm.form;
					var n2 = f.findField('name2').getValue();
					
					if(n2)
						n2 = ' '+n2;
					else
						n2 = '';
					
					var name = f.findField('name').getValue()+n2;
					var sUrl = 'http://www.google.com/search?tbm=isch&q="'+encodeURIComponent(name)+'"';
					window.open(sUrl);
				}
			},
			{
				
				xtype:'textfield',
				fieldLabel:GO.addressbook.lang.downloadPhotoUrl,
				name:'download_photo_url',
				anchor:'100%'
			},{
				style:'margin-top:15px;margin-bottom:10px;',
				html:GO.addressbook.lang.orBrowseComputer+':',
				xtype:'htmlcomponent'
			},
			this.uploadFile,
			{
				style:'margin-top:15px',
				html:GO.addressbook.lang.currentImage+':',
				xtype:'htmlcomponent'
			},
			this.companyPhoto,
			this.deleteImageCB,
			this.fullImageButton
		]
	});
	
				
				
	this.commentPanel = new Ext.Panel({
		title: GO.addressbook.lang['cmdPanelComments'], 
		layout: 'fit',
		border:false,
		items: [
		new Ext.form.TextArea({
			name: 'comment',
			fieldLabel: '',
			hideLabel: true
		})
		]
	});

	this.commentPanel.on('show', function(){
		this.companyForm.form.findField('comment').focus();
	}, this);

	/* employees Grid */
	this.employeePanel = new GO.addressbook.EmployeesPanel();

  
	var items = [
	this.personalPanel,
	this.photoPanel,
	this.commentPanel];

	// Remove the original comment panel if it is set in the settings of the user.
	if(GO.comments && GO.comments.hideOriginalTab('company')){
		items.pop();
	}		
					
	this.selectAddresslistsPanel = new GO.addressbook.SelectAddresslistsPanel();
					
	items.push(this.selectAddresslistsPanel);
	items.push(this.employeePanel);
  
	if(GO.customfields && GO.customfields.types["GO\\Addressbook\\Model\\Company"])
	{
		for(var i=0;i<GO.customfields.types["GO\\Addressbook\\Model\\Company"].panels.length;i++)
		{
			items.push(GO.customfields.types["GO\\Addressbook\\Model\\Company"].panels[i]);
		}
	}
	
	if(GO.comments){
		this.commentsGrid = new GO.comments.CommentsGrid({title:GO.comments.lang.comments});
		items.push(this.commentsGrid);
	}
	
	this.companyForm = this.formPanel = new Ext.FormPanel({
		fileUpload : true,
		waitMsgTarget:true,		
		border: false,
		baseParams: {},
		items: [
		this.tabPanel = new Ext.TabPanel({
			border: false,
			activeTab: 0,
			enableTabScroll:true,
			deferredRender: false,
			hideLabel: true,
			anchor:'100% 100%',
			items: items
		})
		]
	});				
    


	this.id= 'addressbook-window-new-company';
	this.layout= 'fit';
	this.modal= false;
	this.shadow= false;
	this.border= false;
	this.height= 640;
	this.width= 820;
	this.plain= true;
	this.closeAction= 'hide';
	this.collapsible=true;
	this.title= GO.addressbook.lang['cmdCompanyDialog'];
	this.items= this.companyForm;
	this.buttons=  [
	{
		text: GO.lang['cmdOk'],
		handler: function(){
			this.saveCompany(true);
		},
		scope: this
	},
	/*{
		text: GO.lang['cmdApply'],
		handler: function(){
			this.saveCompany();
		},
		scope: this
	},*/
	{
		text: GO.lang['cmdClose'],
		handler: function()
		{
			this.hide();
		},
		scope: this
	}
	];
		
	var focusFirstField = function(){
		this.companyForm.form.findField('name').focus(true);
	};
	this.focus= focusFirstField.createDelegate(this);



	this.tbar = [this.moveEmployeesButton = new Ext.Button({
		text:GO.addressbook.lang.moveEmployees,
		handler:function(){
			if(!this.moveEmpWin){

				this.moveEmpForm = new Ext.FormPanel({
					cls:'go-form-panel',
//					url:GO.settings.modules.addressbook.url+'action.php',
					url: GO.url('addressbook/company/moveEmployees'),
					baseParams:{
//						task:'move_employees',
						from_company_id:0
					},
					waitMsgTarget:true,
					items:new GO.addressbook.SelectCompany({
						allowBlank:false,
						anchor:'100%',
						hiddenName:'to_company_id'
					})
				});

				this.moveEmpWin = new GO.Window({
					title:GO.addressbook.lang.moveEmployees,
					closable:true,
					modal:true,
					width:400,
					autoHeight:true,
					items:this.moveEmpForm,
					buttons:[{
						text:GO.lang.cmdOk,
						handler:function(){
							this.moveEmpForm.form.submit({
								waitMsg:GO.lang['waitMsgSave'],
								success:function(form, action){
									this.moveEmpWin.hide();
								},
								failure: function(form, action) {

									if(action.failureType == 'client')
									{
										Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);
									} else {
										Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
									}
								},
								scope: this
							})
						},
						scope:this
					}]
				});
			}
			this.moveEmpForm.baseParams.from_company_id=this.company_id;
			this.moveEmpWin.show();
		},
		scope:this
	})];

		this.personalPanel.formAddressBooks.on({
					scope:this,
					change:function(sc, newValue, oldValue){
						var record = sc.store.getById(newValue);
						GO.customfields.disableTabs(this.tabPanel, record.data,'companyCustomfields');	
					}
				});

	GO.addressbook.CompanyDialog.superclass.constructor.call(this);
	
	this.addEvents({
		'save':true
	});
	
//	if (GO.customfields) {
//		this.personalPanel.formAddressBooks.on('select',function(combo,record,index){
//			var allowed_cf_categories = record.data.allowed_cf_categories.split(',');
//			this.updateCfTabs(allowed_cf_categories);
//		},this);
//		this.companyForm.form.on('actioncomplete',function(form, action){
//			if(action.type=='load'){
//				
//			}
//		},this);
//	}
}
	
Ext.extend(GO.addressbook.CompanyDialog, GO.Window, {

	show : function(company_id, config)
	{
		if(!GO.addressbook.writableAddressbooksStore.loaded)
		{
			GO.addressbook.writableAddressbooksStore.load(
			{
				callback: function(){
					this.show(company_id, config);
				},
				scope:this
			});
		}else	if(!GO.addressbook.writableAddresslistsStore.loaded)
		{
			GO.addressbook.writableAddresslistsStore.load({
				callback:function(){
					this.show(company_id, config);
				},
				scope:this
			});
		}else
		{
			this.companyForm.form.reset();

			
			if(!this.rendered)
			{
				this.render(Ext.getBody());
			}			
			
			if(company_id)
			{
				this.company_id = company_id;
			} else {
				this.company_id = 0;
			}	
			
			this.moveEmployeesButton.setDisabled(true);
		
			this.tabPanel.setActiveTab(0);
			
//			if(this.company_id > 0)
//			{
				this.loadCompany(company_id, config);				
//			} else {
//				this.employeePanel.setCompanyId(0);
//				var tempAddressbookID = this.personalPanel.formAddressBooks.getValue();
//				
//				this.companyForm.form.reset();
//
//				if(tempAddressbookID>0 && this.personalPanel.formAddressBooks.store.getById(tempAddressbookID))
//					this.personalPanel.formAddressBooks.setValue(tempAddressbookID);
//				else
//					this.personalPanel.formAddressBooks.selectFirst();
//				
//				this.personalPanel.setCompanyId(0);
//
//				var abRecord = this.personalPanel.formAddressBooks.store.getById(this.personalPanel.formAddressBooks.getValue());
//			
//				if (GO.customfields) {
//					var allowed_cf_categories = abRecord.data.allowed_cf_categories.split(',');
//					this.updateCfTabs(allowed_cf_categories);
//				}
//
//				GO.addressbook.CompanyDialog.superclass.show.call(this);
//			}		
		}
	},	

	updateCfTabs : function(allowed_cf_categories) {
//		for (var i=0; i<this.tabPanel.items.items.length; i++) {
//			if (typeof(this.tabPanel.items.items[i].category_id)!='undefined') {
//				this.tabPanel.hideTabStripItem(this.tabPanel.items.items[i]);
//				if(allowed_cf_categories.indexOf(this.tabPanel.items.items[i].category_id.toString())>=0)
//					this.tabPanel.unhideTabStripItem(this.tabPanel.items.items[i]);
//				else
//					this.tabPanel.hideTabStripItem(this.tabPanel.items.items[i]);
//			}
//		}
	},

	loadCompany : function(id, config)
	{
		this.beforeLoad();
		
		var params = config.values || {};
		params.id = id;
		
		this.companyForm.form.load({
			url:GO.url('addressbook/company/load'),
			params: params,
			success: function(form, action) {
				
				
				this.employeePanel.setCompanyId(action.result.data['id']);
				this.employeePanel.setAddressbookId(action.result.data['addressbook_id']);
				
				this.personalPanel.setCompanyId(action.result.data['id']);
				this.moveEmployeesButton.setDisabled(false);
				
				if(!GO.util.empty(action.result.data.photo_url))
					this.setPhoto(action.result.data.photo_url);
				if(!GO.util.empty(action.result.data.original_photo_url))
					this.setOriginalPhoto(action.result.data.original_photo_url);
				
				if(GO.customfields)
					GO.customfields.disableTabs(this.tabPanel, action.result);	
				
				
				GO.dialog.TabbedFormDialog.prototype.setRemoteComboTexts.call(this, action);
				
				//this.personalPanel.formAddressBooks.setRemoteText(action.result.remoteComboTexts.addressbook_id);
	
				if(GO.comments){	
					if(action.result.data['id'] > 0){
						if (!GO.util.empty(action.result.data['action_date'])) {
							this.commentsGrid.actionDate = action.result.data['action_date'];
						} else {
							this.commentsGrid.actionDate = false;
						}
						this.commentsGrid.setLinkId(action.result.data['id'], 'GO\\Addressbook\\Model\\Company');
						this.commentsGrid.store.load();
						this.commentsGrid.setDisabled(false);
					}else {
						this.commentsGrid.setDisabled(true);
					}
				}

				this.afterLoad(action);

				GO.addressbook.CompanyDialog.superclass.show.call(this);
						
			},
			failure: function(form, action)
			{
				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}			 		
			},
			scope: this
		});			
	},
	
	afterLoad  : function(action){
		
	},
	
	beforeLoad  : function(){
		
	},
	
	saveCompany : function(hide)
	{	
		this.companyForm.form.submit({
			url:GO.url('addressbook/company/submit'),
			params:
			{
				id : this.company_id
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				if(action.result.id)
				{
					this.company_id = action.result.id;				
					this.employeePanel.setCompanyId(action.result.id);
					this.moveEmployeesButton.setDisabled(false);
				}				
				this.fireEvent('save', this, this.company_id);
				
				this.uploadFile.clearQueue();
				
				GO.dialog.TabbedFormDialog.prototype.refreshActiveDisplayPanels.call(this);
				
				if(!GO.util.empty(action.result.photo_url))
					this.setPhoto(action.result.photo_url);
				else
					this.setPhoto("");
				
				if(!GO.util.empty(action.result.original_photo_url))
					this.setOriginalPhoto(action.result.original_photo_url);
				else
					this.setOriginalPhoto("");	
				
				if (hide)
				{
					this.hide();
				}			
			},
			failure: function(form, action) {					

				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});			
	},
	
	setOriginalPhoto : function(url){
		this.originalPhotoUrl = url;
	},
	setPhoto : function(url)
	{
		this.companyPhoto.setPhotoSrc(url);
		this.deleteImageCB.setValue(false);
		this.deleteImageCB.setDisabled(url=='');
	}
	
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: SelectContactDialog.js 19784 2016-01-26 13:56:16Z michaelhart86 $
 * @author Merijn Schering <mschering@intermesh.nl>
 *
 * Params:
 * 
 * linksStore: store to reload after items are linked
 * gridRecords: records from grid to link. They must have a link_id and link_type
 * fromLinks: array with link_id and link_type to link
 */
 
 /**
 * @class GO.dialog.SelectContact
 * @extends Ext.Window
 * A window to select a number of User-Office user Users.
 * 
 * @cfg {Function} handler A function called when the Add or Ok button is clicked. The grid will be passed as argument.
 * @cfg {Object} scope The scope of the handler
 * 
 * @constructor
 * @param {Object} config The config object
 */
 
GO.addressbook.SelectContactDialog = function(config){
	
	Ext.apply(this, config);
	
	this.searchField = new GO.form.SearchField({
		width:320
  });

	this.addressbooksGrid = new GO.addressbook.AddresbooksGrid({
		region:'north',
		height:250,
		store:new GO.data.JsonStore({
			url: GO.url('addressbook/addressbook/store'),
			baseParams: {
				'auth_type' : 'read'
				},
			root: 'results',
			totalProperty: 'total',
			id: 'id',
			fields: ['id','name','owner','checked'],
			remoteSort: true
		})
	});

	this.addressbooksGrid.on('change', function(grid, abooks, records)
	{
		var books = Ext.encode(abooks);
		this.grid.store.baseParams.books=books;
		this.grid.store.load();
	}, this);
	
	
	this.mailingsFilterPanel= new GO.addressbook.AddresslistsMultiSelectGrid({
		id: 'ab-sc-mailingsfilter-panel'
	});

	this.mailingsFilterPanel.on('change', function(grid, addresslist_filter){	
		this.grid.store.baseParams.addresslist_filter = Ext.encode(addresslist_filter);
		this.grid.store.load();		
	}, this);


	var westPanel = new Ext.Panel({
		layout:'border',
		border:false,
		region:'west',
		width:230,
		split:true,
		items:[this.addressbooksGrid,this.mailingsFilterPanel]
	});


	this.grid = this.contactsGrid = new GO.addressbook.ContactsGrid({
		region:'center',
		tbar: [
    GO.lang['strSearch']+': ', ' ', this.searchField,{
				handler: function()
				{
					if(!this.advancedSearchWindow)
					{
						this.advancedSearchWindow = GO.addressbook.advancedSearchWindow = new GO.addressbook.AdvancedSearchWindow();
						this.advancedSearchWindow.on('ok', function(win){

//						this.grid.store.baseParams.advancedQuery=this.searchField.getValue();
						this.searchField.setValue("[ "+GO.addressbook.lang.advancedSearch+" ]");
						this.searchField.setDisabled(true);
						this.grid.store.load();

						}, this)
					}
					this.advancedSearchWindow.show({dataType:'contacts',masterPanel : this});
				},
				text: GO.addressbook.lang.advancedSearch,
				scope: this,
				style:'margin-left:5px;'
			},{
				handler: function()
				{
					this.searchField.setValue("");
					delete this.grid.store.baseParams.advancedQueryData;
					this.searchField.setDisabled(false);
					this.grid.store.load();
				},
				text: GO.lang.cmdReset,
				scope: this
			}
    ]});
    
  //dont filter on address lists when selecting
  delete this.grid.store.baseParams.enable_mailings_filter;

  //don't save filter but send it each time
  this.grid.store.baseParams.disable_filter_save="1";
		
	this.searchField.store=this.grid.store;
	
	var focusSearchField = function(){
		this.searchField.focus(true);
	};
	
	GO.addressbook.SelectContactDialog.superclass.constructor.call(this, {
    layout: 'border',
		modal:false,
		focus: focusSearchField.createDelegate(this),
		height:600,
		width:800,
		closeAction:'hide',
		title: GO.addressbook.lang['strSelectContact'],
		items: [westPanel, this.grid],
		buttons: [
			{
				text: GO.lang['cmdOk'],
				handler: function (){
					this.callHandler(true);
				},
				scope:this
			},
			{
				text: GO.lang['cmdAdd'],
				handler: function (){
					this.callHandler(false);
				},
				scope:this
			},
			{
				text: GO.addressbook.lang.addAllSearchResults,
				handler: function (){
					if(confirm(GO.addressbook.lang.confirmAddAllSearchResults)){
						this.callHandler(true, true);
					}
				},
				scope:this
			},
			{
				text: GO.lang['cmdClose'],
				handler: function(){this.hide();},
				scope: this
			}
		],
                tbar: [{
                        style: " margin-bottom: 10px; ",
                        iconCls: 'btn-add',
			text: GO.addressbook.lang['addEmployee'],
			cls: 'x-btn-text-icon', 
                        handler: function(){
                            if(!this.contactDialog) {
                                this.contactDialog = new GO.addressbook.ContactDialog({});
                                
                            }
                            this.contactDialog.show(0 ,{values: {company_id: this.company_id}});
                        },
                        scope: this
                        
                }] 
    });
};

Ext.extend(GO.addressbook.SelectContactDialog, Ext.Window, {

	show : function(config){		
		
		config = config || {};
		
		if(config.values) {
			this.addressbookId = config.values.addressbookId || 0;
			this.company_id = config.values.company_id || 0;
		} else {
			this.company_id = 0;
			this.addressbookId = 0;
		}
		
		
		this.addressbooksGrid.setDisabled(this.addressbookId>0);
		
		GO.addressbook.SelectContactDialog.superclass.show.call(this);
		
		//if(!this.grid.store.loaded)
		//{
		
		this.mailingsFilterPanel.store.load();

		
		if(!this.addressbooksGrid.store.loaded)
			this.addressbooksGrid.store.load({
				callback:function(){
					var books = this.addressbooksGrid.getSelected();
					this.grid.store.baseParams.books=Ext.encode(books);
					this.grid.store.load();
				},
				scope:this
			});
		else
			this.grid.store.load();
		
		//}
	},
	
	
	//private
	callHandler : function(hide, allResults){
		if(this.handler)
		{
			if(!this.scope)
			{
				this.scope=this;
			}
			
			var handler = this.handler.createDelegate(this.scope, [this.grid, allResults]);
			handler.call();
		}
		if(hide)
		{
			this.hide();
		}
	}	
	
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: SelectCompanyDialog.js 15314 2013-07-26 09:23:02Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 * 
 * Params:
 * 
 * linksStore: store to reload after items are linked
 * gridRecords: records from grid to link. They must have a link_id and link_type
 * fromLinks: array with link_id and link_type to link
 */
 
 /**
 * @class GO.dialog.SelectCompany
 * @extends Ext.Window
 * A window to select a number of User-Office user Users.
 * 
 * @cfg {Function} handler A function called when the Add or Ok button is clicked. The grid will be passed as argument.
 * @cfg {Object} scope The scope of the handler
 * 
 * @constructor
 * @param {Object} config The config object
 */
 
GO.addressbook.SelectCompanyDialog = function(config){
	
	Ext.apply(this, config);
	
	  
  this.searchField = new GO.form.SearchField({
		width:320
  });

	this.addressbooksGrid = new GO.addressbook.AddresbooksGrid({
		region:'north',
		height:250
	});

	this.addressbooksGrid.getSelectionModel().on('rowselect', function(sm, rowIndex, r){
		var record = this.addressbooksGrid.getStore().getAt(rowIndex);
		this.grid.store.baseParams.books='["'+record.get("id")+'"]';
		this.grid.store.load();
	}, this);
	
	
	this.mailingsFilterPanel= new GO.addressbook.AddresslistsMultiSelectGrid({
		id: 'ab-scom-mailingsfilter-panel'
	});

	this.mailingsFilterPanel.on('change', function(grid, addresslist_filter){	
		this.grid.store.baseParams.addresslist_filter = Ext.encode(addresslist_filter);
		this.grid.store.load();		
	}, this);


	var westPanel = new Ext.Panel({
		layout:'border',
		border:false,
		region:'west',
		width:230,
		split:true,
		items:[this.addressbooksGrid,this.mailingsFilterPanel]
	});

		
	this.grid = this.companiesGrid = new GO.addressbook.CompaniesGrid({
		region:'center',
		tbar: [
    GO.lang['strSearch']+': ', ' ', this.searchField,{
				handler: function()
				{
					if(!this.advancedSearchWindow)
					{
						this.advancedSearchWindow = GO.addressbook.advancedSearchWindow = new GO.addressbook.AdvancedSearchWindow();
						this.advancedSearchWindow.on('ok', function(win){

//						this.grid.store.baseParams.advancedQuery=this.searchField.getValue();
						this.searchField.setValue("[ "+GO.addressbook.lang.advancedSearch+" ]");
						this.searchField.setDisabled(true);
						this.grid.store.load();

						}, this)
					}
					this.advancedSearchWindow.show({dataType:'companies',masterPanel : this });
				},
				text: GO.addressbook.lang.advancedSearch,
				scope: this,
				style:'margin-left:5px;'
			},{
				handler: function()
				{
					this.searchField.setValue("");
					delete this.grid.store.baseParams.advancedQueryData;
					this.searchField.setDisabled(false);
					this.grid.store.load();
				},
				text: GO.lang.cmdReset,
				scope: this
			}
    ]});
    
  //dont filter on address lists when selecting
  delete this.grid.store.baseParams.enable_mailings_filter;
		
	this.searchField.store=this.grid.store;
	
	var focusSearchField = function(){
		this.searchField.focus(true);
	};
	
	
	
	
	GO.addressbook.SelectCompanyDialog.superclass.constructor.call(this, {
    layout: 'border',
    focus: focusSearchField.createDelegate(this),
		modal:false,
		height:600,
		width:800,
		closeAction:'hide',
		title: GO.addressbook.lang['strSelectCompany'],
		items: [westPanel,this.grid],
		buttons: [
			{
				text: GO.lang['cmdOk'],
				handler: function (){
					this.callHandler(true);
				},
				scope:this
			},
			{
				text: GO.lang['cmdAdd'],
				handler: function (){
					this.callHandler(false);
				},
				scope:this
			},
			{
				text: GO.addressbook.lang.addAllSearchResults,
				handler: function (){
					if(confirm(GO.addressbook.lang.confirmAddAllSearchResults)){
						this.callHandler(true, true);
					}
				},
				scope:this
			},
			{
				text: GO.lang['cmdClose'],
				handler: function(){this.hide();},
				scope: this
			}
		]
    });
};

Ext.extend(GO.addressbook.SelectCompanyDialog, Ext.Window, {

	show : function(){
		
		this.mailingsFilterPanel.store.load();
		
		if(!this.grid.store.loaded)
		{
			this.grid.store.load();
		}
		GO.addressbook.SelectCompanyDialog.superclass.show.call(this);
	},
	
	//private
	callHandler : function(hide, allResults){
		if(this.handler)
		{
			if(!this.scope)
			{
				this.scope=this;
			}
			
			var handler = this.handler.createDelegate(this.scope, [this.grid, allResults]);
			handler.call();
		}
		if(hide)
		{
			this.hide();
		}
	}	
	
});

GO.addressbook.ContactsGrid = function(config){
	
	if(!config)
	{
		config = {};
	}

	config.paging=true;
	config.border=false;
	
	var fields ={
		fields : ['id','uuid','name','company_name','first_name','middle_name','last_name','title','initials','sex','birthday','age','email','email2','email3','home_phone','work_phone','work_fax','cellular','cellular2','fax','address','address_no','zip','city','state','country','function','department','salutation','ab_name','ctime','mtime','action_date','suffix','color'],
		columns : [
		{
			header: GO.addressbook.lang.id,
			dataIndex: 'id',
			width:20,
			hidden:true
		},{
			header: GO.addressbook.lang.contactUuid,
			dataIndex: 'uuid',
			width:50,
			hidden:true
		},{
			header: GO.lang['strName'], 
			dataIndex: 'name',
			width:200
		},
		{
			header: GO.lang['strCompany'],
			dataIndex: 'company_name',
			width:200
			//sortable:false
		},
		{
			header: GO.lang['strFirstName'],
			dataIndex: 'first_name',
			hidden:true
		},
		{
			header: GO.lang['strMiddleName'],
			dataIndex: 'middle_name',
			hidden:true
		},
		{
			header: GO.lang['strLastName'],
			dataIndex: 'last_name',
			hidden:true
		},
		{
			header: GO.lang['strTitle'],
			dataIndex: 'title',
			hidden:true
		},
		{
			header: GO.lang['strInitials'],
			dataIndex: 'initials',
			hidden:true
		},{
			header: GO.lang['strSuffix'],
			dataIndex: 'suffix',
			width:50,
			hidden:true
		},
		{
			header: GO.lang['strSex'],
			dataIndex: 'sex',
			hidden:true,
			renderer: function(value,meta){

				if (value === 'M') { 
					meta.css += ' male-cell'; 
					return GO.addressbook.lang.male; 
				} 

				if (value === 'F') {	
					meta.css += 'female-cell'; 
					return GO.addressbook.lang.female;
				}

				return value;
			}
		},
		{
			header: GO.lang['strBirthday'],
			dataIndex: 'birthday',
			hidden:true
		},{
			header: GO.lang.age,
			dataIndex: 'age',
			hidden:true
		},
		{
			header: GO.lang['strEmail'],
			dataIndex: 'email',
			width: 150
		},
		{
			header: GO.lang['strEmail'] + ' 2',
			dataIndex: 'email2',
			width: 150,
			hidden:true
		},
		{
			header: GO.lang['strEmail'] + ' 3',
			dataIndex: 'email3',
			width: 150,
			hidden:true
		},
		{
			header: GO.lang['strPhone'],
			dataIndex: 'home_phone',
			width: 100
		},
		{
			header: GO.lang['strWorkPhone'],
			dataIndex: 'work_phone',
			width: 100
		},
		{
			header: GO.lang['strWorkFax'],
			dataIndex: 'work_fax',
			width: 100,
			hidden:true
		},
		{
			header: GO.lang['strCellular'],
			dataIndex: 'cellular',
			width: 100
		},
		{
			header: GO.lang['cellular2'],
			dataIndex: 'cellular2',
			width: 100,
			hidden:true
		},
		{
			header: GO.lang['strFax'],
			dataIndex: 'fax',
			width: 100,
			hidden:true
		},
		{
			header: GO.lang['strAddress'],
			dataIndex: 'address',
			hidden:true
		},
		{
			header: GO.lang['strAddressNo'],
			dataIndex: 'address_no',
			hidden:true
		},
		{
			header: GO.lang['strZip'],
			dataIndex: 'zip',
			hidden:true
		},
		{
			header: GO.lang['strCity'],
			dataIndex: 'city',
			hidden:true
		},
		{
			header: GO.lang['strState'],
			dataIndex: 'state',
			hidden:true
		},
		{
			header: GO.lang['strCountry'],
			dataIndex: 'country',
			hidden:true
		},
		{
			header: GO.lang['strFunction'],
			dataIndex: 'function',
			hidden:true
		},
		{
			header: GO.lang['strDepartment'],
			dataIndex: 'department',
			hidden:true
		},
		{
			header: GO.lang['strSalutation'],
			dataIndex: 'salutation',
			hidden:true
		},{
			header: GO.addressbook.lang.addressbook,
			dataIndex: 'ab_name',
			hidden:true,
			sortable:false
		},
		{
			header: GO.lang.strMtime,
			dataIndex:'mtime',
			hidden:true,
			width:110
		},{
			header: GO.lang.strCtime,
			dataIndex:'ctime',
			hidden:true,
			width:110
		},{
			header: GO.addressbook.lang['actionDate'],
			dataIndex:'action_date',
			width:100
		}
		]
	}
	
	if(GO.customfields)
		GO.customfields.addColumns("GO\\Addressbook\\Model\\Contact", fields);
	
	config.store = new GO.data.JsonStore({
		url: GO.url('addressbook/contact/store'),
		baseParams: {
			filters:1,
			addresslist_filters:1
		},
		root: 'results',
		id: 'id',
		totalProperty:'total',
		fields: fields.fields,
		remoteSort: true
	});

	config.store.on('load', function()
	{
		if(config.store.reader.jsonData.feedback)
		{
			alert(config.store.reader.jsonData.feedback);
		}
	},this);
	
	config.cm=new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:fields.columns
	});
	
	config.view=new Ext.grid.GridView({
		emptyText: GO.lang.strNoItems,
		getRowClass: function(record, rowIndex, rp, ds){

			if(!rp.tstyle)
				rp.tstyle = '';

			if(!rp.initialstyle)
				rp.initialstyle = rp.tstyle;

			if(record.data.color){				
				rp.tstyle += "color:#"+record.data.color+";";
			} else {
				rp.tstyle= rp.initialstyle;
			}

			return;
		}
	}),
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	
	config.enableDragDrop=true;
	config.ddGroup='AddressBooksDD';

	config.tbar = config.tbar || [];
	config.tbar.unshift(this.currentActionsButton = new Ext.Button({
			text: GO.addressbook.lang['selectCurrentActions'],
//			disabled: true,
			tooltip: GO.addressbook.lang['showActieveToolTip'],
			enableToggle: true
		}));

//		config.bordertrue;
	GO.addressbook.ContactsGrid.superclass.constructor.call(this, config);
	
	this.currentActionsButton.on('toggle',function(button,pressed){
		this.store.baseParams['onlyCurrentActions'] = pressed ? 1 : 0;
		this.store.load();
	}, this);
	
};


Ext.extend(GO.addressbook.ContactsGrid, GO.grid.GridPanel, {
    applyAddresslistFilters : function()
    {
      this.store.setBaseParam('addresslist_filters', 1);
    }
});


GO.addressbook.CompaniesGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
	config.border=false;
	config.paging=true;
	
	var fields ={
		fields:['id','name','name2','homepage','email','phone','fax','address','address_no','zip','city','state','country','post_address','post_address_no','post_city','post_state','post_country','post_zip','bank_no','vat_no','invoice_email','ctime','mtime','iban','crn','ab_name','color'],
		columns:[
		{
			header: GO.addressbook.lang.id,
			dataIndex: 'id',
			width:20,
			hidden:true,
			id: 'id'
		},{
			header: GO.lang['strName'],
			dataIndex: 'name',
			width:200,
			id: 'name'
		},{
			header: GO.lang['strName2'],
			dataIndex: 'name2',
			hidden:true,
			width:200,
			id: 'name2'
		},
		{
			header: GO.lang['strEmail'],
			dataIndex: 'email',
			width: 150,
			id: 'email'
		},
		{
			header: GO.lang['strHomepage'],
			dataIndex: 'homepage',
			width: 100,
			hidden:true,
			id: 'homepage'
		},
		{
			header: GO.lang['strPhone'],
			dataIndex: 'phone',
			width: 100,
			id: 'phone'
		},
		{
			header: GO.lang['strFax'],
			dataIndex: 'fax',
			width: 80,
			hidden:true,
			id: 'fax'
		},
		{
			header: GO.lang['strAddress'],
			dataIndex: 'address',
			hidden:true,
			id: 'address'
		},
		{
			header: GO.lang['strAddressNo'],
			dataIndex: 'address_no',
			hidden:true,
			id: 'address_no'
		},
		{
			header: GO.lang['strZip'],
			dataIndex: 'zip',
			hidden:true,
			id: 'zip'
		},
		{
			header: GO.lang['strCity'],
			dataIndex: 'city',
			width:150,
			id: 'city'
		},
		{
			header: GO.lang['strState'],
			dataIndex: 'state',
			width: 80,
			hidden:true,
			id: 'state'
		},
		{
			header: GO.lang['strCountry'],
			dataIndex: 'country',
			hidden:true,
			id: 'country'
		},
		{
			header: GO.lang['strPostAddress'],
			dataIndex: 'post_address',
			hidden:true,
			id: 'post_address'
		},
		{
			header: GO.lang['strPostAddressNo'],
			dataIndex: 'post_address_no',
			hidden:true,
			id: 'post_address_no'
		},
		{
			header: GO.lang['strPostZip'],
			dataIndex: 'post_zip',
			hidden:true,
			id: 'post_zip'
		},
		{
			header: GO.lang['strPostCity'],
			dataIndex: 'post_city',
			hidden:true,
			id: 'post_city'
		},
		{
			header: GO.lang['strPostState'],
			dataIndex: 'post_state',
			width: 80,
			hidden:true,
			id: 'post_state'
		},
		{
			header: GO.lang['strPostCountry'],
			dataIndex: 'post_country',
			hidden:true,
			id: 'post_country'
		},
		{
			header: GO.addressbook.lang['cmdFormLabelBankNo'],
			dataIndex: 'bank_no',
			hidden:true,
			id: 'bank_no'
		},{
			header: GO.addressbook.lang['bankBicNo'],
			dataIndex: 'bank_bic',
			hidden:true,
			id: 'bank_bic'
		},{
			header: GO.addressbook.lang.iban,
			dataIndex: 'iban',
			hidden:true,
			id: 'iban'
		},{
			header: GO.addressbook.lang.crn,
			dataIndex: 'crn',
			hidden:true,
			id: 'crn'
		},
		{
			header: GO.addressbook.lang['cmdFormLabelVatNo'],
			dataIndex: 'vat_no',
			hidden:true,
			id: 'vat_no'
		},
		{
			header: GO.addressbook.lang['cmdFormLabelInvoiceEmail'],
			dataIndex: 'invoice_email',
			hidden:true,
			id: 'invoice_email'
		},{
			header: GO.lang.strMtime,
			dataIndex:'mtime',
			hidden:true,
			width:110,
			id: 'mtime'
		},{
			header: GO.lang.strCtime,
			dataIndex:'ctime',
			hidden:true,
			width:110,
			id: 'ctime'
		},{
			header: GO.addressbook.lang.addressbook,
			dataIndex: 'ab_name',
			hidden:true,
			id: 'ab_name'
		}
		]
	};

	
	if(GO.customfields)
	{
		GO.customfields.addColumns("GO\\Addressbook\\Model\\Company", fields);
	}
	
	config.store = new GO.data.JsonStore({
		url: GO.url('addressbook/company/store'),
		baseParams: {
			filters:1,
			addresslist_filters:1
		},
		root: 'results',
		id: 'id',
		totalProperty:'total',
		fields: fields.fields,
		remoteSort: true
	});

	config.store.on('load', function()
	{
		if(config.store.reader.jsonData.feedback)
		{
			alert(config.store.reader.jsonData.feedback);
		}
	},this);

	var companiesColumnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:fields.columns
	});
	
	config.cm=companiesColumnModel;
	
	config.view=new Ext.grid.GridView({
		emptyText: GO.lang.strNoItems,
		getRowClass: function(record, rowIndex, rp, ds){

			if(!rp.tstyle)
				rp.tstyle = '';

			if(!rp.initialstyle)
				rp.initialstyle = rp.tstyle;

			if(record.data.color){				
				rp.tstyle += "color:#"+record.data.color+";";
			} else {
				rp.tstyle= rp.initialstyle;
			}

			return;
		}
	}),
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	
	config.enableDragDrop=true;
	config.ddGroup='AddressBooksDD';
	
	GO.addressbook.CompaniesGrid.superclass.constructor.call(this, config);	
};


Ext.extend(GO.addressbook.CompaniesGrid, GO.grid.GridPanel, {	
	applyAddresslistFilters : function()
    {
      this.store.setBaseParam('addresslist_filters', 1);
    }
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: SearchPanel.js 15954 2013-10-17 12:04:36Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.SearchPanel = function(config)
	{
		if(!config){
			config = {};
		}
	
		config.layout='table';
		config.split=false;
		config.height=40;
		config.forceLayout=true;
		config.baseCls='x-plain';

		config.keys= [{
			key: Ext.EventObject.ENTER,
			fn: function(){
				this.selectedLetter='';
				this.alphabetView.clearSelections();
				this.fireQueryEvent();
			},
			scope:this
		}];

		this.alphabetArray = GO.addressbook.lang['alphabet'].split(",");
  
		var alphabetStoreData = new Array();
		alphabetStoreData.push({
			value: '[0-9]'
		});
 	
		for(var i = 0;i<this.alphabetArray.length;i++)
		{
			alphabetStoreData.push({
				value: this.alphabetArray[i]
				});
		}
    
		var tpl = new Ext.XTemplate(
			'<tpl for=".">',
			'<span class="letter" onclick="">{value}</span>',
			'</tpl>'
			);
  
		this.selectedLetter = 0;
		this.alphabetView = new Ext.DataView({
			height:30,
			store: new Ext.data.JsonStore({
				fields: ['value'],
				data : alphabetStoreData
			}),
			tpl: tpl,
			singleSelect: true,
			cls: 'alphabet-view',
			overClass:'alphabet-view-over',
			selectedClass: 'alphabet-view-selected',
			itemSelector:'span.letter'
		});
 	
		this.alphabetView.on('selectionchange',
			function(dataview, arraySelections)
			{
				if(arraySelections[0])
				{
					this.selectedLetter = arraySelections[0].innerHTML;
					this.queryField.setValue("");
					this.fireQueryEvent();
				}
			},
			this);
 	
		this.alphabetView.on('containerclick',
			function(dataview, e)
			{
				return false;
			},
			this);
 	
 	
 	
		this.queryField = new Ext.form.TextField({
			name: 'query',
			width: 200,
			emptyText:GO.lang.strSearch+ ' '+GO.addressbook.lang['cmdFormSearchFourth']
		});
 	
		config.defaults={
			border: false,
			cls:'ab-search-form-panel',
			baseCls:'x-plain',
			forceLayout:true
		};
		config.items=[{
			items: this.alphabetView
		},{
			items: this.queryField
		}
		,
		{
			items: new Ext.Button({
				handler: function()
				{
					this.selectedLetter='';
					this.alphabetView.clearSelections();
					this.fireQueryEvent();
				},
				text: GO.lang.strSearch,
				scope: this
			})
		},{
			items: new Ext.Button({
				handler: function()
				{
					this.selectedLetter='';
					this.alphabetView.clearSelections();
					this.queryField.setValue("");
									
					this.fireQueryEvent();
				},
				text: GO.lang.cmdReset,
				scope: this
			})
		}];
	
		GO.addressbook.SearchPanel.superclass.constructor.call(this, config);
	
		this.addEvents({
			queryChange : true
		});
	}

Ext.extend(GO.addressbook.SearchPanel, Ext.Panel, {
	selectedLetter : ''
	,
	fireQueryEvent : function(){
		var params = {
			clicked_letter : this.selectedLetter,
			query : this.queryField.getValue(),
			advancedQueryData : ''
		};
		
		this.fireEvent('queryChange', params);
	}
	
});

GO.addressbook.ContactProfilePanel = function(config)
	{
		config = config || {};
		Ext.apply(config);

		if(!config.forUser){		
			this.formFirstName = new Ext.form.TextField(
			{
				fieldLabel: GO.lang['strFirstName'],
				name: 'first_name',
				panel: this,
				validateValue: function(val) {
					var bool = (val!='' || this.panel.formLastName.getValue()!='');
					if(!bool)
					{
						this.markInvalid(this.blankText);
					}else
					{
						this.panel.formLastName.clearInvalid();
					}
					return bool;
				}
			});

			this.formMiddleName = new Ext.form.TextField(
			{
				fieldLabel: GO.lang.strMiddleName,
				name: 'middle_name'
			});

			this.formLastName = new Ext.form.TextField(
			{
				fieldLabel: GO.lang.strLastName,
				name: 'last_name',
				panel: this,
				validateValue: function(val) {
					var bool = (val!='' || this.panel.formFirstName.getValue()!='');
					if(!bool)
					{
						this.markInvalid(this.blankText);
					}else
					{
						this.panel.formFirstName.clearInvalid();
					}
					return bool;
				}
			});
		}
	
		this.formTitle = new Ext.form.TextField(
		{
			fieldLabel: GO.lang.strTitle,
			name: 'title'
		});
		
		this.formAfternameTitle = new Ext.form.TextField(
		{
			fieldLabel: GO.lang.strSuffix,
			name: 'suffix'
		});
	
		this.formInitials = new Ext.form.TextField(
		{
			fieldLabel: GO.lang.strInitials,
			name: 'initials'
		});
	
		this.sexCombo = new GO.form.ComboBox({
			fieldLabel: GO.lang.strSex,
			hiddenName:'sex',
			store: new Ext.data.SimpleStore({
				fields: ['value', 'text'],
				data : [
				['M', GO.lang['strMale']],
				['F', GO.lang['strFemale']]
				]
        
			}),
			value:'M',
			valueField:'value',
			displayField:'text',
			mode: 'local',
			triggerAction: 'all',
			editable: false,
			selectOnFocus:true,
			forceSelection: true
		});

		this.formSalutation = new Ext.form.TextField(
		{
			fieldLabel: GO.addressbook.lang['cmdFormLabelSalutation'],
			name: 'salutation'
		});
	
		this.formBirthday = new Ext.form.DateField({
			fieldLabel: GO.lang['strBirthday'],
			name: 'birthday',
			format: GO.settings['date_format']
		});
	
		if(!config.forUser){
			this.formEmail = new Ext.form.TextField(
			{
				fieldLabel: GO.lang['strEmail'],
				name: 'email',
				vtype:'emailAddress'

			});
		}
	
		this.formEmail2 = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strEmail'] + ' 2',
			name: 'email2',
			vtype:'emailAddress'
		});
	
		this.formEmail3 = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strEmail'] + ' 3',
			name: 'email3',
			vtype:'emailAddress'
		});
	
		this.formHomePhone = new Ext.form.TextField(
		{
			fieldLabel: GO.addressbook.lang['contactHome_phone'],
			name: 'home_phone'
		});
	
		this.formFax = new Ext.form.TextField(
		{
			fieldLabel: GO.addressbook.lang['contactFax'],
			name: 'fax'
		});
	
		this.formCellular = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strCellular'],
			name: 'cellular'
		});
		
		this.formCellular2 = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['cellular2'],
			name: 'cellular2'
		});
		
		this.formHomepage = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strHomepage'],
			name: 'homepage'
		});
	
														
	
		this.formAddress = new Ext.form.TextArea(
		{
			fieldLabel: GO.lang['strAddress'],
			name: 'address',
			height: 50,
			maxLength: 255
		});
	
		this.formAddressNo = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strAddressNo'],
			name: 'address_no'
		});
	
		this.formPostal = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strZip'],
			name: 'zip'
		});

		this.formCity = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strCity'],
			name: 'city'
		});

		this.formState = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strState'],
			name: 'state'
		});
	
		this.formCountry = new GO.form.SelectCountry({
			fieldLabel: GO.lang['strCountry'],
			name: 'country_text',
			hiddenName: 'country'
		});



		this.formCompany = new GO.addressbook.SelectCompany({
			fieldLabel: GO.lang['strCompany'],
			name: 'company',
			hiddenName: 'company_id',
			emptyText: GO.addressbook.lang['cmdFormCompanyEmptyText'],
			addressbook_id: this.addressbook_id
		});
	
		this.formDepartment = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strDepartment'],
			name: 'department'
		});

		this.formFunction = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strFunction'],
			name: 'function'
		});

		this.formWorkPhone = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strWorkPhone'],
			name: 'work_phone'
		});	

		this.formWorkFax = new Ext.form.TextField(
		{
			fieldLabel: GO.lang['strWorkFax'],
			name: 'work_fax'
		});


		this.formAddressBooks = new GO.addressbook.SelectAddressbook({
			fieldLabel: GO.addressbook.lang['cmdFormLabelAddressBooks'],
			store: GO.addressbook.writableAddressbooksStore,			
			selectOnFocus:true,
			forceSelection: true,
			allowBlank: false,
			anchor:'100%'
		});
		
		if(!config.forUser){
			this.formAddressBooks.on('beforeselect', function(combo, record)
			{
				if(this.formCompany.getValue()==0 || confirm(GO.addressbook.lang.moveAll))
				{
					this.setAddressbookID(record.data.id);
					this.setSalutation();
					return true;
				}else
				{
					return false;
				}
			}, this);
		

			this.formAddressBooks.on('select', function(){
				this.setSalutation(true)
			}, this);

			this.formFirstName.on('blur', function(){
				this.setSalutation(false)
			}, this);
			this.formMiddleName.on('blur', function(){
				this.setSalutation(false)
			}, this);
			this.formLastName.on('blur', function(){
				this.setSalutation(false)
			}, this);
				
			this.formFirstName.on('change', function(){
				this.setSalutation(true)
			}, this);
			this.formMiddleName.on('change', function(){
				this.setSalutation(true)
			}, this);
			this.formLastName.on('change', function(){
				this.setSalutation(true)
			}, this);
		}
		this.formInitials.on('blur', function(){
			this.setSalutation(false)
		}, this);
		this.formTitle.on('blur', function(){
			this.setSalutation(false)
		}, this);
		this.sexCombo.on('change', function(){
			this.setSalutation(true)
		}, this);

		
		this.formInitials.on('change', function(){
			this.setSalutation(true)
		}, this);
		this.formTitle.on('change', function(){
			this.setSalutation(true)
		}, this);

		this.addressbookFieldset = new Ext.form.FieldSet(
		{
			xtype: 'fieldset',
			title: GO.addressbook.lang['cmdFieldsetSelectAddressbook'],
			collapsed: false,
			items: this.formAddressBooks
		});
		
	
		this.personalFieldset = new Ext.form.FieldSet(
		{
			xtype: 'fieldset',
			title: GO.addressbook.lang['cmdFieldsetPersonalDetails'],
			collapsed: false,
			defaults: {
				border: false,
				anchor:'100%'
			}
		});
		
		if(!config.forUser){
			this.personalFieldset.add([
				this.formFirstName,this.formMiddleName,this.formLastName
				]);	
		}
		
		this.personalFieldset.add([
			this.formTitle,this.formInitials,this.formAfternameTitle,this.sexCombo,
			this.formSalutation,
			this.formBirthday							
			]);
	
		this.addressFieldset = new Ext.form.FieldSet(
		{
			xtype: 'fieldset',
			title: GO.addressbook.lang['cmdFieldsetAddress'],
			collapsed: false,
			defaults: {
				border: false,
				anchor:'100%'
			},
			items: [this.formAddress,this.formAddressNo,this.formPostal,this.formCity,this.formState,this.formCountry]
		});
	
		this.contactFieldset =new Ext.form.FieldSet(
		{
			xtype: 'fieldset',
			title: GO.addressbook.lang['cmdFieldsetContact'],
			collapsed: false,
			defaults: {
				border: false,
				anchor:'100%'
			}
		});
		
		
		if(!config.forUser){
			this.contactFieldset.add(this.formEmail);	
		}
		
		this.contactFieldset.add([this.formEmail2,this.formEmail3,this.formHomePhone,this.formFax,this.formCellular,this.formCellular2,this.formWorkPhone,this.formWorkFax,this.formHomepage]);
		
		
		this.workFieldset = new Ext.form.FieldSet(
		{
			xtype: 'fieldset',
			title: GO.addressbook.lang['cmdFieldsetWork'],
			collapsed: false,
			defaults: {
				border: false,
				anchor:'100%'
			},
			items: [this.formCompany,this.formDepartment,this.formFunction]
		});
  
		this.actionDateFieldset = new Ext.form.FieldSet({
			collapsed: false,
			title: GO.lang.other,
			defaults: {
				border: false,
				anchor: '100%'
			},
			items: [
				this.formActionDateField = new Ext.form.DateField({
					name : 'action_date',
					format : GO.settings['date_format'],
					allowBlank : true,
					fieldLabel: GO.addressbook.lang['actionDate']
				}),
				this.colorField = new GO.form.ColorField({
					fieldLabel : GO.lang.color,
					value : "FFFFFF",
					width:200,
					name : 'color',
					colors : [
					'EBF1E2',
					'95C5D3',
					'FFFF99',
					'A68340',
					'82BA80',
					'F0AE67',
					'66FF99',
					'CC0099',
					'CC99FF',
					'996600',
					'999900',
					'FF0000',
					'FF6600',
					'FFFF00',
					'FF9966',
					'FF9900',
					'FF6666',
					'CCFFCC',
					/* Line 1 */
					'FB0467',
					'D52A6F',
					'CC3370',
					'C43B72',
					'BB4474',
					'B34D75',
					'AA5577',
					'A25E79',
					/* Line 2 */
					'FF00CC',
					'D52AB3',
					'CC33AD',
					'C43BA8',
					'BB44A3',
					'B34D9E',
					'AA5599',
					'A25E94',
					/* Line 3 */
					'CC00FF',
					'B32AD5',
					'AD33CC',
					'A83BC4',
					'A344BB',
					'9E4DB3',
					'9955AA',
					'945EA2',
					/* Line 4 */
					'6704FB',
					'6E26D9',
					'7033CC',
					'723BC4',
					'7444BB',
					'754DB3',
					'7755AA',
					'795EA2',
					/* Line 5 */
					'0404FB',
					'2626D9',
					'3333CC',
					'3B3BC4',
					'4444BB',
					'4D4DB3',
					'5555AA',
					'5E5EA2',
					/* Line 6 */
					'0066FF',
					'2A6ED5',
					'3370CC',
					'3B72C4',
					'4474BB',
					'4D75B3',
					'5577AA',
					'5E79A2',
					/* Line 7 */
					'00CCFF',
					'2AB2D5',
					'33ADCC',
					'3BA8C4',
					'44A3BB',
					'4D9EB3',
					'5599AA',
					'5E94A2',
					/* Line 8 */
					'00FFCC',
					'2AD5B2',
					'33CCAD',
					'3BC4A8',
					'44BBA3',
					'4DB39E',
					'55AA99',
					'5EA294',
					/* Line 9 */
					'00FF66',
					'2AD56F',
					'33CC70',
					'3BC472',
					'44BB74',
					'4DB375',
					'55AA77',
					'5EA279',
					/* Line 10 */
					'00FF00', '2AD52A',
					'33CC33',
					'3BC43B',
					'44BB44',
					'4DB34D',
					'55AA55',
					'5EA25E',
					/* Line 11 */
					'66FF00', '6ED52A', '70CC33',
					'72C43B',
					'74BB44',
					'75B34D',
					'77AA55',
					'79A25E',
					/* Line 12 */
					'CCFF00', 'B2D52A', 'ADCC33', 'A8C43B',
					'A3BB44',
					'9EB34D',
					'99AA55',
					'94A25E',
					/* Line 13 */
					'FFCC00', 'D5B32A', 'CCAD33', 'C4A83B',
					'BBA344', 'B39E4D',
					'AA9955',
					'A2945E',
					/* Line 14 */
					'FF6600', 'D56F2A', 'CC7033', 'C4723B',
					'BB7444', 'B3754D', 'AA7755',
					'A2795E',
					/* Line 15 */
					'FB0404', 'D52A2A', 'CC3333', 'C43B3B',
					'BB4444', 'B34D4D', 'AA5555', 'A25E5E',
					/* Line 16 */
					'FFFFFF', '949494', '808080', '6B6B6B',
					'545454', '404040', '292929', '000000']
				})
			]
		});
 
			var leftColItems = [];
		
		//if(!config.forUser)
			leftColItems.push(this.addressbookFieldset);
		
		leftColItems.push(this.personalFieldset,this.workFieldset,this.actionDateFieldset);
		
	
		this.title= GO.addressbook.lang['cmdPanelContact'];
		this.autoScroll=true;
		this.layout= 'column';
		this.labelWidth=125;
		
		this.defaults={
			border: false			
			
		};
		
		this.items= [
		{
			defaults:{
				style:'margin-right:10px'
			},
			itemId:'leftCol',
			columnWidth: .5,
			items: leftColItems			
		},{
			itemId:'rightCol',
			columnWidth: .5,
			items: [
			this.contactFieldset,
			this.addressFieldset
			]
		}
		];
	
		GO.addressbook.ContactProfilePanel.superclass.constructor.call(this);
	}

Ext.extend(GO.addressbook.ContactProfilePanel, Ext.Panel,{
	setSalutation : function(overwrite)
	{
		if(overwrite || this.formSalutation.getValue()==''){
			var firstName = this.formFirstName.getValue();
			var middleName = this.formMiddleName.getValue();
				middleName = !GO.util.empty(middleName) ? middleName[0].toUpperCase()+middleName.substring(1) : '';
			var lastName = this.formLastName.getValue();
				lastName = !GO.util.empty(lastName) ? lastName[0].toUpperCase()+lastName.substring(1) : '';
			var initials = this.formInitials.getValue();
			var title = this.formTitle.getValue();
			var record = this.formAddressBooks.store.getById(this.formAddressBooks.getValue());
			var sal = record.get('default_salutation');

			var sex = sal.slice(sal.indexOf('[')+1, sal.indexOf(']'));
			var sex_split = sex.split('/');
			var gender = (this.sexCombo.getValue() == 'M')? sex_split[0] : sex_split[1];

			sal = sal.replace('['+sex+']', gender);
			sal = sal.replace('{first_name}', firstName);
			sal = sal.replace('{middle_name}', middleName);
			sal = sal.replace('{last_name}', lastName);
			sal = sal.replace('{initials}', initials);
			sal = sal.replace('{title}', title);
			sal = sal.replace(/\s+/g, ' ');

			this.formSalutation.setValue(sal);
		}
	},
	setAddressbookID : function(addressbook_id)
	{
		this.formAddressBooks.setValue(addressbook_id);		
		this.formCompany.store.baseParams['addressbook_id'] = addressbook_id;
		this.formCompany.clearLastSearch();

//		if (GO.customfields) {
//			var allowed_cf_categories = this.formAddressBooks.store.getById(addressbook_id).data.allowed_cf_categories.split(',');
//			GO.addressbook.contactDialog.updateCfTabs(allowed_cf_categories);
//		}
	},
	setValues : function(record)
	{
		this.formFirstName.setValue(record.name);
		this.formEmail.setValue(record.email);
		this.formHomePhone.setValue(record.phone);
		this.formCompany.setValue(record.company);
	}

});

GO.addressbook.CompanyProfilePanel = function(config)
{
	Ext.apply(config);
	
	
	this.formAddress = new Ext.form.TextArea(
	{
		fieldLabel: GO.lang['strAddress'], 
		name: 'address',
		height: 50,
		maxLength: 255,
		listeners: {
			change:function(field, v)
			{
				if(this.formPostAddress.getValue()=='')
				{
					this.formPostAddress.setValue(v);
				}
			},
			scope:this
		}
	});
					
	this.formAddressNo = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strAddressNo'], 
		name: 'address_no',
		listeners: {
			change:function(field, v)
			{
				if(this.formPostAddressNo.getValue()=='')
				{
					this.formPostAddressNo.setValue(v);
				}
			},
			scope:this
		}		
	});
					
	this.formZip = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strZip'], 
		name: 'zip',
		listeners: {
			change:function(field, v)
			{
				if(this.formPostZip.getValue()=='')
				{
					this.formPostZip.setValue(v);
				}
			},
			scope:this
		}
	});
					
	this.formCity = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strCity'], 
		name: 'city',
		listeners: {
			change:function(field, v)
			{
				if(this.formPostCity.getValue()=='')
				{
					this.formPostCity.setValue(v);
				}
			},
			scope:this
		}
	});
					
	this.formState = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strState'], 
		name: 'state',
		listeners: {
			change:function(field, v)
			{
				if(this.formPostState.getValue()=='')
				{
					this.formPostState.setValue(v);
				}
			},
			scope:this
		}
	});

	this.formCountry = new GO.form.SelectCountry({
		fieldLabel: GO.lang['strCountry'],
		name: 'country_text',
		hiddenName: 'country',
		listeners:{
			
			change:function(field, v)
			{
				if(this.formPostCountry.getValue()=='')
				{
					this.formPostCountry.setValue(v);					
				}
			},
			scope:this
		}
	});
	
	/*
	 * 
	 * 		POST ADDRESS
	 * 
	 */
	 
	this.btnCopyVisitAddress = new Ext.Button({
		text: GO.addressbook.lang.copyToPostAddress,
		disabled:false,
		fieldLabel: " ",
		labelSeparator: "",
		handler:function(){
			this.copyVisitToPostAddress();
		},
		scope:this
	});
	 	 
	this.formPostAddress = new Ext.form.TextArea(
	{
		fieldLabel: GO.lang['strAddress'], 
		name: 'post_address',
		height: 50,
		maxLength: 255
	});
					
	this.formPostAddressNo = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strAddressNo'], 
		name: 'post_address_no'
	});
					
	this.formPostZip = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strZip'], 
		name: 'post_zip'
	});
					
	this.formPostCity = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strCity'], 
		name: 'post_city'
	});
					
	this.formPostState = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strState'], 
		name: 'post_state'
	});
	
	this.formPostCountry = new GO.form.SelectCountry({
		fieldLabel: GO.lang['strCountry'],
		name: 'post_country_text',
		hiddenName: 'post_country'
	});
					 
	this.formName = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strName'], 
		name: 'name',
		allowBlank:false
	});

	this.formName2 = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strName2'],
		name: 'name2'
	});
		
	this.formPhone = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strPhone'], 
		name: 'phone', 
		allowBlank: true,
		labelSeparator: this.separator,
		width: this.widthLeftColumn
	});

	this.formFax = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strFax'], 
		name: 'fax'
	});
	
	this.formEmail = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strEmail'], 
		name: 'email',
		vtype:'emailAddress'
	});				
		
	this.formHomepage = new Ext.form.TextField(
	{
		fieldLabel: GO.lang['strHomepage'],
		name: 'homepage'
	});	
	
	this.formBankNo = new Ext.form.TextField(
	{
		fieldLabel: GO.addressbook.lang['cmdFormLabelBankNo'],
		name: 'bank_no'
	});	
	
	this.formBankBIC = new Ext.form.TextField(
	{
		fieldLabel: GO.addressbook.lang['bankBicNo'],
		name: 'bank_bic'
	});	

	this.formVatNo = new Ext.form.TextField(
	{
		fieldLabel: GO.addressbook.lang['cmdFormLabelVatNo'],
		name: 'vat_no'
	});
	
	this.formInvoiceEmail = new Ext.form.TextField(
	{
		fieldLabel: GO.addressbook.lang['cmdFormLabelInvoiceEmail'],
		name: 'invoice_email',
		vtype:'emailAddress'
	});
	
	/*
	 * 
	 * 		ADDRESSBOOK
	 * 
	 */					
	
	this.formAddressBooks = new GO.addressbook.SelectAddressbook({
			fieldLabel: GO.addressbook.lang['cmdFormLabelAddressBooks'],
			store: GO.addressbook.writableAddressbooksStore,
			selectOnFocus:true,
			forceSelection: true,
			allowBlank: false,
			anchor:'100%'
		});
	this.formAddressBooks.on('beforeselect', function(combo, record) 	
	{
		if(this.company_id>0)
		{
			return confirm(GO.addressbook.lang.moveAll);
		}
	}, this);	

	
	this.addressbookFieldset = new Ext.form.FieldSet({
		title: GO.addressbook.lang['cmdFieldsetSelectAddressbook'],
		autoHeight: true,
		border: true,
		collapsed: false,
		items:this.formAddressBooks
	});
	
	this.companyFieldset = new Ext.form.FieldSet({
		title: GO.addressbook.lang['cmdFieldsetCompanyDetails'],
		autoHeight: true,
		collapsed: false,
		border: true,
		defaults: { border: false, anchor: '100%' },
		items: [
			this.formName,
			this.formName2,
			this.formPhone,
			this.formFax,
			this.formEmail,
			this.formHomepage,
			this.formBankNo,
			this.formBankBIC,
			{
				xtype:'textfield',
				fieldLabel:GO.addressbook.lang.iban,
				name:'iban'
			},{
				xtype:'textfield',
				fieldLabel:GO.addressbook.lang.crn,
				name:'crn'
			},
			this.formVatNo,
			this.formInvoiceEmail
		]
	});
	
	this.visitAddressFieldset = new Ext.form.FieldSet({
		title: GO.addressbook.lang['cmdFieldsetVisitAddress'],
		autoHeight: true,
		collapsed: false,
		border: true,
		defaults: { border: false, anchor: '100%' },
		items: [
			this.formAddress,
			this.formAddressNo,
			this.formZip,
			this.formCity,
			this.formState,
			this.formCountry,
			this.btnCopyVisitAddress
		]
	});
	
	this.postAddressFieldset = new Ext.form.FieldSet({
		title: GO.addressbook.lang['cmdFieldsetPostAddress'], 
		autoHeight: true,
		collapsed: false,
		border: true,
		defaults: { border: false, anchor: '100%'},
		items: [
			this.formPostAddress,
			this.formPostAddressNo,
			this.formPostZip,
			this.formPostCity,
			this.formPostState,
			this.formPostCountry
		]
	});


this.otherFieldset = new Ext.form.FieldSet({
			collapsed: false,
			title: GO.lang.other,
			defaults: {
				border: false,
				anchor: '100%'
			},
			items: [
				this.colorField = new GO.form.ColorField({
					fieldLabel : GO.lang.color,
					value : "FFFFFF",
					width:200,
					name : 'color',
					colors : [
					'EBF1E2',
					'95C5D3',
					'FFFF99',
					'A68340',
					'82BA80',
					'F0AE67',
					'66FF99',
					'CC0099',
					'CC99FF',
					'996600',
					'999900',
					'FF0000',
					'FF6600',
					'FFFF00',
					'FF9966',
					'FF9900',
					'FF6666',
					'CCFFCC',
					/* Line 1 */
					'FB0467',
					'D52A6F',
					'CC3370',
					'C43B72',
					'BB4474',
					'B34D75',
					'AA5577',
					'A25E79',
					/* Line 2 */
					'FF00CC',
					'D52AB3',
					'CC33AD',
					'C43BA8',
					'BB44A3',
					'B34D9E',
					'AA5599',
					'A25E94',
					/* Line 3 */
					'CC00FF',
					'B32AD5',
					'AD33CC',
					'A83BC4',
					'A344BB',
					'9E4DB3',
					'9955AA',
					'945EA2',
					/* Line 4 */
					'6704FB',
					'6E26D9',
					'7033CC',
					'723BC4',
					'7444BB',
					'754DB3',
					'7755AA',
					'795EA2',
					/* Line 5 */
					'0404FB',
					'2626D9',
					'3333CC',
					'3B3BC4',
					'4444BB',
					'4D4DB3',
					'5555AA',
					'5E5EA2',
					/* Line 6 */
					'0066FF',
					'2A6ED5',
					'3370CC',
					'3B72C4',
					'4474BB',
					'4D75B3',
					'5577AA',
					'5E79A2',
					/* Line 7 */
					'00CCFF',
					'2AB2D5',
					'33ADCC',
					'3BA8C4',
					'44A3BB',
					'4D9EB3',
					'5599AA',
					'5E94A2',
					/* Line 8 */
					'00FFCC',
					'2AD5B2',
					'33CCAD',
					'3BC4A8',
					'44BBA3',
					'4DB39E',
					'55AA99',
					'5EA294',
					/* Line 9 */
					'00FF66',
					'2AD56F',
					'33CC70',
					'3BC472',
					'44BB74',
					'4DB375',
					'55AA77',
					'5EA279',
					/* Line 10 */
					'00FF00', '2AD52A',
					'33CC33',
					'3BC43B',
					'44BB44',
					'4DB34D',
					'55AA55',
					'5EA25E',
					/* Line 11 */
					'66FF00', '6ED52A', '70CC33',
					'72C43B',
					'74BB44',
					'75B34D',
					'77AA55',
					'79A25E',
					/* Line 12 */
					'CCFF00', 'B2D52A', 'ADCC33', 'A8C43B',
					'A3BB44',
					'9EB34D',
					'99AA55',
					'94A25E',
					/* Line 13 */
					'FFCC00', 'D5B32A', 'CCAD33', 'C4A83B',
					'BBA344', 'B39E4D',
					'AA9955',
					'A2945E',
					/* Line 14 */
					'FF6600', 'D56F2A', 'CC7033', 'C4723B',
					'BB7444', 'B3754D', 'AA7755',
					'A2795E',
					/* Line 15 */
					'FB0404', 'D52A2A', 'CC3333', 'C43B3B',
					'BB4444', 'B34D4D', 'AA5555', 'A25E5E',
					/* Line 16 */
					'FFFFFF', '949494', '808080', '6B6B6B',
					'545454', '404040', '292929', '000000']
				})
			]
		});

	this.title=GO.addressbook.lang['cmdPanelCompany'];
				
	this.labelWidth=120;
	this.bodyStyle='padding: 5px'; 
	this.layout='column';
	this.autoScroll=true;
	this.defaults={border: false};
	this.items=[
		{	 
			columnWidth: .5,
	  //	defaults: { border: false },
			items: [
				this.addressbookFieldset,
				this.companyFieldset,
				this.otherFieldset
			]
		},{
  		columnWidth: .5,
 //   	defaults: { border: false },
    	style: 'margin-left: 5px;',
			items: [this.visitAddressFieldset ,this.postAddressFieldset]
  	}];


	GO.addressbook.CompanyProfilePanel.superclass.constructor.call(this);
}

Ext.extend(GO.addressbook.CompanyProfilePanel, Ext.Panel,{
	setAddressbookID : function(addressbook_id)
	{
		this.formAddressBooks.setValue(addressbook_id);
		
		
	},

	copyVisitToPostAddress : function(){
		this.formPostAddress.setValue(this.formAddress.getValue());
		this.formPostAddressNo.setValue(this.formAddressNo.getValue());
		this.formPostZip.setValue(this.formZip.getValue());
		this.formPostCity.setValue(this.formCity.getValue());
		this.formPostState.setValue(this.formState.getValue());
		this.formPostCountry.setValue(this.formCountry.getValue());
	},


	setCompanyId : function(company_id)
	{
		this.company_id=company_id;
	}
});

GO.addressbook.EmployeesPanel = function(config)
	{
		if(!config)
		{
			config={};
		}
	
		config.store = new Ext.data.JsonStore({
			url: GO.url('addressbook/contact/employees'),
			baseParams:
			{
				company_id: this.company_id
//				,task: 'load_employees'
			},
			id:'id',
			root: 'results',
			fields: [
			{
				name:'id'
			},

			{
				name:'name'
			},

			{
				name:'function'
			},

			{
				name:'department'
			},

			{
				name:'work_phone'
			},

			{
				name:'email'
			}
			],
			remoteSort: true
		});
	
		config.store.on('load', function(){
			this.loaded=true;
		}, this);
	
		config.cm =  new Ext.grid.ColumnModel({
			defaults:{
				sortable:true
			},
			columns:[
			{
				header: GO.lang['strName'],
				dataIndex: 'name'
			},
			{
				header: GO.lang['strEmail'],
				dataIndex: 'email' ,
				width: 200
			},
			{
				header: GO.lang['strPhone'],
				dataIndex: 'work_phone' ,
				width: 100
			},
			{
				header: GO.lang['strFunction'],
				dataIndex: 'function',
				width: 150
			},
			{
				header: GO.lang['strDepartment'],
				dataIndex: 'department' ,
				width: 150
			}
			]
		});
        

		config.view=new Ext.grid.GridView({
			autoFill:true,
			forceFit:true
		});
	
		config.layout= 'fit';
		config.paging=true;
		config.title= GO.addressbook.lang['cmdPanelEmployees'];
		config.id= 'ab-employees-grid';
		config.sm= new Ext.grid.RowSelectionModel();
		config.autoScroll=false;
		config.trackMouseOver= true;
		config.collapsible= false;
		config.disabled=true;
  
		config.tbar = [
		{
			iconCls: 'btn-add',
			text: GO.addressbook.lang['addEmployee'],
			cls: 'x-btn-text-icon',
			handler: function () {
				GO.addressbook.showContactDialog(0, {values: {company_id: this.company_id, addressbook_id: this.addressbookId}});
				
				GO.addressbook.contactDialog.on('hide', function() {
					this.store.load();
				}, this, {single: true});
			
			},
			scope: this

		},
		{
			iconCls: 'btn-add',
			text: GO.addressbook.lang['addExistingEmployee'],
			cls: 'x-btn-text-icon',
			handler: function(){
				if(!this.selectContactDialog)
				{
					this.selectContactDialog = new GO.addressbook.SelectContactDialog({
						handler : function(grid){
							var keys = grid.selModel.selections.keys;
							this.store.baseParams.add_contacts = Ext.encode(keys);
							this.store.load();
							delete this.store.baseParams.add_contacts;
						},
						scope: this
					});
				}
				
				var addressbookId = this.ownerCt.ownerCt.ownerCt.companyForm.form.findField('addressbook_id').getValue();
				this.selectContactDialog.grid.store.baseParams.addressbook_id=addressbookId;
				this.selectContactDialog.show({values:{addressbookId: addressbookId, company_id: this.company_id}});
			
			},
			scope: this
		},{

			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function(){
				this.deleteSelected();
			},
			scope: this
		}];
	
	
  

		GO.addressbook.EmployeesPanel.superclass.constructor.call(this, config);
	
		this.on('rowdblclick', function(grid, index){
			var record = grid.getStore().getAt(index);
			GO.addressbook.showContactDialog(record.data.id);
		}, this);
	}

Ext.extend(GO.addressbook.EmployeesPanel, GO.grid.GridPanel,{
	setCompanyId : function(company_id)
	{
		if(company_id!=this.store.baseParams.company_id)
		{
			this.loaded=false;
                        this.company_id = company_id;
			this.store.baseParams.company_id=company_id;
			this.setDisabled(company_id==0);
		}
	},
	
	setAddressbookId: function(addressbookId) {
		this.addressbookId = addressbookId;
		this.store.baseParams.addressbook_id = addressbookId;
	},
	
	onShow : function(){
		
		if(!this.loaded)
		{
			this.store.load();
		}
		GO.addressbook.CompanyProfilePanel.superclass.onShow.call(this);
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.AdvancedSearchWindow = function(config){

	config = config || {};

	config.title = GO.addressbook.lang.advancedSearch;
	//config.closable=true;
//	config.width=400;
//	config.height=600;
	config.border=false;
	config.collapsible=true;
	
	config.stateId = 'ab-adv-search-window';
	
	config.layout='card';
		config.layoutConfig={
			deferredRender:false,
			layoutOnCardChange:true
		};
	config.modal=false;
	config.resizable=true;
	config.width=900;
	config.height=350;
	config.closeAction='hide';
	config.items = [{
			layout:'border',
			items:[this._contactsQueryPanel = new GO.query.QueryPanel({
					region:'center',
					modelName:'GO\\Addressbook\\Model\\Contact',
					modelAttributesUrl:GO.url('addressbook/contact/attributes')
				}), this._contactsQueriesGrid = new GO.query.SavedQueryGrid({
					region: 'west',
					queryPanel: this._contactsQueryPanel,
					width:120,
					split:true,
					modelName:'GO\\Addressbook\\Model\\Contact'
				})]
		},{
			layout:'border',
			items:[this._companiesQueryPanel = new GO.query.QueryPanel({			
					region:'center',
					modelName:'GO\\Addressbook\\Model\\Company',
					modelAttributesUrl:GO.url('addressbook/company/attributes')
				}), this._companiesQueriesGrid = new GO.query.SavedQueryGrid({
					region: 'west',
					width:120,
					split:true,
					queryPanel: this._companiesQueryPanel,
					modelName:'GO\\Addressbook\\Model\\Company'
				})
			]
		}];
		
	

		
		config.buttons=[{
			text: GO.lang['cmdSave'],
			handler: function(){
				if(this._getModelName()=='GO\\Addressbook\\Model\\Company')
					this._companiesQueriesGrid.showSavedQueryDialog();
				else
					this._contactsQueriesGrid.showSavedQueryDialog();
			},
			scope: this
		},{
			text: GO.lang.executeQuery,
			handler: function(){
				this.search();
			},
			scope: this
		},{
			text: GO.lang['cmdClose'],
			handler: function(){
				this.hide();
			},
			scope:this
		}];

	GO.addressbook.AdvancedSearchWindow.superclass.constructor.call(this,config);

}

Ext.extend(GO.addressbook.AdvancedSearchWindow, GO.Window, {
	
	queryId : 0,
	
	/*
	 * Sets whether, during the time of use of this window, the data type is
	 * 'contact' or 'company', and apply the ensuing changes to this window.
	 * Made to be called from this.show(), but external calls also possible.
	 */
	updateDataType : function(type,masterPanel) {
		if (type!='companies' && type!='contacts')
			Ext.MessageBox.alert(GO.lang.strWarning,"AdvancedSearchWindow.updateDataType() parameter must be either 'contacts' or 'companies'.");
		
		if (type=='contacts')
			this.getLayout().setActiveItem(0);
		else
			this.getLayout().setActiveItem(1);

		this._datatype = type;
	
		if (this._datatype=='contacts') {
			this.externalTargetGrid = masterPanel.contactsGrid;
		} else {
			this.externalTargetGrid = masterPanel.companiesGrid;
		}
	},

	getDatatype : function() {
		if (typeof(this._datatype)=='undefined')
			return false;		
		return this._datatype;
	},
	
	_getModelName : function() {
		switch (this.getDatatype()) {
			case 'contacts':
				return 'GO\\Addressbook\\Model\\Contact';
				break;
			case 'companies':
				return 'GO\\Addressbook\\Model\\Company';
				break;
			default:
				return false;
				break;
		}
	},
	
	show : function(config) {
		GO.addressbook.AdvancedSearchWindow.superclass.show.call(this,config);
		this.updateDataType(config.dataType,config.masterPanel);
	},
	
	search : function(){
		//checkbox values are only returned when ticked
		delete this.externalTargetGrid.store.baseParams.search_current_folder;
		
		if (this.getDatatype()=='contacts')
			this.externalTargetGrid.store.baseParams['advancedQueryData'] = Ext.encode(this._contactsQueryPanel.getData());
		else
			this.externalTargetGrid.store.baseParams['advancedQueryData'] = Ext.encode(this._companiesQueryPanel.getData());
		
		this.externalTargetGrid.store.load();
		this.externalTargetGrid.setDisabled(false);
		this.fireEvent('ok', this);
	},
	
	reset : function(){
		this.externalTargetGrid.store.removeAll();
		this.externalTargetGrid.setDisabled(true);
//		this.setTitle(GO.filesearch.lang.filesearch);
		this.externalTargetGrid.exportTitle=GO.lang.strSearch;
	}
	
	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: MainPanel.js 20071 2016-05-25 09:38:11Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */


GO.addressbook.MainPanel = function(config)
{

	if(!config)
	{
		config={};
	}

	GO.addressbook.contactsGrid = this.contactsGrid = new GO.addressbook.ContactsGrid({
		layout: 'fit',
		region: 'center',
		id: 'ab-contacts-grid',
		title: GO.addressbook.lang.contacts
	});
    this.contactsGrid.applyAddresslistFilters();

	this.contactsGrid.on("delayedrowselect",function(grid, rowIndex, r){
		
		this.displayCardPanel.getLayout().setActiveItem(this.contactEastPanel);
		this.contactEastPanel.load(r.get('id'));
	}, this);
	this.contactsGrid.on("rowdblclick", function(){
		this.contactEastPanel.editHandler();
	}, this);

	this.contactsGrid.store.on('load', function(){
		this.setAdvancedSearchNotification(this.contactsGrid.store);
	}, this);

	if (GO.email) {
		this.contactsGrid.on("rowcontextmenu",function(grid,row,e){
			{
				if(typeof(this.contactsGrid.contextMenu)=='undefined')
				{
					this.contactsGrid.contextMenu = new GO.addressbook.ContextMenu({type:'contact'});
				}
				this.contactsGrid.contextMenu.setSelected(grid, "GO\\Addressbook\\Model\\Contact");
				e.stopEvent();
				this.contactsGrid.contextMenu.showAt(e.getXY());
			}
		},this);
	}

	this.companiesGrid = new GO.addressbook.CompaniesGrid({
		layout: 'fit',
		region: 'center',
		id: 'ab-company-grid',
		title: GO.addressbook.lang.companies
	});
    this.companiesGrid.applyAddresslistFilters();

	this.companiesGrid.on("delayedrowselect",function(grid, rowIndex, r){
		
		this.displayCardPanel.getLayout().setActiveItem(this.companyEastPanel);
		this.companyEastPanel.load(r.get('id'));
		
	}, this);
	this.companiesGrid.on("rowdblclick", function(){
		this.companyEastPanel.editHandler();
	}, this);

	if (GO.email) {
		this.companiesGrid.on("rowcontextmenu",function(grid,row,e){
			{
				if(typeof(this.companiesGrid.contextMenu)=='undefined')
				{
					this.companiesGrid.contextMenu = new GO.addressbook.ContextMenu({type:'company'});
				}
				this.companiesGrid.contextMenu.setSelected(grid, "GO\\Addressbook\\Model\\Company");
				e.stopEvent();
				this.companiesGrid.contextMenu.showAt(e.getXY());
			}
		},this);
	}


	this.companiesGrid.store.on('load', function(){
		this.setAdvancedSearchNotification(this.companiesGrid.store);
	}, this);



	this.searchPanel = new GO.addressbook.SearchPanel({
		region: 'north',
		ab:this
	});

	this.searchPanel.on('queryChange', function(params){
		this.setSearchParams(params);
	}, this);

	this.contactEastPanel = new GO.addressbook.ContactReadPanel({
		id:'ab-contact-panel',
		border:false
	});

	this.contactEastPanel.on('commentAdded',function(){
		this.contactsGrid.store.reload();
	},this);

	this.companyEastPanel = new GO.addressbook.CompanyReadPanel({
		id:'ab-company-panel',
		border:false
	});


	this.contactsGrid.on("show", function(){
		this.setAdvancedSearchNotification(this.contactsGrid.store);
		this.addressbooksGrid.setType('contact');
	}, this);


	this.companiesGrid.on("show", function(){
		this.setAdvancedSearchNotification(this.companiesGrid.store);
		this.addressbooksGrid.setType('company');
	}, this);


	this.addressbooksGrid = new GO.addressbook.AddresbooksGrid({
		region:'north',
		id:'ab-addressbook-grid',
		width:180,
		height:250
	});
	
	this.checkForAddressbook = function (addressbookIds, records) {
		
			GO.request({
				url: 'addressbook/addressbook/firstWritableAddressbookId',
				params: {
					addressbook_ids : Ext.encode(addressbookIds)
				},
				success: function(response,options,result) {
					for (var i=0; i<records.length; i++) {
						if (records[i].id==result.data.addressbook_id)
							GO.addressbook.defaultAddressbook = records[i];
						
						
					}
					if(!GO.addressbook.defaultAddressbook) {
						GO.addressbook.defaultAddressbook = records[0];
					}
				},
				scope: this
			});
	};
	
	this.addressbooksGrid.getStore().on('load', function (store, records, options) {
		var addressbookIds = [];
		for (var i=0; i<records.length; i++) {
			if(records[i].get('checked')){
				addressbookIds.push(records[i].id);
			}
		}
		
		this.checkForAddressbook(addressbookIds, records);
	}, this);
	
	this.addressbooksGrid.on('change', function(grid, abooks, records)
	{
		var books = Ext.encode(abooks);
		var panel = this.tabPanel.getActiveTab();
		
		this.companiesGrid.store.baseParams.books = books;
		this.contactsGrid.store.baseParams.books = books;
			
		if(panel.id=='ab-contacts-grid')
		{
			this.contactsGrid.store.load();
			delete this.contactsGrid.store.baseParams.books;
		}else
		{
			
			this.companiesGrid.store.load();
			delete this.companiesGrid.store.baseParams.books;
		}

		if(records.length)
		{
			var addressbookIds = [];
			for (var i=0; i<records.length; i++) {
				addressbookIds.push(records[i].id);
			}
			this.checkForAddressbook(addressbookIds, records);
		}
	}, this);
	
	/*this.addressbooksGrid.on('rowclick', function(grid, rowIndex){


	}, this);*/

	/*
	this.addressbooksGrid.getSelectionModel().on('rowselect', function(sm, rowIndex, r){
		GO.addressbook.defaultAddressbook = sm.getSelected().get('id');

		var record = this.addressbooksGrid.getStore().getAt(rowIndex);
		this.setSearchParams({addressbook_id : record.get("id")});
	}, this);
	*/


	this.addressbooksGrid.on('drop', function(type)
	{
		if(type == 'company')
		{
			this.companiesGrid.store.reload();
		}else
		{
			this.contactsGrid.store.reload();
		}
	}, this);

	this.tabPanel = new Ext.TabPanel({
		region : 'center',
		activeTab: 0,
		border: true,
		listeners:{
			scope:this,
			tabchange:function(tabPanel, activeTab){
				if(activeTab.id=='ab-contacts-grid')
					this.contactsGrid.store.load();
				else
					this.companiesGrid.store.load();
			}
		},
		items: [
		this.contactsGrid,
		this.companiesGrid
		]
	});
	
	
	this.displayCardPanel = new Ext.Panel({
		region:'east',		
		layout:'card',
		layoutConfig:{
			layoutOnCardChange :true
		},
		width:500,
		id:'ab-east-panel',
		split:true,
		items:[
			this.contactEastPanel,
			this.companyEastPanel
		]
	});

	config.layout='border';
	config.border=false;
//
//	if(GO.addressbook)
//	{

		this.mailingsFilterPanel= new GO.addressbook.AddresslistsMultiSelectGrid({
			id: 'ab-mailingsfilter-panel',
			region:'center',
			split:true
			
		});

		this.mailingsFilterPanel.on('change', function(grid, addresslist_filter){
			var panel = this.tabPanel.getActiveTab();
			if(panel.id=='ab-contacts-grid')
			{
				this.contactsGrid.store.baseParams.addresslist_filter = Ext.encode(addresslist_filter);
				this.contactsGrid.store.load();
				//delete this.contactsGrid.store.baseParams.addresslist_filter;
			}else
			{
				this.companiesGrid.store.baseParams.addresslist_filter = Ext.encode(addresslist_filter);
				this.companiesGrid.store.load();
				//delete this.companiesGrid.store.baseParams.addresslist_filter;
			}
		}, this);
	
		this.westPanel = new Ext.Panel({
			layout:'accordion',
			layoutConfig:{hideCollapseTool:true},
			border:false,
			region:'north',
			height:200,
			split:true,
			items:[this.addressbooksGrid],
			id: 'ab-west-panel'
		});
		
		//This is an accordion panel only for the favorites module. If there's only
		//one item then this will disable the collapsing.
		this.addressbooksGrid.on('beforecollapse',function(){
			if(this.westPanel.items.getCount()==1){
				return false;
			}
		}, this);
		
		
		this.westPanelContainer = new Ext.Panel({
			region:'west',
			layout:'border',
			width:230,
			split:true,
			items: [this.mailingsFilterPanel, this.westPanel]			
		});
		
		config.items= [
		this.searchPanel,
		this.westPanelContainer,
		this.tabPanel,
		this.displayCardPanel
		];
//	}else
//	{
//		config.items= [
//		this.searchPanel,
//		this.addressbooksGrid,
//		this.tabPanel
//		];
//	}

	var tbar=[
		
	
	{
		xtype:'htmlcomponent',
		html:GO.addressbook.lang.name,
		cls:'go-module-title-tbar'
	},
	{
		iconCls: 'btn-addressbook-add-contact',
		text: GO.addressbook.lang['btnAddContact'],
		cls: 'x-btn-text-icon',
		handler: function(){
			//GO.addressbook.showContactDialog(0);
			this.contactEastPanel.reset();

			GO.addressbook.showContactDialog(0, {values:{addressbook_id:GO.addressbook.defaultAddressbook.get('id')}});
			this.tabPanel.setActiveTab('ab-contacts-grid');
		},
		scope: this
	},
	{
		iconCls: 'btn-addressbook-add-company',
		text: GO.addressbook.lang['btnAddCompany'],
		cls: 'x-btn-text-icon',
		handler: function(){
			
			this.companyEastPanel.reset();
			GO.addressbook.showCompanyDialog(0,  {values:{addressbook_id:GO.addressbook.defaultAddressbook.get('id')}});
			this.tabPanel.setActiveTab('ab-company-grid');
		},
		scope: this
	},
	{
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function(){
			var activetab = this.tabPanel.getActiveTab();

			switch(activetab.id)
			{
				case 'ab-contacts-grid':
					this.contactsGrid.deleteSelected({
						callback : this.contactEastPanel.gridDeleteCallback,
						scope: this.contactEastPanel
					});
					break;
				case 'ab-company-grid':
					this.companiesGrid.deleteSelected({
						callback : this.companyEastPanel.gridDeleteCallback,
						scope: this.companyEastPanel
					});
					break;
			}
		},
		scope: this
	},
	'-',
	{
		iconCls: 'btn-addressbook-manage',
		text: GO.lang.administration,
		cls: 'x-btn-text-icon',
		handler:function(){
			if(!this.manageDialog)
			{
				this.manageDialog = new GO.addressbook.ManageDialog();
			}
			this.manageDialog.show();
		},
		scope: this
	},{
	iconCls: "btn-search",
		handler: function()
		{
			if(!this.advancedSearchWindow)
			{
				this.advancedSearchWindow = GO.addressbook.advancedSearchWindow = new GO.addressbook.AdvancedSearchWindow();
//						this.advancedSearchWindow.on('ok', function(win){
//							this.fireEvent('queryChange', {
//								advancedQuery:GO.addressbook.searchQueryPanel.queryField.getValue()
//								});
//						}, this);
			}
			var type = this.tabPanel.getActiveTab().id=='ab-contacts-grid' ? 'contacts' : 'companies';
			this.advancedSearchWindow.show({
				dataType : type,
				masterPanel : GO.mainLayout.getModulePanel('addressbook')
			});
		},
		text: GO.addressbook.lang.advancedSearch,
		scope: this
	}
		];

	if(GO.addressbook.exportPermission == '1')
	{
		// Button to export contacts with companies together
		this.contactsWithCompaniesExportButton = new Ext.menu.Item({
			iconCls: 'btn-export',
			text: GO.addressbook.lang.exportContactsWithCompanies,
			cls: 'x-btn-text-icon',
			handler:function(){
				
				var activetab = this.tabPanel.getActiveTab();
				
				if(activetab.id == 'ab-contacts-grid'){
					var viewState = 'contact';
				} else {
					var viewState = 'company';
				}
				window.open(GO.url("addressbook/exportContactsWithCompanies/export",{viewState: viewState} ));
			},
			scope: this
		});
		
		this.vcardExportButton = new Ext.menu.Item({
			iconCls: 'btn-export',
			text: GO.addressbook.lang.exportContactsAsVcard,
			cls: 'x-btn-text-icon',
			handler:function(){
				window.open(GO.url("addressbook/addressbook/exportVCard"));
			},
			scope: this
		});
				
		this.exportMenu = new GO.base.ExportMenu({className:'GO\\Addressbook\\Export\\CurrentGridContact'});
		
		this.exportMenu.insertItem(0,this.vcardExportButton);
		this.exportMenu.insertItem(0,this.contactsWithCompaniesExportButton);
		
		this.exportMenu.on('click',function(btn,e){
			
			var activetab = this.tabPanel.getActiveTab();
				
			if(activetab.id == 'ab-contacts-grid'){
				this.exportMenu.setClassName('GO\\Addressbook\\Export\\CurrentGridContact');
			} else {
				this.exportMenu.setClassName('GO\\Addressbook\\Export\\CurrentGridCompany');
			}
			
			this.exportMenu.setColumnModel(activetab.getColumnModel());
			
		}, this);
		
		tbar.push(this.exportMenu);
	}

	if(GO.email)
	{
		tbar.push('-');
		tbar.push({
			iconCls: 'ml-btn-mailings',
			text: GO.addressbook.lang.newsletters,
			cls: 'x-btn-text-icon',
			handler: function(){
				if(!this.mailingStatusWindow)
				{
					this.mailingStatusWindow = new GO.addressbook.MailingStatusWindow();
				}
				this.mailingStatusWindow.show();
			},
			scope: this
		});
	}
	config.tbar=new Ext.Toolbar({
		cls:'go-head-tb',
		items: tbar
	});


	/*config.listeners={
		scope:this,
		show:function(){
			this.searchPanel.queryField.focus(true);
		}
	}*/


	GO.addressbook.MainPanel.superclass.constructor.call(this, config);

};

Ext.extend(GO.addressbook.MainPanel, Ext.Panel,{

	setAdvancedSearchNotification : function (store)
	{
		if(!GO.util.empty(store.baseParams.advancedQueryData))
		{
			this.searchPanel.queryField.setValue("[ "+GO.addressbook.lang.advancedSearch+" ]");
			this.searchPanel.queryField.setDisabled(true);
		}else
		{
			if(this.searchPanel.queryField.getValue()=="[ "+GO.addressbook.lang.advancedSearch+" ]")
			{
				this.searchPanel.queryField.setValue("");
			}
			this.searchPanel.queryField.setDisabled(false);
		}
	},

	init : function(){
		this.getEl().mask(GO.lang.waitMsgLoad);
		GO.request({
			maskEl:this.getEl(),
			url: "core/multiRequest",
			params:{
				requests:Ext.encode({
//					contacts:{r:"addressbook/contact/store"},
//					companies:{r:"addressbook/company/store"},
					addressbooks:{r:"addressbook/addressbook/store", limit: GO.settings.config.nav_page_size},
					writable_addresslists:{r:"addressbook/addresslist/store",permissionLevel: GO.permissionLevels.write, limit: 0},
					readable_addresslists:{r:"addressbook/addresslist/store",permissionLevel: GO.permissionLevels.read, limit: GO.settings.config.nav_page_size}
				})
			},
			success: function(options, response, result)
			{
				GO.addressbook.readableAddressbooksStore.loadData(result.addressbooks);
//				this.contactsGrid.store.loadData(result.contacts);
//				if(GO.addressbook)
//				{
					GO.addressbook.readableAddresslistsStore.loadData(result.readable_addresslists);
					GO.addressbook.writableAddresslistsStore.loadData(result.writable_addresslists);
//				}
				this.getEl().unmask();
			},
			scope:this
		});
	},

	afterRender : function()
	{
		GO.addressbook.MainPanel.superclass.afterRender.call(this);

		this.init();

		GO.dialogListeners.add('contact',{
			scope:this,
			'save':function(){
				var panel = this.tabPanel.getActiveTab();
				if(panel.id=='ab-contacts-grid')
				{
					this.contactsGrid.store.reload();
				}
			}
		});

		GO.dialogListeners.add('company',{
			scope:this,
			'save':function(){
				var panel = this.tabPanel.getActiveTab();
				if(panel.id=='ab-company-grid')
				{
					this.companiesGrid.store.reload();
				}
			}
		});
	},


	setSearchParams : function(params)
	{
		var panel = this.tabPanel.getActiveTab();

		for(var name in params)
		{
			if(name!='advancedQuery' || panel.id=='ab-contacts-grid')
			{
				this.contactsGrid.store.baseParams[name] = params[name];
			}
			if(name!='advancedQuery' || panel.id!='ab-contacts-grid')
			{
				this.companiesGrid.store.baseParams[name] = params[name];
			}
		}

		if(panel.id=='ab-contacts-grid')
		{
			this.contactsGrid.store.load();
		}else
		{
			this.companiesGrid.store.load();
		}
	},
					
	_createExportMenuItems : function() {
		
		// Button to export contacts with companies together
		this.contactsWithCompaniesExportButton = new Ext.menu.Item({
			iconCls: 'btn-export',
			text: GO.addressbook.lang.exportContactsWithCompanies,
			cls: 'x-btn-text-icon',
			handler:function(){
				window.open(GO.url("addressbook/exportContactsWithCompanies/export"))
			},
			scope: this
		});
		
//		// Button to export contacts or companies (Based on the tab that is opened)
//		this.defaultExportButton = new Ext.menu.Item({
//			iconCls: 'btn-export',
//			text: GO.addressbook.lang.exportContacts+'ddd',
//			cls: 'x-btn-text-icon',
//			handler:function(){
//				var activetab = this.tabPanel.getActiveTab();
//				var url;
//				var name;
//				var title;
//				var colmodel;
//				var documentTitle;
//				switch(activetab.id)
//				{
//					case 'ab-contacts-grid':
//						url = 'addressbook/contact/export';
//						name = 'contact';
//						documentTitle = 'ExportContact';
//						colmodel = this.contactsGrid.getColumnModel();
//
//						if(!this.exportDialogContacts) {
//							this.exportDialogContacts = new GO.ExportGridDialog({
//								url: url,
//								name: name,
//								exportClassPath:'modules/addressbook/export',
//								documentTitle: title,
//								colModel: colmodel
//							});
//						} else {
//							this.exportDialogContacts.documentTitle=documentTitle;
//							this.exportDialogContacts.name=name;
//							this.exportDialogContacts.url=url;
//							this.exportDialogContacts.colModel=colmodel;
//						}
//						this.exportDialogContacts.show();
//						break;
//					case 'ab-company-grid':
//						url = 'addressbook/company/export';
//						name = 'company';
//						documentTitle = 'ExportCompany';
//						colmodel = this.companiesGrid.getColumnModel();
//
//						if(!this.exportDialogCompanies) {
//							this.exportDialogCompanies = new GO.ExportGridDialog({
//								url: url,
//								name: name,
//								documentTitle: title,
//								colModel: colmodel
//							});
//						} else {
//							this.exportDialogCompanies.documentTitle=documentTitle;
//							this.exportDialogCompanies.documentTitle=name;
//							this.exportDialogCompanies.documentTitle=url;
//							this.exportDialogCompanies.colmodel=colmodel;
//						}
//						this.exportDialogCompanies.show();
//						break;
//				}
//			},
//			scope: this
//		});
//
//		this.exportMenuItems = [
//				this.defaultExportButton,
//				this.contactsWithCompaniesExportButton
//			];
							
	}
});

GO.addressbook.showContactDialog = function(contact_id, config){

	if(!GO.addressbook.contactDialog)
		GO.addressbook.contactDialog = new GO.addressbook.ContactDialog();

	if(GO.addressbook.contactDialogListeners){
		GO.addressbook.contactDialog.on(GO.addressbook.contactDialogListeners);
		delete GO.addressbook.contactDialogListeners;
	}
		
	GO.addressbook.contactDialog.show(contact_id, config);
}

GO.addressbook.showCompanyDialog = function(company_id, config){

	if(!GO.addressbook.companyDialog)
		GO.addressbook.companyDialog = new GO.addressbook.CompanyDialog();

	if(GO.addressbook.companyDialogListeners){
		GO.addressbook.companyDialog.on(GO.addressbook.companyDialogListeners);
		delete GO.addressbook.companyDialogListeners;
	}
	if(!config) {
		config = {};
	}
	GO.addressbook.companyDialog.show(company_id, config);
}

GO.addressbook.searchSenderStore = new GO.data.JsonStore({
	url: GO.url('addressbook/addressbook/searchSender'),
	baseParams: {
		email:''
	},
	root: 'results',
	totalProperty: 'total',
	id: 'id',
	fields:['id','name'],
	remoteSort:true
});

GO.addressbook.searchSender = function(sender, name){
	GO.addressbook.searchSenderStore.baseParams.email=sender;
	GO.addressbook.searchSenderStore.load({
		callback:function(){
			switch(GO.addressbook.searchSenderStore.getCount())
			{
				case 0:
					var names = name.split(' ');
					var params = {
						email:sender,
						first_name: names[0]
					};

					if(names[2])
					{
						params.last_name=names[2];
						params.middle_name=names[1];
					}else if(names[1])
					{
						params.middle_name='';
						params.last_name=names[1];
					}

					if(!GO.addressbook.unknownEmailWin)
					{
						GO.addressbook.unknownEmailWin=new GO.Window({
							title:GO.addressbook.lang.unknownEmail,
							items:{
								autoScroll:true,
								items: [{
									xtype: 'plainfield',
									hideLabel: true,
									value: GO.addressbook.lang.strUnknownEmail
								}],
								cls:'go-form-panel'
							},
							layout:'fit',
							autoScroll:true,
							closeAction:'hide',
							closeable:true,
							height:160,
							width:400,
							buttons:[{
								text: GO.addressbook.lang.newContact,
								handler: function(){
									GO.addressbook.showContactDialog(0, {values:GO.addressbook.unknownEmailWin.params});
									GO.addressbook.unknownEmailWin.hide();
								}
							},{
								text: GO.addressbook.lang.existingContact,
								handler: function(){
									if(!GO.email.findContactDialog)
										GO.email.findContactDialog = new GO.email.FindContactDialog();

									GO.email.findContactDialog.show(GO.addressbook.unknownEmailWin.params);
									GO.addressbook.unknownEmailWin.hide();
								}
							},{
								text: GO.lang['cmdCancel'],
								handler: function(){
									GO.addressbook.unknownEmailWin.hide();
								}
							}],
						scope: this
						});
					}
					GO.addressbook.unknownEmailWin.params=params;
					GO.addressbook.unknownEmailWin.show();
					/*
					if(confirm(GO.addressbook.lang.confirmCreate))
					{
						GO.addressbook.showContactDialog();

						var names = name.split(' ');
						var params = {
							email:sender,
							first_name: names[0]
						};
						if(names[2])
						{
							params.last_name=names[2];
							params.middle_name=names[1];
						}else if(names[1])
						{
							params.last_name=names[1];
						}


						var tldi = sender.lastIndexOf('.');
						if(tldi)
						{
							var tld = sender.substring(tldi+1, sender.length).toUpperCase();
							if(GO.lang.countries[tld])
							{
								params.country=tld;
							}
						}

						GO.addressbook.contactDialog.formPanel.form.setValues(params);
					}*/

					break;
				case 1:
					var r = GO.addressbook.searchSenderStore.getAt(0);
					GO.linkHandlers["GO\\Addressbook\\Model\\Contact"].call(this, r.get('id'));
					break;
				default:
					if(!GO.addressbook.searchSenderWin)
					{
						var list = new GO.grid.SimpleSelectList({
							store: GO.addressbook.searchSenderStore
						});

						list.on('click', function(dataview, index){
							var contact_id = dataview.store.data.items[index].id;
							list.clearSelections();
							GO.addressbook.searchSenderWin.hide();
							GO.linkHandlers["GO\\Addressbook\\Model\\Contact"].call(this, contact_id);
						}, this);
						GO.addressbook.searchSenderWin=new GO.Window({
							title:GO.addressbook.lang.strSelectContact,
							items:{
								autoScroll:true,
								items: list,
								cls:'go-form-panel'
							},
							layout:'fit',
							autoScroll:true,
							closeAction:'hide',
							closeable:true,
							height:400,
							width:400,
							buttons:[{
								text: GO.lang['cmdClose'],
								handler: function(){
									GO.addressbook.searchSenderWin.hide();
								}
							}]
						});
					}
					GO.addressbook.searchSenderWin.show();
					break;
			}
		},
		scope:this
	});

}


GO.moduleManager.addModule('addressbook', GO.addressbook.MainPanel, {
	title : GO.addressbook.lang.addressbook,
	iconCls : 'go-tab-icon-addressbook'
});

GO.linkHandlers["GO\\Addressbook\\Model\\Contact"]=GO.mailFunctions.showContact=GO.addressbook.showContact=function(id){
	if(!GO.addressbook.linkContactWindow){
		var contactPanel = new GO.addressbook.ContactReadPanel();
		GO.addressbook.linkContactWindow = new GO.LinkViewWindow({
			title: GO.addressbook.lang.contact,
			items: contactPanel,
			contactPanel: contactPanel,
			closeAction:"hide"
		});
	}
	GO.addressbook.linkContactWindow.contactPanel.load(id);
	GO.addressbook.linkContactWindow.show();
	return GO.addressbook.linkContactWindow;
}

GO.linkPreviewPanels["GO\\Addressbook\\Model\\Contact"]=function(config){
	config = config || {};
	return new GO.addressbook.ContactReadPanel(config);
}

GO.linkPreviewPanels["GO\\Addressbook\\Model\\Company"]=function(config){
	config = config || {};
	return new GO.addressbook.CompanyReadPanel(config);
}


GO.linkHandlers["GO\\Addressbook\\Model\\Company"]=function(id){

	if(!GO.addressbook.linkCompanyWindow){
		var companyPanel = new GO.addressbook.CompanyReadPanel();
		GO.addressbook.linkCompanyWindow = new GO.LinkViewWindow({
			title: GO.addressbook.lang.company,
			items: companyPanel,
			companyPanel: companyPanel,
			closeAction:"hide"
		});
	}
	GO.addressbook.linkCompanyWindow.companyPanel.load(id);
	GO.addressbook.linkCompanyWindow.show();
	return GO.addressbook.linkCompanyWindow;
}

GO.quickAddPanel.addButton(new Ext.Button({
	iconCls:'img-contact-add',
	cls: 'x-btn-icon', 
	tooltip:GO.addressbook.lang.contact,
	handler:function(item, e){
		GO.addressbook.showContactDialog(0,{});
	},
	scope: this
}),0);


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @version $Id: SelectAddressbook.js 14816 2013-05-21 08:31:20Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.SelectAddressbook = function(config){

	config = config || {};

	if(!config.hiddenName)
		config.hiddenName='addressbook_id';

	if(!config.fieldLabel)
	{
		config.fieldLabel=GO.addressbook.lang.addressbook;
	}


	config.store = GO.addressbook.writableAddressbooksStore;

	Ext.apply(config, {
		displayField: 'name',
		valueField: 'id',
		triggerAction:'all',
		mode:'remote',
		editable: true,
		selectOnFocus:true,
		forceSelection: true,
		typeAhead: true,
		emptyText:GO.lang.strPleaseSelect,
		pageSize: parseInt(GO.settings.max_rows_list)
	});

	GO.addressbook.SelectAddressbook.superclass.constructor.call(this,config);

}
Ext.extend(GO.addressbook.SelectAddressbook, GO.form.ComboBox, {
	
});




GO.addressbook.SelectAddresslistsPanel = Ext.extend(Ext.Panel, {
	
	addresslistElements : [],

		
	initComponent : function(){
		
		this.title=GO.addressbook.lang.addresslists;
		this.cls='go-form-panel';
		this.autoScroll=true;
		
		this.items=[];

		this.items.push({
				xtype:'xcheckbox',
				boxLabel: GO.addressbook.lang.sendingEmailAllowed,
				name: 'email_allowed',
				hideLabel:true,
				checked: true
			});		

		this.items.push(new GO.form.HtmlComponent({html:'<br /><h1>'+GO.addressbook.lang.enabledMailingGroups+'</h1>'}));

		GO.addressbook.SelectAddresslistsPanel.superclass.initComponent.call(this);

	},
	
	removeComponents : function(){
			var f = this.ownerCt.ownerCt.form;
			for(var i=0;i<this.addresslistElements.length;i++)
			{
				f.remove(this.addresslistElements[i]);
				this.remove(this.addresslistElements[i], true);
			}
			this.addresslistElements=[];
		},
	
	loadComponents : function(){
		
		this.removeComponents();

		var f = this.ownerCt.ownerCt.form;
		
		for(var i=0;i<GO.addressbook.writableAddresslistsStore.data.items.length;i++)
		{
			var record = GO.addressbook.writableAddresslistsStore.data.items[i];
			
			this.addresslistElements.push(new Ext.form.Checkbox({
				boxLabel: record.data.name,
				labelSeparator: '',
				name: 'addresslist_'+record.data.id,
				autoCreate:  { tag: "input", type: "checkbox", autocomplete: "off", value: record.data.id },
				value:false
			}));
			
			this.add(this.addresslistElements[i]);
			f.add(this.addresslistElements[i]);
		}
		this.doLayout(false, true);
		
	},
	afterRender : function(){
		GO.addressbook.SelectAddresslistsPanel.superclass.afterRender.call(this);

		if(GO.addressbook.writableAddresslistsStore.loaded){
			this.loadComponents();
		}else
		{
			this.disabled=true;
		}

		GO.addressbook.writableAddresslistsStore.on('load', function(){
			this.loadComponents();
			this.setDisabled(false);
		}, this);
	}	
});



GO.addressbook.AddresslistsSettingsPanel = Ext.extend(Ext.Panel, {
	
	addresslistElements : [],

		
	initComponent : function(){
		
		this.title=GO.addressbook.lang.addresslists;
		this.cls='go-form-panel';
		this.autoScroll=true;
		
		this.items=[];

		this.items.push({
				xtype:'xcheckbox',
				boxLabel: GO.addressbook.lang.sendingEmailAllowed,
				name: 'email_allowed',
				hideLabel:true,
				checked: true
			});		

		this.items.push(new GO.form.HtmlComponent({html:'<br /><h1>'+GO.addressbook.lang.enabledMailingGroups+'</h1>'}));

		GO.addressbook.AddresslistsSettingsPanel.superclass.initComponent.call(this);

	},
	
	removeComponents : function(){
			var f = this.ownerCt.ownerCt.form;
			for(var i=0;i<this.addresslistElements.length;i++)
			{
				f.remove(this.addresslistElements[i]);
				this.remove(this.addresslistElements[i], true);
			}
			this.addresslistElements=[];
		},
	
	loadComponents : function(){
		
		this.removeComponents();

		var f = this.ownerCt.ownerCt.form;
		
		for(var i=0;i<GO.addressbook.readableAddresslistsStore.data.items.length;i++)
		{
			var record = GO.addressbook.readableAddresslistsStore.data.items[i];
			
			this.addresslistElements.push(new Ext.form.Checkbox({
				boxLabel: record.data.name,
				labelSeparator: '',
				name: 'addresslist_'+record.data.id,
				autoCreate:  { tag: "input", type: "checkbox", autocomplete: "off", value: record.data.id },
				value:false
			}));
			
			this.add(this.addresslistElements[i]);
			f.add(this.addresslistElements[i]);
		}
		this.doLayout(false, true);
		
	},
	afterRender : function(){

		GO.addressbook.AddresslistsSettingsPanel.superclass.afterRender.call(this);

		if(GO.addressbook.readableAddresslistsStore.loaded){
			this.loadComponents();
		} else {
			GO.addressbook.readableAddresslistsStore.load();
		}	
		GO.addressbook.readableAddresslistsStore.on('load', function(){
			this.loadComponents();
		}, this);
	}	
});



/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: Settings.js 14816 2013-05-21 08:31:20Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.addressbook.SettingsPanel = function(config) {
	if(!config) {
		config = {};
	}

	config.autoScroll = true;
	config.border = false;
	config.hideLabel = true;
	config.title = GO.addressbook.lang.addressbook;
	config.hideMode='offsets';
	config.layout = 'form';
	config.labelWidth=125;
	config.bodyStyle='padding:5px;';
	config.items = {
		xtype:'fieldset',
		autoHeight:true,
		layout:'form',
		forceLayout:true,
		title:GO.addressbook.lang.addressbookDefaults,
		items:[
			this.selectAddressbook = new GO.addressbook.SelectAddressbook({
				fieldLabel : GO.addressbook.lang.defaultAddressbook,
				hiddenName : 'default_addressbook_id'
			})
		]
	};
	
	GO.addressbook.SettingsPanel.superclass.constructor.call(this, config);
};

Ext.extend(GO.addressbook.SettingsPanel, Ext.Panel, {
		
});

GO.mainLayout.onReady(function() {
	GO.moduleManager.addSettingsPanel('addressbook', GO.addressbook.SettingsPanel);
});

GO.moduleManager.on('moduleconstructed',function(mm,moduleName,panel){
	if(moduleName=='settings'){

		var fieldset =new Ext.form.FieldSet({
			title:GO.addressbook.lang.addressbook,
			items:[{
				xtype:'textfield',
				name:'addressbook_name_template',
				fieldLabel:GO.addressbook.lang.globalsettings_templatelabel,
				width: 300
			}
//			,{
//				xtype:'checkbox',
//				name:'change_all_addressbook_names',
//				fieldLabel:GO.addressbook.lang.globalsettings_allchangelabel,
//				listeners: {
//	  			 "check": function(cb, isenabled) {
//						if(isenabled && !confirm(GO.addressbook.lang.globalsettings_renameall))
//							cb.setValue(false);
//					},
//					scope:this
//				}
//			}
		]
		});
		
		panel.add(fieldset);
	}
});

GO.addressbook.ContextMenu = function(config){

	if(!config)
		config = {};

	if(!config.type)
		config.type='contact';

	config.items=[];

	if (GO.email) {
		this.actionCreateMail = new Ext.menu.Item({
			iconCls: 'btn-email',
			text:GO.addressbook.lang.createEmailSelected,
			cls: 'x-btn-text-icon',
			scope:this,
			handler: function()
			{
				var selected = this.getSelected();
				
				if(!GO.util.empty(selected[0].data.id)){
					
					if(config.type == 'contact')
						this.showCreateMailDialog({contact_id:selected[0].data.id});
					else
						this.showCreateMailDialog({company_id:selected[0].data.id});
				}else{
					this.showCreateMailDialog();
				}
			}
		});
		config.items.push(this.actionCreateMail);
	}
	
	this.actionBatchEdit = new Ext.menu.Item({
		iconCls: 'btn-settings',
		text: GO.lang.batchEdit,
		cls: 'x-btn-text-icon',
		scope:this,
		handler: function()
		{
			this.showBatchEditDialog();
		}
	});
	config.items.push(this.actionBatchEdit);
	
	GO.addressbook.ContextMenu.superclass.constructor.call(this,config);

}

Ext.extend(GO.addressbook.ContextMenu, Ext.menu.Menu, {
	model_name : '',
	selected  : [],
	grid : '',

	setSelected : function (grid, model_name) {
		this.selected = grid.selModel.getSelections();
		this.model_name=model_name;
		this.grid = grid;
	},

	getSelected : function () {
		if (typeof(this.selected)=='undefined')
			return [];
		else
			return this.selected;
	},

	showCreateMailDialog : function(config) {		
		if (GO.email) {
			
			if(!config)
				config = {};
			
			var emails = [];
			var selected = this.getSelected();
			for (var i = 0; i < selected.length; i++) {
				if (typeof(selected[i].data.email)=='string' && !GO.util.empty(selected[i].data.email))
					emails.push('"' + selected[i].data.name + '" <' + selected[i].data.email + '>');
			}

			if (emails.length>0)
				var str = emails.join(', ');
			else
				var str = '';

			Ext.apply(config, {
				account_id: GO.moduleManager.getPanel('email').account_id,
				values:{
					to: str
				}				
			});

			GO.email.showComposer(config);
//			GO.email.showComposer({
//				account_id: GO.moduleManager.getPanel('email').account_id,
//				values:{
//					to: str
//				}				
//			});
		}
	},
	
	showBatchEditDialog : function() {
		var ids = [];
		var selected = this.getSelected();
		for (var i = 0; i < selected.length; i++) {
			if (!GO.util.empty(selected[i].data.id))
				ids.push(selected[i].data.id);
		}


		if (!this.batchEditDialog) {
			this.batchEditDialog = new GO.base.model.BatchEditModelDialog();
		}

		var editors = {
			sex: GO.addressbook.SexCombobox,
			company_id: GO.addressbook.SelectCompany
		};
		
		
		this.fireEvent('batchedit', this, this.model_name, editors);
		
		this.batchEditDialog.on('submit', function() {
			this.grid.getStore().reload();
		}, this)

		this.batchEditDialog.setModels(this.model_name, ids, 'id', editors, ['uuid']);

		this.batchEditDialog.show();
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author Wilmar van Beusekom <wilmar@intermesh.nl>
 */


GO.addressbook.TemplatesGrid = function(config)
{
	if(!config)
	{
		config = {};
	}
	
	
	config.sm= new Ext.grid.RowSelectionModel({
		singleSelect:false
	});
	config.title= GO.addressbook.lang['cmdPanelTemplate'];
	
	config.store = new GO.data.JsonStore({
		url: GO.url('addressbook/template/store'),
		baseParams: {
			permissionLevel: GO.permissionLevels.write
		},
		root: 'results',
		id: 'id',
		fields: ['id', 'user_id', 'owner', 'name', 'type', 'acl_id','extension'],
		remoteSort: true
	});
	config.store.setDefaultSort('name', 'ASC');
	if (GO.util.empty(config.noDocumentTemplates)) {
		config.store.on('load', function(){
			if(GO.documenttemplates)
				GO.documenttemplates.ooTemplatesStore.load();
		}, this);
	} else {
		config.store.on('beforeload',function(store,options){
			store.baseParams['type']=0;
		}, this);
	}
	
	var tbarItems = [{
		iconCls: 'btn-add',
		text: GO.addressbook.lang['cmdAddEmailTemplate'],
		cls: 'x-btn-text-icon',
//		disabled:!GO.settings.modules.addressbook.write_permission,
		handler: function(){

			this.showEmailTemplateDialog();
		},
		scope: this
	}];
	
	if (GO.util.empty(config.noDocumentTemplates)) {
		tbarItems.push({
			iconCls: 'btn-add',
			text: GO.addressbook.lang.addDocumentTemplate,
//			disabled:!GO.settings.modules.addressbook.write_permission,
			cls: 'x-btn-text-icon',
			handler: function(){
				this.showOOTemplateDialog();
			},
			scope: this
		});
	}
	
	tbarItems.push({
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		disabled:!GO.settings.modules.addressbook.write_permission,
		handler: function(){
			this.deleteSelected();
		},
		scope: this
	},
	'-'
	,
		this.searchField = new GO.form.SearchField({
			store: config.store,
			width:150,
			emptyText: GO.lang.strSearch
		})
	);
	
	config.tbar= tbarItems;
	
	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
		{
			header: GO.lang['strName'],
			dataIndex: 'name'
		},
		{
			header: GO.lang.strOwner,
			dataIndex: 'owner' ,
			width: 300,
			sortable: false
		},
		{
			header: GO.addressbook.lang['cmdType'],
			dataIndex: 'type' ,
			renderer: this.typeRenderer.createDelegate(this),
			width: 100
		}
		]
	});


	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang.strNoItems
	});
	config.cm= columnModel;
	config.border= false;
	config.paging= true;
	config.layout= 'fit';

	if (GO.util.empty(config.noDocumentTemplates)) {
		config.deleteConfig= {
			callback: function(){
				GO.documenttemplates.ooTemplatesStore.reload();
			},
			scope: this
		};
	}
	
	
	GO.addressbook.TemplatesGrid.superclass.constructor.call(this, config);
	
	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);
		
		if(record.data.type=='0')
		{
			this.showEmailTemplateDialog(record.data.id);
		}else
		{
			this.showOOTemplateDialog(record.data.id);
		}		
	}, this);	
}

Ext.extend(GO.addressbook.TemplatesGrid, GO.grid.GridPanel,{
	templateType : {
		'0' : 'E-mail',
		'1' : GO.addressbook.lang.documentTemplate
	},

	showOOTemplateDialog : function(template_id){

		if(!GO.documenttemplates){
			alert(GO.lang.moduleRequired.replace('%s', 'Document templates'));
			return false;
		}

		if(!this.ooTemplateDialog){
			this.ooTemplateDialog = new GO.documenttemplates.OOTemplateDialog();
			this.ooTemplateDialog.on('save', function(){
				this.store.load();
			}, this);
		}

		this.ooTemplateDialog.show(template_id);
	},

	showEmailTemplateDialog : function(template_id){
		if(!this.emailTemplateDialog){
			this.emailTemplateDialog = new GO.addressbook.EmailTemplateDialog();
			this.emailTemplateDialog.on('save', function(){
				this.store.load();
			}, this);
		}
		this.emailTemplateDialog.show(template_id);
	},

	typeRenderer : function(val, meta, record)
	{
		var type = this.templateType[val];
		
		if(val=='1'){
			type+=' ('+record.get('extension')+')';
		}

		return type;
	},
	
	afterRender : function()
	{
		GO.addressbook.TemplatesGrid.superclass.afterRender.call(this);
		
		if(this.isVisible())
		{
			if(!this.store.loaded)
			{
				this.store.load();
			}
		}

	},
	
	onShow : function(){
		GO.addressbook.TemplatesGrid.superclass.onShow.call(this);
		if(!this.store.loaded)
		{
			this.store.load();
		}
	}

});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: EmailTemplateDialog.js 19784 2016-01-26 13:56:16Z michaelhart86 $
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author Wilmar van Beusekom <wilmar@intermesh.nl>
 */

 
GO.addressbook.EmailTemplateDialog = function(config){
	
	if(!config)
	{
		config={};
	}
	
	this.buildForm();
	
	var focusFirstField = function(){
		this.propertiesPanel.items.items[0].focus();
	};
	
	
	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=true;
	config.width=760;
	config.height=600;
	config.closeAction='hide';
	config.title= GO.addressbook.lang.emailTemplate;					
	config.items= this.formPanel;
	config.focus= focusFirstField.createDelegate(this);
	config.buttons=[{
		text: GO.lang['cmdOk'],
		handler: function(){
			this.submitForm(true);
		},
		scope: this
	},{
		text: GO.lang['cmdApply'],
		handler: function(){
			this.submitForm();
		},
		scope:this
	},{
		text: GO.lang['cmdClose'],
		handler: function(){
			this.hide();
		},
		scope:this
	}];

	
	GO.addressbook.EmailTemplateDialog.superclass.constructor.call(this, config);
	
	
	this.addEvents({
		'save' : true
	});
}

Ext.extend(GO.addressbook.EmailTemplateDialog, Ext.Window,{
//
//	inline_attachments : [],
	
	show : function (email_template_id) {
		
		if(!this.rendered)
		{
			this.render(Ext.getBody());
		}

		this.tabPanel.setActiveTab(0);

		if(!email_template_id)
		{
			email_template_id=0;			
		}
			
		this.setEmailTemplateId(email_template_id);
		
		if(this.email_template_id>0)
		{
			this.formPanel.load({
				url: GO.url('addressbook/template/load'),
				
				success:function(form, action)
				{
					this.readPermissionsTab.setAcl(action.result.data.acl_id);
										
					GO.addressbook.EmailTemplateDialog.superclass.show.call(this);
				},
				failure:function(form, action)
				{
					GO.errorDialog.show(action.result.feedback)
				},
				scope: this
				
			});
		}else 
		{			
			this.formPanel.form.reset();
			this.htmlEditPanel.reset();
			this.readPermissionsTab.setAcl(0);

			GO.addressbook.EmailTemplateDialog.superclass.show.call(this);
		}
	},
	
	

	setEmailTemplateId : function(email_template_id)
	{
		this.formPanel.form.baseParams['id']=email_template_id;
		this.email_template_id=email_template_id;		
	},
	
	submitForm : function(hide){

		//won't toggle if not done twice...
		// THIS IS ALREADY DONE IN THE EMAILEDITORPANEL 
//		if(this.htmlEditPanel.getHtmlEditor().sourceEditMode){
//			this.htmlEditPanel.getHtmlEditor().toggleSourceEdit(false);
//			this.htmlEditPanel.getHtmlEditor().toggleSourceEdit(false);
//		}
		//this.htmlEditPanel.getHtmlEditor().toggleSourceEdit(false);

		this.formPanel.form.submit(
		{
			url: GO.url('addressbook/template/submit'),
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				
				this.fireEvent('save', this);

				if(hide)
				{
					this.hide();	
				}else
				{
					if(action.result.id)
					{
						this.setEmailTemplateId(action.result.id);						
						this.readPermissionsTab.setAcl(action.result.acl_id);
					}
				}	
			},		
			failure: function(form, action) {
				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});
		
	},
	
	
	buildForm : function () {
		
//		var imageInsertPlugin = new GO.plugins.HtmlEditorImageInsert();
//		imageInsertPlugin.on('insert', function(plugin, path, url,temp,id) {
//
//
//			var ia = {
//				tmp_file : path,
//				url : url,
//				temp:temp
//			};
//
//		this.inline_attachments.push(ia);
//		}, this);
		
		var autodata = [			
		['{date}',GO.lang['strDate']],
		['{contact:salutation}',GO.lang['strSalutation']],
		['{contact:first_name}',GO.lang['strFirstName']],
		['{contact:middle_name}',GO.lang['strMiddleName']],
		['{contact:last_name}',GO.lang['strLastName']],
		['{contact:initials}',GO.lang['strInitials']],
		['{contact:title}',GO.lang['strTitle']],
		['{contact:email}',GO.lang['strEmail']],
		['{contact:home_phone}',GO.lang['strPhone']],
		['{contact:fax}',GO.lang['strFax']],
		['{contact:cellular}',GO.lang['strCellular']],
		['{contact:cellular2}',GO.lang['cellular2']],
		['{contact:address}',GO.lang['strAddress']],
		['{contact:address_no}',GO.lang['strAddressNo']],
		['{contact:zip}',GO.lang['strZip']],
		['{contact:city}',GO.lang['strCity']],
		['{contact:state}',GO.lang['strState']],
		['{contact:country}',GO.lang['strCountry']],
		['{contact:company}',GO.lang['strCompany']],
		['{contact:department}',GO.lang['strDepartment']],
		['{contact:function}',GO.lang['strFunction']],
		['{contact:work_phone}',GO.lang['strWorkPhone']],
		['{contact:work_fax}',GO.lang['strWorkFax']],
		['{contact:work_address}',GO.lang['strWorkAddress']],
		['{contact:work_address_no}',GO.lang.strWorkAddressNo],
		['{contact:work_city}',GO.lang['strWorkCity']],
		['{contact:work_zip}',GO.lang['strWorkZip']],
		['{contact:work_state}',GO.lang['strWorkState']],
		['{contact:work_country}',GO.lang['strWorkCountry']],
		['{contact:work_post_address}',GO.lang['strPostAddress']],
		['{contact:work_post_address_no}',GO.lang['strPostAddressNo']],
		['{contact:work_post_city}',GO.lang['strPostCity']],
		['{contact:work_post_zip}',GO.lang['strPostZip']],
		['{contact:work_post_state}',GO.lang['strPostState']],
		['{contact:work_post_country}',GO.lang['strPostCountry']],
		['{contact:homepage}',GO.lang['strHomepage']],
		['{user:name}',GO.lang.strName+' ('+GO.lang.strUser+')'],
		['{user:first_name}',GO.lang['strFirstName']+' ('+GO.lang.strUser+')'],
		['{user:middle_name}',GO.lang['strMiddleName']+' ('+GO.lang.strUser+')'],
		['{user:last_name}',GO.lang['strLastName']+' ('+GO.lang.strUser+')'],
		['{user:initials}',GO.lang['strInitials']+' ('+GO.lang.strUser+')'],
		['{user:title}',GO.lang['strTitle']+' ('+GO.lang.strUser+')'],
		['{user:email}',GO.lang['strEmail']+' ('+GO.lang.strUser+')'],
		['{user:home_phone}',GO.lang['strPhone']+' ('+GO.lang.strUser+')'],
		['{user:fax}',GO.lang['strFax']+' ('+GO.lang.strUser+')'],
		['{user:work_phone}',GO.lang['strWorkPhone']+' ('+GO.lang.strUser+')'],
		['{user:work_fax}',GO.lang['strWorkFax']+' ('+GO.lang.strUser+')'],
		['{user:cellular}',GO.lang['strCellular']+' ('+GO.lang.strUser+')'],
		['{user:cellular2}',GO.lang['cellular2']+' ('+GO.lang.strUser+')'],
		['{user:address}',GO.lang['strAddress']+' ('+GO.lang.strUser+')'],
		['{user:address_no}',GO.lang['strAddressNo']+' ('+GO.lang.strUser+')'],
		['{user:zip}',GO.lang['strZip']+' ('+GO.lang.strUser+')'],
		['{user:city}',GO.lang['strCity']+' ('+GO.lang.strUser+')'],
		['{user:state}',GO.lang['strState']+' ('+GO.lang.strUser+')'],
		['{user:country}',GO.lang['strCountry']+' ('+GO.lang.strUser+')'],
		['{usercompany:name}',GO.lang['strCompany']+' ('+GO.lang.strUser+')'],
		['{user:department}',GO.lang['strDepartment']+' ('+GO.lang.strUser+')'],
		['{user:function}',GO.lang['strFunction']+' ('+GO.lang.strUser+')'],
		['{usercompany:phone}',GO.lang['strWorkPhone']+' ('+GO.lang.strUser+')'],
		['{usercompany:fax}',GO.lang['strWorkFax']+' ('+GO.lang.strUser+')'],
		['{usercompany:address}',GO.lang['strWorkAddress']+' ('+GO.lang.strUser+')'],
		['{usercompany:address_no}',GO.lang['strWorkAddressNo']+' ('+GO.lang.strUser+')'],
		['{usercompany:city}',GO.lang['strWorkCity']+' ('+GO.lang.strUser+')'],
		['{usercompany:zip}',GO.lang['strWorkZip']+' ('+GO.lang.strUser+')'],
		['{usercompany:state}',GO.lang['strWorkState']+' ('+GO.lang.strUser+')'],
		['{usercompany:country}',GO.lang['strWorkCountry']+' ('+GO.lang.strUser+')'],
		['{user:homepage}',GO.lang.strHomepage+' ('+GO.lang.strUser+')'],
		['{unsubscribe_link}',GO.addressbook.lang.unsubscribeLink],
		['%unsubscribe_href%',GO.addressbook.lang.unsubscribeHref],
		['{link}',GO.lang.cmdLink]
		];
   	
		var items = [new Ext.Panel({
			title:GO.addressbook.lang.autoData ,
			autoScroll:true,
			items:new GO.grid.SimpleSelectList({
				store:  new Ext.data.SimpleStore({
					fields: ['value', 'name'],
					data : autodata
				}),
				listeners:{
					scope:this,
					click:function(dataview, index){
						
						this.htmlEditPanel.getHtmlEditor().insertAtCursor(dataview.store.data.items[index].data.value);
						this.htmlEditPanel.getHtmlEditor().deferFocus();
						dataview.clearSelections();
					}
				}
			})
		})];

		if(GO.customfields){
			autodata=[];

			if(autodata.length){
				items.push(new Ext.Panel({
					autoScroll:true,
					title:GO.addressbook.lang.customContactFields,

					items:new GO.grid.SimpleSelectList({
						store:  new Ext.data.SimpleStore({
							fields: ['value', 'name'],
							data : autodata
						}),
						listeners:{
							scope:this,
							click:function(dataview, index){
								this.htmlEditPanel.getHtmlEditor().insertAtCursor(dataview.store.data.items[index].data.value);
								this.htmlEditPanel.getHtmlEditor().deferFocus();
								dataview.clearSelections();
							}
						}
					})
				}));
			}

			autodata=[];

			if(autodata.length){
				items.push(new Ext.Panel({
					autoScroll:true,
					title:GO.addressbook.lang.customCompanyFields,
					items:new GO.grid.SimpleSelectList({
						store:  new Ext.data.SimpleStore({
							fields: ['value', 'name'],
							data : autodata
						}),
						listeners:{
							scope:this,
							click:function(dataview, index){
								this.htmlEditPanel.getHtmlEditor().insertAtCursor(dataview.store.data.items[index].data.value);
								this.htmlEditPanel.getHtmlEditor().deferFocus();
								dataview.clearSelections();
							}
						}
					})
				}));
			}
			
			
			
			autodata=[];

			if(autodata.length){
				items.push(new Ext.Panel({
					autoScroll:true,
					title:GO.addressbook.lang.customUserFields,
					items:new GO.grid.SimpleSelectList({
						store:  new Ext.data.SimpleStore({
							fields: ['value', 'name'],
							data : autodata
						}),
						listeners:{
							scope:this,
							click:function(dataview, index){
								this.htmlEditPanel.getHtmlEditor().insertAtCursor(dataview.store.data.items[index].data.value);
								this.htmlEditPanel.getHtmlEditor().deferFocus();
								dataview.clearSelections();
							}
						}
					})
				}));
			}
		}

		this.autoDataPanel = new Ext.Panel({
			region:'east',
			layout:'accordion',
			border:false,
			autoScroll:true,
			width: 180,
			split:true,
			resizable:true,
			items:items
		});
		

		this.propertiesPanel = new Ext.Panel({
			region:'center',
			border: false,
			layout:'border',
			items:[{
				region:'north',
				height:60,
				layout:'form',
				border: false,
				cls:'go-form-panel',			
				items:[
					{
					xtype: 'textfield',
					name: 'name',
					anchor: '100%',
					allowBlank:false,
					fieldLabel: GO.lang.strName
				},
				{
					xtype: 'textfield',
					name: 'subject',
					anchor: '100%',
					allowBlank: true,
					fieldLabel: GO.lang.strSubject
				}
			]
			},
			this.htmlEditPanel = new GO.base.email.EmailEditorPanel({
				region:'center'
			})]
				
		});

		//{text:'Toggle HTML',handler:function(){this.htmlEditPanel.setContentTypeHtml(this.htmlEditPanel.getContentType()!='html')}, scope:this}
		var borderLayoutPanel = new Ext.Panel({
			layout:'border',
			title:GO.lang['strProperties'],	
			tbar:[this.htmlEditPanel.getAttachmentsButton()],
			items: [this.propertiesPanel, this.autoDataPanel]			
		});
		

		var items  = [borderLayoutPanel];
		
		this.readPermissionsTab = new GO.grid.PermissionsPanel({
			
			});

		items.push(this.readPermissionsTab);
 
		this.tabPanel = new Ext.TabPanel({
			activeTab: 0,
			deferredRender: false,
			border: false,
			items: items,
			anchor: '100% 100%'
		}) ;
    
    
		this.formPanel = new Ext.form.FormPanel({
			border: false,
			baseParams: {
				task: 'email_template'
			},
			waitMsgTarget:true,			
			items:this.tabPanel				
		});
    
    
	}
});

GO.addressbook.SentMailingsGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
	
	config.tbar = [{
				iconCls: 'ml-btn-mailings',
				text: GO.addressbook.lang.sendMailing,
				cls: 'x-btn-text-icon',
				handler: function(){
					if(!this.selectAddresslistWindow)
					{
						this.selectAddresslistWindow=new GO.addressbook.SelectAddresslistWindow();
						this.selectAddresslistWindow.on("select", function(win, addresslist_id){
							var composer = GO.email.showComposer({addresslist_id:addresslist_id, campaign_id: this._campaignId});
							composer.on('hide', function(){
								this.store.load();
							}, this, {single:true});
						}, this);
					}
					this.selectAddresslistWindow.show();
				},
				scope: this
			},'-',{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function(){
				this.deleteSelected();
			},
			scope: this
		}];
	
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.store = new GO.data.JsonStore({
	    url: GO.url('addressbook/sentMailing/store'),
	    baseParams: {
//	    	task: 'sent_mailings',
//	    	addresslist_id: 0	    	
					campaign_id: 0
	    	},
	    root: 'results',
	    id: 'id',
	    totalProperty:'total',
	    fields: ['id', 'addresslist','subject','user_name', 'ctime','status','sent','total','errors', 'hide_pause', 'hide_play', 'message_path','opened'],
	    remoteSort: true
	});

	if (!config.action) {
		var action = new Ext.ux.grid.RowActions({
			header:'',
			hideMode:'display',
			keepSelection:true,
			actions:[{
				iconCls:'ml-btn-view',
				qtip:GO.addressbook.lang.viewMessage
			},{
				iconCls:'ml-btn-view-log',
				qtip:GO.addressbook.lang.viewLog
			},{
				callback: function(grid,record, iconCls) { Ext.select('.ux-row-action-item.'+iconCls).hide(); },
				iconCls:'ml-btn-pause',
				hideIndex:'hide_pause',
				qtip:GO.addressbook.lang.pauseMailing
			},{
				callback: function(grid,record, iconCls) { Ext.select('.ux-row-action-item.'+iconCls).hide(); },
				iconCls:'ml-btn-play',
				hideIndex:'hide_play',
				qtip:GO.addressbook.lang.resumeMailing
			}],
			width: 50
		});
		
		action.on({
			action:function(grid, record, action, row, col) {

				switch(action){
					case 'ml-btn-pause':
						grid.store.baseParams.pause_mailing_id=record.id;
						grid.store.load();
						delete grid.store.baseParams.pause_mailing_id;

						break;
					case 'ml-btn-play':
						grid.store.baseParams.start_mailing_id=record.id;
						grid.store.load();
						delete grid.store.baseParams.start_mailing_id;

						break;
					case 'ml-btn-view':
						GO.linkHandlers["GO\\Savemailas\\Model\\LinkedEmail"].call(this, 0, {action: "path", path:record.get('message_path')});
						break;
					case 'ml-btn-view-log':
						window.open(GO.url("addressbook/sentMailing/viewLog",{'mailing_id': record.id}));
						break;
				}
			}
		});
		
	} else {
		
		var action = config.action;
	}

	if (!config.plugins)
		config.plugins=action;
	
	config.paging=true;
	
	if (!config.columns)
		config.columns = [
	   		{
					header: GO.addressbook.lang.addresslist,
					dataIndex: 'addresslist'
				},	{
					header: GO.addressbook.lang.subject, 
					dataIndex: 'subject'
				},	{
					header: GO.lang.strOwner, 
					dataIndex: 'user_name'
				},	{
					header: GO.lang.strCtime, 
					dataIndex: 'ctime',
					width:110
				},		{
					header: GO.addressbook.lang['status'], 
					dataIndex: 'status',
					renderer:function(v){
						return GO.addressbook.lang.mailingStatus[v];
					}
				},		{
					header: GO.addressbook.lang.sent, 
					dataIndex: 'sent',
					align:'center',
					width:60
				},		{
					header: GO.addressbook.lang.total, 
					dataIndex: 'total',
					align:'center',
					width:60
				},		{
					header: GO.addressbook.lang.errors, 
					dataIndex: 'errors',
					align:'center',
					width:60
				},
				action
			];
	
	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:false
		},
		columns: config.columns
});
		
	config.cm=columnModel;
	
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']		
	}),
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=false;

	
	GO.addressbook.SentMailingsGrid.superclass.constructor.call(this, config);
	
};

Ext.extend(GO.addressbook.SentMailingsGrid, GO.grid.GridPanel,{
//	setMailingId : function(addresslist_id){
//		this.store.baseParams.addresslist_id=addresslist_id;
//		this.store.loaded=false;
//	},
					
	_campaignId : 0,
					
	setCampaignId : function(campaignId) {
		this._campaignId = campaignId;
		this.store.baseParams['campaign_id']=campaignId;
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: MailingDialog.js 15954 2013-10-17 12:04:36Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author Wilmar van Beusekom <wilmar@intermesh.nl>
 */

 
GO.addressbook.MailingDialog = function(config){
	
	
	if(!config)
	{
		config={};
	}
	
	
	this.buildForm();
	
	var focusFirstField = function(){
		this.propertiesPanel.items.items[0].focus();
	};
	
	
	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=750;
	config.height=600;
	config.closeAction='hide';
	config.title= GO.addressbook.lang.addresslist;
	config.items= this.formPanel;
	config.focus= focusFirstField.createDelegate(this);
	config.buttons=[{
			text: GO.lang['cmdOk'],
			handler: function(){
				this.submitForm(true);
			},
			scope: this
		},{
			text: GO.lang['cmdApply'],
			handler: function(){
				this.submitForm();
			},
			scope:this
		},{
			text: GO.lang['cmdClose'],
			handler: function(){
				this.hide();
			},
			scope:this
		}					
	];

	
	GO.addressbook.MailingDialog.superclass.constructor.call(this, config);
	
	this.addEvents({'save' : true});	
}

Ext.extend(GO.addressbook.MailingDialog, Ext.Window,{
	
	show : function (mailing_id) {
		
		if(!this.rendered)
		{
			this.render(Ext.getBody());
		}

		this.tabPanel.setActiveTab(0);

		if(!mailing_id)
		{
			mailing_id=0;			
		}
			
		this.setMailingId(mailing_id);
		
		if(this.mailing_id>0)
		{
			this.formPanel.load({
				url : GO.url('addressbook/addresslist/load'),
				
				success:function(form, action)
				{
					this.readPermissionsTab.setAcl(action.result.data.acl_id);
					this.selectUser.setRemoteText(action.result.data.user_name);					
					this.inline_attachments = action.result.data.inline_attachments;	
					
					GO.addressbook.MailingDialog.superclass.show.call(this);
				},
				failure:function(form, action)
				{
					GO.errorDialog.show(action.result.feedback)
				},
				scope: this
				
			});
		}else 
		{
			
			this.formPanel.form.reset();
			
			GO.addressbook.MailingDialog.superclass.show.call(this);
		}
	},
	
	

	setMailingId : function(mailing_id)
	{
		this.contactsGrid.setMailingId(mailing_id);
		this.companiesGrid.setMailingId(mailing_id);
//		this.usersGrid.setMailingId(mailing_id);
		
		
		
		this.formPanel.form.baseParams['id']=mailing_id;
		this.mailing_id=mailing_id;		
		
		if(this.mailing_id==0)
		{
			this.readPermissionsTab.setAcl(0);
		}
		
	},
	
	
	submitForm : function(hide){
		this.formPanel.form.submit(
		{
			url: GO.url('addressbook/addresslist/submit'),
			params: {
				inline_attachments: Ext.encode(this.inline_attachments)
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				
				this.fireEvent('save', this);
				
				if(hide)
				{
					this.hide();	
				}else
				{
					if(action.result.id)
					{
						this.setMailingId(action.result.id);
						
						this.readPermissionsTab.setAcl(action.result.acl_id);
						
					}
				}	
			},		
			failure: function(form, action) {
				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});
		
	},
	
	
	buildForm : function () {
		
		this.propertiesPanel = new Ext.Panel({
			url: GO.url('addressbook/addresslist/load'),
			border: false,	
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',			
			layout:'form',
			autoScroll:true,
			items:[{
				xtype: 'textfield',
			  name: 'name',
				anchor: '100%',
			  allowBlank:false,
			  fieldLabel: GO.lang.strName
			},new GO.form.HtmlComponent({
				html: GO.addressbook.lang.defaultSalutationText,
				style:'padding:10px 0px'
			}),{
				xtype: 'textfield',
			  name: 'default_salutation',
				anchor: '100%',
			  allowBlank:false,
			  fieldLabel: GO.addressbook.lang.cmdFormLabelSalutation,
			  value: GO.addressbook.lang.cmdSalutation+' '+GO.addressbook.lang.cmdSir+'/'+GO.addressbook.lang.cmdMadam
			},this.selectUser = new GO.form.SelectUser({
				fieldLabel:GO.lang.strOwner,
				disabled: !GO.settings.has_admin_permission,
				value: GO.settings.user_id,
				anchor: '100%'
			})]
		});

		var items  = [this.propertiesPanel];
		
		this.contactsGrid = new GO.addressbook.AddresslistContactsGrid();
		items.push(this.contactsGrid);
		
		this.companiesGrid = new GO.addressbook.AddresslistCompaniesGrid();
		items.push(this.companiesGrid);	
		
    this.readPermissionsTab = new GO.grid.PermissionsPanel({
			title: GO.lang['strPermissions']
		});
	
    
    items.push(this.readPermissionsTab);
		
 
    this.tabPanel = new Ext.TabPanel({
      activeTab: 0,      
      deferredRender: false,
    	border: false,
      items: items,
      anchor: '100% 100%'
    }) ;    
    
    
    this.formPanel = new Ext.form.FormPanel({
    	waitMsgTarget:true,
			border: false,
			baseParams: new Object(),				
			items:this.tabPanel				
		});
    
    
	}
});




/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author Wilmar van Beusekom <wilmar@intermesh.nl>
 */

GO.addressbook.createAddresslistGrids = function(){

	GO.addressbook.AddresslistContactsGrid = Ext.extend(function(config){

		if(!config)
		{
			config = {};
		}

		config.title=GO.addressbook.lang.contacts;

		this.selectContactDialog = new GO.addressbook.SelectContactDialog({
			handler: function(grid, allResults){
				if(!allResults){
					var selModel = grid.getSelectionModel();
					this.store.baseParams.add_keys = Ext.encode(selModel.selections.keys);
					this.store.load();
					delete this.store.baseParams.add_keys;
				}else
				{
					this.store.baseParams.add_search_result = Ext.encode(grid.store.baseParams);
					this.store.load();
					delete this.store.baseParams.add_search_result;
				}
			},
			scope : this
		});

		config.disabled=true;

		config.tbar = [
			{
				iconCls: 'btn-add',
				text: GO.lang.cmdAdd,
				cls: 'x-btn-text-icon',
				handler: function(){
					this.selectContactDialog.show();
				},
				scope: this
			},
			{
				iconCls: 'btn-add',
				text: GO.addressbook.lang.addEntireAddressbook,
				cls: 'x-btn-text-icon',
				handler: function(){
					if(!this.selectAddressbookWindow)
					{
						this.selectAddressbookWindow = new GO.addressbook.SelectAddressbookWindow();
						this.selectAddressbookWindow.on('select', function(addressbook_id){

							if(confirm(GO.addressbook.lang.confirmAddEntireAddressbook))
							{
								this.store.load({
									params:{'start': 0, 'add_addressbook_id': addressbook_id}
								});
							}
						}, this);
					}
					this.selectAddressbookWindow.show();
				},
				scope: this
			},
			{
				iconCls: 'btn-delete',
				text: GO.lang['cmdDelete'],
				cls: 'x-btn-text-icon',
				handler: function(){
					this.deleteSelected();
				},
				scope: this
			}
			];


		config.store = new GO.data.JsonStore({
				url: GO.url('addressbook/addresslist/contacts'),
				baseParams: {
					addresslist_id: '0'
				},
				root: 'results',
				id: 'id',
				totalProperty:'total',
				fields: ['id', 'name', 'company_name', 'email', 'home_phone', 'work_phone', 'cellular','addressbook_name'],
				remoteSort: true
			});


		config.paging=true;
		config.border=false;
		var contactsColumnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
			{
				header: GO.lang['strName'],
				dataIndex: 'name'
			},
			{
				header: GO.lang['strCompany'],
				dataIndex: 'company_name'
			},
			{
				header: GO.lang['strEmail'],
				dataIndex: 'email' ,
				width: 150,
				hidden:true
			},
			{
				header: GO.lang['strPhone'],
				dataIndex: 'home_phone' ,
				width: 100,
				hidden:true
			},
			{
				header: GO.lang['strWorkPhone'],
				dataIndex: 'work_phone' ,
				width: 100,
				hidden:true
			},
			{
				header: GO.lang['strWorkFax'],
				dataIndex: 'work_fax' ,
				width: 100,
				hidden:true
			},
			{
				header: GO.lang['strCellular'],
				dataIndex: 'cellular' ,
				width: 100,
				hidden:true
			},
			{
				header: GO.addressbook.lang['addressbook'],
				dataIndex: 'addressbook_name' ,
				width: 100,
				hidden:true
			}
		]
		});
		
		config.cm=contactsColumnModel;

		config.view=new Ext.grid.GridView({
			autoFill: true,
			forceFit: true,
			emptyText: GO.lang.strNoItems
		}),
		config.sm=new Ext.grid.RowSelectionModel();
		config.loadMask=true;

		config.paging = true;

		GO.addressbook.AddresslistContactsGrid.superclass.constructor.call(this, config);

	}, GO.grid.GridPanel, {
		onShow : function(){
			if(!this.store.loaded)
			{
				this.store.load();
			}
			GO.addressbook.AddresslistContactsGrid.superclass.onShow.call(this);
		},
		setMailingId : function(addresslist_id)
		{
			this.store.baseParams['addresslist_id']=addresslist_id;
			this.store.loaded=false;
			this.setDisabled(addresslist_id==0);
		}
	});







	GO.addressbook.AddresslistCompaniesGrid = Ext.extend(function(config){

		if(!config)
		{
			config = {};
		}

		config.title=GO.addressbook.lang.companies;
		this.selectCompanyDialog = new GO.addressbook.SelectCompanyDialog({
			handler: function(grid, allResults){
				if(!allResults){
					var selModel = grid.getSelectionModel();
					this.store.baseParams.add_keys = Ext.encode(selModel.selections.keys);
					this.store.load();
					delete this.store.baseParams.add_keys;
				}else
				{
					this.store.baseParams.add_search_result = Ext.encode(grid.store.baseParams);
					this.store.load();
					delete this.store.baseParams.add_search_result;
				}
			},
			scope : this
		});

		config.disabled=true;

		config.tbar = [
			{
				iconCls: 'btn-add',
				text: GO.lang.cmdAdd,
				cls: 'x-btn-text-icon',
				handler: function(){
					this.selectCompanyDialog.show();
				},
				scope: this
			},
			{
				iconCls: 'btn-add',
				text: GO.addressbook.lang.addEntireAddressbook,
				cls: 'x-btn-text-icon',
				handler: function(){
					if(!this.selectAddressbookWindow)
					{
						this.selectAddressbookWindow = new GO.addressbook.SelectAddressbookWindow();
						this.selectAddressbookWindow.on('select', function(addressbook_id){

							if(confirm(GO.addressbook.lang.confirmAddEntireAddressbook))
							{
								this.store.load({
									params:{'start': 0, 'add_addressbook_id': addressbook_id}
								});
							}

						}, this);
					}
					this.selectAddressbookWindow.show();
				},
				scope: this
			},
			{
				iconCls: 'btn-delete',
				text: GO.lang['cmdDelete'],
				cls: 'x-btn-text-icon',
				handler: function(){
					this.deleteSelected();
				},
				scope: this
			}
			];

		config.store = new GO.data.JsonStore({
			url: GO.url('addressbook/addresslist/companies'),
			baseParams: {
				addresslist_id: '0'
			},
			root: 'results',
			id: 'id',
			totalProperty:'total',
			fields: ['id', 'name', 'homepage', 'email', 'phone', 'fax','addressbook_name'],
			remoteSort: true
		});


		config.border=false;
		config.paging=true;

		var companiesColumnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
			{
				header: GO.lang['strName'],
				dataIndex: 'name'
			},
			{
				header: GO.lang['strEmail'],
				dataIndex: 'email' ,
				width: 150,
				hidden:true
			},
			{
				header: GO.lang['strHomepage'],
				dataIndex: 'homepage' ,
				width: 100,
				hidden:true
			},
			{
				header: GO.lang['strPhone'],
				dataIndex: 'phone' ,
				width: 100
			},
			{
				header: GO.lang['strFax'],
				dataIndex: 'fax' ,
				width: 100,
				hidden:true
			},
			{
				header: GO.addressbook.lang['addressbook'],
				dataIndex: 'addressbook_name' ,
				width: 100,
				hidden:true
			}
		]
		});
		
		config.cm=companiesColumnModel;

		config.view=new Ext.grid.GridView({
			autoFill: true,
			forceFit: true,
			emptyText: GO.lang.strNoItems
		}),
		config.sm=new Ext.grid.RowSelectionModel();
		config.loadMask=true;

		GO.addressbook.CompaniesGrid.superclass.constructor.call(this, config);

	},GO.grid.GridPanel, {
		onShow : function(){
			if(!this.store.loaded)
			{
				this.store.load();
			}
			GO.addressbook.AddresslistContactsGrid.superclass.onShow.call(this);
		},


		setMailingId : function(addresslist_id)
		{
			this.store.baseParams['addresslist_id']=addresslist_id;
			this.store.loaded=false;
			this.setDisabled(addresslist_id==0);
		}
	});

};	
		


if(!GO.addressbook)
{
	GO.moduleManager.onModuleReady('addressbook', GO.addressbook.createAddresslistGrids);
}else
{
	GO.addressbook.createAddresslistGrids();
} 


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: AddresslistsGrid.js 20622 2016-11-08 12:48:42Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author Wilmar van Beusekom <wilmar@intermesh.nl>
 */

GO.addressbook.AddresslistsGrid = function(config)
{
	if(!config)
	{
		config = {};
	}
	
	config.title= GO.addressbook.lang['cmdPanelMailings'];
	config.layout= 'fit';
	config.border=false;
	
	config.store=new GO.data.JsonStore({
			url: GO.url("addressbook/addresslist/store"),
			baseParams: {
					permissionLevel: GO.permissionLevels.write
			},
			fields: ['id', 'name', 'user_name','acl_id'],
			remoteSort: true
	});
	
	config.tbar=[
	{
		iconCls: 'btn-add',
		text: GO.lang.cmdAdd,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.mailingDialog.show();
		},
		disabled: !GO.settings.modules.addressbook.write_permission,
		scope: this
	},
	{
		iconCls: 'btn-delete',
		text: GO.lang.cmdDelete,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.deleteSelected();
		},
		disabled: !GO.settings.modules.addressbook.write_permission,
		scope: this
	},
	'-'
	,
		this.searchField = new GO.form.SearchField({
			store: config.store,
			width:150,
			emptyText: GO.lang.strSearch
		})
	];
	config.paging=true;
	//	config.id= 'ab-mailings-grid';
	//config.store=GO.addressbook.writableAddresslistsStore;

	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang.strNoItems
	});
	
	config.store.setDefaultSort('name', 'ASC');
	
	var columnModel =  new Ext.grid.ColumnModel([
	{
		header: GO.lang['strName'],
		dataIndex: 'name'
	},
	{
		header: GO.addressbook.lang['cmdOwner'],
		dataIndex: 'user_name' ,
		sortable: false
	}
	]);
	
	config.deleteConfig={extraWarning:GO.addressbook.lang.deleteWarningAdderessList+"\n\n"};
	
	config.cm= columnModel;
	config.sm= new Ext.grid.RowSelectionModel({
		singleSelect: false
	});
    

	GO.addressbook.AddresslistsGrid.superclass.constructor.call(this, config);
	
	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);
		
		this.mailingDialog.show(record.data.id);

	}, this);
	
}

Ext.extend(GO.addressbook.AddresslistsGrid, GO.grid.GridPanel,{
	afterRender : function()
	{
		GO.addressbook.AddresslistsGrid.superclass.afterRender.call(this);

		if(!this.store.loaded)
		{
			this.store.load();
		}

		this.mailingDialog = new GO.addressbook.MailingDialog();
		this.mailingDialog.on('save', function(){
			this.store.load();
			
			GO.addressbook.writableAddresslistsStore.load();
		}, this);

	}
});

		
GO.addressbook.SelectAddresslistWindow = Ext.extend(Ext.Window, {
	
	initComponent : function(){
		
		this.title=GO.addressbook.lang.selectMailingGroup;
		
		this.grid = new GO.grid.GridPanel({
				layout: 'fit',
				border: false,
				height: 300,
				store: GO.addressbook.readableAddresslistsStore,
				paging: true,
				view: new Ext.grid.GridView({
					autoFill: true,
					forceFit: true,
					emptyText: GO.lang.strNoItems
				}),
				cm: new Ext.grid.ColumnModel([
					{
						header: GO.lang['strName'],
						dataIndex: 'name'
					}
				]),
				sm: new Ext.grid.RowSelectionModel({
					singleSelect: false
				})
			});
		
		this.grid.on('rowdblclick', function(grid, rowIndex){			
				
				var record = grid.store.getAt(rowIndex);
				
				var addresslist_id = record.data.id;
			
				this.fireEvent("select", this, addresslist_id);
//				this.grid.clearSelections();
				this.hide();
				
		}, this);
		
		
		this.title= GO.addressbook.lang.selectAddresslist;
		this.layout='fit';
		this.modal=false;
		this.height=400;			
		this.width=400;
		this.closable=true;
		this.closeAction='hide';	
		this.items= this.panel = new Ext.Panel({
			autoScroll:true,
			items: this.grid,
			cls: 'go-form-panel'
		});
		this.buttons=[{
		text: GO.lang['cmdClose'],
		handler: function(){
			this.hide();
		},
		scope:this
	}];
		
		GO.addressbook.SelectAddresslistWindow.superclass.initComponent.call(this);
		
		this.addEvents({"select":true});
	},
	
	show : function(){		
		if(!this.grid.store.loaded)
		{
			this.grid.store.load({
				callback:function(){
					this.show();
				},
				scope:this
			});
			return false;
		}
		
		GO.addressbook.SelectAddresslistWindow.superclass.show.call(this);
		
		if(this.grid.store.getCount()==0)
		{
			this.panel.body.update(GO.addressbook.lang.noMailingGroups);
		}
	}
});


GO.addressbook.MailingStatusWindow = function(config){

	config = config || {};

	config.title=GO.addressbook.lang.sentMailings;
	config.id='ml-sent-mailings';

	config.width=770;
	config.height=500;

	config.layout='fit';
	
	config.listeners={
		scope:this,
		show:function(){
			Ext.TaskMgr.start(this.refreshTask);
		},
		hide:function(){
			Ext.TaskMgr.stop(this.refreshTask);
		}
	};
	
	this.refreshTask = {
			run: function(){
				this.sentMailingsGrid.store.load({
					params: {
						start : this.sentMailingsGrid.bottomToolbar.cursor
					}
				})
			},
			scope:this,
			interval:5000
		};
	

	config.items=this.sentMailingsGrid = new GO.addressbook.SentMailingsGrid();

	
	

	GO.addressbook.MailingStatusWindow.superclass.constructor.call(this, config);
}

Ext.extend(GO.addressbook.MailingStatusWindow, GO.Window,{
	refreshTask : false
});

		
GO.addressbook.SelectAddressbookWindow = Ext.extend(Ext.Window, {
	
	initComponent : function(){
		this.addEvents({'select' : true});	
		
		
		this.title=GO.addressbook.lang.selectAddressbook;
		
		this.list = new GO.grid.SimpleSelectList({
			store : new GO.data.JsonStore({
					url: GO.url('addressbook/addressbook/store'),
					baseParams: {
						'permissionLevel' : GO.permissionLevels.read,
						start:0,
						limit:0

						},
					root: 'results', 
					totalProperty: 'total', 
					id: 'id',
					fields: GO.addressbook.addressbooksStoreFields,
					remoteSort: true
				})
				//store: GO.addressbook.readableAddressbooksStore 
			});
		
		this.list.on('click', function(dataview, index){			
				
				var addressbook_id = dataview.store.data.items[index].id;
			
				this.fireEvent('select', addressbook_id);			
				this.hide();
				
		}, this);
		
		this.on('show', function(){
			this.list.store.load();
		}, this);
		
		this.title= GO.addressbook.lang.selectAddressbook;
		this.layout='fit';
		this.modal=false;
		this.height=400;			
		this.width=400;
		this.closable=true;
		this.closeAction='hide';	
		this.items= this.panel = new Ext.Panel({
			autoScroll:true,
			items: this.list,
			cls: 'go-form-panel'
		});
		this.buttons=[{
			text: GO.lang['cmdClose'],
			handler: function(){
				this.hide();
			},
			scope:this
		}];
		
		GO.addressbook.SelectAddressbookWindow.superclass.initComponent.call(this);
		
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @copyright Copyright Intermesh
 * @version $Id: AddresslistsFilterPanel.js 14816 2013-05-21 08:31:20Z mschering $
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.addressbook.AddresslistsFilterPanel = function(config)
{
	if(!config)
	{
		config = {};
	}
	
	config.autoScroll=true;
	config.title= GO.addressbook.lang.filterMailings;
	
	var checkColumn = new GO.grid.CheckColumn({
		header: '&nbsp;',
		dataIndex: 'checked',
		width: 30
	});
	
	
	Ext.apply(config,{
		cls:'go-grid3-hide-headers',
		disableSelection:true,
		border:true,
		loadMask:true,
		store: GO.addressbook.readableAddresslistsStore,		
		columns: [
				checkColumn,
				{
					header: GO.lang.strName, 
					dataIndex: 'name',
					id:'name'
				}				
			],
		plugins: [checkColumn],
		autoExpandColumn:'name',
		viewConfig: {emptyText:GO.addressbook.lang.noAddressLists}
	});	

	config.layout= 'fit';

	
	var applyButton = new Ext.Button({
		text:GO.lang.cmdApply,
		handler:function(){			
			var mailings = [];
			
			for (var i = 0; i < GO.addressbook.readableAddresslistsStore.data.items.length;  i++)
			{
				var checked = GO.addressbook.readableAddresslistsStore.data.items[i].get('checked');
				if(checked=="1")
				{
					mailings.push(GO.addressbook.readableAddresslistsStore.data.items[i].get('id'));	
				}				
			}
			
			this.fireEvent('change', this, mailings);
			
			GO.addressbook.readableAddresslistsStore.commitChanges();			
		},
		scope: this
	});    
	
	var resetButton = new Ext.Button({
		text:GO.lang.cmdReset,
		handler:function(){			
			
			var mailings = [];
			for (var i = 0; i < GO.addressbook.readableAddresslistsStore.data.items.length;  i++)
			{
				var checked = GO.addressbook.readableAddresslistsStore.data.items[i].set('checked', '0');								
			}
						
			this.fireEvent('change', this, mailings);			
			GO.addressbook.readableAddresslistsStore.commitChanges();		
		},
		scope: this
	});    
	
	
	config.buttons=[applyButton,resetButton];
	config.buttonAlign='left';

	GO.addressbook.AddresslistsFilterPanel.superclass.constructor.call(this, config);	
	this.addEvents({change : true});
}

Ext.extend(GO.addressbook.AddresslistsFilterPanel, GO.grid.GridPanel,{
	afterRender : function(){
		
		
		
		GO.addressbook.readableAddresslistsStore.load();
		
		GO.addressbook.AddresslistsFilterPanel.superclass.afterRender.call(this);
	}
});

GO.addressbook.SexCombobox = function(config){

	Ext.apply(this, config);

	GO.addressbook.SexCombobox.superclass.constructor.call(this,{
		store: new Ext.data.SimpleStore({
			fields: ['value', 'text'],
			data : [
			['M', GO.lang['strMale']],
			['F', GO.lang['strFemale']]
//			[1, GO.lang['strMale']],
//			[2, GO.lang['strFemale']]
			]

		}),
		valueField:'value',
		displayField:'text',
		mode: 'local',
		triggerAction: 'all',
		editable: false,
		selectOnFocus:true,
		forceSelection: true,
		fieldLabel: GO.lang.strSex,
		hiddenName:'sex'
	});

}
 
Ext.extend(GO.addressbook.SexCombobox, Ext.form.ComboBox);

GO.moduleManager.onModuleReady('customfields', function(){
	//GO.customfields.nonGridTypes.push('contact');
	GO.customfields.dataTypes["GO\\Addressbook\\Customfieldtype\\Contact"]={
		label : GO.addressbook.lang.contact,
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.name;
			
			return Ext.apply(f, {
				xtype: 'selectcontact',
				noUserContacts:true,
				idValuePair:true,
				hiddenName:customfield.dataname,
				forceSelection:true,				
				valueField:'cf',
				customfieldId: customfield.dataname
			});
		}
	}
	
	GO.customfields.dataTypes["GO\\Addressbook\\Customfieldtype\\Company"]={
		label : GO.addressbook.lang.company,
		getFormField : function(customfield, config){

			var f = GO.customfields.dataTypes["GO\\Customfields\\Customfieldtype\\Text"].getFormField(customfield, config);

			delete f.name;

			return Ext.apply(f, {
				xtype: 'selectcompany',
				idValuePair:true,
				hiddenName:customfield.dataname,
				forceSelection:true,				
				valueField:'cf',
				customfieldId: customfield.dataname
			});
		}
	}

}, this);

GO.addressbook.AddresslistsMultiSelectGrid = function(config) {
	var config = config || {};
	
	config.title = GO.addressbook.lang.filterMailings;
	config.loadMask = true;
	config.store = GO.addressbook.readableAddresslistsStore;
	config.allowNoSelection = true;
	
	Ext.applyIf(config,{
		region:'center'
	});
	
	Ext.apply(config, {		
		bbar: new GO.SmallPagingToolbar({
			items:[this.searchField = new GO.form.SearchField({
				store: config.store,
				width:120,
				emptyText: GO.lang.strSearch
			})],
			store:config.store,
			pageSize:GO.settings.config.nav_page_size
		})
	});
	
	GO.addressbook.AddresslistsMultiSelectGrid.superclass.constructor.call(this,config);
	
};

Ext.extend(GO.addressbook.AddresslistsMultiSelectGrid, GO.grid.MultiSelectGrid, {
	afterRender : function() {
		GO.addressbook.AddresslistsMultiSelectGrid.superclass.afterRender.call(this);
		
		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody, {
			ddGroup : 'AddressBooksDD',
			notifyDrop : this.onNotifyDrop.createDelegate(this)
		});	
	},
	
	onNotifyDrop : function(source, e, data)
	{	
		
		var selections = source.dragData.selections;
		var dropRowIndex = this.getView().findRowIndex(e.target);
		var list_id = this.getView().grid.store.data.items[dropRowIndex].id;
		var list_name = this.getView().grid.store.data.items[dropRowIndex].data.name;
		
		var contacts = [];
		var companies = [];
		
		for (var i=0; i<selections.length; i++) {
			
			var selection = selections[i];
			
			if ('name2' in selection.data && 'post_address' in selection.data)
				companies.push(selection.data.id);
			else
				contacts.push(selection.data.id);
			
		}
		
		Ext.Msg.show({
			title: GO.addressbook.lang['addToAddresslist'].replace('%s',list_name),
			msg: GO.addressbook.lang['addToAddresslistPrompt'].replace(/%s/g,list_name),
			buttons: Ext.Msg.YESNOCANCEL,
			scope: this,
			fn: function(btn) {
				if (btn!='cancel') {
					GO.request({
						url: 'addressbook/addresslist/add',
						params: {
							contacts : Ext.encode(contacts),
							companies : Ext.encode(companies),
							addresslistId : list_id,
							move : btn=='yes'
						},
						success: function(options, response, result)
						{
							Ext.Msg.alert(GO.lang['strSuccess'],GO.addressbook.lang['addAddresslistSuccess']);
						},
						scope: this
					})
				}
			}
		});
	}
});

GO.mainLayout.onReady(function(){
	
	if(GO.addressbook && GO.settings.show_addresslist_tab === "1")
		GO.moduleManager.addSettingsPanel('addresslists', GO.addressbook.AddresslistsSettingsPanel,{},4);
	
	
	if(GO.customfields && GO.customfields.settingsPanels)
	{
		for(var i=0;i < GO.customfields.settingsPanels.panels.length;i++)
		{
			var id = '';
			id = GO.customfields.settingsPanels.panels[i].category_id;

			GO.moduleManager.addSettingsPanel('contact_cf_panel_'+i,GO.customfields.CustomFormPanel, GO.customfields.settingsPanels.panels[i],i+5);
		}
	}	
});

GO.addressbook.BirthdaysPanel = function(config)
	{
		if(!config)
		{
			config = {};
		}

		config.id='su-birthdays-grid';
		
		var reader = new Ext.data.JsonReader({
			totalProperty: 'total',
			root: 'results',
			fields:['addressbook_id','photo_url', 'name','birthday','age'],
			id: 'name'
		});
	
		config.store = new Ext.data.GroupingStore({
			url: GO.url('addressbook/portlet/birthdays'),
			reader: reader,
			sortInfo: {
				field: 'addressbook_id',
				direction: 'ASC'
			},
			groupField: 'addressbook_id',
			remoteGroup:true,
			remoteSort:true
		});

		config.store.on('load', function(){
			//do layout on Startpage
			if(this.rendered)
				this.ownerCt.ownerCt.ownerCt.doLayout();
		}, this);

	
		config.paging=false,
		config.autoExpandColumn='birthday-portlet-name-col';
		config.autoExpandMax=2500;
		config.enableColumnHide=false;
		config.enableColumnMove=false;
		config.columns=[
		{
			header: '',
			dataIndex: 'photo_url',
			renderer: function (value, metaData, record) {
				return '<img src="'+value+'" height="50"/>';
			}
		},{
			id:'birthday-portlet-name-col',
			header:GO.lang['strName'],
			dataIndex: 'name',
			sortable:true
		},{
			header:GO.addressbook.lang['addressbook'],
			dataIndex: 'addressbook_id',
			sortable:true
		},{
			header:GO.addressbook.lang['contactBirthday'],
			dataIndex: 'birthday',
			width:100,
			sortable:true
		},{
			header:GO.lang['age'],
			dataIndex: 'age',
			width:100
		}];
		config.view=new Ext.grid.GroupingView({
			scrollOffset: 2,
			hideGroupedColumn:true
		}),
		config.sm=new Ext.grid.RowSelectionModel();
		config.loadMask=true;
		config.autoHeight=true;
	
		GO.addressbook.BirthdaysPanel.superclass.constructor.call(this, config);
	
	};

Ext.extend(GO.addressbook.BirthdaysPanel, GO.grid.GridPanel, {
	
	saveListenerAdded : false,
		
	afterRender : function()
	{
		GO.addressbook.BirthdaysPanel.superclass.afterRender.call(this);

		Ext.TaskMgr.start({
			run: function(){
				this.store.load();
			},
			scope:this,
			interval:960000
		});
	}
	
});


GO.mainLayout.onReady(function(){
	if(GO.summary)
	{
		var birthdaysGrid = new GO.addressbook.BirthdaysPanel();
		
		GO.summary.portlets['portlet-birthdays']=new GO.summary.Portlet({
			id: 'portlet-birthdays',
			//iconCls: 'go-module-icon-tasks',
			title: GO.addressbook.lang['upcomingBirthdays'],
			layout:'fit',
			tools: [{
				id: 'gear',
				handler: function(){
					if(!this.selectAddressbookWin)
					{
						this.selectAddressbookWin = new GO.base.model.multiselect.dialog({
							url:'addressbook/portlet',
							columns:[{ header: GO.lang['strName'], dataIndex: 'name', sortable: true }],
							fields:['id','name'],
							title:GO.addressbook.lang['birthdays'],
							model_id:GO.settings.user_id,
							listeners:{
								hide:function(){
									birthdaysGrid.store.reload();
								},
								scope:this
							}
						});
					}
					this.selectAddressbookWin.show();
				}
			},{
				id:'close',
				handler: function(e, target, panel){
					panel.removePortlet();
				}
			}],
			items: birthdaysGrid,
			autoHeight:true
		});
	}
});

/**
 * 
 * !! NOTE: this panel is only used for the Settings Dialog !!
 * The contact dialog has its own photopanel build in.
 */
GO.addressbook.PhotoPanel = Ext.extend(Ext.Panel, {
	
	originalPhotoUrl : null,
	contactPhoto: null,
	
	initComponent : function(){
		
		var cPhoto = Ext.extend(Ext.BoxComponent, {
			autoEl : {
					tag: 'img',
					cls:'ab-photo',
					src:Ext.BLANK_IMAGE_URL
				},

			setPhotoSrc : function(url)
			{
				var now = new Date();
				if (this.el)
					this.el.set({
						src: GO.util.empty(url) ? Ext.BLANK_IMAGE_URL : url
					});
				this.setVisible(true);
			}
		});

		this.uploadFile = new GO.form.UploadFile({
			inputName : 'image',
			max: 1
		});

		this.contactPhoto = new cPhoto();
		this.deleteImageCB = new Ext.form.Checkbox({
			boxLabel: GO.addressbook.lang.deleteImage,
			labelSeparator: '',
			name: 'delete_photo',
			allowBlank: true,
			hideLabel:true,
			disabled:true
		});

		Ext.apply(this, {
			title : GO.addressbook.lang.photo,
			layout: 'form',
			border:false,
			cls : 'go-form-panel',		
			autoScroll:true,
			labelAlign:'top',
			items:[
				{

					xtype:'textfield',
					fieldLabel:GO.addressbook.lang.downloadPhotoUrl,
					name:'download_photo_url',
					anchor:'100%'
				},{
					style:'margin-top:15px;margin-bottom:10px;',
					html:GO.addressbook.lang.orBrowseComputer+':',
					xtype:'htmlcomponent'
				},
				this.uploadFile,
				{
					style:'margin-top:15px',
					html:GO.addressbook.lang.currentImage+':',
					xtype:'htmlcomponent'
				},
				this.contactPhoto,
				this.deleteImageCB,
				new Ext.Button({
					text:GO.addressbook.lang.downloadFullImage,
					disabled:false,
					handler:function(){
						window.open(this.originalPhotoUrl,'_blank');
					},
					scope:this
				})
			]
		});
		
		GO.addressbook.PhotoPanel.superclass.initComponent.call(this);
	},
	
	onLoadSettings : function(action) {
		
		// in contact this is done after successfull submit but there
		// is no on success triggered by the personal settings pannel.
		//this.uploadFile.clearQueue(); 
		
		if(!GO.util.empty(action.result.data.original_photo_url))
			this.setOriginalPhoto(action.result.data.original_photo_url);
		else
			this.setOriginalPhoto("");
		
		if(!GO.util.empty(action.result.data.photo_url))
			this.setPhoto(action.result.data.photo_url);
		else
			this.setPhoto("");
	},

	setOriginalPhoto : function(url){
		this.originalPhotoUrl = url;
	},
	setPhoto : function(url)
	{
		this.contactPhoto.setPhotoSrc(url);
		this.deleteImageCB.setValue(false);
		this.deleteImageCB.setDisabled(url=='');
	}
	
});

GO.cron.cronStore = new GO.data.JsonStore({
	url: GO.url('core/cron/store'),		
	root: 'results',
	id: 'id',
	totalProperty:'total',
	fields: ['id','name','active','minutes', 'hours', 'monthdays', 'months', 'weekdays','years','job','nextrun','lastrun','completedat'],
	remoteSort: true,
	model:"GO\\Base\\Cron\\CronJob"
});
	
GO.cron.periodStore = new GO.data.JsonStore({
	url: GO.url('core/cron/runBetween'),		
	root: 'results',
	id: 'id',
	totalProperty:'total',
	fields: ['id','name','active','minutes', 'hours', 'monthdays', 'months', 'weekdays','years','job','nextrun','lastrun','completedat'],
	remoteSort: true,
	model:"GO\\Base\\Cron\\CronJob"
});
	
GO.cron.jobStore = new GO.data.JsonStore({
	url: GO.url('core/cron/availableCronCollection'),		
	root: 'results',
	id: 'class',
	totalProperty:'total',
	fields: ['name','class','selection'],
	remoteSort: true
});

GO.cron.ParametersPanel = Ext.extend(Ext.Panel, {
	title: GO.cron.lang['parameters'],
	cls: 'go-form-panel',
	layout: 'form',
	labelWidth: 200,
	paramElements: [],
	buildForm: function (params) {
		
		
		this.setDisabled(params.length == 0);
		this.removeComponents();

		for (var key in params) {
			this.addField(key, params[key], key);
		}

		this.doLayout(false, true);
	},
	addField: function (name, value, label) {

		var f = this.ownerCt.ownerCt.form;

		var inputField = new Ext.form.TextField({
			name: name,
			value: value,
			fieldLabel: label
		});

		this.paramElements.push(inputField);

		this.add(inputField);
		f.add(inputField);

		this.add(inputField);

	},
	removeComponents: function () {
		var f = this.ownerCt.ownerCt.form;
		for (var i = 0; i < this.paramElements.length; i++)
		{
			f.remove(this.paramElements[i]);
			this.remove(this.paramElements[i], true);
		}
		this.paramElements = [];
	}

});

GO.cron.CronDialog = Ext.extend(GO.dialog.TabbedFormDialog , {

	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'cronjob',
			title:GO.cron.lang.job,
			formControllerUrl: 'core/cron',
			updateAction : 'update',
			createAction : 'create',
			height:395,
			width:350,
			tools: [{
				id:'help',
				qtip: GO.cron.lang.exampleFormats+
					'<table>'+
					'<tr><td>*</td><td>'+GO.cron.lang.exampleFormat1Explanation+'</td></tr>'+
					'<tr><td>1</td><td>'+GO.cron.lang.exampleFormat2Explanation+'</td></tr>'+
					'<tr><td>1-5</td><td>'+GO.cron.lang.exampleFormat3Explanation+'</td></tr>'+
					'<tr><td>0-23/2</td><td>'+GO.cron.lang.exampleFormat4Explanation+'</td></tr>'+
					'<tr><td>1,2,3,13,22</td><td>'+GO.cron.lang.exampleFormat5Explanation+'</td></tr>'+
					'<tr><td>0-4,8-12</td><td>'+GO.cron.lang.exampleFormat6Explanation+'</td></tr>'+
					'<table>'
			}],
			select: false
		});
		
		GO.cron.CronDialog.superclass.initComponent.call(this);	
	},
	 	
	buildForm : function () {
			
		this.usersPanel = new GO.base.model.multiselect.panel({
      title:GO.cron.lang.users,	
      url:'cron/cronUser',
      columns:[{header: GO.cron.lang.user, dataIndex: 'name', sortable: true}],
      fields:['id','name'],
      model_id:this.remoteModelId
    });
		
		this.groupsPanel = new GO.base.model.multiselect.panel({
      title:GO.cron.lang.groups,	
      url:'cron/cronGroup',
      columns:[{header: GO.cron.lang.group, dataIndex: 'name', sortable: true}],
      fields:['id','name'],
      model_id:this.remoteModelId
    });
			
		this.nameField = new Ext.form.TextField({
			name: 'name',
			width:300,
			anchor: '100%',
			maxLength: 100,
			allowBlank:false,
			fieldLabel: GO.cron.lang.cronName
		});
		
		this.minutesField = new Ext.form.TextField({
			name: 'minutes',
			width:300,
			anchor: '99%',
			maxLength: 100,
			allowBlank:false,
			fieldLabel: GO.cron.lang.minutes +' '+ GO.cron.lang.minutesExample
		});
		
		this.hoursField = new Ext.form.TextField({
			name: 'hours',
			width:300,
			anchor: '99%',
			maxLength: 100,
			allowBlank:false,
			fieldLabel: GO.cron.lang.hours +' '+ GO.cron.lang.hoursExample
		});
		
		this.monthDaysField = new Ext.form.TextField({
			name: 'monthdays',
			width:300,
			anchor: '99%',
			maxLength: 100,
			allowBlank:false,
			fieldLabel: GO.cron.lang.monthdays +' '+ GO.cron.lang.monthdaysExample
		});
		
		this.monthsField = new Ext.form.TextField({
			name: 'months',
			width:300,
			anchor: '99%',
			maxLength: 100,
			allowBlank:false,
			fieldLabel: GO.cron.lang.months +' '+ GO.cron.lang.monthsExample
		});
		
		this.weekdaysField = new Ext.form.TextField({
			name: 'weekdays',
			width:300,
			anchor: '99%',
			maxLength: 100,
			allowBlank:false,
			fieldLabel: GO.cron.lang.weekdays +' '+ GO.cron.lang.weekdaysExample
		});
		
//		this.yearsField = new Ext.form.TextField({
//			name: 'years',
//			width:300,
//			anchor: '99%',
//			maxLength: 100,
//			allowBlank:false,
//			fieldLabel: GO.cron.lang.years +' '+ GO.cron.lang.yearsExample
//		});
//		
		this.activeCheckbox = new Ext.ux.form.XCheckbox({
			name: 'active',
			width:300,
			anchor: '100%',
			maxLength: 100,
			allowBlank:false,
			boxLabel: GO.cron.lang.active,
			hideLabel:true
		});
		
		this.runOnceCheckbox = new Ext.ux.form.XCheckbox({
			name: 'runonce',
			width:300,
			anchor: '100%',
			maxLength: 100,
			allowBlank:false,
			boxLabel: GO.cron.lang.runonce,
			hideLabel:true
		});
		
		this.jobCombo = new GO.form.ComboBox({
			hiddenName: 'job',
			fieldLabel: GO.cron.lang.job,
			store: GO.cron.jobStore,
			valueField:'class',
			displayField:'name',
			mode:'remote',
			anchor: '100%%',
			allowBlank: false,
			triggerAction: 'all',
			reloadOnExpand : true
		});
		
		this.jobCombo.on('select',function(combo, record, index ){
			if(record.data.selection && this.remoteModelId > 0){
				this.select = true;
				this.usersPanel.setDisabled(false);
				this.groupsPanel.setDisabled(false);
			}else{
				this.select = false;
				this.usersPanel.setDisabled(true);
				this.groupsPanel.setDisabled(true);
			}
		},this);
		
		
		this.timeFieldSet = new Ext.form.FieldSet({
			title: GO.cron.lang.timeFieldSetTitle,
			labelWidth: 140,
			autoHeight: true,
			border: true,
			collapsed: false,
			items:[
				this.minutesField,
				this.hoursField,
				this.monthDaysField,
				this.monthsField,
				this.weekdaysField
//				,
//				this.yearsField
			]
		});
			
		this.propertiesPanel = new Ext.Panel({
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',
			layout:'form',
			labelWidth: 90,
			items:[
				this.nameField,
				this.jobCombo,
				this.timeFieldSet,
				this.activeCheckbox,
				this.runOnceCheckbox
      ]				
		});

		this.parameterPanel = new GO.cron.ParametersPanel();
	
    this.addPanel(this.propertiesPanel);
		this.addPanel(this.usersPanel);
		this.addPanel(this.groupsPanel);
		this.addPanel(this.parameterPanel);
	},
	
	afterLoad : function(remoteModelId, config, action){
		this.usersPanel.setModelId(remoteModelId);
    this.groupsPanel.setModelId(remoteModelId);

		this.select = action.result.data.select || false;
		this.usersPanel.setDisabled(!this.select);
		this.groupsPanel.setDisabled(!this.select);

		this.parameterPanel.buildForm(action.result.data.paramsToSet);
		
	},
  afterSubmit: function(action){
    var noUserSelection = this.select; //this.usersPanel.disabled;
		var comboValue = this.jobCombo.getValue();
		var store = this.jobCombo.getStore();
		if(!store.loaded){
			store.load(function() {
				var record = store.getById(comboValue);
				noUserSelection = record.data.selection;
			});
		} else {
			var record = store.getById(comboValue);
			noUserSelection = record.data.selection;
		}
		
		this.usersPanel.setModelId(action.result.id);
		this.groupsPanel.setModelId(action.result.id);

		if(noUserSelection){
			this.select = true;
			this.usersPanel.setDisabled(false);
			this.groupsPanel.setDisabled(false);
		} else {
			this.select = false;
			this.usersPanel.setDisabled(true);
			this.groupsPanel.setDisabled(true);
		}
  }
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: PeriodGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.cron.PeriodGrid = Ext.extend(GO.grid.GridPanel,{
	changed : false,
	
	initComponent : function(){
		
		Ext.apply(this,{
			standardTbar:false,
			store: GO.cron.periodStore,
			editDialogClass:GO.cron.CronDialog,
			border: false,
			tbar:[{
					iconCls: 'btn-refresh',
					text: GO.lang['cmdRefresh'],
					cls: 'x-btn-text-icon',
					handler: function(){
						this.store.load();
					},
					scope: this
				}],
			paging:true,
			view:new Ext.grid.GridView({
				emptyText: GO.lang['strNoItems']
			}),
			cm:new Ext.grid.ColumnModel({
				defaults:{
					sortable:true
				},
				columns:[
				{
					header: GO.cron.lang.name,
					dataIndex: 'name',
					sortable: true,
					width:100
				},
				{
					header: GO.cron.lang.job,
					dataIndex: 'job',
					sortable: true,
					width:180
				},
				{
					header: GO.cron.lang.nextrun,
					dataIndex: 'nextrun',
					sortable: true,
					width:100
				},
				{
					header: GO.cron.lang.lastrun,
					dataIndex: 'lastrun',
					sortable: true,
					width:100
				},
				{
					header: GO.cron.lang.minutes,
					dataIndex: 'minutes',
					sortable: true,
					width:100,
					hidden:true
				},
				{
					header: GO.cron.lang.hours,
					dataIndex: 'hours',
					sortable: true,
					width:100,
					hidden:true
				},
				{
					header: GO.cron.lang.monthdays,
					dataIndex: 'monthdays',
					sortable: true,
					width:100,
					hidden:true
				},
				{
					header: GO.cron.lang.months,
					dataIndex: 'months',
					sortable: true,
					width:100,
					hidden:true
				},
				{
					header: GO.cron.lang.weekdays,
					dataIndex: 'weekdays',
					sortable: true,
					width:100,
					hidden:true
				},
				{
					header: GO.cron.lang.years,
					dataIndex: 'years',
					sortable: true,
					width:100,
					hidden:true
				},
				{
					header: GO.cron.lang.active,
					dataIndex: 'active',
					sortable: true,
					renderer: GO.grid.ColumnRenderers.coloredYesNo,
					width:50,
					hidden:true
				}
				]
			})
		});
		GO.cron.PeriodGrid.superclass.initComponent.call(this);
		
		GO.cron.periodStore.load();
	}	
});

GO.cron.SettingsDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'cronsettings',
			title:GO.cron.lang.cronSettings,
			formControllerUrl: 'core/cron',
			submitAction : 'submitSettings',
			loadAction : 'loadSettings',
			height:350,
			width:500
		});
		
		GO.cron.SettingsDialog.superclass.initComponent.call(this);	
	},
	  
	buildForm : function () {
		this.periodGrid = new GO.cron.PeriodGrid({
			layout:'fit',
			border:true
		});	
			
		this.periodPanel = new Ext.Panel({
			title:GO.cron.lang.runUpcoming,			
			layout:'fit',
			items:[
				this.periodGrid
      ]				
		});
			
			
		this.propertiesPanel = new Ext.Panel({
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',
			layout:'form',
			items:[
				//this.defaultCanConnectCheckBox
      ]				
		});

		this.addPanel(this.propertiesPanel);
		this.addPanel(this.periodPanel);
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: CronGrid.js 17292 2014-04-08 11:19:49Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.cron.CronGrid = Ext.extend(GO.grid.GridPanel,{
	changed : false,
	
	initComponent : function(){
		
		Ext.apply(this,{
			standardTbar:false,
			editDialogClass:GO.cron.CronDialog,
			tbar : new Ext.Toolbar({
				cls:'go-head-tb',
				items: [{
					xtype:'htmlcomponent',
					html:GO.cron.lang.name,
					cls:'go-module-title-tbar'
				},{
					itemId:'add',
					iconCls: 'btn-add',
					text: GO.lang['cmdAdd'],
					cls: 'x-btn-text-icon',
					disabled:this.standardTbarDisabled,
					handler: function(){
						this.btnAdd();
					},
					scope: this
				},{
					itemId:'delete',
					iconCls: 'btn-delete',
					text: GO.lang['cmdDelete'],
					cls: 'x-btn-text-icon',
					disabled:this.standardTbarDisabled,
					handler: function(){
						this.deleteSelected();
					},
					scope: this
				},
				'-',
				{
					iconCls: 'btn-refresh',
					text: GO.lang['cmdRefresh'],
					cls: 'x-btn-text-icon',
					handler: function(){
						this.store.load();
					},
					scope: this
				}]
			//				'-',
			//				{
			//					itemId:'settings',
			//					iconCls: 'btn-settings',
			//					text: GO.lang['cmdSettings'],
			//					cls: 'x-btn-text-icon',
			//					disabled:this.standardTbarDisabled,
			//					handler: function(){
			//						this.showSettingsDialog();
			//					},
			//					scope: this
			//				}]
			}),
			store: GO.cron.cronStore,
			border: false,
			paging:true,
			view:new Ext.grid.GridView({
				emptyText: GO.lang['strNoItems']
			}),
			cm:new Ext.grid.ColumnModel({
				defaults:{
					sortable:true
				},
				columns:[
				{
					header: GO.cron.lang.active,
					dataIndex: 'active',
					sortable: true,
					renderer: GO.grid.ColumnRenderers.coloredYesNo,
					width:70
				},
				{
					header: GO.cron.lang.name,
					dataIndex: 'name',
					sortable: true,
					width:250
				},
				{
					header: GO.cron.lang.minutes,
					dataIndex: 'minutes',
					sortable: true,
					width:100
				},
				{
					header: GO.cron.lang.hours,
					dataIndex: 'hours',
					sortable: true,
					width:100
				},
				{
					header: GO.cron.lang.monthdays,
					dataIndex: 'monthdays',
					sortable: true,
					width:100
				},
				{
					header: GO.cron.lang.months,
					dataIndex: 'months',
					sortable: true,
					width:100
				},
				{
					header: GO.cron.lang.weekdays,
					dataIndex: 'weekdays',
					sortable: true,
					width:100
				},
				//				{
				//					header: GO.cron.lang.years,
				//					dataIndex: 'years',
				//					sortable: true,
				//					width:100
				//				},
				{
					header: GO.cron.lang.job,
					dataIndex: 'job',
					sortable: true,
					width:250
				},
				{
					header: GO.cron.lang.nextrun,
					dataIndex: 'nextrun',
					sortable: true,
					width:110
				},
				{
					header: GO.cron.lang.lastrun,
					dataIndex: 'lastrun',
					sortable: true,
					width:110
				},
				{
					header: GO.cron.lang.completedat,
					dataIndex: 'completedat',
					sortable: true,
					width:110
				}
				]
			})
		});
		GO.cron.CronGrid.superclass.initComponent.call(this);
		
		this.on('render', function(){
			GO.cron.cronStore.load();
		},this);
	},
	showSettingsDialog : function(){
		if(!this.settingsDialog){
			this.settingsDialog = new GO.cron.SettingsDialog();

			this.settingsDialog.on('save', function(){   
				this.store.load();
				this.changed=true;	    			    			
			}, this);	
		}
		this.settingsDialog.show();	  
	},
	deleteSelected : function(){
		GO.cron.CronGrid.superclass.deleteSelected.call(this);
		this.changed=true;
	}	
});

//GO.cron.MainPanel = function(config){
//	
//	if(!config)
//		config = {};
//	
//	this.centerPanel = new GO.cron.CronGrid({
//		region:'center',
//		id:'cron-center-panel',
//		border:true
//	});
//	
//	//	this.cronPanel = new GO.cron.CronPanel({
//	//		region:'east',
//	//		width:400,
//	//		border:true
//	//	});
//	
//	//	this.centerPanel.on("delayedrowselect",function(grid, rowIndex, r){
//	//		this.devicePanel.load(r.data.id);
//	//	}, this);
//	//
//	config.items=[
//	this.centerPanel
//	//		,
//	//		this.devicePanel
//	];	
//	
//
//	config.tbar = new Ext.Toolbar({		
//		cls:'go-head-tb',
//		items: [{
//			xtype:'htmlcomponent',
//			html:GO.cron.lang.name,
//			cls:'go-module-title-tbar'
//		}]
//	});
//	
//	config.layout='border';
////	config.cls='go-white-bg';
//
//	GO.cron.MainPanel.superclass.constructor.call(this, config);	
//};
//
//Ext.extend(GO.cron.MainPanel, Ext.Panel, {
//
//	});

GO.moduleManager.addModule('cron', GO.cron.CronGrid, {
	title : GO.cron.lang.cronManager,
	iconCls : 'go-tab-icon-cron',
	admin :true
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: AnnouncementDialog.js 15954 2013-10-17 12:04:36Z mschering $
 * @copyright Copyright Intermesh
 * @author Michael de Hart <mdhart@intermesh.nl>
 */
GO.summary.AnnouncementDialog = Ext.extend(GO.dialog.TabbedFormDialog, {

	initComponent: function() {

		Ext.apply(this, {
			goDialogId: 'summaryAnnouncement',
			layout: 'fit',
			title: GO.summary.lang['announcement'],
			width: 700,
			height: 600,
			resizable: false,
			formControllerUrl: 'summary/announcement'
		});

		GO.summary.AnnouncementDialog.superclass.initComponent.call(this);
	},
	buildForm: function() {

		this.formPanel = new Ext.Panel({
			cls: 'go-form-panel',
			layout: 'form',
			title: GO.lang['strProperties'],
			labelWidth: 100,
			items:[{
				xtype: 'datefield',
				name: 'due_time',
				minValue:new Date(),
				anchor: '-5',
				format: GO.settings.date_format,
				fieldLabel: GO.summary.lang.dueTime
			},{
				xtype: 'textfield',
				name: 'title',
				anchor: '-5',
				fieldLabel: GO.summary.lang.title
			},{
				xtype: 'htmleditor',
				name: 'content',
				anchor: '-5 -60',
				hideLabel:true
			}]
		});

		this.addPanel(this.formPanel);
		this.addPermissionsPanel(new GO.grid.PermissionsPanel());
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AnnouncementsGrid.js 16251 2013-11-15 08:39:41Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.summary.AnnouncementsGrid = function(config){
	if(!config)
	{
		config = {};
	}
	
	config.border=false;
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.store = new GO.data.JsonStore({
		url: GO.url('summary/announcement/store'),
		baseParams: {
		},
		root: 'results',
		id: 'id',
		totalProperty:'total',
		fields: ['id','user_name','due_time','ctime','mtime','title'],
		remoteSort: true
	});
	config.paging=true;
	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
	{
		header: GO.summary.lang.title,
		dataIndex: 'title'
	},{
		header: GO.lang.strOwner,
		dataIndex: 'user_name',
		sortable: false
	},{
		header: GO.summary.lang.dueTime,
		dataIndex: 'due_time'
	},{
		header: GO.lang.strCtime,
		dataIndex: 'ctime',
		width:110
	},{
		header: GO.lang.strMtime,
		dataIndex: 'mtime',
		width:110
	}

	]
	});
	
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	this.announcementDialog = new GO.summary.AnnouncementDialog();
	this.announcementDialog.on('save', function(){
		this.store.reload();
	}, this);
	
	config.tbar=[{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function(){
			this.announcementDialog.show();
		},
		scope: this
	},{
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function(){
			this.deleteSelected();
		},
		scope: this
	}];
	GO.summary.AnnouncementsGrid.superclass.constructor.call(this, config);
	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);	
		this.announcementDialog.show(record.data.id);
	}, this);
};
Ext.extend(GO.summary.AnnouncementsGrid, GO.grid.GridPanel,{

	
	});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: AnnouncementsViewGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.summary.AnnouncementsViewGrid = function(config){
	if(!config)
	{
		config = {};
	}
	config.cls='go-grid3-hide-headers';
	config.border=false;
	//config.layout='fit';
	config.autoHeight=true;
	config.autoScroll=true;
	config.split=true;
	config.store = new GO.data.JsonStore({
		url: GO.url('summary/announcement/store'),
		baseParams: {
			active:'true'
		},
		root: 'results',
		id: 'id',
		totalProperty:'total',
		fields: ['id','user_name','due_time','ctime','mtime','title', 'content'],
		remoteSort: true
	});
	var columnModel =  new Ext.grid.ColumnModel([
	{
		header: '',
		dataIndex: 'title',
		sortable: false,
		renderer: function(value, p, record) {
			return '<b>'+value+'</b>';
		}
	}
	]);

	config.cls='go-colored-table';
	
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		enableRowBody:true,
		showPreview:true,
		forceFit:true,
		autoFill: true,
		getRowClass : function(record, rowIndex, p, ds) {

			var cls = rowIndex%2 == 0 ? 'odd' : 'even';

			if (this.showPreview) {
				p.body = '<div class="description go-html-formatted">' +record.data.content + '</div>';
				return 'x-grid3-row-expanded '+cls;
			}
			return 'x-grid3-row-collapsed';
		},
		emptyText: GO.lang['strNoItems']		
	});
	//config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	config.disableSelection=true;

	config.listeners={
		rowclick : function( grid , rowIndex, e ) {		

			if(e.target.tagName=='A')
			{
				e.preventDefault();
				
				var href=e.target.attributes['href'].value;
				if(GO.email && href.substr(0,6)=='mailto')
				{
					var indexOf = href.indexOf('?');
					if(indexOf>0)
					{
						var email = href.substr(7, indexOf-8);
					}else
					{
						var email = href.substr(7);
					}
					GO.email.addressContextMenu.showAt(e.getXY(), email);
				}else if(href!='#')
				{
					if(href.substr(0,6)=='callto')
						document.location.href=href;
					else
						window.open(href);
				}
			}
		},
		scope:this
	}
	
	GO.summary.AnnouncementsViewGrid.superclass.constructor.call(this, config);
};
Ext.extend(GO.summary.AnnouncementsViewGrid, GO.grid.GridPanel,{
	afterRender : function(){
		GO.summary.AnnouncementsViewGrid.superclass.afterRender.call(this);
		
		Ext.TaskMgr.start({
			run: function(){
				this.store.load();
			},
			scope:this,
			interval:180000
		});  
	}
	
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: PortalColumn.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.summary.PortalColumn = Ext.extend(Ext.Container, {
    layout: 'anchor',
    autoEl: 'div',
    defaultType: 'portlet',
    cls:'x-portal-column'
});
Ext.reg('portalcolumn', GO.summary.PortalColumn);

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: Portlet.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.summary.Portlet = Ext.extend(Ext.Panel, {
    anchor: '100%',
    frame:true,
    collapsible:true,
    draggable:true,
    cls:'x-portlet',
    stateful:false,
    initComponent : function(){
    	this.addEvents({'remove_portlet' : true});
    	GO.summary.Portlet.superclass.initComponent.call(this);
    },
    saveState : function(){},    
    removePortlet : function(){    	
    	this.fireEvent('remove_portlet', this);
    }
});
Ext.reg('portlet', GO.summary.Portlet);

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: Portal.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.summary.Portal = Ext.extend(Ext.Panel, {
    layout: 'column',
    layoutConfig: {
		  scrollOffset: Ext.isIE ? 20 : 0
		},
    autoScroll:true,
    cls:'x-portal',
    defaultType: 'portalcolumn',
    initComponent : function(){
        GO.summary.Portal.superclass.initComponent.call(this);
        this.addEvents({
            validatedrop:true,
            beforedragover:true,
            dragover:true,
            beforedrop:true,
            drop:true
        });
    },

    initEvents : function(){
        GO.summary.Portal.superclass.initEvents.call(this);
        this.dd = new GO.summary.Portal.DropZone(this, this.dropConfig);
    }
});
Ext.reg('portal', GO.summary.Portal);


GO.summary.Portal.DropZone = function(portal, cfg){
    this.portal = portal;
    Ext.dd.ScrollManager.register(portal.body);
    GO.summary.Portal.DropZone.superclass.constructor.call(this, portal.bwrap.dom, cfg);
    portal.body.ddScrollConfig = this.ddScrollConfig;
};

Ext.extend(GO.summary.Portal.DropZone, Ext.dd.DropTarget, {
    ddScrollConfig : {
        vthresh: 50,
        hthresh: -1,
        animate: true,
        increment: 200
    },

    createEvent : function(dd, e, data, col, c, pos){
        return {
            portal: this.portal,
            panel: data.panel,
            columnIndex: col,
            column: c,
            position: pos,
            data: data,
            source: dd,
            rawEvent: e,
            status: this.dropAllowed
        };
    },

    notifyOver : function(dd, e, data){
        var xy = e.getXY(), portal = this.portal, px = dd.proxy;

        // case column widths
        if(!this.grid){
            this.grid = this.getGrid();
        }

        // handle case scroll where scrollbars appear during drag
        var cw = portal.body.dom.clientWidth;
        if(!this.lastCW){
            this.lastCW = cw;
        }else if(this.lastCW != cw){
            this.lastCW = cw;
            portal.doLayout();
            this.grid = this.getGrid();
        }

        // determine column
        var col = 0, xs = this.grid.columnX, cmatch = false;
        for(var len = xs.length; col < len; col++){
            if(xy[0] < (xs[col].x + xs[col].w)){
                cmatch = true;
                break;
            }
        }
        // no match, fix last index
        if(!cmatch){
            col--;
        }

        // find insert position
        var p, match = false, pos = 0,
            c = portal.items.itemAt(col);
        if(!c.items)
        {
        	c.initItems();
        }    
          
        var items = c.items.items;

        for(var len = items.length; pos < len; pos++){
            p = items[pos];
            var h = p.el.getHeight();
            if(h !== 0 && (p.el.getY()+(h/2)) > xy[1]){
                match = true;
                break;
            }
        }

        var overEvent = this.createEvent(dd, e, data, col, c,
                match && p ? pos : c.items.getCount());

        if(portal.fireEvent('validatedrop', overEvent) !== false &&
           portal.fireEvent('beforedragover', overEvent) !== false){

            // make sure proxy width is fluid
            px.getProxy().setWidth('auto');

            if(p){
                px.moveProxy(p.el.dom.parentNode, match ? p.el.dom : null);
            }else{
                px.moveProxy(c.el.dom, null);
            }

            this.lastPos = {c: c, col: col, p: match && p ? pos : false};
            this.scrollPos = portal.body.getScroll();

            portal.fireEvent('dragover', overEvent);

            return overEvent.status;;
        }else{
            return overEvent.status;
        }

    },

    notifyOut : function(){
        delete this.grid;
    },

    notifyDrop : function(dd, e, data){
        delete this.grid;
        if(!this.lastPos){
            return;
        }
        var c = this.lastPos.c, col = this.lastPos.col, pos = this.lastPos.p;

        var dropEvent = this.createEvent(dd, e, data, col, c,
                pos !== false ? pos : c.items.getCount());

        if(this.portal.fireEvent('validatedrop', dropEvent) !== false &&
           this.portal.fireEvent('beforedrop', dropEvent) !== false){

            dd.proxy.getProxy().remove();
            dd.panel.el.dom.parentNode.removeChild(dd.panel.el.dom);
            if(pos !== false){
                c.insert(pos, dd.panel);
            }else{
                c.add(dd.panel);
            }
            
            c.doLayout();

            this.portal.fireEvent('drop', dropEvent);

            // scroll position is lost on drop, fix it
            var st = this.scrollPos.top;
            if(st){
                var d = this.portal.body.dom;
                setTimeout(function(){
                    d.scrollTop = st;
                }, 10);
            }

        }
        delete this.lastPos;
    },

    // internal cache of body and column coords
    getGrid : function(){
        var box = this.portal.bwrap.getBox();
        box.columnX = [];
        this.portal.items.each(function(c){
             box.columnX.push({x: c.el.getX(), w: c.el.getWidth()});
        });
        return box;
    }
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: MainPanel.js 20553 2016-10-25 09:57:14Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

 GO.summary.MainPanel = function(config)
 {
 	
 	if(!config){
 		config={};
 	}
 	
 	
 	var state  = Ext.state.Manager.get('summary-active-portlets');
 	
 	if(state)
 	{
 		state=Ext.decode(state);
 		if(!state[0] || state[0].col=='undefined')
	 	{
	 		state=false;
	 	}
 	} 	
 	
 	
 	if(!state)
 	{
 		this.activePortlets=['portlet-announcements', 'portlet-tasks', 'portlet-calendar','portlet-note'];
 		state=[{id:'portlet-announcements', col:0},{id:'portlet-tasks', col:0},{id:'portlet-calendar', col:1},{id:'portlet-note', col:1}];
 	}
 	this.activePortlets=[];
 	for(var i=0;i<state.length;i++)
 	{	
 		this.activePortlets.push(state[i].id);
 	}
 	
 	
 	this.columns=[/*{
				columnWidth:.33,
	      style:'padding:10px 0 10px 10px',
	      border:false
	  	},*/
	  	{
				columnWidth:.5,
	      style:'padding:10px 0 10px 10px',
	      border:false
	  	},
	  	{
				columnWidth:.5,
	      style:'padding:10px 10px 10px 10px',
	      border:false
	  	}];
	  	
	
	//var portletsPerCol = Math.ceil(this.activePortlets.length/this.columns.length);
	  	
  
 // var portletsInCol=0;
 // var colIndex=0;
  
	for(var p=0;p<state.length;p++)
  {  	

  	if(GO.summary.portlets[state[p].id] || GO.summary.portlets[state[p].portletType])
  	{
			
	  	//var index = Math.ceil((p+1)/portletsPerCol)-1;
	  	
	  	/*if(portletsInCol==portletsPerCol)
	  	{
	  		portletsInCol=0;
  			colIndex++;
	  	}*/
	  	  	
	  	var column = this.columns[state[p].col]; 
			
			if(state[p].multiple){
				var portlet = new GO.summary.Portlet(GO.summary.portlets[state[p].portletType]);
				portlet.id = state[p].id;
			}else
			{
				var portlet = GO.summary.portlets[state[p].id];
			}
			
			portlet.mainPanel = this;
			
			if(state[p].settings){
				portlet.settings = state[p].settings;
			}
			
			
			portlet.on('remove_portlet', function(portlet){
	  		portlet.ownerCt.remove(portlet, false);	 
	  		portlet.hide(); 		
	  		this.saveActivePortlets();
	  	}, this);
			
			
	  	if(!column.items)
	  	{
	  		column.items=[portlet];
	  	}else
	  	{
	  		column.items.push(portlet);
	  	}
	  	//portletsInCol++;
  	}	
  }
  
  this.availablePortletsStore = new Ext.data.JsonStore({		
			id: 'id',   
	    root: 'portlets',
	    fields: ['id', 'title', 'iconCls', 'portletType', 'multiple']
	});
	
	for(var p in GO.summary.portlets)
  {
  	if(typeof(GO.summary.portlets[p])=='object')
  	{
  		

	  	
	  	var indexOf = this.activePortlets.indexOf(p);
	  	if(indexOf==-1 || GO.summary.portlets[p].multiple)
	  	{
	  		this.availablePortlets.push(GO.summary.portlets[p]);
	  	}
  	}
  }	
  config.items=this.columns;
  
  if(!config.items)
  {
  	config.html = GO.summary.lang.noItems;
  }

  var tbarItems = [{
	 	xtype:'htmlcomponent',
		html:GO.summary.lang.name,
		cls:'go-module-title-tbar'
	},{
  	text: GO.lang['cmdAdd'],
  	iconCls:'btn-add',
  	handler: this.showAvailablePortlets,
  	scope: this
    }];

  if(GO.settings.modules.summary.write_permission)
  {
	  tbarItems.push({
	  	text: GO.summary.lang.manageAnnouncements,
	  	iconCls:'btn-settings',
	  	handler: function(){
	  		if(!this.manageAnnouncementsWindow)
	  		{
	  			
	  			this.manageAnnouncementsWindow = new Ext.Window({
	  				layout:'fit',
	  				items:this.announcementsGrid =  new GO.summary.AnnouncementsGrid(),
	  				width:700,
	  				height:400,
	  				title:GO.summary.lang.announcements,
	  				closeAction:'hide',
	  				buttons:[{
							text: GO.lang.cmdClose,
							handler: function(){this.manageAnnouncementsWindow.hide();},
							scope:this
						}],
						listeners:{
							show: function(){
								if(!this.announcementsGrid.store.loaded)
								{
									this.announcementsGrid.store.load();
								}							
							},
							scope:this
						}
	  			});
	  			
	  			this.announcementsGrid.store.on('load',function(){
	  				this.announcementsGrid.store.on('load',function(){
	  					GO.summary.announcementsPanel.store.load();		
	  				}, this);
	  			}, this);
	  			
	  		}
	  		
	  		this.manageAnnouncementsWindow.show();
	  	},
	  	scope: this
	  });
	} 

this.tbar=new Ext.Toolbar({
      cls:'go-head-tb',
      items:tbarItems
  });

  
	GO.summary.MainPanel.superclass.constructor.call(this,config);
	
	this.on('drop', this.saveActivePortlets, this);

};	

Ext.extend(GO.summary.MainPanel, GO.summary.Portal, {
	
	activePortlets : Array(),
	availablePortlets : Array(),
	
	saveActivePortlets : function(){
		
		this.activePortlets = [];
		var state = [];
		for(var c=0;c<this.items.items.length;c++)
		{
			var col = this.items.items[c];
			for(var p=0;p<col.items.items.length;p++)
			{
				var id = col.items.items[p].id;
				this.activePortlets.push(id);
				
				state.push({id: id, col: c, portletType: col.items.items[p].portletType, multiple: col.items.items[p].multiple, settings: col.items.items[p].settings});
			}
		}
		
		this.availablePortlets=[];
		for(var p in GO.summary.portlets)
	  {
	  	if(typeof(GO.summary.portlets[p])=='object' && (this.activePortlets.indexOf(p)==-1 || GO.summary.portlets[p].multiple))
	  	{	  		
	  		this.availablePortlets.push(GO.summary.portlets[p]);
	  	}
	  }  
	  
		this.availablePortletsStore.loadData({portlets: this.availablePortlets});
		
	  Ext.state.Manager.set('summary-active-portlets', Ext.encode(state));
	
	},
	
	
	showAvailablePortlets : function(){

		if(!this.portletsWindow)
		{			
			var tpl ='<tpl for=".">'+
				'<div class="go-item-wrap">{title}</div>'+
				'</tpl>';
			
			var list = new GO.grid.SimpleSelectList({store: this.availablePortletsStore, tpl: tpl,  emptyText: GO.lang.strNoItems});
			
			list.on('click', function(dataview, index){
				
				var id = dataview.store.data.items[index].data.id;
				if(dataview.store.data.items[index].data.multiple) {
					id = dataview.store.data.items[index].data.portletType;
				}
				
				this.addPortlet(id);
				
				this.saveActivePortlets(true);			
				
				list.clearSelections();
				this.portletsWindow.hide();			
								
			}, this);
			
			this.portletsWindow = new Ext.Window({
				title: GO.summary.lang.selectPortlet,
				layout:'fit',
				modal:false,
				height:400,
				width:600,
				closable:true,
				closeAction:'hide',	
				items: new Ext.Panel({
					items:list,
					cls: 'go-form-panel'
				})
			});
		}
		this.portletsWindow.show();
		this.availablePortletsStore.loadData({portlets: this.availablePortlets});
		
	},
	addPortlet : function(id) {
		
		var portlet;
		
		if(GO.summary.portlets[id].multiple) {
			portlet = new GO.summary.Portlet(GO.summary.portlets[id]);
			portlet.id = 'portlet-'+Ext.id();
		}else
		{
		  portlet = GO.summary.portlets[id];
		}
		
		portlet.mainPanel = this;
		
		portlet.on('remove_portlet', function(portlet){
	  		portlet.ownerCt.remove(portlet, false);	 
	  		portlet.hide(); 		
	  		this.saveActivePortlets();
	  	}, this);
		
		this.items.items[0].add(portlet);
		if(this.rendered) {
			portlet.show();
			this.items.items[0].doLayout();
		}
	}
});

GO.moduleManager.addModule('summary', GO.summary.MainPanel, {
	title : GO.summary.lang.summary,
	iconCls : 'go-tab-icon-summary'
});



GO.mainLayout.onReady(function(){
	
	GO.request({
		url: 'summary/announcement/checkLatestRead',
		success: function(response,options,result) {
			if (result.has_unread) {
				GO.mainLayout.openModule('summary');
			}
		}
	});
	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: rssFeedPortlet.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.portlets.rssFeedPortlet = function(config) {
	
	config = config || {};

	config.store = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({
			url: GO.url("summary/rssFeed/proxy")
		}),
		baseParams: {
			feed: config.feed
			},

		reader: new Ext.data.XmlReader(
		{
			record: 'item'
		},
		['title', 'author', {
			name:'pubDate',
			type:'date'
		}, 'link', 'description', 'content']
		)
	});
	config.store.setDefaultSort('pubDate', "DESC");

	config.columns = [{
		id: 'title',
		header: GO.lang.strTitle,
		dataIndex: 'title',
		sortable:true,
		width: 420,
		renderer: this.formatTitle
	},{
		header: GO.lang.author,
		dataIndex: 'author',
		width: 100,
		hidden: true,
		sortable:true
	},{
		id: 'last',
		header: GO.lang.strDate,
		dataIndex: 'pubDate',
		width: 150,
		renderer:  this.formatDate,
		sortable:true
	}];

	config.loadMask = {
			msg:GO.summary.lang.loadingFeed
			};
	config.sm = new Ext.grid.RowSelectionModel({
			singleSelect:true
		});

	config.viewConfig={
			forceFit:true,
			enableRowBody:true,
			showPreview:config.showPreview,
			getRowClass : this.applyRowClass
		};

	GO.portlets.rssFeedPortlet.superclass.constructor.call(this, config);	
};

Ext.extend(GO.portlets.rssFeedPortlet, GO.grid.GridPanel, {

	refreshTask : false,

	afterRender : function(){
		GO.portlets.rssFeedPortlet.superclass.afterRender.call(this);

		this.on('rowcontextmenu', this.onContextClick, this);
		this.on('rowdblclick', this.rowDoubleClick, this);
		this.on('rowclick', this.rowClick, this);

		this.refreshTask ={
			run: function(){this.store.load()},
			scope:this,
			//interval:5000
			interval:1800000
		};

		Ext.TaskMgr.start(this.refreshTask);

		this.on('beforedestroy', function(){
			Ext.TaskMgr.stop(this.refreshTask);
		}, this);
	},
		
	rowDoubleClick : function(grid, index, e) {
		var record = this.store.getAt(index);
			
		window.open(record.data.link);
			
	},


	rowClick : function(grid, index, e){
		var target = e.target;
	
		if(target.tagName!='A')
		{
			target = Ext.get(target).findParent('A', 10);
			
			if(!target)
				return false;
		}
		e.preventDefault();
		window.open(target.attributes['href'].value);
	},
	onContextClick : function(grid, index, e){
		if(!this.menu){ // create context menu on first right click
			this.menu = new Ext.menu.Menu({
				items: [
				{
					iconCls: 'new-win',
					text: GO.summary.lang.goToPost,
					scope:this,
					handler: function(){
						window.open(this.ctxRecord.data.link);
					}
				},'-',{
					iconCls: 'refresh-icon',
					text:GO.lang.cmdRefresh,
					scope:this,
					handler: function(){
						this.ctxRow = null;
						this.store.reload();
					}
				}]
			});
			this.menu.on('hide', this.onContextHide, this);
		}
		e.stopEvent();
		if(this.ctxRow){
			Ext.fly(this.ctxRow).removeClass('x-node-ctx');
			this.ctxRow = null;
		}
		this.ctxRow = this.view.getRow(index);
		this.ctxRecord = this.store.getAt(index);
		Ext.fly(this.ctxRow).addClass('x-node-ctx');
		this.menu.showAt(e.getXY());
	},

	onContextHide : function(){
		if(this.ctxRow){
			Ext.fly(this.ctxRow).removeClass('x-node-ctx');
			this.ctxRow = null;
		}
	},

	loadFeed : function(url, preview) {
		//console.log(preview);
		var view = this.getView();
		view.showPreview = preview;

		this.store.baseParams = {
			feed: url
		};
		
    this.store.load();
	},

	// within this function "this" is actually the GridView
	applyRowClass: function(record, rowIndex, p, ds) {
		if (this.showPreview) {
			p.body = '<p class="description">' +Ext.util.Format.htmlDecode(record.data.description.trim()) + '</p>';
			return 'x-grid3-row-expanded';
		}
		return 'x-grid3-row-collapsed';
	},

	formatDate : function(date) {
		if (!date) {
			return '';
		}
		var now = new Date();
		var d = now.clearTime(true);
		var notime = date.clearTime(true).getTime();
		if (notime == d.getTime()) {
			return GO.summary.lang.today + date.dateFormat('g:i a');
		}
		d = d.add('d', -6);
		if (d.getTime() <= notime) {
			return date.dateFormat('D g:i a');
		}
		return date.dateFormat('n/j g:i a');
	},

	formatTitle: function(value, p, record) {
		return '<div class="topic"><b>'+value+'</b></div>';
               
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: Portlets.js 17672 2014-06-11 12:19:34Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.summary.portlets=[];

GO.mainLayout.onReady(function(){
	var rssTabPanel = new Ext.TabPanel({doLayoutOnTabChange:true});
	
	GO.summary.portlets['portlet-rss-reader']=new GO.summary.Portlet({
		id: 'portlet-rss-reader',
		//iconCls: 'rss-icon',
		title: GO.summary.lang.hotTopics,
		layout:'fit',
		tools: [{
			id: 'gear',
			handler: function(){
				if(!this.manageWebFeedsWindow)
				{
					this.manageWebFeedsWindow = new Ext.Window({
						layout:'fit',
						items:this.WebFeedsGrid =  new GO.summary.WebFeedsGrid(),
						width:700,
						height:400,
						title:GO.summary.lang.rssFeeds,
						closeAction:'hide',
						buttons:[{
							text: GO.lang.cmdSave,
							handler: function(){

								if(!this.WebFeedsGrid.isValid(true)){
									alert(GO.lang['strErrorsInForm']);
									return false;
								}
								var params={
								};
								if(this.WebFeedsGrid.store.loaded){
									params['feeds']=Ext.encode(this.WebFeedsGrid.getGridData());
								}
								Ext.Ajax.request({
									url: GO.url('summary/rssFeed/saveFeeds'),
									params: params,
									callback: function(options, success, response){
										if(!success)
										{
											Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strRequestError']);
										}else
										{
											var responseParams = Ext.decode(response.responseText);
											this.WebFeedsGrid.store.reload();
											this.manageWebFeedsWindow.hide();
											rssTabPanel.items.each(function(p){ // Walk through tabs
												if(!GO.util.empty(responseParams.data) && responseParams.data[p.id]==undefined) // Deleted feed
													rssTabPanel.remove(p);
												else // Feed already exists
												{
													var r = responseParams.data[p.id];

													if(p.feed != r.url || p.getView().showPreview != r.summary)
														p.loadFeed(r.url, r.summary);
													if(p.title != r.title)
														p.setTitle(r.title);
													delete responseParams.data[p.id]; //Remove id (don't create it again)
												}
											}, this);
											for(var i in responseParams.data) //For each new id
											{
												if(i != 'remove')
												{
													rssTabPanel.add(new GO.portlets.rssFeedPortlet({
														feed_id: responseParams.data[i].id,
														feed: responseParams.data[i].url,
														title: responseParams.data[i].title,
														showPreview:responseParams.data[i].summary,
														closable:false
													}));
												}
											}
											if(rssTabPanel.items.length == 0)
											{
												rssTabPanel.add(new Ext.Panel({
													title: '<br />',
													html: '<br />'+GO.summary.lang.noRssFeeds,
													cls: 'go-form-panel'
												}));
												rssTabPanel.setActiveTab(0);
											}
											if(rssTabPanel.getActiveTab() == null)
												rssTabPanel.setActiveTab(0)
										}
									},
									scope:this
								});
							},
							scope: this
						}],
						listeners:{
							show: function(){
								if(!this.WebFeedsGrid.store.loaded)
								{
									this.WebFeedsGrid.store.load();
								}
							},
							scope:this
						}
					});
				}
				this.manageWebFeedsWindow.show();     
			}
		},{
			id:'close',
			handler: function(e, target, panel){
				panel.removePortlet();
			}
		}],
		items: rssTabPanel,
		height:300
	});

	GO.summary.portlets['portlet-rss-reader'].on('render',function(){
		Ext.Ajax.request({
			url: GO.url('summary/rssFeed/store'),
			params: {},
			waitMsg: GO.lang['waitMsgLoad'],
			waitMsgTarget: 'portlet-rss-reader',
			scope:this,
			callback: function(options, success, response){
				if(!success)
				{
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strRequestError']);
				}else
				{
					var rssTabPanels = Ext.decode(response.responseText);
					if(rssTabPanels.results.length == 0)
					{
						rssTabPanel.add(new Ext.Panel({
							title: '<br />',
							html: '<br />'+GO.summary.lang.noRssFeeds,
							cls: 'go-form-panel'
						}));
						rssTabPanel.setActiveTab(0);
					}
					else
					{
						for(var i=0;i<rssTabPanels.results.length;i++){
							rssTabPanel.add(new GO.portlets.rssFeedPortlet({
								feed_id: rssTabPanels.results[i].id,
								feed: rssTabPanels.results[i].url,
								title: rssTabPanels.results[i].title,
								showPreview:rssTabPanels.results[i].summary,
								closable:false
							}));
							rssTabPanel.setActiveTab(0);
						};
					}
				}
				this.doLayout();
			}
		});
	});
	
	/* start note portlet */
	
	
	var noteInput = new Ext.form.TextArea({
		hideLabel: true,
		name: 'text',
		anchor: '100% 100%'
		
	});
	
	noteInput.on('change', function(){
		notePanel.form.submit({
			url: GO.url('summary/note/submit'),
			params: {},
			waitMsg: GO.lang['waitMsgSave']			
		});
	});
	
	var notePanel = new Ext.form.FormPanel({
		items: noteInput,
		waitMsgTarget: true
	});
	
	notePanel.on('render', function(){
		notePanel.load({
			url: GO.url('summary/note/load'),
			params:{},
			waitMsg: GO.lang['waitMsgLoad']
		});				
	});
	
	GO.summary.portlets['portlet-note']=new GO.summary.Portlet({
		id: 'portlet-note',
		//iconCls: 'note-icon',
		title: GO.summary.lang.notes,
		layout:'fit',
		tools: [{
			id:'close',
			handler: function(e, target, panel){
				panel.removePortlet();
			}
		}],
		items: notePanel,
		height:300
	});
		
	
	
	GO.summary.announcementsPanel = new GO.summary.AnnouncementsViewGrid();
	GO.summary.announcementsPanel.store.on('load', function(){
		if(GO.summary.announcementsPanel.store.getCount())
		{
			if(!GO.summary.portlets['portlet-announcements'].isVisible())
			{
				GO.summary.portlets['portlet-announcements'].show();
				GO.summary.portlets['portlet-announcements'].doLayout();
			}
		}else
		{
			GO.summary.portlets['portlet-announcements'].hide();
		}
			
	},this);
	
	GO.summary.portlets['portlet-announcements']=new GO.summary.Portlet({
		id: 'portlet-announcements',
		title: GO.summary.lang.announcements,
		layout:'fit',
		items: GO.summary.announcementsPanel,
		autoHeight:true,
		hideMode:'offsets'
	});
	
	GO.summary.portlets['portlet-announcements'].hide();

});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: WebFeedsGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Danny Wijffelaars <dwijffelaars@intermesh.nl>
 */
GO.summary.WebFeedsGrid = function(config){
	if(!config)
	{
		config = {};
	}
	config.title = GO.summary.lang.webfeeds;
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;

	 var SummaryColumn = new GO.grid.CheckColumn({
        header: GO.summary.lang.summaryType,
        dataIndex: 'summary',
        width: 55,
        disabled_field:''
    });

	var fields ={
		fields:['title', 'url', 'summary'],
		columns:[{
			header: GO.lang.strTitle,
			dataIndex: 'title',
			editor: new Ext.form.TextField({
				 allowBlank: false
			})
		},
		{
			header: GO.lang.url,
			dataIndex: 'url',
			editor: new Ext.form.TextField({
				 allowBlank: false
//				 vtype: 'url'
			})
		},
		SummaryColumn
	]
	};
	config.store = new GO.data.JsonStore({
		url: GO.url('summary/rssFeed/store'),
		baseParams: {},
		root: 'results',
		id: 'id',
		totalProperty:'total',
		fields:['id', 'title', 'url', 'summary'],
		remoteSort: true
	});

	config.bbar = new Ext.PagingToolbar({
		cls: 'go-paging-tb',
		store: config.store,
		pageSize: parseInt(GO.settings['max_rows_list']),
		displayInfo: true,
		displayMsg: GO.lang['displayingItems'],
		emptyMsg: GO.lang['strNoItems']
	});

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:fields.columns
	});
	
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	config.clicksToEdit=1;
	config.plugins = [SummaryColumn];

	var Feed = Ext.data.Record.create([
	{
		name: 'id',
		type: 'int'
	},
	{
		name: 'title',
		type: 'string'
	},
	{
		name: 'url',
		type: 'string'
	},
	{
		name: 'summary',
		type: 'boolean'
	}
	]);


	config.tbar=[{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function(){
			var e = new Feed({
				id: '0'
			});
			this.stopEditing();
			this.store.insert(0, e);
			this.startEditing(0, 0);
		},
		scope: this
	},{
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function(){
			var selectedRows = this.selModel.getSelections();
			for(var i=0;i<selectedRows.length;i++)
			{
				selectedRows[i].commit();
				this.store.remove(selectedRows[i]);
			}
		},
		scope: this
	}];

	GO.summary.WebFeedsGrid.superclass.constructor.call(this, config);
};
Ext.extend(GO.summary.WebFeedsGrid, GO.grid.EditorGridPanel,{

	getGridData : function(){
		var data = {};

		for (var i = 0; i < this.store.data.items.length;  i++)
		{
			var r = this.store.data.items[i].data;

			data[i]={};

			for(var key in r)
			{
				data[i][key]=r[key];
			}
		}
		return data;
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: Overrides.js 20871 2017-02-21 10:53:37Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.moduleManager.onModuleReady('email',function(){
	Ext.override(GO.email.AccountDialog, {	
		initComponent : GO.email.AccountDialog.prototype.initComponent.createSequence(function(){

			this.sieveGrid = new GO.sieve.SieveGrid();
			this.outOfOfficePanel = new GO.sieve.OutOfOfficePanel();

			var inPos = this.tabPanel.items.indexOf(this.filterGrid);
			this.tabPanel.insert(inPos,this.outOfOfficePanel);
			this.tabPanel.insert(inPos,this.sieveGrid);

			this.tabPanel.hideTabStripItem(this.filterGrid);
		}),
		
		sieveCheck :function(account_id){
			
			if(!GO.util.empty(account_id)){
				this.account_id = account_id;
			}

			if(this.account_id > 0)
			{
				GO.request({
					maskEl:this.getEl(),
					url: "sieve/sieve/isSupported",
					success: function(response, options, result){
						
						if(result.supported)
						{
							// Hide the 'normal' panel and show this panel
							this.tabPanel.hideTabStripItem(this.filterGrid);
							
							this.tabPanel.unhideTabStripItem(this.sieveGrid);
							
							// Check if the vacation sieve plugin is available on the server, if so, enable the outofoffice panel
							// The indexOf function return -1 when the item is not found!							
							if(result.server_extensions.indexOf('vacation') < 0){
								this.tabPanel.hideTabStripItem(this.outOfOfficePanel);
								this.outOfOfficePanel.disableFields(true);
							} else {
								this.tabPanel.unhideTabStripItem(this.outOfOfficePanel);
								this.outOfOfficePanel.disableFields(false);			
							}
						}
						else
						{
							// Hide this panel and show the 'normal' panel
							this.tabPanel.hideTabStripItem(this.sieveGrid);
							this.tabPanel.hideTabStripItem(this.outOfOfficePanel);
							this.outOfOfficePanel.disableFields(true);
							
							this.tabPanel.unhideTabStripItem(this.filterGrid);
						}						
					},
					fail: function(response, options, result) {
						Ext.Msg.alert(GO.sieve.lang.checksieveerror);			
					},
					params: {
						account_id: this.account_id
					},
					scope:this
				});
			}
		},
		setAccountId : GO.email.AccountDialog.prototype.setAccountId.createSequence(function(account_id){
			
			// Check if sieve is supported with the account settings of this account id
			this.sieveCheck(account_id);
			
			this.sieveGrid.setAccountId(account_id);
			this.outOfOfficePanel.setAccountId(account_id);
		}),
		
		show : GO.email.AccountDialog.prototype.show.createSequence(function(accountId){
			if(GO.util.empty(accountId)){
				this.tabPanel.hideTabStripItem(this.sieveGrid);
				this.tabPanel.hideTabStripItem(this.outOfOfficePanel);
				this.outOfOfficePanel.disableFields(true);

				this.tabPanel.unhideTabStripItem(this.filterGrid);
			}
		})
	});
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: SieveDialog.js 19873 2016-03-01 10:55:30Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 * @author WilmarVB <wilmar@intermesh.nl>
 */
GO.sieve.SieveDialog = function(config) {
	if (!config) {
		config = {};
	}
	
	this.rgMethod = new Ext.form.RadioGroup({
		fieldLabel: '<b>'+GO.sieve.lang.ruletext+'</b>',
		columns: 1,
		vertical: true,
		anchor: '100%',
		value:'anyof',
		items: [
				{
					boxLabel: GO.sieve.lang.allfollowingrules, name: 'join', inputValue: 'allof'
				},
				{
					boxLabel: GO.sieve.lang.somefollowingrules, name: 'join', inputValue: 'anyof'
				},
				{
					boxLabel: GO.sieve.lang.allmessages, name: 'join', inputValue: 'any'
				}
		],
		listeners:{
			scope:this,
			change:function(){
				if(this.rgMethod.getValue()){
					if(this.rgMethod.getValue().inputValue == 'any')
					{
						this.criteriaLabel.hide();
						this.criteriumGrid.hide();
					}
					else
					{
						if(this.criteriumGrid.store.getCount() > 0)
						{
							if(this.criteriumGrid.store.getAt(0).data.test == 'true')
							{
								this.criteriumGrid.store.removeAll();
							}
						}
						this.criteriaLabel.show();
						this.criteriumGrid.show();
					}
				}
			}
		}
	})

	this.nameField = new Ext.form.TextField({
		fieldLabel:GO.lang.strName,
		name:'rule_name',
		width: 360,
		allowBlank:false
	});

	this.formPanel = new Ext.FormPanel({
		style:'padding:5px;',
		autoHeight:true,
		border:false,
		labelWidth:200,
		url: GO.url('sieve/sieve/rule'),
		baseParams:{},
		items:[this.nameField,{
				name:'active',
				checked:true,
				xtype:'checkbox',
				fieldLabel:GO.sieve.lang.activateFilter
			},
			this.rgMethod,
			this.criteriaLabel = new Ext.form.Label({text: '...'+GO.sieve.lang.meetingTheseCriteria+':',	width:'100%',	style: 'padding-bottom: 10px; font-weight:bold;'})
		]
	});

	// Make tests Grid and Panel
	this.criteriumGrid = new GO.sieve.CriteriumGrid();

	// Make action Grid and Panel
	this.actionGrid = new GO.sieve.ActionGrid();
	this.actionGrid.on('rowdblclick', function(grid, index, e){
//		var record = this.actionGrid.store.getAt(index);
		this.actionGrid.showActionCreatorDialog(index,this._accountId);
	},this);
	
	this.currentScriptName = '';
	this.currentRuleName = '';
	this.currentScriptIndex = 0;
	this.currentAccountId = 0;

	config.items = {
		autoScroll:true,
		layout:'anchor',
		items:[
				this.formPanel,
				this.criteriumGrid,
				new Ext.form.Label({text:GO.sieve.lang.actiontext, width:'100%', style: 'padding-bottom: 10px; margin: 5px; font-weight:bold;'}),
				this.actionGrid
			]
		};
			
	config.collapsible = true;
	config.maximizable = true;
	config.layout = 'fit';
	config.modal = false;
	config.resizable = true;
	config.width = 700;
	config.height = 640;
	config.closeAction = 'hide';
	config.title = GO.sieve.lang.sieverules;
	config.buttons = [{
		text : GO.sieve.lang.cmdSaveChanges,
		handler : function() {
			if(this.actionGrid.store.getCount() == 0 || (this.criteriumGrid.store.getCount() == 0 && this.rgMethod.getValue().inputValue != 'any'))
				alert(GO.sieve.lang.erroremptygrids);
			else
				this.saveAll();
		},
		scope : this
	}, {
		text : GO.lang['cmdCancel'],
		handler : function() {
			this.hide();
		},
		scope : this
	}];

	GO.sieve.SieveDialog.superclass.constructor.call(this, config);
	
	this.addEvents({
		'save' : true
	});
}
Ext.extend(GO.sieve.SieveDialog, GO.Window, {

	_accountId : 0,

	focus : function(){
		this.nameField.focus();
	},

	show : function(script_index,script_name, account_id) {

			GO.sieve.SieveDialog.superclass.show.call(this);
			
			this.formPanel.baseParams.script_index = script_index;
			this._accountId = this.formPanel.baseParams.account_id = account_id;
			this.formPanel.baseParams.script_name = script_name;

			if(script_index > -1)
			{	
				this.title = GO.sieve.lang.editsieve;
	
				this.formPanel.load({
					success:function(form, action)
					{
						this.rgMethod.setValue(action.result.data.join);
						this.actionGrid.store.loadData(action.result);
						this.criteriumGrid.store.loadData(action.result);
					},
					failure:function(form, action)
					{
						GO.errorDialog.show(action.result.feedback)
					},
					scope: this
				});		
			} 
			else
			{
				this.title = GO.sieve.lang.newsieverule;
				this.formPanel.form.setValues({
					'rule_name' : '',
					'disabled' : false
				});
				this.resetGrids();
				this.rgMethod.setValue('anyof');
				
				GO.request({
					url: 'sieve/sieve/accountAliases',
					params: {
						'account_id' : account_id
					},
					success:function(options, response, result) {
						this.actionGrid.accountAliasesString = result.data.aliases;
					},
					scope: this
				});
				
			}
	},
	
	saveAll : function() {

		var criteriaData = this.criteriumGrid.getGridData();
		var actionData = this.actionGrid.getGridData();
		
		// Check for spam
		if(this.checkIsSpamRule(criteriaData,actionData)){
			
			// Check if a STOP is already applied.
			if(!this.checkHasStopAction(actionData)){
				//Add a STOP action at the end
				var stopAction = {
					addresses:'',
					days:'',
					id:1,
					reason:'',
					target:'',
					text:'Stop',
					type:'stop',
				};
				
				actionData.push(stopAction);
			}
			
		}

		this.formPanel.form.submit({
			url: GO.url('sieve/sieve/submitRules'),
			params : {
				'criteria' : Ext.encode(criteriaData),
				'actions' : Ext.encode(actionData)
			},
			success : function(form, action) {
					this.hide();
					this.body.unmask();
			},
			failure: function(form, action) {
				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
				this.body.unmask();
			},
			scope : this
		});
	},
	
	/**
	 * Check if the current rule is a spam message test
	 * 
	 * @param array criteria
	 * @param array action
	 * @returns {Boolean}
	 */
	checkIsSpamRule : function(criteria,action){
		var isSpam = false;
		
		for(var i=0, tot=criteria.length; i < tot; i++) {
			if(criteria[i].test == 'header' && criteria[i].type == 'contains' && criteria[i].arg1 == 'X-Spam-Flag'){
				isSpam = true;
			}
			if(criteria[i].test == 'header' && criteria[i].type == 'contains' && criteria[i].arg1 == 'Subject' && criteria[i].arg2 == 'spam'){
				isSpam = true;
			}
		}
		return isSpam;
	},
	
	/**
	 * Check if the current action has a "STOP"
	 * 
	 * @param array action
	 * @returns {Boolean} 
	 */
	checkHasStopAction : function(action){
		
		var hasStop = false;
		
		for(var i=0, tot=action.length; i < tot; i++) {
//			if(action[i].text == "Stop" && action[i].type == "stop"){
			if(action[i].type == "stop"){
				hasStop = true;
			}
		}
				
		return hasStop;
	},
	

	resetGrids : function(){
		this.actionGrid.store.removeAll();
		this.criteriumGrid.store.removeAll();   
	}	
});


GO.sieve.OutOfOfficePanel = Ext.extend(Ext.Panel,{
	
	title:GO.sieve.lang.outOfOffice,
	layout:'form',
	autoScroll:true,
	
	accountId:0,
		
	initComponent : function(config){
		
		this.scheduleText = new GO.form.HtmlComponent({
			html:GO.sieve.lang.scheduleText,
			style:'padding:5px 0px'
		});
		
		this.scheduleActivateField = new Ext.form.DateField({
			name : 'ooo_activate',
			format : GO.settings['date_format'],
			width: 180,
			allowBlank : false,
			fieldLabel: GO.sieve.lang.activateAt,
			isChanged:false,
			listeners : {
				
				focus : {
					fn : function(field){
						this.scheduleActivateField.setMinValue(new Date());
						this.scheduleActivateField.setValue(new Date());
					},
					scope : this
				},
				
				change : {
					fn : function(field,newVal,oldVal){
						this.scheduleActivateField.isChanged=true;
						this.scheduleDeactivateField.setValue(newVal);
						this.scheduleDeactivateField.setMinValue(newVal);
					},
					scope : this
				}
			}
		});
		
		this.scheduleDeactivateField = new Ext.form.DateField({
			name : 'ooo_deactivate',
			format : GO.settings['date_format'],
			width: 180,
			allowBlank : false,
			fieldLabel: GO.sieve.lang.deactivateAt,
			listeners : {
				focus : {
					fn : function(){
						if(!this.scheduleActivateField.isChanged){
							this.scheduleDeactivateField.setMinValue(new Date());
							this.scheduleDeactivateField.setValue(new Date());
						}
					},
					scope : this
				}
			}
		});
		
		this.scheduleFieldset = new Ext.form.FieldSet({
			title: GO.sieve.lang.schedule,
			height:130,
			border: true,
			collapsed: false,
			labelWidth: 180,
			items:[this.scheduleText,this.scheduleActivateField,this.scheduleDeactivateField],
			style: 'margin-right:10px; margin-bottom:5px;'
		});
		
		this.activateText = new GO.form.HtmlComponent({
			html:GO.sieve.lang.activateText,
			style:'padding:5px 0px'
		});
		
		this.activateCheck = new Ext.ux.form.XCheckbox({
				hideLabel: true,
				boxLabel: GO.sieve.lang.activate,
				name: 'ooo_script_active'
			});
		
		this.activateFieldset = new Ext.form.FieldSet({
			title: GO.sieve.lang.activate,
			height:130,
			border: true,
			collapsed: false,
			items:[this.activateText,this.activateCheck]
		});
		
//		this.subjectText = new GO.form.HtmlComponent({
//			html:GO.sieve.lang.subjectText,
//			style:'padding:5px 0px'
//		});
//		
//		this.subjectField = new Ext.form.TextArea({
//			name: 'ooo_subject',
//			allowBlank:false,
//			anchor:'100%',
//			height:20,
//			width: 300,
//			hideLabel: true
//		});
		
		this.messageText = new GO.form.HtmlComponent({
			html:GO.sieve.lang.messageText,
			style:'padding:5px 0px'
		});
		
		this.messageField = new Ext.form.TextArea({
			name: 'ooo_message',
			allowBlank:false,
			anchor:'100%',
			height:130,
			width: 300,
			hideLabel: true,
			setValue: function(v){
//				this.messageField.superclass.setValue.call(this,v);
				Ext.form.TextArea.prototype.setValue.call(this,GO.util.HtmlDecode(Ext.util.Format.htmlDecode(v)));
			}
		});
		
		this.messageFieldset = new Ext.form.FieldSet({
			title: GO.sieve.lang.message,
			autoHeight: true,
			border: true,
			collapsed: false,
			items:[
//				this.subjectText,this.subjectField,
				this.messageText,this.messageField]
		});
		
		
		this.aliassesText = new GO.form.HtmlComponent({
			html:GO.sieve.lang.aliassesText,
			style:'padding:5px 0px'
		});
		
		this.aliassesField = new Ext.form.TextArea({
			name: 'ooo_aliasses',
			allowBlank:true,
			anchor:'100%',
			height:40,
			width: 300,
			hideLabel: true
		});
			
		this.nDaysText = new GO.form.HtmlComponent({
			html:GO.sieve.lang.nDaysText,
			style:'padding:5px 0px'
		});
		
		this.nDaysField = new GO.form.NumberField({
			name: 'ooo_days',
			value: 3,
			allowBlank:false,
			width:70,
			decimals:0,
			fieldLabel:GO.sieve.lang.days
		});
		
		this.advancedFieldset = new Ext.form.FieldSet({
			title: GO.sieve.lang.advancedOptions,
			autoHeight: true,
			border: true,
			collapsed: true,
			collapsible: true,
			labelWidth: 180,
			items:[this.aliassesText,this.aliassesField,this.nDaysText,this.nDaysField]
		});
			
		this.scriptNameField = new Ext.form.Hidden({
			name: 'ooo_script_name',
		});
		
		this.ruleNameField = new Ext.form.Hidden({
			name: 'ooo_rule_name',
		});
					
		this.indexField = new Ext.form.Hidden({
			name: 'ooo_script_index',
		});
			
		this.items = [
			this.scriptNameField,
			this.ruleNameField,
			this.indexField,
			{
				layout:'column',
				defaults:{columnWidth:.5, cls: 'go-form-panel', padding:'10'},
				items:[
					this.scheduleFieldset,
					this.activateFieldset
				]
			},
			this.messageFieldset,
			this.advancedFieldset
		];

		GO.sieve.OutOfOfficePanel.superclass.initComponent.call(this,config);
	},
	
	disableFields : function(disable){
		this.scheduleActivateField.setDisabled(disable);
		this.scheduleDeactivateField.setDisabled(disable);
		this.messageField.setDisabled(disable);
		this.aliassesField.setDisabled(disable);
		this.scriptNameField.setDisabled(disable);
		this.ruleNameField.setDisabled(disable);
		this.activateCheck.setDisabled(disable);
		this.indexField.setDisabled(disable);
		this.nDaysField.setDisabled(disable);
//		this.subjectField.setDisabled(disable);
//
//
//		if(GO.config.){
//			this.daysFieldset.setVisible();
//		}

	},
		
	setAccountId : function(account_id){
		this.setDisabled(!account_id);
		this.accountId=account_id;
	}

});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: SieveGrid.js 19390 2015-09-10 11:44:35Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.sieve.SieveGrid = function(config){
	
	this.selectScript = new Ext.form.ComboBox({
		hiddenName:'selectScript',
		valueField:'value',
		displayField:'name',
		store: new GO.data.JsonStore({
			url: GO.url('sieve/sieve/scripts'),
			baseParams: {
				account_id: 0
			},
			fields: ['name', 'value','active'],
			root: 'results'
		}),
		mode:'local',
		triggerAction:'all',
		editable:false,
		selectOnFocus:true,
		forceSelection:true,
		allowBlank:false,
		width:140
	});

	this.selectScript.on('select', function(combo, record){
		this.setSelectedScript(record.json.value);
		this.store.reload();
	},this);

	var fields ={
		fields:['id','name', 'index', 'script_name','active'],
		columns:[{
			header: GO.sieve.lang.name,
			dataIndex: 'name'
		},{
			header: GO.sieve.lang.active,
			dataIndex: 'active',
			renderer: function(value, metaData, record, rowIndex, colIndex, store) {
				if(value)
					value = GO.lang.cmdYes;
				else
					value = GO.lang.cmdNo;
				return value;
			}
		}
	]};

	if(!config)
	{
		config = {};
	}
	config.title=GO.email.lang.filters;
	config.layout='fit';
	config.region='center';
	config.autoScroll=true;
	config.border=false;
	config.disabled=true;
	config.store = new GO.data.JsonStore({
		url: GO.url('sieve/sieve/rules'),
		baseParams: {
			script_name: ''
			},
		root: 'results',
		id: 'index',
		totalProperty:'total',
		fields: fields.fields,
		remoteSort: true
	});
	config.paging=false;
	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true,
			autoFill: true,
			forceFit: true
		},
		columns:fields.columns
	});
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;

	this.sieveDialog = new GO.sieve.SieveDialog();
	this.sieveDialog.on('hide', function(panel){
		this.store.load();
	}, this);

	config.enableDragDrop=true;
	config.ddGroup='SieveFilterDD';

	config.tbar=[{
			iconCls: 'btn-add',
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			handler: function(){
	    	this.sieveDialog.show(-1,this.selectScript.getValue(),this.store.baseParams.account_id);
			},
			scope: this
		},{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler:function(){this.deleteSelected();},
				scope: this
		},
		GO.sieve.lang.filterset,
		this.selectScript,{
			iconCls: 'btn-extra',
			text: GO.sieve.lang.activate,
			cls: 'x-btn-text-icon',
			handler: function(){
				
				this.selectScript.store.load({
					params:{
						set_active_script_name: this.selectScript.getValue()						
					},
					callback:function(){
						this.selectScript.setValue(this.selectScript.getValue());
					},
					scope:this
				});
//				GO.request({
//				 url: 'sieve/sieve/setActiveScript',
//				 scope:this,
//				 params: {
//					 
//					 account_id: this.store.baseParams.account_id
//				 },
//				 success: function(){
//					 this.selectScript.store.reload();
//					 this.setSelectedScript();
//					 this.selectScript.setRawValue(this.selectScript.getRawValue() + ' ('+GO.sieve.lang.active+')');
//					 this.store.reload();
//				 }
//				},this);
			},
			scope: this
		}];
	GO.sieve.SieveGrid.superclass.constructor.call(this, config);
	
	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);
		this.sieveDialog.show(record.data.index, record.data.script_name, this.store.baseParams.account_id);
		}, this);

	this.on('show', function(){		
		this.selectScript.store.load({
			callback:function(){
				if(this.selectScript.store.reader.jsonData.success){
					this.selectScript.setValue(this.selectScript.store.reader.jsonData.active);
					this.store.load();
				}else
				{
					//alert("Sieve not supported");
					this.setDisabled(true);
				}
			},
			scope:this
		});
	}, this);

	this.on('render', function(){
		//enable row sorting
		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody,
		{
			ddGroup : 'SieveFilterDD',
			copy:false,
			notifyDrop : this.onNotifyDrop.createDelegate(this)
		});
	}, this);
};

Ext.extend(GO.sieve.SieveGrid, GO.grid.GridPanel,{
	setAccountId : function(account_id){
		this.setDisabled(!account_id);
		this.accountId=account_id;
		this.store.baseParams.account_id = account_id;
		this.selectScript.store.baseParams.account_id = account_id;
	},
	setSelectedScript : function(name){
		if(name)
			this.store.baseParams.script_name = name;
		else
			this.store.baseParams.script_name = this.selectScript.getValue();
	},
	onNotifyDrop : function(dd, e, data)
	{
		var rows=this.selModel.getSelections();
		var dragData = dd.getDragData(e);
		var cindex=dragData.rowIndex;
		if(cindex=='undefined')
		{
			cindex=this.store.data.length-1;
		}

		for(i = 0; i < rows.length; i++)
		{
			var rowData=this.store.getById(rows[i].id);

			if(!this.copy){
				this.store.remove(this.store.getById(rows[i].id));
			}

			this.store.insert(cindex,rowData);
		}

		//save sort order
		var filters = [];

		for (var i = 0; i < this.store.data.items.length;  i++)
		{
			filters.push(this.store.data.items[i].get('index'));
		}

		Ext.Ajax.request({
			url: GO.url('sieve/sieve/saveScriptsSortOrder'),
			params: {
				sort_order: Ext.encode(filters),
				account_id: this.store.baseParams.account_id
			},
			success: function(response, opts) {
				this.store.load();
			},
			scope: this				
		});
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: CriteriumGrid.js 19355 2015-08-28 13:05:30Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 * @author WilmarVB <wilmar@intermesh.nl>
 */

GO.sieve.CriteriumGrid = function(config){
	if(!config)
	{
		config = {};
	}
	config.autoScroll=true;
	config.height=180;
	config.style='margin: 5px;';
	config.border=true;
	config.cls = 'go-grid3-hide-headers';
	var fields ={
		fields:['test','not','type','arg','arg1','arg2','text','part'],
		header: false,
		columns:[
//		{
//			header: GO.sieve.lang.test,
//			dataIndex: 'test'
//		},{
//			header: GO.sieve.lang.not,
//			dataIndex: 'not'
//		},{
//			header: GO.sieve.lang.type,
//			dataIndex: 'type'
//		},{
//			header: GO.sieve.lang.arg,
//			dataIndex: 'arg'
//		},{
//			header: GO.sieve.lang.arg1,
//			dataIndex: 'arg1'
//		},{
//			header: GO.sieve.lang.arg2,
//			dataIndex: 'arg2'
//		},
		{
			header:false,
			dataIndex:'text',
			renderer:function(value, metaData, record, rowIndex, colIndex, store){
				
				console.log(record);
				
				var txtToDisplay = '';

				switch(record.data.test)
				{
					case 'currentdate':
				
//						id: 1, test: "currentdate", not: false, type: "is", arg: Date 2015-08-19T22:00:00.000Z, arg1: "", arg2: ""
						switch(record.data.type){
							case 'value-le':
								txtToDisplay = GO.sieve.lang.currentdate+' '+GO.sieve.lang.before+' '+record.data.arg;
								break;
							case 'is':
								txtToDisplay = GO.sieve.lang.currentdate+' '+GO.sieve.lang.is+' '+record.data.arg;
								break;
							case 'value-ge':
								txtToDisplay = GO.sieve.lang.currentdate+' '+GO.sieve.lang.after+' '+record.data.arg;
								break;
						}

					break;
						
					case 'body':
						if(record.data.type == 'contains')
						{
							if(record.data.not)
							{
								txtToDisplay = GO.sieve.lang.bodycontainsnot+' '+record.data.arg;
							} else {
								txtToDisplay = GO.sieve.lang.bodycontains+' '+record.data.arg;
							}
						}
						break;
					case 'header':
						if(record.data.type == 'contains')
						{
							if(record.data.not)
							{
								if(record.data.arg1 == 'Subject')
									txtToDisplay = GO.sieve.lang.subjectcontainsnot+' '+record.data.arg2;
								else if(record.data.arg1 == 'From')
									txtToDisplay = GO.sieve.lang.fromcontainsnot+' '+record.data.arg2;
								else if(record.data.arg1 == 'To')
									txtToDisplay = GO.sieve.lang.tocontainsnot+' '+record.data.arg2;
								else
									txtToDisplay = GO.sieve.lang.custommailheader+" "+record.data.arg1+" "+GO.sieve.lang.notcontains+" "+record.data.arg2;
							}
							else
							{
								if(record.data.arg1 == 'Subject')
									txtToDisplay = GO.sieve.lang.subjectcontains+' '+record.data.arg2;
								else if(record.data.arg1 == 'From')
									txtToDisplay = GO.sieve.lang.fromcontains+' '+record.data.arg2;
								else if(record.data.arg1 == 'To')
									txtToDisplay = GO.sieve.lang.tocontains+' '+record.data.arg2;
								else if(record.data.arg1 == 'X-Spam-Flag')
									txtToDisplay = GO.sieve.lang.markedasspam;
								else
									txtToDisplay = GO.sieve.lang.custommailheader+" "+record.data.arg1+" "+GO.sieve.lang.contains+" "+record.data.arg2;
							}
						}
						else if(record.data.type == 'is')
						{
							if(record.data.not)
							{
								if(record.data.arg1 == 'Subject')
									txtToDisplay = GO.sieve.lang.subjectequalsnot+' '+record.data.arg2;
								else if(record.data.arg1 == 'From')
									txtToDisplay = GO.sieve.lang.fromequalsnot+' '+record.data.arg2;
								else if(record.data.arg1 == 'To')
									txtToDisplay = GO.sieve.lang.toequalsnot+' '+record.data.arg2;
								else
									txtToDisplay = GO.sieve.lang.custommailheader+" "+record.data.arg1+" "+GO.sieve.lang.notis +" "+record.data.arg2;
							}
							else
							{
								if(record.data.arg1 == 'Subject')
									txtToDisplay = GO.sieve.lang.subjectequals+' '+record.data.arg2;
								else if(record.data.arg1 == 'From')
									txtToDisplay = GO.sieve.lang.fromequals+' '+record.data.arg2;
								else if(record.data.arg1 == 'To')
									txtToDisplay = GO.sieve.lang.toequals+' '+record.data.arg2;
								else
									txtToDisplay = GO.sieve.lang.custommailheader+" "+record.data.arg1+" "+GO.sieve.lang.is +" "+record.data.arg2;
							}
						}
						break;

					case 'exists':
						if(record.data.not)
						{
							if(record.data.arg == 'Subject')
								txtToDisplay = GO.sieve.lang.subjectexistsnot;
							else if(record.data.arg == 'From')
								txtToDisplay = GO.sieve.lang.fromexistsnot;
							else if(record.data.arg == 'To')
								txtToDisplay = GO.sieve.lang.toexistsnot;
							else
								txtToDisplay = GO.sieve.lang.custommailheader+" "+record.data.arg+" "+GO.sieve.lang.notexists;
						}
						else
						{
							if(record.data.arg == 'Subject')
								txtToDisplay = GO.sieve.lang.subjectexists;
							else if(record.data.arg == 'From')
								txtToDisplay = GO.sieve.lang.fromexists;
							else if(record.data.arg == 'To')
								txtToDisplay = GO.sieve.lang.toexists;
							else
								txtToDisplay = GO.sieve.lang.custommailheader+" "+record.data.arg+" "+GO.sieve.lang.notexists;
						}
						break;

					case 'true':	
						txtToDisplay = 'Alle';
						break;

					case 'size':
						if(record.data.type == 'under')
							txtToDisplay = GO.sieve.lang.sizesmallerthan+' '+record.data.arg;
						else
							txtToDisplay = GO.sieve.lang.sizebiggerthan+' '+record.data.arg;
						break;
						
					default:
						txtToDisplay = GO.sieve.lang.errorshowtext;
						break;
				}
				return txtToDisplay;
			}
		}
	]};
	
	var columnModel =  new Ext.grid.ColumnModel({
		columns:fields.columns
	});

	config.store = new GO.data.JsonStore({
	    root: 'criteria',
	    id: 'id',
	    totalProperty:'total',
	    fields: fields.fields,
	    remoteSort: true
	});
	enableDragDrop:true,
	config.enableDragDrop = true;
	config.ddGroup = 'SieveTestDD';
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.sieve.lang['pleaseAddCriterium']
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	config.tbar=[{
			iconCls: 'btn-add',
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			handler: function(){this.showCriteriumCreatorDialog();},
				scope: this
		},{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function(){this.deleteSelected();},
				scope: this
		}];

	GO.sieve.CriteriumGrid.superclass.constructor.call(this, config);

	this.on('render',function(){
	
		//enable row sorting
		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody,
		{
			ddGroup : 'SieveTestDD',
			copy:false,
			notifyDrop : this.onNotifyDrop.createDelegate(this)
		});
	}, this);
	
	this.on('rowdblclick', function(grid, index, e){
//		var record = this.store.getAt(index);
		this.showCriteriumCreatorDialog(index);
	},this);
};

Ext.extend(GO.sieve.CriteriumGrid, GO.grid.GridPanel,{
	deleteSelected : function(){this.store.remove(this.getSelectionModel().getSelections());},
	
	onNotifyDrop : function(dd, e, data)
	{
		var rows=this.selModel.getSelections();
		var dragData = dd.getDragData(e);
		var cindex=dragData.rowIndex;
		if(cindex=='undefined')
		{
			cindex=this.store.data.length-1;
		}

		for(i = 0; i < rows.length; i++)
		{
			var rowData=this.store.getById(rows[i].id);

			if(!this.copy){
				this.store.remove(this.store.getById(rows[i].id));
			}

			this.store.insert(cindex,rowData);
		}

		//save sort order
		var filters = {};

		for (var i = 0; i < this.store.data.items.length;  i++)
		{
			filters[this.store.data.items[i].get('id')] = i;
		}
	},
	
	_saveCriteriumRecord : function(values) {
		if(values.id<0){
			var record = new GO.sieve.CriteriumRecord(values)
			record.set('id',this.store.getCount());
			this.store.insert( this.store.getCount(), record);
		}
		else
		{
			var record = this.store.getAt(values.id);
			Ext.apply(record.data,values);
			record.commit();
		}
	},
	
	showCriteriumCreatorDialog : function(recordId) {
		if (!this.criteriumCreatorDialog) {
			this.criteriumCreatorDialog = new GO.sieve.CriteriumCreatorDialog();
			this.criteriumCreatorDialog.on('criteriumPrepared',function(critValues){
				this._saveCriteriumRecord(critValues);
			},this);
		}
		
		if (recordId>=0) {
			var record = this.store.getAt(recordId);
			record.set('id',recordId);
			this.criteriumCreatorDialog.show(record);
		} else {
			var record = new Ext.data.Record();
			record.set('id',-1);
			this.criteriumCreatorDialog.show(record);
		}
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 * @author WilmarVB <wilmar@intermesh.nl>
 */

GO.sieve.CriteriumRecord = Ext.data.Record.create([{
	name: 'test',
	type: 'string'
},
{
	name: 'not',
	type: 'string'
},
{
	name: 'type',
	type: 'string'
},
{
	name: 'arg1',
	type: 'string'
},
{
	name: 'arg2',
	type: 'string'
}]);

GO.sieve.CriteriumCreatorDialog = function(config){
	config = config || {};

	this._buildForm();

	config.title=GO.sieve.lang.setFilter;
	config.border=false;
	config.layout= 'fit';
	config.height=120;
	config.width=640;
	config.baseParams={
		task : 'addAction',
		account_id : 0,
		script_name : '',
		rule_name : '',
		script_index : 0
	};
	config.items=[this.formPanel];
	
	config.buttons = [{
		text : GO.lang['cmdOk'],
		handler : function() {
			if (this.formPanel.getForm().isValid()) {
				this.fireEvent('criteriumPrepared',this._prepareValuesForStorage());
				this.hide();
				this._resetForm();
			}
		},
		scope : this
	}, {
		text : GO.lang['cmdCancel'],
		handler : function() {
			this.hide();
			this._resetForm();
		},
		scope : this
	}];

	GO.sieve.CriteriumCreatorDialog.superclass.constructor.call(this, config);
}

Ext.extend(GO.sieve.CriteriumCreatorDialog, GO.Window,{
	_recordId : -1,

	show : function(record) {
		this._recordId = -1;
		if (typeof(record)=='object') {
			
			this._recordId = record.get('id');
			this.cmbOperator.store = GO.sieve.cmbOperatorStore;
			switch(record.get('test')) {
				
				case 'currentdate':
					this.cmbField.setValue('currentdate');
					this.cmbDateOperator.setValue(record.get('type'));
					this.dateCriterium.setValue(record.get('arg'));
					this._transForm(this.cmbField.getValue());
				break;
				case 'size':
					// We know for sure this record corresponds with a size criterium
					this.cmbField.setValue('size');
					this._transForm('size');
					// Put the Kilo/Mega/Giga scalar in the right input field
					var lastChar = record.data.arg.substr(record.data.arg.length-1,1);
					var everythingBeforeTheLastChar = record.data.arg.substr(0,record.data.arg.length-1);
					if(lastChar != 'K' && lastChar != 'M' && lastChar != 'G')
					{
						everythingBeforeTheLastChar = everythingBeforeTheLastChar+lastChar;
						lastChar = 'B';
					}
					this.cmbUnderOver.setValue(record.get('type'));
					this.numberCriterium.setValue(everythingBeforeTheLastChar);
					this.rgSize.setValue(lastChar);
					break;
				case 'exists':
					// This record can be of one of the following kinds of criteria:
					// Custom, Subject, Recipient (To), Sender (From)
					var kind = record.get('arg');
					if (kind=='Subject'||kind=='From'||kind=='To'||kind=='X-Spam-Flag')
						this.cmbField.setValue(kind);
					else
						this.cmbField.setValue('custom');
					this._transForm(this.cmbField.getValue());
					this._setOperatorField(record);
					break;
				case 'header':
					// This record can be of one of the following kinds of criteria:
					// Custom, Subject, Recipient (To), Sender (From), X-Spam-Flag
					var kind = record.get('arg1');
					if (kind=='Subject'||kind=='From'||kind=='To'||kind=='X-Spam-Flag')
						this.cmbField.setValue(kind);
					else
						this.cmbField.setValue('custom');
					this._transForm(this.cmbField.getValue());
					this.txtCriterium.setValue(record.get('arg2'));
					this.txtCustom.setValue(record.get('arg1'));
					this._setOperatorField(record);
					break;
				case 'body':
					this.cmbField.setValue('body');
					this._transForm(this.cmbField.getValue());
					this.txtCriterium.setValue(record.get('arg'));
					this._setOperatorField(record);
					break;
			}
		}
		GO.sieve.CriteriumCreatorDialog.superclass.show.call(this);
	},
	
	_setOperatorField : function(record) {
		var type = record.get('type');
		var not = record.get('not');
		
		switch (type) {
			case 'contains':
				if (not) {
					this.cmbOperator.setValue('notcontains');
					this.cmbBodyOperator.setValue('notcontains');
				} else {
					this.cmbOperator.setValue('contains');
					this.cmbBodyOperator.setValue('contains');
				}
				break;
			case 'is':
				if (not)
					this.cmbOperator.setValue('notis');
				else
					this.cmbOperator.setValue('is');
				break;
			default:
				if (not)
					this.cmbOperator.setValue('notexists');
				else
					this.cmbOperator.setValue('exists');
				break;
		}
	},
	
	/****************************************************************************
	 * Often, especially when this.cmbField changes value, different form fields
	 * must be shown than the current ones. This method does that.
	 ****************************************************************************/
	
	_transForm : function(type){
		this._toggleFieldUse(this.cmbBodyOperator,false);
		switch(type)
		{
			case 'size':
				this._toggleFieldUse(this.txtCustom,false);
				this._toggleFieldUse(this.cmbOperator,false);
				this._toggleFieldUse(this.txtCriterium,false);
				this._toggleFieldUse(this.numberCriterium,true);
				this._toggleFieldUse(this.cmbUnderOver,true);
				this._toggleFieldUse(this.rgSize,true);
				this._toggleFieldUse(this.cmbDateOperator,false);
				this._toggleFieldUse(this.dateCriterium,false);
				break;
			case 'body':
				this._toggleFieldUse(this.cmbBodyOperator,true);
			case 'From':
			case 'To':
			case 'Subject':
				this._toggleFieldUse(this.txtCustom,false);
				this._toggleFieldUse(this.cmbOperator,type!='body');
				this._toggleFieldUse(this.txtCriterium,!(this.cmbOperator.getValue() == 'exists' || this.cmbOperator.getValue() == 'notexists'));
				this._toggleFieldUse(this.numberCriterium,false);
				this._toggleFieldUse(this.cmbUnderOver,false);
				this._toggleFieldUse(this.rgSize,false);
				this._toggleFieldUse(this.cmbDateOperator,false);
				this._toggleFieldUse(this.dateCriterium,false);
				break;
			case 'X-Spam-Flag':
				this._toggleFieldUse(this.txtCustom,false);
				this._toggleFieldUse(this.cmbOperator,false);
				this._toggleFieldUse(this.txtCriterium,false);
				this._toggleFieldUse(this.numberCriterium,false);
				this._toggleFieldUse(this.cmbUnderOver,false);
				this._toggleFieldUse(this.rgSize,false);
				this._toggleFieldUse(this.cmbDateOperator,false);
				this._toggleFieldUse(this.dateCriterium,false);
				break;
			case 'custom':
				this._toggleFieldUse(this.txtCustom,true);
				this._toggleFieldUse(this.cmbOperator,true);
				this._toggleFieldUse(this.txtCriterium,!(this.cmbOperator.getValue() == 'exists' || this.cmbOperator.getValue() == 'notexists'));
				this._toggleFieldUse(this.numberCriterium,false);
				this._toggleFieldUse(this.cmbUnderOver,false);
				this._toggleFieldUse(this.rgSize,false);
				this._toggleFieldUse(this.cmbDateOperator,false);
				this._toggleFieldUse(this.dateCriterium,false);
				break;
			case 'currentdate':
				this._toggleFieldUse(this.txtCustom,false);
				this._toggleFieldUse(this.cmbOperator,false);
				this._toggleFieldUse(this.txtCriterium,false);
				this._toggleFieldUse(this.numberCriterium,false);
				this._toggleFieldUse(this.cmbUnderOver,false);
				this._toggleFieldUse(this.rgSize,false);
				this._toggleFieldUse(this.cmbDateOperator,true);
				this._toggleFieldUse(this.dateCriterium,true);
				break;
			default:
				this._toggleFieldUse(this.txtCustom,false);
				this._toggleFieldUse(this.cmbOperator,false);
				this._toggleFieldUse(this.txtCriterium,false);
				this._toggleFieldUse(this.numberCriterium,false);
				this._toggleFieldUse(this.cmbUnderOver,false);
				this._toggleFieldUse(this.rgSize,false);
				this._toggleFieldUse(this.cmbDateOperator,false);
				this._toggleFieldUse(this.dateCriterium,false);
				break;
		}
		this.doLayout();
	},
	
	_resetForm : function(){
		this.formPanel.form.reset();
		this._transForm(this.cmbField.getValue());
		this._recordId=-1;
	},
	
	_toggleFieldUse : function(component,use) {
		component.setVisible(use);
		component.setDisabled(!use);
	},
	
	/****************************************************************************
	 * The following methods are needed right before passing the resulting
	 * criterium of this dialog to CriteriumGrid. Passing is done with the
	 * criteriumPrepared event.
	 ****************************************************************************/
	
	_prepareValuesForStorage : function() {
		// Build up the data before adding the data to the grid.
		var _test = '';
		var _not = true;
		var _type = '';
		var _arg = '';
		var _arg1 = this.cmbField.getValue();
		var _arg2 = this.txtCriterium.getValue();
		var _part = '';

		// Workaround for _arg2 check
		if(this.cmbOperator.getValue() == 'exists' || this.cmbOperator.getValue() == 'notexists' || this.cmbField.getValue() == 'X-Spam-Flag')
			_arg2 = 'sometext';

		// Check the input value of the txtBox
		if(_arg2 != '')
		{
			switch(this.cmbField.getValue()) {
				case 'custom':
					if(this.cmbOperator.getValue() == 'exists' || this.cmbOperator.getValue() == 'notexists') {
						_test = 'exists';
						_arg = this.txtCustom.getValue();
						_arg1 = '';
						_arg2 = '';
					} else {
						_test = 'header';
						_arg = '';
						_arg1 = this.txtCustom.getValue();
						_arg2 = this.txtCriterium.getValue();
					}
					_not = this._evaluateIfNotFields();
					_type = this._evaluateTypeFields();
					break;
				case 'X-Spam-Flag':
					_test = 'header';
					_not = false;
					_type	= this.cmbOperator.getValue();
					_arg = '';
					_arg1 = 'X-Spam-Flag';
					_arg2 = 'YES';
					break;
				case 'body':
					_test = 'body';
					_not = (this.cmbBodyOperator.getValue() == 'notexists' || this.cmbBodyOperator.getValue() == 'notcontains');
					_type = 'contains';
					_arg = this.txtCriterium.getValue();
					_arg1 = '';
					_arg2 = '';
					break;
				default:
					if(this.cmbOperator.getValue() == 'exists' || this.cmbOperator.getValue() == 'notexists')
					{
						_test = 'exists';
						_type = '';
						_arg = this.cmbField.getValue();
						_arg1 = '';
						_arg2 = '';
						_not = this._evaluateIfNotFields();
					}
					else
					{
						_test = 'header';
						_arg = '';
						_arg1 = this.cmbField.getValue();
						_arg2 = this.txtCriterium.getValue();
						_not = this._evaluateIfNotFields();
						_type = this._evaluateTypeFields();
					}
					break;
			}
			
		} else if (this.cmbField.getValue()=='size') {
			_test = 'size';
			_not = false;
			_type	= this.cmbUnderOver.getValue();
			_arg1 = '';
			_arg2 = '';

			if(this.rgSize.getValue().inputValue == 'B')
				_arg = this.numberCriterium.getValue();
			else
				_arg = this.numberCriterium.getValue() + this.rgSize.getValue().inputValue;
		} else if(this.cmbField.getValue()=='currentdate'){
				_test = 'currentdate';
				_not = false;
				_arg = this.dateCriterium.getRawValue();
				_part = "date";
				_arg1 = '';
				_arg2 = '';
				_type = this.cmbDateOperator.getValue();
		}
		
		return {
			id: this._recordId,
			test: _test,
			not:  _not,
			type: _type,
			arg:	_arg,
			arg1: _arg1,
			arg2: _arg2,
			part: _part
		};
		
	},
	
	_evaluateIfNotFields : function() {
		return this.cmbOperator.getValue() == 'notexists' || this.cmbOperator.getValue() == 'notcontains' || this.cmbOperator.getValue() == 'notis';
	},
	
	_evaluateTypeFields : function() {
		if(this.cmbOperator.getValue() == 'contains' ||this.cmbOperator.getValue() == 'notcontains')
			return 'contains';
		else if(this.cmbOperator.getValue() == 'is' ||this.cmbOperator.getValue() == 'notis')
			return 'is';
		else
			return '';
	},
	
	/****************************************************************************
	 * Lay out the actual components
	 ****************************************************************************/
	
	_buildForm : function() {
		this.cmbField = new GO.form.ComboBox({
			hiddenName:'arg1',
			valueField:'value',
			displayField:'field',
			store: GO.sieve.cmbFieldStore,
			mode:'local',
			triggerAction:'all',
			editable:false,
			forceSelection:true,
			allowBlank:false,
			width:200,
			emptyText:GO.sieve.lang.pleaseSelectOne
		});

		this.cmbOperator = new GO.form.ComboBox({
			hiddenName:'type',
			value:'contains',
			valueField:'value',
			displayField:'field',
			store: GO.sieve.cmbOperatorStore,
			mode:'local',
			triggerAction:'all',
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			allowBlank:false,
			width:110,
			emptyText:GO.sieve.lang.operator,
			disabled: true,
			hidden: true
		});
		
		this.cmbBodyOperator = new GO.form.ComboBox({
			hiddenName:'type',
			value:'contains',
			valueField:'value',
			displayField:'field',
			store: GO.sieve.cmbBodyOperatorStore,
			mode:'local',
			triggerAction:'all',
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			allowBlank:false,
			width:110,
			emptyText:GO.sieve.lang.operator,
			disabled: true,
			hidden: true
		});


	this.cmbDateOperator = new GO.form.ComboBox({
			hiddenName:'type',
			value:'is',
			valueField:'value',
			displayField:'field',
			store: GO.sieve.cmbDateOperatorStore,
			mode:'local',
			triggerAction:'all',
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			allowBlank:false,
			width:110,
			emptyText:GO.sieve.lang.operator,
			disabled: true,
			hidden: true
		});

		this.dateCriterium = new Ext.form.DateField({
			name: 'arg2' ,
			emptyText: '...',
			allowBlank:false,
			width:150,
			disabled: true,
			format : "Y-m-d",
			hidden: true
		});

		this.txtCriterium = new Ext.form.TextField({
			name: 'arg2' ,
			emptyText: '...',
			allowBlank:false,
			width:150,
			disabled: true,
			hidden: true
		});
		
		this.numberCriterium = new Ext.form.NumberField({
			name: 'arg2' ,
			emptyText: '...',
			allowBlank:false,
			width:150,
			disabled: true,
			hidden: true
		});

		this.txtCustom = new Ext.form.TextField({
			name: 'custom' ,
			emptyText: GO.sieve.lang.custom,
			fieldLabel:GO.sieve.lang.custom,
			allowBlank:false,
			width:140,
			disabled: true,
			hidden: true
		});

		this.cmbUnderOver = new GO.form.ComboBox({
			hiddenName:'underover',
			value:'under',
			valueField:'value',
			displayField:'field',
			store: GO.sieve.cmbUnderOverStore,
			mode:'local',
			triggerAction:'all',
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			allowBlank:false,
			width:100,
			disabled: true,
			hidden: true
		});

		this.rgSize = new Ext.form.RadioGroup({
			columns: 4,
			width:150,
			hidden: true,
			items: [
			{
				items:{boxLabel: 'B', name: 'size', inputValue: 'B', style: 'margin-left: 4px; margin-right: -2px;'}
			},
			{
				items:{boxLabel: 'KB', name: 'size', inputValue: 'K', style: 'margin-left: 4px; margin-right: -2px;', checked: true}
			},
			{
				items:{boxLabel: 'MB', name: 'size', inputValue: 'M', style: 'margin-left: 4px; margin-right: -2px;'}
			},
			{
				items:{boxLabel: 'GB', name: 'size', inputValue: 'G', style: 'margin-left: 4px; margin-right: -2px;'}
			}],
			hideLabel:true
		})

		this.cmbField.on('select', function(combo, record){
			this._transForm(record.data.value);
		},this);

		this.cmbOperator.on('select', function(combo,record){
			this._toggleFieldUse(this.txtCriterium,!(this.cmbOperator.getValue() == 'exists' || this.cmbOperator.getValue() == 'notexists'));
		},this);
	
		this.formPanel = new Ext.form.FormPanel({
			bodyStyle: 'padding:5px',
			border: false,
			items: [
				{
					xtype:'compositefield',
					items:[
						this.cmbField,
						this.txtCustom,
						this.cmbUnderOver,
						this.cmbOperator, 
						this.cmbBodyOperator, 
						this.cmbDateOperator,
						this.txtCriterium,
						this.numberCriterium,
						this.rgSize,
						this.dateCriterium
					],
					hideLabel: true
				}
			]
		});
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: Stores.js 19372 2015-09-07 08:23:51Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.sieve.cmbFieldStore = new Ext.data.ArrayStore({
	idIndex: 1,
	fields: ['field','value'],
	data: [
	[GO.sieve.lang.subject, 'Subject'],
	[GO.sieve.lang.from, 'From'],
	[GO.sieve.lang.to, 'To'],
	[GO.sieve.lang.size, 'size'],
	[GO.sieve.lang.body, 'body'],
	[GO.sieve.lang.spamflag, 'X-Spam-Flag'],
	[GO.sieve.lang.currentdate, 'currentdate'],
	[GO.sieve.lang.custom, 'custom']
	]
});

GO.sieve.cmbOperatorStore = new Ext.data.ArrayStore({
	idIndex: 1,
	fields: ['field', 'value'],
	data:[
	[GO.sieve.lang.contains, 'contains'],
	[GO.sieve.lang.notcontains, 'notcontains'],
	[GO.sieve.lang.is, 'is'],
	[GO.sieve.lang.notis, 'notis'],
	[GO.sieve.lang.exists, 'exists'],
	[GO.sieve.lang.notexists, 'notexists']
	]
});

GO.sieve.cmbBodyOperatorStore = new Ext.data.ArrayStore({
	idIndex: 1,
	fields: ['field', 'value'],
	data:[
	[GO.sieve.lang.contains, 'contains'],
	[GO.sieve.lang.notcontains, 'notcontains']
	]
});

GO.sieve.cmbActionStore = new Ext.data.ArrayStore({
	idIndex: 1,
	fields: ['field', 'value'],
	data:[
	[GO.sieve.lang.setRead, 'set_read'],
  [GO.sieve.lang.fileintoLabel, 'fileinto'],
  [GO.sieve.lang.copytoLabel, 'fileinto_copy'],
	[GO.sieve.lang.redirect_copy_to, 'redirect_copy'],
	[GO.sieve.lang.redirect_to, 'redirect'],
	[GO.sieve.lang.replyToMessage, 'vacation'],
	[GO.sieve.lang.reject, 'reject'],
	[GO.sieve.lang.discard, 'discard'],
	[GO.sieve.lang.stop, 'stop']
	]
});

GO.sieve.cmbDateOperatorStore = new Ext.data.ArrayStore({
	idIndex: 1,
	fields: ['field', 'value'],
	data:[
	[GO.sieve.lang.before, 'value-le'], // before
  [GO.sieve.lang.is, 'is'],					// is
  [GO.sieve.lang.after, 'value-ge']		// after
	]
});

GO.sieve.cmbUnderOverStore = new Ext.data.ArrayStore({
	idIndex: 1,
	fields: ['field', 'value'],
	data:[
  [GO.sieve.lang.under, 'under'],
  [GO.sieve.lang.over, 'over']
	]
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ActionGrid.js 19294 2015-08-10 09:10:27Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 * @author WilmarVB <wilmar@intermesh.nl>
 */

GO.sieve.ActionGrid = function(config){
	if(!config)
	{
		config = {};
	}
	config.height=180;
	config.style='margin: 5px;';
	config.border=true;
	config.cls = 'go-grid3-hide-headers';
	var fields ={
		fields:['type','copy','target','days','addresses','reason','vacationStart','vacationEnd','text'],
		header: false,
		columns:[{
				header:false,
				dataIndex:'text'
			}]
	};

	var columnModel =  new Ext.grid.ColumnModel({
		columns:fields.columns
	});

	config.store = new GO.data.JsonStore({
	    root: 'actions',
	    id: 'id',
	    totalProperty:'total',
	    fields: fields.fields,
	    remoteSort: true
	});
	config.enableDragDrop = true;
	config.ddGroup = 'SieveActionDD';
	config.cm=columnModel;
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.sieve.lang.pleaseAddAction
	});
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	config.tbar=[{
			iconCls: 'btn-add',
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			handler: function(){this.showActionCreatorDialog();},
				scope: this
		},{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function(){this.deleteSelected();},
				scope: this
		}];

	GO.sieve.ActionGrid.superclass.constructor.call(this, config);

	this.on('render',function(){
		//enable row sorting
		var DDtarget = new Ext.dd.DropTarget(this.getView().mainBody,
		{
			ddGroup : 'SieveActionDD',
			copy:false,
			notifyDrop : this.onNotifyDrop.createDelegate(this)
		});
	}, this);
};

Ext.extend(GO.sieve.ActionGrid, GO.grid.GridPanel,{
	
	accountAliasesString : '',
	
	deleteSelected : function(){this.store.remove(this.getSelectionModel().getSelections());},

	onNotifyDrop : function(dd, e, data)
	{
		var rows=this.selModel.getSelections();
		var dragData = dd.getDragData(e);
		var cindex=dragData.rowIndex;
		if(cindex=='undefined')
		{
			cindex=this.store.data.length-1;
		}

		for(i = 0; i < rows.length; i++)
		{
			var rowData=this.store.getById(rows[i].id);

			if(!this.copy){
				this.store.remove(this.store.getById(rows[i].id));
			}

			this.store.insert(cindex,rowData);
		}

		//save sort order
		var filters = {};

		for (var i = 0; i < this.store.data.items.length;  i++)
		{
			filters[this.store.data.items[i].get('id')] = i;
		}
	},
	
	_saveActionRecord : function( values ) {
		var record;
	
		if(values.id<0)
		{
			record = new GO.sieve.ActionRecord(values);
			var insertId = this.store.getCount();

//			if(this.store.getCount() > 0 && this.store.getAt(this.store.getCount()-1).data.type == 'stop'){
//				insertId = this.store.getCount()-1;
//			}else
//			{
//				if (!(values.type=='redirect' && values.copy==true) && values.type!='vacation') {
//					var stopRecord = new GO.sieve.ActionRecord({
//								type:"stop",
//								copy: false,
//								target:"",
//								days:"",
//								addresses:"",
//								reason:"",
//								text : GO.sieve.lang.stop
//							});
//
//					this.store.insert(insertId, stopRecord);
//				}
//			}
			//}
			
			record.data.id = insertId;

			this.store.insert(insertId, record);
		}
		else
		{
			record = this.store.getAt(values.id);
			Ext.apply(record.data,values);
			record.commit();
		}
	},
	
	showActionCreatorDialog : function(recordId) {	
		if (!this.actionCreatorDialog) {
			this.actionCreatorDialog = new GO.sieve.ActionCreatorDialog();
			this.actionCreatorDialog.on('actionPrepared',function(actionValues){
				this._saveActionRecord(actionValues);
			},this);
		}
		
		if (recordId>=0) {
			var record = this.store.getAt(recordId);
			record.set('id',recordId);
			this.actionCreatorDialog.show(record);
		} else {
			var record = new Ext.data.Record();
			record.set('id',-1);
			record.set('addresses',this.accountAliasesString);
			this.actionCreatorDialog.show(record);
		}
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 * @author WilmarVB <wilmar@intermesh.nl>
 */

GO.sieve.ActionRecord = Ext.data.Record.create([
	{
		name: 'id',
		type: 'integer'
	},
	{
		name: 'type',
		type: 'string'
	},
	{
		name: 'copy',
		type: 'string'
	},
	{
		name: 'target',
		type: 'string'
	},
	{
		name: 'days',
		type: 'string'
	},
	{
		name: 'addresses',
		type: 'string'
	},
	{
		name: 'reason',
		type: 'string'
	}]);

GO.sieve.ActionCreatorDialog = function(config){
	config = config || {};

	this._buildForm();

//	this.btnAddAction = new Ext.Button({
//		text: GO.lang.cmdAdd,
//		handler : function() {
//			this._prepareValuesForStorage();
//			this.resetForm();
//		},
//		scope : this
//	})
//
//	this.btnClearAction = new Ext.Button({
//		text: GO.sieve.lang.clear,
//		handler : function() {
//			this.resetForm();
//		},
//		scope : this
//	})

	config.title=GO.sieve.lang.setAction;
	config.border=false;
	config.layout= 'fit';
	config.height=400;
	config.width=550;
	config.baseParams={
		task : 'addAction',
		account_id : 0,
		script_name : '',
		rule_name : '',
		script_index : 0
	};
	config.items=[this.formPanel];
	
	config.buttons = [{
		text : GO.lang['cmdOk'],
		handler : function() {
			if (this.formPanel.getForm().isValid()) {
				this.fireEvent('actionPrepared',this._prepareValuesForStorage());
				this.hide();
				this._resetForm();
			}
		},
		scope : this
	}, {
		text : GO.lang['cmdCancel'],
		handler : function() {
			this.hide();
			this._resetForm();
		},
		scope : this
	}];
	
	GO.sieve.ActionCreatorDialog.superclass.constructor.call(this, config);
	
	this.addEvents({'actionPrepared':true});
}

Ext.extend(GO.sieve.ActionCreatorDialog, GO.Window,{

	_recordId : -1,

	show : function(record) {
		this._recordId=-1;
		this._resetForm();
		if (typeof(record)=='object') {
			this._recordId = record.get('id');

			if (this._recordId==-1)
				this.txtEmailAddressOptional.setValue(record.get('addresses'));
			
			this.cmbAction.setValue(record.get('type'));
			this._transForm(record.get('type'));
			switch (record.get('type')) {
				case 'fileinto':
				case 'fileinto_copy':
					this.cmbFolder.setValue(record.get('target'));
					break;
				case 'redirect':
				case 'redirect_copy':
					this.txtEmailAddress.setValue(record.get('target'));
					break;
				case 'reject':
					this.txtMessage.setValue(record.get('value'));
					this.txtMessage.setValue(record.get('target'));
					break;
				case 'vacation':
					this.txtEmailAddressOptional.setValue(record.get('addresses'));
					this.txtDays.setValue(record.get('days'));
					this.txtMessage.setValue(record.get('reason'));
					break;
				case 'addflag':
					if(record.get('target') == '\\Seen'){
						this.cmbAction.setValue('set_read');
					}
					break;
				default:
					break;
			}
		}
		GO.sieve.ActionCreatorDialog.superclass.show.call(this);
	},

	_prepareValuesForStorage : function() {
		// Build up the data before adding the data to the grid.
		var _type = '';
		var _target = '';
		var _days = '';
		var _addresses = '';
		var _reason = '';
		var _text = '';

		switch(this.cmbAction.getValue())
		{
			case 'set_read':
				_type		= 'addflag';
				_target = '\\Seen';
				_text		= GO.sieve.lang.setRead;
				break;
			case 'fileinto':
				_type		= 'fileinto';
				_target = this.cmbFolder.getValue();
				_text		= GO.sieve.lang.fileinto+': '+_target;
				
				break;
			case 'fileinto_copy':
				_type		= 'fileinto_copy';
				_target = this.cmbFolder.getValue();
				_text		= GO.sieve.lang.copyto+': '+_target;
				break;
			case 'redirect':
				_type		= 'redirect';
				_target = this.txtEmailAddress.getValue();
				_text		= GO.sieve.lang.forwardto+': '+_target;
				break;
			case 'redirect_copy':
				_type		= 'redirect_copy';
				_target = this.txtEmailAddress.getValue();
				_text		= GO.sieve.lang.sendcopyto+': '+_target;
				break;
			case 'reject':
				_type		= 'reject';
				_target = this.txtMessage.getValue();
				_text		= GO.sieve.lang.reject+': "'+_target+'"';
				break;
			case 'vacation':
				_type = 'vacation';
				_target = '';
				_days = this.txtDays.getValue();
				_addresses = this.txtEmailAddressOptional.getValue();
				_reason = this.txtMessage.getValue();
				if (!GO.util.empty(_addresses))
					var addressesText = GO.sieve.lang.vacAlsoMailTo+': '+_addresses+'. ';
				else
					var addressesText = '';
				_text = GO.sieve.lang.vacsendevery+' '+_days+' '+GO.sieve.lang.vacsendevery2+'. '+addressesText+GO.sieve.lang.vacationmessage+' "'+_reason+'"';
				break;
			case 'discard':
				_type		= 'discard';
				_target = '';
				_text		= GO.sieve.lang.discard;
				break;
			case 'stop':
				_type		= 'stop';
				_target = '';
				_text		= GO.sieve.lang.stop;
				break;
			default:
				break;
		}

		return {
			id : this._recordId,
			type:_type,
			target:_target,
			days: _days,
			reason: _reason,
			addresses: _addresses,
			text: _text
		};
	},

	_resetForm : function(){
		this.formPanel.getForm().reset();
		this._toggleComponentUse(this.cmbAction,true);
		this._toggleComponentUse(this.cmbFolder,false);
		this._toggleComponentUse(this.txtEmailAddressOptional,false);
		this._toggleComponentUse(this.txtEmailAddress,false);
		this._toggleComponentUse(this.txtMessage,false);
		this._toggleComponentUse(this.txtDays,false);
		this.doLayout();
		
		if(!GO.email.subscribedFoldersStore.loaded)
			GO.email.subscribedFoldersStore.load();
	},

	_transForm : function(type) {
		switch (type) {
			case 'fileinto':
			case 'fileinto_copy':
				this._toggleComponentUse(this.cmbFolder,true);
				this._toggleComponentUse(this.txtEmailAddressOptional,false);
				this._toggleComponentUse(this.txtEmailAddress,false);
				this._toggleComponentUse(this.txtDays,false);
				this._toggleComponentUse(this.txtMessage,false);
				break;
			case 'redirect':
			case 'redirect_copy':
				this._toggleComponentUse(this.cmbFolder,false);
				this._toggleComponentUse(this.txtEmailAddressOptional,false);
				this._toggleComponentUse(this.txtEmailAddress,true);
				this._toggleComponentUse(this.txtDays,false);
				this._toggleComponentUse(this.txtMessage,false);
				break;
			case 'reject':
				this._toggleComponentUse(this.cmbFolder,false);
				this._toggleComponentUse(this.txtEmailAddressOptional,false);
				this._toggleComponentUse(this.txtEmailAddress,false);
				this._toggleComponentUse(this.txtDays,false);
				this._toggleComponentUse(this.txtMessage,true);
				break;
			case 'vacation':
				this._toggleComponentUse(this.cmbFolder,false);
				this._toggleComponentUse(this.txtEmailAddressOptional,true);
				this._toggleComponentUse(this.txtEmailAddress,false);
				this._toggleComponentUse(this.txtDays,true);
				this._toggleComponentUse(this.txtMessage,true);
				break;
			case 'set_read':
			case 'discard':
			case 'stop':
				this._toggleComponentUse(this.cmbFolder,false);
				this._toggleComponentUse(this.txtEmailAddressOptional,false);
				this._toggleComponentUse(this.txtEmailAddress,false);
				this._toggleComponentUse(this.txtDays,false);
				this._toggleComponentUse(this.txtMessage,false);
				break;
		}
	},

	_buildForm : function() {
		this.cmbAction = new GO.form.ComboBox({
			hiddenName: 'type',
			fieldLabel:GO.sieve.lang.action,
			valueField:'value',
			displayField:'field',
			store: GO.sieve.cmbActionStore,
			mode:'local',
			triggerAction:'all',
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			allowBlank:false,
			width:300,
			emptyText:GO.sieve.lang.action
		});

		this.cmbFolder = new GO.form.ComboBox({
			hiddenName:'target',
			fieldLabel:GO.sieve.lang.toFolder,
			valueField:'name',
			value: 'INBOX',
			displayField:'name',
			store: GO.email.subscribedFoldersStore,
			mode:'local',
			triggerAction:'all',
			editable:false,
			selectOnFocus:true,
			forceSelection:true,
			allowBlank:false,
			width:300,
			hidden: true,
			disabled: true
		});

		this.txtEmailAddressOptional = new Ext.form.TextArea({
			name: 'email',
			allowBlank:true,
			anchor: '100%',
			fieldLabel:GO.sieve.lang.addressesLabelOptional,
			hidden: true,
			disabled: true
		});

		this.txtEmailAddress = new Ext.form.TextField({
			name: 'email',
			allowBlank:false,
			vtype:'emailAddress',
			anchor: '100%',
			fieldLabel:GO.lang.strEmail,
			hidden: true,
			disabled: true
		});

		this.txtMessage = new Ext.form.TextArea({
			name: 'message',
			allowBlank:false,
//			hideLabel:true,
			anchor:'100%',
			height:200,
			fieldLabel:GO.sieve.lang.reason,
//			listeners:{
//				scope:this,
//				focus: function(){
//					this.setHeight(100);
//				}
//			},
			disabled: true,
			hidden: true
		});

		this.txtDays = new GO.form.NumberField({
			name: 'days',
			hidden:true,
			allowBlank:false,
			width:70,
			decimals:0,
			fieldLabel:GO.sieve.lang.days,
			disabled: true,
			minValue:1,
			value:7
		});
			
		this.formPanel = new Ext.form.FormPanel({
			layout: 'form',
			border:false,
			items: [
				this.cmbAction,
				this.cmbFolder,
				this.txtDays,
				this.txtMessage,
				this.txtEmailAddressOptional,
				this.txtEmailAddress
			]
		});
		
		this.cmbAction.on('select',function(combo,record,index){
			this.cmbFolder.reset();
			this.txtEmailAddress.reset();
			this.txtDays.reset();
			this.txtMessage.reset();
			this._transForm(record.data.value);
		},this);
	},
	
	_toggleComponentUse : function (component,use) {
		if (use==true) {
			component.show();
			component.setDisabled(false);
			if (component == this.txtDays)
				this.txtDays.setValue(7);
		} else {
			component.hide();
			component.setDisabled(true);
		}
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: MainPanel.js 15285 2013-07-23 13:51:52Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

 
GO.groups.MainPanel = function(config){
	
	if(!config)
	{
		config = {};
	}

	this.store = new GO.data.JsonStore({
	    url: GO.url('groups/group/store'),
	    baseParams: {
				manage:1
			},
	    root: 'results',
	    id: 'id',
	    totalProperty:'total',
	    fields: ['id', 'name', 'user_id', 'user_name','acl_id'],
	    remoteSort: true
	});			

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
        {header: GO.groups.lang.groups, dataIndex: 'name', width: 300},
        {header: GO.groups.lang.owner, dataIndex: 'user_name', sortable:false}
    ]
	});  
	
	this.searchField = new GO.form.SearchField({
		store: this.store,
		width:320
	});
		    	

	var tbar = new Ext.Toolbar({
		cls:'go-head-tb',
		items: [{
                xtype:'htmlcomponent',
		        html:GO.groups.lang.name,
		        cls:'go-module-title-tbar'
		},
		{
			iconCls: 'btn-add',
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			handler: function(){this.showGroupDialog(0);},
			scope: this,
			disabled: !GO.settings.modules.groups.write_permission
		},
		{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function(){this.deleteSelected();},
			scope: this,
			disabled: !GO.settings.modules.groups.write_permission
		},'-',GO.lang['strSearch'] + ':', this.searchField
		]});
      
  config.layout='fit';

  config.cm=columnModel;
  config.sm=new Ext.grid.RowSelectionModel({singleSelect: false});
  config.tbar=tbar;
  config.paging=true;
	config.noDelete= !GO.settings.modules.groups.write_permission;
  config.viewConfig={
  	autoFill:true,
  	forceFit:true
  };
  
	GO.groups.MainPanel.superclass.constructor.call(this, config);	
};


Ext.extend(GO.groups.MainPanel, GO.grid.GridPanel, {
	afterRender : function(){
    GO.groups.MainPanel.superclass.afterRender.call(this);

    this.on("rowdblclick",this.rowDoubleClick, this);

    this.store.load();
  },

  rowDoubleClick : function(grid)
  {
    this.showGroupDialog(grid.selModel.selections.items[0].data.id);
  },

  showGroupDialog : function(group_id)
  {
    if(!this.groupDialog)
    {
      this.groupDialog = new GO.groups.GroupDialog();
      this.groupDialog.on('save', function(dlg, id){
        this.store.reload();
      },this);
    }

    this.groupDialog.show(group_id);
  }
});


/*
 * This will add the module to the main tabpanel filled with all the modules
 */
GO.moduleManager.addModule('groups', GO.groups.MainPanel, {
		title : GO.groups.lang.groups,
		iconCls : 'go-tab-icon-groups',
		admin :true
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: GroupDialog.js 15954 2013-10-17 12:04:36Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */
 
GO.groups.GroupDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	initComponent : function(){
		
		Ext.apply(this, {
			goDialogId:'group',
			title:GO.groups.lang.group,
			formControllerUrl: 'groups/group',
			titleField:'name',
			height:600
		});
		
		GO.groups.GroupDialog.superclass.initComponent.call(this);
	},

	setRemoteModelId : function(remoteModelId) {
		this.userGrid.setGroupId(remoteModelId);
		if(this.modulePermissionsGrid){
			this.modulePermissionsGrid.setIdParam(remoteModelId);
			this.modulePermissionsGrid.setDisabled(!remoteModelId);
		}
		
		GO.groups.GroupDialog.superclass.setRemoteModelId.call(this, remoteModelId);
	},
	
	beforeSubmit : function(params) {
		if(this.modulePermissionsGrid)
			this.formPanel.form.baseParams['permissions'] = this.modulePermissionsGrid.getPermissionData();		
	},
	
	buildForm : function () {
    
    this.propertiesPanel = new Ext.Panel({
      region:'north',
      height:35,
      border:false,
			cls:'go-form-panel',
			layout:'form',
			items:[{
				xtype: 'textfield',
				name: 'name',
				width:300,
				anchor: '100%',
				maxLength: 100,
				allowBlank:false,
				fieldLabel: GO.lang.strName
			}
			]				
		});

//    if(GO.settings.has_admin_permission) {
//      this.adminOnlyCheckBox = new Ext.ux.form.XCheckbox({
//          name: 'admin_only',
//          checked: false,
//          boxLabel: GO.groups.lang.adminOnlyLabel,
//          hideLabel:true
//      });
//      this.propertiesPanel.height=60;
//      this.propertiesPanel.add(this.adminOnlyCheckBox);
//    }
    
    this.userGrid = new GO.groups.UsersGrid({
      region:'center'
    });
    
    this.borderPanel = new Ext.Panel({
      layout:'border',
      title:GO.lang['strProperties'],	
      items:[this.propertiesPanel, this.userGrid]
    });

		var levelLabels = {};
		levelLabels[GO.permissionLevels.read]=GO.groups.lang.use;

    this.permissionsPanel = new GO.grid.PermissionsPanel({
      title:GO.groups.lang.managePermissions,
			levels:[GO.permissionLevels.read,GO.permissionLevels.manage],
			levelLabels:levelLabels
    });

		

		this.addPanel(this.borderPanel);
    this.addPanel(this.permissionsPanel);
		
		if(GO.settings.modules.modules.permission_level){
			this.modulePermissionsGrid = new GO.grid.ModulePermissionsGrid({
				title: GO.groups.lang['modulePermissions'],
				storeUrl: GO.url('modules/module/permissionsStore'),
				paramIdType: 'groupId',
				disabled:true
			});
			this.addPanel(this.modulePermissionsGrid);
		}
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: UsersGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */
 

GO.groups.UsersGrid = Ext.extend(GO.grid.GridPanel,{
	changed : false,
	
	initComponent : function(){
		
    this.userStore = new GO.data.JsonStore({
        url: GO.url("groups/group/getUsers"),
        baseParams: {id: 0},
        root: 'results',
        id: 'id',
        fields: ['id', 'user_id', 'name', 'username', 'email'],
        remoteSort: true
    });
    
		Ext.apply(this,{
			standardTbar:true,
			store: this.userStore,
			border: false,
			paging:true,
			view:new Ext.grid.GridView({
				autoFill: true,
				forceFit: true,
				emptyText: GO.lang['strNoItems']		
			}),
			cm:new Ext.grid.ColumnModel({
				defaults:{
					sortable:true
				},
				columns:[
          {header: GO.lang.strName, dataIndex: 'name'},
          {header: GO.lang.strUsername, dataIndex: 'username'},
          {header: GO.lang.strEmail, dataIndex: 'email'}	
				]
			})
		});
		
		GO.groups.UsersGrid.superclass.initComponent.call(this);
		
   
	},  
  
  setGroupId : function(group_id){
    this.userStore.baseParams.id=group_id;
    this.userStore.load();
		this.setDisabled(!group_id);
  },
	
	btnAdd : function(){				
		if(!this.addUsersDialog)
    {
      this.addUsersDialog = new GO.dialog.SelectUsers({
        handler:function(allUserGrid)
        {
          if(allUserGrid.selModel.selections.keys.length>0)
          {
            this.userStore.baseParams['add_users']=Ext.encode(allUserGrid.selModel.selections.keys);
            this.userStore.load();
            delete this.userStore.baseParams['add_users'];
          }
        },
        scope:this				
      });
    }
    this.addUsersDialog.show();	  	
	},
	deleteSelected : function(){
		GO.groups.UsersGrid.superclass.deleteSelected.call(this);
		this.changed=true;
	}
});

GO.files.ExpireDateDialog = Ext.extend(GO.dialog.TabbedFormDialog , {

	emailDownloadLink : false,
	fileData : {},
	downloadLinkIds : [],
	
	initComponent : function(){
		
		Ext.apply(this, {
			title: GO.files.lang.expireTime,
			height:310,
			loadOnNewModel : false,
			enableApplyButton: false,
			enableOkButton : false,
			enableCloseButton : false,
			width:260,
			border:false,
			maximizable:true,
			collapsible:true,
			closeAction:'hide'
		});
		
		GO.files.ExpireDateDialog.superclass.initComponent.call(this);
		
	},
		
	buildForm : function () {
		
		this.deleteWhenExpiredCB = new Ext.ux.form.XCheckbox({
			hideLabel: true,
			anchor: '-20',
			boxLabel: GO.files.lang.deleteWhenExpired,
			name: 'delete_when_expired',
			value: false,
			disabled: true,
			hidden: true
		});
		
		this.datePicker = new Ext.DatePicker({
			itemId: 'expire_time',
			name : 'expire_time',
			format: GO.settings.date_format,
			hideLabel: true
		});
		
		this.datePicker.on('select', function(field,date){
			
			if (!this.deleteWhenExpiredCB.disabled){
				var deleteWhenExpired = this.deleteWhenExpiredCB.getValue() ? 1 : 0;
			} else {
				var deleteWhenExpired = 0;
			}
			
			if(this.emailDownloadLink){
				GO.email.showComposer({
					loadUrl:GO.url('files/file/emailDownloadLink'),
					loadParams:{
						ids: Ext.encode(this.downloadLinkIds),
						expire_time: parseInt(date.setDate(date.getDate())/1000),
						delete_when_expired: deleteWhenExpired
					}
				});
			} else {
				GO.request({
					maskEl: this.getEl(),
					url: 'files/file/createDownloadLink',
					params: {
						id:this.fileData.id,
						expire_time: parseInt(date.setDate(date.getDate())/1000),
						delete_when_expired: deleteWhenExpired
					},
					success: function(options, response, result)
					{
						this.refreshActiveDisplayPanels();
					},
					scope:this
				});
			}

			this.hide();
		},this);

		this.datePickerWrapper = new Ext.Panel({
			autoHeight:true,
			cls:'go-date-picker-wrap-outer',
			baseCls:'x-plain',
			items:[
				new Ext.Panel({
					cls:'go-date-picker-wrap',
					items:[this.datePicker]
				})
			]
		});

		this.propertiesPanel = new Ext.Panel({
			layout: 'column',
			items: [
				this.deleteWhenExpiredCB,
				this.datePickerWrapper
			]
		});

		this.addPanel(this.propertiesPanel);
	},
	
	show : function(records,email){
		
		GO.request({
			url: 'files/email/checkDeleteCron',
			success: function(options, response, result) {
				this.deleteWhenExpiredCB.setValue(false);
				this.deleteWhenExpiredCB.setVisible(result.data.enabled);
				this.deleteWhenExpiredCB.setDisabled(!result.data.enabled);
			},
			scope: this
		});
		
		this.emailDownloadLink=email;
		
		// reset the file list thet will be add to the mail
		this.downloadLinkIds = [];
		for(var i=0; i<records.length; i++){
			this.downloadLinkIds.push(records[i].data.id);
		}
		
		this.fileData = records[0].data;

		GO.files.ExpireDateDialog.superclass.show.call(this);
	}
	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: FilePropertiesDialog.js 20453 2016-09-22 13:40:32Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.files.FilePropertiesDialog = function(config){	
	
	if(!config)
		config={};

	this.goDialogId='file';
	
	this.contentExpireDate = new Ext.form.DateField({
		name : 'content_expire_date',
		width : 140,
		format : GO.settings['date_format'],
		allowBlank : true
	});
	
	this.clearExpireDateButton = new Ext.Button({
		text:GO.files.lang.clear,
		listeners: {
			click: function() {
				this.contentExpireDate.setValue(null);
			},
			scope:this
		}
	});
	
	this.propertiesPanel = new Ext.Panel({
		layout:'form',
		title:GO.lang['strProperties'],
		cls:'go-form-panel',
		waitMsgTarget:true,
		labelWidth: 120,
		defaultType: 'textfield',
		items: [
		{
			fieldLabel: GO.lang['strName'],
			name: 'name',
			anchor: '100%',
			validator:function(v){
				return !v.match(/[\/\*\"<>|\\]/);
			}
		},{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strLocation,
			name: 'path'
		},
		new GO.form.HtmlComponent({
			html:'<hr />'
		}),
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strCtime,
			name: 'ctime'
		},
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strMtime,
			name: 'mtime'
		},
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strUser,
			name: 'username'
		},
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.mUser,
			name: 'musername'
		},{
			xtype: 'plainfield',
			fieldLabel: GO.files.lang.lockedBy,
			name: 'locked_user_name'
		},
		new GO.form.HtmlComponent({
			html:'<hr />'
		}),
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strType,
			name: 'type'
		},
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strSize,
			name: 'size'
		},this.selectHandler = new GO.form.ComboBoxReset({
			xtype:'comboboxreset',
			emptyText:GO.lang.strDefault,
			store:new GO.data.JsonStore({
				url:GO.url('files/file/handlers'),
				fields:['name','cls','handler','iconCls','extension'],
				baseParams:{
					id:0,
					all:1
				}
			}),
			displayField:'name',
			valueField:'cls',
			mode:'remote',
			triggerAction:'all',
			hiddenName:'handlerCls',
			fieldLabel:GO.files.lang.openWith
		}),
		new GO.form.HtmlComponent({
			html:'<hr />'
		}),{
			xtype: 'compositefield',
			border: false,
			anchor: '100%',
			fieldLabel: GO.files.lang.contentExpiresAt,
			items: [
				this.contentExpireDate,
				this.clearExpireDateButton
			]
		}
	]
	});
		
	this.commentsPanel = new Ext.Panel({
		layout:'form',
		labelWidth: 70,
		title: GO.files.lang.comments,
		border:false,
		items: new Ext.form.TextArea({
			name: 'comment',
			fieldLabel: '',
			hideLabel: true,
			anchor:'100% 100%'
		})
		
	});
	
	this.versionsGrid = new GO.files.VersionsGrid();
	
	var items = [this.propertiesPanel, this.commentsPanel, this.versionsGrid];

//	
//	if(GO.workflow)
//	{
//		this.workflowPanel = new GO.workflow.FilePropertiesPanel();
//		items.push(this.workflowPanel);
//	}


	if(GO.customfields && GO.customfields.types["GO\\Files\\Model\\File"])
	{
		for(var i=0;i<GO.customfields.types["GO\\Files\\Model\\File"].panels.length;i++)
		{
			items.push(GO.customfields.types["GO\\Files\\Model\\File"].panels[i]);
		}
	}

	
	this.tabPanel =new Ext.TabPanel({
		activeTab: 0,
		deferredRender:false,
		doLayoutOnTabChange:true,
		enableTabScroll:true,
		border:false,
		anchor:'100% 100%',
		hideLabel:true,
		items:items
	});
		
	this.formPanel = new Ext.form.FormPanel(
	{
		waitMsgTarget:true,
		border:false,
		defaultType: 'textfield',
		items:this.tabPanel
	});

		
	GO.files.FilePropertiesDialog.superclass.constructor.call(this,{
		title:GO.lang['strProperties'],
		layout:'fit',
		width:650,
		height:550,
		closeAction:'hide',
		items:this.formPanel,
		maximizable:true,
		collapsible:true,
		buttons:[
		{
			text:GO.lang['cmdOk'],
			handler: function(){
				this.save(true)
				},
			scope: this
		},
		{
			text:GO.lang['cmdApply'],
			handler: function(){
				this.save(false)
				},
			scope: this
		},
		{
			text:GO.lang['cmdClose'],
			handler: function(){
				this.hide()
				},
			scope: this
		}]
	});
	
	this.addEvents({
		'rename' : true,
		'save':true
	});
}

Ext.extend(GO.files.FilePropertiesDialog, GO.Window, {
	folder_id : 0,
	show : function(file_id, config)
	{
		config = config || {};
		
		this.setFileID(file_id);
		
		if(!this.rendered)
			this.render(Ext.getBody());
			
		this.formPanel.form.reset();
		this.tabPanel.setActiveTab(0);
		
		var params = {
			id: file_id
		};
			
		if(config.loadParams)
		{
			Ext.apply(params, config.loadParams);
		}
		
		
		
		this.formPanel.form.load({
			url: GO.url("files/file/load"), 
			params: params,			
			success: function(form, action) {				
				this.setWritePermission(action.result.data.write_permission);		

				this.fireEvent('fileCommentsEdit',this);
				
				if(action.result.data.id)
				{
					this.setFileID(action.result.data.id);
				}
				
				this.folder_id=action.result.data.folder_id;
				
				if(GO.customfields)
					GO.customfields.disableTabs(this.tabPanel, action.result);	
				
				
				this.selectHandler.store.baseParams.id=action.result.data.id;
				this.selectHandler.clearLastSearch();
				this.selectHandler.setRemoteText(action.result.data.handlerName);
				
				
				GO.files.FilePropertiesDialog.superclass.show.call(this);
			},
			failure: function(form, action) {
				Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
			},
			scope: this
		});
	},
	
	setFileID : function(file_id)
	{
		this.file_id = file_id;
		this.versionsGrid.setFileID(file_id);
		//this.linkBrowseButton.setDisabled(file_id < 1);
	},
	
	setWritePermission : function(writePermission)
	{
		var form = this.formPanel.form;
		form.findField('name').setDisabled(!writePermission);
	},
	
	save : function(hide)
	{
		this.formPanel.form.submit({
						
			url: GO.url("files/file/submit"),
			params: {
				id: this.file_id
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				if(action.result.path)
				{
					this.formPanel.form.findField('path').setValue(action.result.path);
					this.fireEvent('rename', this, this.folder_id);					
				}
				
				this.fireEvent('save', this, this.file_id, this.folder_id);
				
				GO.dialog.TabbedFormDialog.prototype.refreshActiveDisplayPanels.call(this);

				if(hide)
				{
					this.hide();
				}
			},	
			failure: function(form, action) {
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}else
				{
					error = action.result.feedback;
				}
				
				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope:this			
		});			
	}
	
	
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: FolderPropertiesDialog.js 20726 2016-12-16 10:04:54Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.files.FolderPropertiesDialog = function(config){
	
	if(!config)
		config={};

	this.goDialogId='folder';

	this.propertiesPanel = new Ext.Panel({
		layout:'form',
		title:GO.lang['strProperties'],
		cls:'go-form-panel',
		waitMsgTarget:true,
		defaultType: 'textfield',
		labelWidth:100, 
		border:false,   
		items: [
		{
			fieldLabel: GO.lang['strName'],
			name: 'name',
			anchor: '100%',
			validator:function(v){
				return !v.match(/[&\/:\*\?"<>|\\]/);
			}
		},{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strLocation,
			name: 'path'
		},
		{
			xtype: 'plainfield',
			fieldLabel: "URL",
			name: 'url'
		},
		new GO.form.HtmlComponent({
			html:'<hr />'
		}),
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strCtime,
			name: 'ctime'
		},
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.strMtime,
			name: 'mtime'
		},
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.createdBy,
			name: 'username'
		},
		{
			xtype: 'plainfield',
			fieldLabel: GO.lang.mUser,
			name: 'musername'
		},
		{
			xtype: 'htmlcomponent',
			html:'<hr />'
		},
		{
			xtype:'xcheckbox',
			boxLabel: GO.files.lang.activateSharing,
			name: 'share',
			checked: false,
			hideLabel:true
		},
		this.notifyCheckBox = new Ext.ux.form.XCheckbox({
			boxLabel: GO.files.lang.notifyChanges,
			name: 'notify',
			checked: false,
			hideLabel:true
		}),
		this.applyStateCheckbox = new Ext.ux.form.XCheckbox({
			boxLabel: GO.files.lang.applyState,
			name: 'apply_state',
			checked: false,
			hideLabel:true
		})
		]
	});

	this.readPermissionsTab = new GO.grid.PermissionsPanel({
							
		});
	
	this.commentsPanel = new Ext.Panel({
		layout:'form',
		labelWidth: 70,
		title: GO.files.lang.comments,
		border:false,
		items: new Ext.form.TextArea({
			name: 'comment',
			fieldLabel: '',
			hideLabel: true,
			anchor:'100% 100%'
		})
		
	});
	
	this.tabPanel =new Ext.TabPanel({
		activeTab: 0,
		enableTabScroll:true,
		deferredRender:false,
		border:false,
		anchor:'100% 100%',
		hideLabel:true,
		items:[this.propertiesPanel, this.commentsPanel, this.readPermissionsTab]
	});
	
	if(GO.customfields){
		this.disableCategoriesPanel = new GO.customfields.DisableCategoriesPanel();
		
		this.recursivePanel = new Ext.Panel({
			region:'south',
			items: [
				{
					xtype: 'button',
					name: 'recursiveApplyCustomFieldCategories',
					text: 'Apply',
					listeners: {
						click: function() {
							this.formPanel.baseParams.recursiveApplyCustomFieldCategories = true;
							this.save();
							//this.formPanel.baseParams.recursiveApplyCustomFieldCategories = false;
						},
						scope:this
					}
				},{
					type:'displayfield',
					html: GO.files.lang.applyCFRecursively
				}
			]
		});

		this.disableCategoriesPanel.add(this.recursivePanel);
		
		
		this.tabPanel.add(this.disableCategoriesPanel);
		
		
		if(GO.customfields && GO.customfields.types["GO\\Files\\Model\\Folder"])
		{
			for(var i=0;i<GO.customfields.types["GO\\Files\\Model\\Folder"].panels.length;i++)
			{
				this.tabPanel.add(GO.customfields.types["GO\\Files\\Model\\Folder"].panels[i]);
			}
		}
	}

//	if(GO.workflow)
//	{
//		this.workflowPanel = new GO.workflow.FolderPropertiesPanel();
//		this.tabPanel.insert(2,this.workflowPanel);
//	}
		
	this.formPanel = new Ext.form.FormPanel(
	{
		waitMsgTarget:true,
		border:false,
		defaultType: 'textfield',
		items:this.tabPanel,
		baseParams:{
			notifyRecursive:false
		}
	});
	GO.files.FolderPropertiesDialog.superclass.constructor.call(this,{
		title:GO.lang['strProperties'],
		layout:'fit',
		width:600,
		height:600,
		closeAction:'hide',
		items:this.formPanel,
		buttons:[
		{
			text:GO.lang['cmdOk'],
			handler: function(){
				this.save(true)
				},
			scope: this
		},
		{
			text:GO.lang['cmdApply'],
			handler: function(){
				this.save(false)
				},
			scope: this
		},
			
		{
			text:GO.lang['cmdClose'],
			handler: function(){
				this.hide()
				},
			scope: this
		}
		]		
	});

	this.addEvents({
		'rename' : true,
		'onNotifyChecked' : true
	});
}

Ext.extend(GO.files.FolderPropertiesDialog, GO.Window, {
	parent_id : 0,
	show : function(folder_id)
	{
		//this.folder_id = folder_id;
		
		this.setFolderId(folder_id);
		
		this.notifyCheckBox.removeListener('check',this.onNotifyChecked,this);
		
		this.formPanel.baseParams.notifyRecursive=false;
		this.formPanel.baseParams.recursiveApplyCustomFieldCategories=false;
		if(!this.rendered)
			this.render(Ext.getBody());
		
		this.formPanel.form.load({
			url: GO.url('files/folder/load'),
			params: {
				id: folder_id
			},			
			success: function(form, action) {

				var shareField = this.formPanel.form.findField('share');
				shareField.setValue(action.result.data.acl_id>0);
				
				this.parent_id=action.result.data.parent_id;
								
				this.readPermissionsTab.setAcl(action.result.data.acl_id);
				
				this.setPermission(action.result.data.is_someones_home_dir, action.result.data.permission_level, action.result.data.readonly);

				this.tabPanel.setActiveTab(0);
				if(GO.customfields)
					this.disableCategoriesPanel.setModel(folder_id,"GO\\Files\\model\\File");
				
				this.notifyCheckBox.addListener('check',this.onNotifyChecked,this);
				
				GO.dialog.TabbedFormDialog.prototype.setRemoteComboTexts.call(this, action);
				
				GO.files.FolderPropertiesDialog.superclass.show.call(this);
			},
			failure: function(form, action) {
				Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
			},
			scope: this
		});		
	},
	
	setFolderId : function(id){
		this.folder_id=id;
	},
	
	onNotifyChecked : function(checkbox,checked) {
		Ext.Msg.show({
			title: checked  ? GO.files.lang.notifyRecursiveTitle :  GO.files.lang.removeNotifyRecursiveTitle,
			msg: GO.files.lang.notifyRecursiveQuestion,
			buttons: Ext.Msg.YESNO,
			fn: function (btn){
				this.formPanel.baseParams['notifyRecursive'] = btn=='yes';
			},
			scope: this
		});
	},
	
	setPermission : function(is_someones_home_dir, permission_level, readonly)
	{
		//readonly flag is set for project, contact, company etc. folders.
			
		var form = this.formPanel.form;
		form.findField('name').setDisabled(is_someones_home_dir || readonly || permission_level<GO.permissionLevels.write);
		form.findField('share').setDisabled(is_someones_home_dir || readonly || permission_level<GO.permissionLevels.manage);
		form.findField('apply_state').setDisabled(permission_level<GO.permissionLevels.manage && !GO.settings.has_admin_permission);
		if(!this.readPermissionsTab.disabled)
			this.readPermissionsTab.setDisabled(!is_someones_home_dir && readonly);
	},
	
	save : function(hide)
	{
		this.formPanel.form.submit({
						
			url: GO.url('files/folder/submit'),
			params: {
				id: this.folder_id
			},
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){

				if(typeof(action.result.acl_id) != 'undefined')
				{
					this.readPermissionsTab.setAcl(action.result.acl_id);
				}
				
				if(action.result.new_path)
				{
					this.formPanel.form.findField('path').setValue(action.result.new_path);
					this.fireEvent('rename', this, this.parent_id);				
				}
				this.fireEvent('save', this, this.folder_id, this.parent_id);
				
				GO.dialog.TabbedFormDialog.prototype.refreshActiveDisplayPanels.call(this);
				
				if(hide)
				{
					this.hide();
				}				
				
			},
	
			failure: function(form, action) {
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}else
				{
					error = action.result.feedback;
				}
				
				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope:this
			
		});
			
	}	
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ContextMenu.js 20093 2016-06-09 09:34:40Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.files.FilesContextMenu = function(config)
{
	if(!config)
	{
		config = {};
	}
	config['shadow']='frame';
	config['minWidth']=180;
	
	this.openButton = new Ext.menu.Item({
		text: GO.files.lang.open,
		iconCls: 'btn-edit',
		cls: 'x-btn-text-icon',
		handler: function(){
//			GO.files.openFile({
//				id:this.records[0].data.id
//			});

			this.records[0].data.handler.call(this);
		},
		scope: this
	});

	this.downloadButton = new Ext.menu.Item({
		iconCls: 'btn-save',
		text: GO.lang.download,
		cls: 'x-btn-text-icon',
		handler: function(){
			window.open(GO.url("files/file/download",{id:this.records[0].data.id,inline:false}));
		},
		scope: this
	});
	
	this.openWithButton = new Ext.menu.Item({
		text: GO.files.lang.openWith,
		iconCls: 'btn-edit',
		cls: 'x-btn-text-icon',
		handler: function(){
			GO.files.openFile({
				id:this.records[0].data.id,
				all:'1'
			});
		},
		scope: this
	});



	/*this.pasteButton = new Ext.menu.Item({
					iconCls: 'btn-paste',
					text: 'Paste',
					cls: 'x-btn-text-icon',
					handler: function(){
						this.fireEvent('paste', this);
					},
					scope: this
				});*/

	this.deleteButton = new Ext.menu.Item({
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function(){
			this.fireEvent('delete', this, this.records, this.clickedAt);
		},
		scope: this
	});
	
	this.batchEditButton = new Ext.menu.Item({
		iconCls: 'btn-edit',
		text: GO.files.lang.editSelection,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.fireEvent('batchEdit', this, this.records, this.clickedAt);
		},
		scope: this
	});

	this.cutButton= new Ext.menu.Item({
		iconCls: 'btn-cut',
		text: GO.lang.cut,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.fireEvent('cut', this, this.records, this.clickedAt);
		},
		scope: this
	});
	this.copyButton = new Ext.menu.Item({
		iconCls: 'btn-copy',
		text: GO.lang.copy,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.fireEvent('copy', this, this.records, this.clickedAt);
		},
		scope: this
	});


	this.lockButton = new Ext.menu.Item({
		iconCls: 'btn-lock',
		text: GO.files.lang.lock,
		cls: 'x-btn-text-icon',
		scope:this,
		handler: function(){
			GO.request({
				url:'files/file/submit',
				params:{
					id:this.records[0].data.id,
					locked_user_id:GO.settings.user_id
				},
				success:function(action, response, result){

					var filesModulePanel = GO.mainLayout.getModulePanel('files');
					if(filesModulePanel && filesModulePanel.folder_id==this.records[0].data.folder_id) {
						filesModulePanel.getActiveGridStore().load();
						filesModulePanel.folderPanel.setVisible(false);
						filesModulePanel.filePanel.setVisible(true);
						filesModulePanel.filePanel.load(this.records[0].json.id,true);
					}

					if (!GO.util.empty(GO.files.fileBrowser))
						GO.files.fileBrowser.gridStore.load();
					if (!GO.util.empty(GO.selectFileBrowser))
						GO.selectFileBrowser.gridStore.load();
				},
				scope:this
			})
		}
	})

	this.unlockButton = new Ext.menu.Item({
		iconCls: 'btn-unlock',
		text: GO.files.lang.unlock,
		cls: 'x-btn-text-icon',
		scope:this,
		handler: function(){
			GO.request({
				url:'files/file/submit',
				params:{
					id:this.records[0].data.id,
					locked_user_id:0
				},
				success:function(action, response, result){
					var filesModulePanel = GO.mainLayout.getModulePanel('files');
					if(filesModulePanel && filesModulePanel.folder_id==this.records[0].data.folder_id) {
						filesModulePanel.getActiveGridStore().load();
						filesModulePanel.folderPanel.setVisible(false);
						filesModulePanel.filePanel.setVisible(true);
						filesModulePanel.filePanel.load(this.records[0].json.id,true);
					}
					if (!GO.util.empty(GO.files.fileBrowser))
						GO.files.fileBrowser.gridStore.load();
					if (!GO.util.empty(GO.selectFileBrowser))
						GO.selectFileBrowser.gridStore.load();
				},
				scope:this
			})
		}
	})

	this.bookmarkButton = new Ext.menu.Item({
		iconCls: 'btn-copy',
		text: GO.files.lang['bookmarkFolder'],
		cls: 'x-btn-text-icon',
		scope:this,
		handler: function(){
			GO.request({
				url:'files/bookmark/submit',
				params:{
					folder_id: this.records[0].data.id
				},
				success:function(action, response, result){
					this.fireEvent('addBookmark',this,this.records[0].data.id);
				},
				scope:this
			})
		}
	})


	this.compressButton = new Ext.menu.Item({
		iconCls: 'btn-compress',
		text: GO.lang.compress,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.fireEvent('compress', this, this.records, this.clickedAt);
		},
		scope: this
	});
	this.decompressButton = new Ext.menu.Item({
		iconCls: 'btn-decompress',
		text: GO.lang.decompress,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.fireEvent('decompress', this, this.records, this.clickedAt);
		},
		scope: this
	});

	config['items']=[this.openButton, this.openWithButton, this.downloadButton,'-'];

	config['items'].push(this.lockButton);
	config['items'].push(this.unlockButton);


	config['items'].push({
		iconCls: 'btn-properties',
		text: GO.lang['strProperties'],
		handler: function(){
			this.fireEvent('properties', this, this.records);
		},
		scope:this
	});

	config['items'].push(this.bookmarkButton);

	config['items'].push(this.cutSeparator = new Ext.menu.Separator());
	config['items'].push(this.cutButton);
	config['items'].push(this.copyButton);
	//this.pasteButton,
	config['items'].push(this.deleteSeparator = new Ext.menu.Separator());
	config['items'].push(this.deleteButton);
	config['items'].push(this.batchEditButton);
	config['items'].push(this.compressSeparator = new Ext.menu.Separator());
	config['items'].push(this.compressButton);
	config['items'].push(this.decompressButton);

	this.createDownloadLinkButton = new Ext.menu.Item({
		iconCls: 'btn-save',
		text: GO.files.lang.createDownloadLink,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.fireEvent('download_link', this, this.records, this.clickedAt, false);
		},
		scope: this
	});
	config['items'].push(this.createDownloadLinkButton);

	if(GO.email) {
		this.downloadLinkButton = new Ext.menu.Item({
			iconCls: 'btn-email',
			text: GO.files.lang.emailDownloadLink,
			cls: 'x-btn-text-icon',
			handler: function(){
				this.fireEvent('download_link', this, this.records, this.clickedAt, true);
			},
			scope: this
		});
		config['items'].push(this.downloadLinkButton);

		this.emailFilesButton = new Ext.menu.Item({
			iconCls: 'em-btn-email-files',
			text: GO.email.lang.emailFiles,
			cls: 'x-btn-text-icon',
			handler: function(){
				this.fireEvent('email_files', this, this.records);
			},
			scope: this
		});
		config['items'].push(this.emailFilesButton);
	}
	
	// Download selected (As Zip)
	this.downloadSelectedFilesButton = new Ext.menu.Item({
			iconCls: 'filetype-zip',
			text: GO.files.lang.downloadSelected,
			cls: 'x-btn-text-icon',
			handler: function(){
				this.fireEvent('download_selected', this, this.records, this.clickedAt);
			},
			scope: this
		});
		config['items'].push(this.downloadSelectedFilesButton);
	

	GO.files.FilesContextMenu.superclass.constructor.call(this, config);

	this.addEvents({

		'properties' : true,
		'paste' : true,
		'cut' : true,
		'copy' : true,
		'delete' : true,
		'compress' : true,
		'decompress' : true,
		'download_link' : true,
		'email_files' : true,
		'addBookmark' : true,
		'download_selected': true

	});

}

Ext.extend(GO.files.FilesContextMenu, Ext.menu.Menu,{
	/*tree or grid */

	clickedAt : 'grid',

	records : [],

	showAt : function(xy, records, clickedAt, forFileSearchModule)
	{
		this.records = records;
		forFileSearchModule = forFileSearchModule || false;
		
		if(forFileSearchModule){	
			this.decompressButton.setVisible(!forFileSearchModule);
			this.openButton.setVisible(!forFileSearchModule);
			this.cutSeparator.setVisible(!forFileSearchModule);
			this.cutButton.setVisible(!forFileSearchModule);
			this.copyButton.setVisible(!forFileSearchModule);
			this.lockButton.setVisible(!forFileSearchModule);
			this.unlockButton.setVisible(!forFileSearchModule);
			this.downloadSelectedFilesButton.setVisible(!forFileSearchModule);
			this.compressButton.setVisible(!forFileSearchModule);
			
		} else {
		
			if(clickedAt)
				this.clickedAt = clickedAt;

			var extension = '';
			
			if(records.length=='1')
			{
				extension = records[0].data.extension;

				switch(extension)
				{
					case 'zip':
					case 'tar':
					case 'tgz':
					case 'gz':
						this.downloadButton.show();
						this.openButton.show();
						this.openWithButton.show(); 

						this.decompressButton.show();
						this.compressButton.hide();
						if(this.downloadLinkButton)
							this.downloadLinkButton.show();
						this.createDownloadLinkButton.show();

						if(this.emailFilesButton)
							this.emailFilesButton.show();

						this.bookmarkButton.hide();

						break;

	//				case '':
	//					
	//					this.downloadButton.show();
	//
	//					this.decompressButton.show();
	//					this.compressButton.hide();
	//					if(this.downloadLinkButton)
	//						this.downloadLinkButton.show();
	//					this.createDownloadLinkButton.show();
	//
	//					if(this.emailFilesButton)
	//						this.emailFilesButton.show();
	//
	//					
	//					this.bookmarkButton.hide();
	//					
	//					break;
					case 'folder':

						this.lockButton.hide();
						this.unlockButton.setVisible(false);
						this.downloadButton.hide();
						this.openWithButton.hide();
						this.openButton.hide();

						this.decompressButton.hide();
						clickedAt == 'tree' || records[0].store.reader.jsonData['permission_level']<GO.permissionLevels['create'] ? this.compressButton.hide() : this.compressButton.show();

						if(this.downloadLinkButton)
							this.downloadLinkButton.hide();
						
						this.batchEditButton.hide();

						this.createDownloadLinkButton.hide();

						if(this.emailFilesButton)
							this.emailFilesButton.hide();

						this.bookmarkButton.show();

						break;

					default:
						this.lockButton.show();


						this.lockButton.setDisabled(this.records[0].data.locked_user_id>0);
						this.unlockButton.setVisible(this.records[0].data.locked_user_id>0);
						this.unlockButton.setDisabled(!this.records[0].data.unlock_allowed);


						this.downloadButton.show();
						this.openWithButton.show();
						this.openButton.show();

						clickedAt == 'tree' ? this.compressButton.hide() : this.compressButton.show();
						this.decompressButton.hide();

						if(this.downloadLinkButton)
							this.downloadLinkButton.show();
						
						this.batchEditButton.show();
						
						this.createDownloadLinkButton.show();

						if(this.emailFilesButton)
							this.emailFilesButton.show();

						this.bookmarkButton.hide();

						break;
				}
			}else
			{

				clickedAt == 'tree' ? this.compressButton.hide() : this.compressButton.show();
				this.decompressButton.hide();
				this.downloadButton.hide();
				this.openWithButton.hide();
				this.openButton.hide();

				this.createDownloadLinkButton.hide();

				if(this.emailFilesButton)
					this.emailFilesButton.show();

				Ext.each(this.records, function(record) {
					if (record.data.extension == 'folder') {

						if(this.emailFilesButton)
							this.emailFilesButton.hide();

						return false;
					}
				}, this);

			}

		}

		GO.files.FilesContextMenu.superclass.showAt.call(this, xy);
	}
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: TemplatesWindow.js 15954 2013-10-17 12:04:36Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.files.TemplateWindow = function(config){	
	this.gridStore = new GO.data.JsonStore({
		url: GO.url('files/template/store'),
		baseParams: {
			'permissionLevel': GO.permissionLevels.write
		},
		fields:['id','name', 'type', 'extension'],
		remoteSort:true
	});
	
	this.gridStore.on('load', function(){
		this.firstLoad=false;
	}, this, {
		single:true
	});
	
	this.gridStore.load();	
	
	this.gridPanel = new GO.grid.GridPanel( {
		region:'center',
		layout:'fit',
		split:true,
		paging:true,
		store: this.gridStore,
		columns:[{
			header:GO.lang['strName'],
			dataIndex: 'name',
			renderer:function(v, metaData,record){
				return '<div class="go-grid-icon filetype filetype-'+record.get("extension")+'">'+v+'</div>';
			},
			sortable:true
		},{
			header:GO.lang.strType,
			dataIndex: 'type',
			sortable:false
		}],
		view:new  Ext.grid.GridView({
			autoFill:true,
			forceFit:true
		}),
		sm: new Ext.grid.RowSelectionModel(),
		loadMask: true	,
		tbar: [{
			iconCls: 'btn-add',
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			scope: this,
			handler:function(){
				this.showTemplate();
			}
		},{
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			scope: this,
			handler:function(){
				this.gridPanel.deleteSelected();
			}
		}]
	});
		
	this.gridPanel.on('rowdblclick', function(grid){
		this.showTemplate(grid.selModel.selections.keys[0]);
	}, this);	
	
	GO.files.TemplateWindow.superclass.constructor.call(this,{
		title:GO.files.lang.manageTemplates,
		layout:'fit',
		width:500,
		height:600,
		closeAction:'hide',
		items:this.gridPanel,
		buttons:[
		{
			text:GO.lang['cmdClose'],
			handler: function(){
				this.hide()
				},
			scope: this
		}]
	});
}

Ext.extend(GO.files.TemplateWindow,Ext.Window, {
	
	firstLoad : true,
	
	showTemplate : function(template_id)
	{								
		if(!this.templateDialog)
		{			
			this.uploadFile = new GO.form.UploadFile({
				max: 1
			});
			
			this.downloadButton = new Ext.Button({
				handler: function(){
					document.location.href = GO.url('files/template/download&id='+this.template_id);
				},
				disabled: true,
				text: GO.files.lang.downloadTemplate,
				scope: this
			});				
			
			this.formPanel = new Ext.form.FormPanel({
				title: GO.lang['strProperties'],
				cls:'go-form-panel',
				waitMsgTarget:true,
				labelWidth: 85,
				defaultType: 'textfield',
				fileUpload: true,
				items:[
				{
					fieldLabel: GO.lang['strName'],
					name: 'name',
					id: 'template-name',
					anchor: '100%',
					allowBlank: false
				},		     
				
				new GO.form.HtmlComponent({
					html: '<br />'
				}),
				this.uploadFile,
				new GO.form.HtmlComponent({
					html: '<br />'
				}),
				this.downloadButton
				]
			});
			
			var buttons = [			
			{
				text: GO.lang['cmdOk'],
				handler: function(){
					this.saveTemplate(true)
					},
				scope: this
			},

			{
				text: GO.lang['cmdApply'],
				handler: function(){
					this.saveTemplate(false)
					},
				scope: this
			},

			{
				text: GO.lang['cmdClose'],
				handler:
				function()
				{
					this.templateDialog.hide();

				},
				scope: this
			}
			];				
			
			this.templateDialog = new Ext.Window({
				layout: 'fit',
				modal:false,
				height: 400,
				width: 400,
				closeAction: 'hide',
				title: GO.files.lang.template,
				items: [this.templateTabPanel = new Ext.TabPanel({
					activeTab: 0,
					border:false,
					items:[
					this.formPanel,
					this.readPermissionsTab = new GO.grid.PermissionsPanel({
									
						})						
					]
				})],
				buttons: buttons,
				focus: function(){
					Ext.get('template-name').focus();
				}									
			});								
		}
		
		this.template_id=template_id;
		
		this.templateTabPanel.setActiveTab(0);				
		
		if(this.template_id > 0)
		{
			//update
			this.readPermissionsTab.setDisabled(false);
			
			this.loadTemplate();				 			
		} else {
			// insert
			
			this.formPanel.form.reset();
			this.readPermissionsTab.setAcl(0);
			this.downloadButton.setDisabled(true);						
		}
		
		this.templateDialog.show();
	},
	loadTemplate : function()
	{
		this.formPanel.form.load({
			url: GO.url('files/template/load'), 
			params: {
				id: this.template_id
			},
			
			success: function(form, action) {
				//this.selectUser.setRemoteText(action.result.data.user_name);
				this.readPermissionsTab.setAcl(action.result.data.acl_id);
				this.downloadButton.setDisabled(false);										
			},
			scope: this
		});
	},
	
	saveTemplate : function(hide)
	{
		this.formPanel.form.submit({
			waitMsg:GO.lang.waitMsgSave,
			url:GO.url('files/template/submit'),
			params:
			{
				id: this.template_id
			},
			success:function(form, action){
				this.template_id = action.result.id;
				this.gridStore.reload();

				this.uploadFile.clearQueue();
				
				if(this.template_id && !hide)
				{
					this.readPermissionsTab.setAcl(action.result.acl_id);			
				}					
				
				if(hide)
				{
					this.templateDialog.hide();
				}					
			},
			failure: function(form, action) {					
				
				if(action.failureType != 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);			
				}
			},
			scope: this				
		});
	}	
});

GO.files.filesTemplate =

		'<tpl if="values.files && values.files.length">'+
		
		'{[this.collapsibleSectionHeader(GO.files.lang.files, "files-"+values.panelId, "files")]}'+

		
		'<table class="display-panel" cellpadding="0" cellspacing="0" border="0" id="files-{panelId}">'+		
		'<tr>'+							
			'<td class="table_header_links" style="width:100%">' + GO.lang['strName'] + '</td>'+							
			'<td class="table_header_links" style="white-space:nowrap">' + GO.lang['strMtime'] + '</td>'+
			'<td class="table_header_links">&nbsp;</td>'+
			'<td class="table_header_links">&nbsp;</td>'+
		'</tr>'+
		'<tpl if="!files.length">'+
			'<tr><td colspan="5">'+GO.lang.strNoItems+'</td></tr>'+
		'</tpl>'+
		'<tpl for="files">'+
			'<tr>'+											
				'<td>'+
				'<tpl if="locked_user_id&gt;0"><div class="fs-grid-locked"></tpl>'+
				'<a class="go-grid-icon filetype filetype-{extension}" href="#files_{[xindex-1]}">{name}</a>'+
				'<tpl if="locked_user_id&gt;0"></div></tpl>'+
				'</td>'+

				'<td style="white-space:nowrap">{mtime}</td>'+

				'<tpl if="extension!=\'folder\'">'+
					'<tpl if="locked">'+
						'<td style="white-space:nowrap">'+
							'<div style="display:block;opacity:0.4;filter:alpha(opacity=40);" class="go-icon btn-edit">&nbsp;</div>'+
						'</td>'+
					'</tpl>'+
					'<tpl if="!locked">'+
						'<td style="white-space:nowrap">'+
							'<a style="display:block" class="go-icon btn-edit" href="#files_{[xindex-1]}">&nbsp;</a>'+
						'</td>'+
					'</tpl>'+
					'<td>'+
						'<a style="display:block" class="go-icon btn-download" href="{[GO.files.filesTemplateConfig.getDownloadUrl(values.id,false)]}">&nbsp;</a>'+
					'</td>'+
				'</tpl>'+
				'<tpl if="extension==\'folder\'">'+
					'<td style="white-space:nowrap">'+					
						'<a style="display:block" class="go-icon btn-info" href="#" onclick="'+

							'<tpl if="extension!=\'folder\'">'+
							'GO.linkHandlers[\'GO\\\\\\\\Files\\\\\\\\Model\\\\\\\\File\'].call(this, {id});'+
							'</tpl>'+
							'<tpl if="extension==\'folder\'">'+
							'GO.linkHandlers[\'GO\\\\\\\\Files\\\\\\\\Model\\\\\\\\Folder\'].call(this, {id});'+
							//'GO.files.openFolder({[this.panel.data.files_folder_id]}, {id});'+
							'</tpl>'+

						'">&nbsp;</a>'+					
					'</td>'+
				'</tpl>'+
			'</tr>'+
		'</tpl>'+
		
		'<tr><td colspan="4"><a class="display-panel-browse" href="#browsefiles">'+GO.lang.browse+'</a></td></tr>'+

		'</table>'+
	
'</tpl>';
GO.files.filesTemplateConfig={
	getPath : function(path)
	{
		return path.replace(/\'/g,'\\\'');
	},
	getDownloadUrl : function(id,inline){

		if(GO.util.empty(inline)){
			inline=false;
		} else {
			inline=true;
		}
		
		return GO.url("files/file/download",{id:id,inline:inline})
	}
	
};

GO.files.ImageViewer = Ext.extend(GO.Window, {
	
	originalImgSize : false,
	
	fullSize:false,
	
	viewerImages : Array(),
	
	currentImgIndex : 0,
	
	stateId : 'go-imageviewer',
	
	initComponent : function(){
		
		
		this.border=false;
		this.plain=true;
		this.maximizable=true;
		this.width=800;
		this.height=600;
		this.bodyStyle='text-align:center;vertical-align:middle';
		this.title=GO.files.lang.imageViewer;
		this.autoScroll=true;
		
		this.tbar=[this.previousButton = new Ext.Button({
			iconCls: 'btn-left-arrow',
			text:GO.lang.cmdPrevious,
			handler: function(){
				this.loadImage(this.currentImgIndex-1);
			},
			scope:this
		}),this.nextButton = new Ext.Button({
			iconCls: 'btn-right-arrow',
			text:GO.lang.cmdNext,
			handler: function(){
				this.loadImage(this.currentImgIndex+1);
			},
			scope:this
		}),
		'-',
		{
			iconCls: 'btn-save',
			text: GO.lang.download,
			handler: function(){
				window.open(this.viewerImages[this.currentImgIndex].download_path);
			},
			scope: this
		},'-',
		this.normalSizeBtn=new Ext.Button({
			text: GO.files.lang.normalSize,
			iconCls: 'fs-btn-normal-size',
			handler: function(){
				this.loadImage(this.currentImgIndex, true);
			},
			scope: this
		}),
		this.fitImageBtn=new Ext.Button({
			text: GO.files.lang.fitImage,
			iconCls: 'fs-btn-fit-image',
			handler: function(){
				this.syncImgSize();
			},
			scope: this
		})];
		
		GO.files.ImageViewer.superclass.initComponent.call(this);
		this.on('resize', function(){this.syncImgSize(this.fullSize);}, this);
	},

	
	show : function(images, index)
	{
		if(!index)
			index=0;
		
		GO.files.ImageViewer.superclass.show.call(this);
		
		this.viewerImages = images;
		
		this.loadImage(index);		
	},
		
	loadImage : function(index, fullSize)
	{
		
		this.fullSize=fullSize;
		
		this.body.mask(GO.lang.waitMsgLoad);
		
		this.setTitle(this.viewerImages[index].name);
		
		this.currentImgIndex = index;

		if(this.imgEl)
		{
			this.imgEl.remove();
		}
		this.originalImgSize=false;
		this.imgEl = this.body.createChild({
			tag:'img',
			src: fullSize ? this.viewerImages[index].download_path : this.viewerImages[index].src,
			cls:'fs-img-viewer'
		});

		if (!this.viewerImages[index].download_path)
			this.viewerImages[index].download_path = this.viewerImages[index].src;

//		this.imgEl.initDD(null);
		
		this.syncImgSize(fullSize);
		
		
		
		
		
		if(this.viewerImages.length==1){
			this.previousButton.hide();
			this.nextButton.hide();
		}else
		{
			this.previousButton.show();
			this.nextButton.show();

			this.previousButton.setDisabled(index==0);
			this.nextButton.setDisabled(index==(this.viewerImages.length-1));
		}
	},
	
	syncImgSize : function(fullSize){	
		
		if(this.imgEl)
		{
			if(!this.imgEl.dom.complete)
			{
				this.syncImgSize.defer(100, this, [fullSize]);
			}else
			{			
				var imgSize = this.imgEl.getSize();
				
				if(!this.originalImgSize)
				{
					this.originalImgSize = imgSize;
				}
				
				var bodySize = this.body.getSize();
				
				var h = imgSize.height;
				var w = imgSize.width;
				if(this.originalImgSize.width > bodySize.width){
					w = bodySize.width;					
					h= this.originalImgSize.height*bodySize.width/this.originalImgSize.width;
				}

				if(h>bodySize.height){
					var ratio = bodySize.height/h;
					w=w*ratio
					h=h*ratio
				}

				if(!fullSize && (w!=this.originalImgSize.width || h!=this.originalImgSize.height)){
					this.normalSizeBtn.setDisabled(false);
//					this.fitImageBtn.setDisabled(false);

					this.imgEl.setWidth(w);
					this.imgEl.setHeight(h);
					this.imgEl.setPositioning({left:0,top:0});

					
				}else
				{
					this.normalSizeBtn.setDisabled(fullSize);
//					this.fitImageBtn.setDisabled(fullSize);
				}

				if(h<bodySize.height){
					var topMargin = (bodySize.height-h)/2;
					this.imgEl.setStyle('margin-top', topMargin+'px');
				}
				
//				if(fullSize){
//					this.imgEl.setSize(this.originalImgSize.width, this.originalImgSize.height);
//				}
				
				this.body.unmask();
			}
		}
	}/*,
	
	onResize : function(w, h){
		
		this.syncImgSize();
		
		 GO.files.ImageViewer.superclass.onResize.call(this, [w, h]);
	}*/
	
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ThumbsPanel.js 20453 2016-09-22 13:40:32Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.files.ThumbsPanel = Ext.extend(Ext.Panel, {
	store : false,
	initComponent : function(){
		this.bbar = new Ext.PagingToolbar({
  					cls: 'go-paging-tb',
	          store: this.store,
	          pageSize: parseInt(GO.settings['max_rows_list']),
	          displayInfo: true,
	          displayMsg: GO.lang['displayingItems'],
	          emptyMsg: GO.lang['strNoItems']
	      });
		
    var tpl = new Ext.XTemplate('<tpl for=".">',
            '<div class="fs-thumb-wrap" id="{name}">',
						
				
		    '<div class="fs-thumb" style="background-image:url({thumb_url});">',
				'<tpl if="locked_user_id&gt;0"><div class="fs-thumb-locked"></tpl>',
				'&nbsp;',
				'<tpl if="locked_user_id&gt;0"></div></tpl>',
				'</div>',
				
				'<tpl if="GO.files.isContentExpired(content_expire_date) == false">'+
					'<span class="x-editable">{shortName}</span>'+
				'</tpl>'+
				'<tpl if="GO.files.isContentExpired(content_expire_date)">'+
					'<span class="x-editable content-expired">{shortName}</span>'+
				'</tpl>'+

		    '</div>',				
        '</tpl>',
        '<div class="x-clear"></div>');
     
        
     this.items=[this.view = new Ext.DataView({
            store: this.store,
            tpl: tpl,
            autoHeight:true,
            multiSelect: true,
            overClass:'fs-view-over',
            selectedClass:'fs-view-selected',
            itemSelector:'div.fs-thumb-wrap',
           /* plugins: [
                new Ext.DataView.DragSelector()
                //new Ext.DataView.LabelEditor({dataIndex: 'name'})
            ],*/

            prepareData: function(data){
                data.shortName = Ext.util.Format.ellipsis(data.name, 20);
                return data;
            }
        })];
        
     this.autoScroll=true;
     
		 this.view.on('render', function(){
     	var dragZone = new GO.files.ThumbsDragZone(this.view, {containerScroll:true,
        ddGroup: 'FilesDD'});
       var dropZone = new GO.files.ThumbsDropZone(this.view, {
       	notifyDrop: this.onNotifyDrop.createDelegate(this)
       });        
     }, this);
     
     this.addEvents({drop:true});
        
     GO.files.ThumbsPanel.superclass.initComponent.call(this);
	},
	

	onBeforeLoad : function(){		
    this.body.mask(GO.lang.waitMsgLoad);     
	},
	
	onStoreLoad : function(){		
    this.body.unmask();     
	},
	
	setStore : function(store){
		if(this.store)
		{
			this.store.un("beforeload", this.onBeforeLoad, this);
			this.store.un("load", this.onStoreLoad, this);
			this.store=false;
		}
		
		if(store)
		{
			this.store=store;
			this.store.on("beforeload", this.onBeforeLoad, this);
			this.store.on("load", this.onStoreLoad, this);
		}
		
		this.view.bindStore(this.store);
		
	},
	/**
	 * Sends a delete request to the remote store. It will send the selected keys in json 
	 * format as a parameter. (delete_keys by default.)
	 * 
	 * @param {Object} options An object which may contain the following properties:<ul>
     * <li><b>deleteParam</b> : String (Optional)<p style="margin-left:1em">The name of the
     * parameter that will send to the store that holds the selected keys in JSON format.
     * Defaults to "delete_keys"</p>
     * </li>
	 * 
	 */
	deleteSelected : function(config){	  
		
		if(!config)
		{
			config=this.deleteConfig;
		}
		
		if(!config['deleteParam'])
		{
			config['deleteParam']='delete_keys';
		}
		
		var selectedRows = [];
		
		var records = this.view.getSelectedRecords();
		for(var i=0;i<records.length;i++)
		{
			selectedRows.push(records[i].data.type_id);
		}
		
		var params={}
		params[config.deleteParam]=Ext.encode(selectedRows);
		
		var deleteItemsConfig = {
			store:this.store,
			params: params,
			count: selectedRows.length	
		};
		
		if(config.callback)
		{
		  deleteItemsConfig['callback']=config.callback;		
		}
		if(config.success)
		{
		  deleteItemsConfig['success']=config.success;		
		}
		if(config.failure)
		{
		  deleteItemsConfig['failure']=config.failure;		
		}
		if(config.scope)
		{
		  deleteItemsConfig['scope']=config.scope;
		}
			
		GO.deleteItems(deleteItemsConfig);		
	},
	
	onNotifyDrop : function(dd, e, data)
	{
		var dragData = dd.getDragData(e);

		if(dd.dragData)
		{	
			var dropRecord = this.view.store.getAt(dragData.ddel.viewIndex);
					
			if(dropRecord && dropRecord.data.extension=='folder')
			{
				this.fireEvent('drop', dropRecord.data.id, data.selections);
				return true;
			}
		}
	}
	
});


GO.files.ThumbsDropZone = function(view, config)
{
	this.view = view;
  GO.files.ThumbsDropZone.superclass.constructor.call(this, view.getEl(), config);
};

Ext.extend(GO.files.ThumbsDropZone, Ext.dd.DropTarget,{
	ddGroup: 'FilesDD',
	copy:false,
	notifyOver : function(dd, e, data){
		var target = e.getTarget('.fs-thumb-wrap');
		
		if(target)
		{		
			var dropRecord = this.view.store.getAt(target.viewIndex);		
			if(dropRecord)
			{
				if(dropRecord.data.extension=='folder')
				{
					return this.dropAllowed;
				}
			}
		}		
		return false;
	}
});




/**
 * Create a DragZone instance for our JsonView
 */
GO.files.ThumbsDragZone = function(view, config){
    this.view = view;
    GO.files.ThumbsDragZone.superclass.constructor.call(this, view.getEl(), config);
};
Ext.extend(GO.files.ThumbsDragZone, Ext.dd.DragZone, {
		ddGroup: 'FilesDD',
    // We don't want to register our image elements, so let's 
    // override the default registry lookup to fetch the image 
    // from the event instead
    getDragData : function(e){
    	if(e.ctrlKey)
    	{
    		return false;
    	}
      var target = e.getTarget('.fs-thumb-wrap');
      if(target){
          var view = this.view;
          if(!view.isSelected(target)){
              view.onClick(e);
          }
          var selNodes = view.getSelectedNodes();
          var records = view.getSelectedRecords();
          
          var dragData = {
              nodes: selNodes,
              selections: records
          };
          if(selNodes.length == 1){
              dragData.ddel = target;
              dragData.single = true;
          }else{
              var div = document.createElement('div'); // create the multi element drag "ghost"
              div.className = 'multi-proxy';
              for(var i = 0, len = selNodes.length; i < len; i++){
                  div.appendChild(selNodes[i].firstChild.firstChild.cloneNode(true)); // image nodes only
                  if((i+1) % 3 == 0){
                      div.appendChild(document.createElement('br'));
                  }
              }
              var count = document.createElement('div'); // selected image count
              count.innerHTML = i + ' images selected';
              div.appendChild(count);
              
              dragData.ddel = div;
              dragData.multi = true;
          }
          return dragData;
      }
      return false;
    },

    // this method is called by the TreeDropZone after a node drop
    // to get the new tree node (there are also other way, but this is easiest)
  /*  getTreeNode : function(){
        var treeNodes = [];
        var nodeData = this.view.getRecords(this.dragData.nodes);
        for(var i = 0, len = nodeData.length; i < len; i++){
            var data = nodeData[i].data;
            treeNodes.push(new Ext.tree.TreeNode({
                text: data.name,
                icon: '../view/'+data.url,
                data: data,
                leaf:true,
                cls: 'image-node'
            }));
        }
        return treeNodes;
    },*/
    
    // the default action is to "highlight" after a bad drop
    // but since an image can't be highlighted, let's frame it 
    afterRepair:function(){
        for(var i = 0, len = this.dragData.nodes.length; i < len; i++){
            Ext.fly(this.dragData.nodes[i]).frame('#8db2e3', 1);
        }
        this.dragging = false;    
    },
    
    // override the default repairXY with one offset for the margins and padding
    getRepairXY : function(e){
        if(!this.dragData.multi){
            var xy = Ext.Element.fly(this.dragData.ddel).getXY();
            xy[0]+=3;xy[1]+=3;
            return xy;
        }
        return false;
    }
});



GO.files.SaveAsDialog = Ext.extend(GO.Window, {
	
	handler : function(){
		
	},
	initComponent : function(){
		
		this.layout='border';
		this.title=GO.files.lang.saveFile;
		this.height=450;
		this.width=750;
		this.border=false;
		this.collapsible=true;
		this.maximizable=true;
		this.closeAction='hide';
			
		this.buttons=[
				{
					text: GO.lang.cmdOk,				        						
					handler: function(){

						if(this.nameField.isValid()){
							var files = this.fb.gridStore.getRange();

							for(var i=0;i<files.length;i++)
							{
								if(files[i].data.extension!='folder' && files[i].data.name==this.nameField.getValue())
								{
									var t = new Ext.Template(GO.files.lang.confirmOverwrite);

									if(!confirm(t.apply({filename: files[i].data.name})))
									{
										return false;
									}
									break;
								}
							}

							this.handler.call(this.scope, this, this.fb.folder_id, this.nameField.getValue());
						}else
						{
							this.nameField.focus();
						}
					}, 
					scope: this 
				},{
					text: GO.lang.cmdClose,				        						
					handler: function(){
						this.hide();
					},
					scope:this
				}				
			];
		
		this.fb = new GO.files.FileBrowser({
			id: 'saveas-filebrowser',
			region:'center',
			border:false,
			loadDelayed:true,
			hideActionButtons:true,
			treeCollapsed:false,
			filePanelCollapsed:true,
			fileClickHandler: function(r){										
			},
			scope: this
		});
				
		this.fb.on('fileselected',function(fb, r){
			if(r.data.extension!='folder')
				this.formPanel.form.findField('filename').setValue(r.data.name);
		}, this);
		
		this.nameField = new Ext.form.TextField({				
				fieldLabel:GO.lang.strName,
				name:'filename',
				anchor:'100%',
				validator:function(v){
					return !v.match(/[&\/:\*\?"<>|\\]/);
				}
			});
			
		var focusField = function(){
			this.nameField.focus(true);
		};
		
		this.focus=focusField.createDelegate(this);
		
		this.formPanel = new Ext.form.FormPanel({
			region:'north',
			cls:'go-form-panel',
			height:32,
			items:this.nameField
		});
		
		this.items=[this.fb,this.formPanel];
		
		GO.files.SaveAsDialog.superclass.initComponent.call(this);
	},
	
	show : function(config){
		this.nameField.setValue(config.filename.replace(/[&\/:\*\?"<>|\\]/g, ""));
		
		var extension = GO.util.getFileExtension(config.filename);
		
		if(config.folder_id || config.folder_id == 0){
			this.fb.setRootID(config.folder_id, config.folder_id);
		}
		
		this.fb.setFilesFilter(extension);		
		
		if(!config.scope)
			config.scope=this;
		
		if(config.handler)
		{
			this.handler = config.handler.createDelegate(config.scope);
		}
		
		GO.files.SaveAsDialog.superclass.show.call(this);
	}
	
});

/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: VersionsGrid.js 19784 2016-01-26 13:56:16Z michaelhart86 $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.files.VersionsGrid = function(config) {

	if (!config) {
		config = {};
	}

	config.title = GO.files.lang.olderVersions;
	config.layout = 'fit';
	config.autoScroll = true;
	config.split = true;
	config.store = new GO.data.JsonStore({
		url : GO.url("files/version/store"),
		fields : ['id', 'mtime','user_name','version','size_bytes'],
		remoteSort : true,
		id:'id'
	});
	config.store.setDefaultSort('mtime', 'desc');
		
	config.paging = true;
	var columnModel = new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[{
				header:GO.files.lang.shortVersion,
				dataIndex : 'version',
				width:50,
				align:'right'
		},{
			header : GO.lang['strOwner'],
			dataIndex : 'user_name',
			sortable : false,
			id:'name'
		},{
			header : GO.lang['strSize'],
			dataIndex : 'size_bytes',
			sortable : true,
			renderer: GO.util.format.fileSize
		}, {
			header : GO.lang.strMtime,
			dataIndex : 'mtime',
			width:100
		}]
	});
	
	config.cm = columnModel;
	
	config.autoExpandColumn='name';

	config.view = new Ext.grid.GridView({
		emptyText : GO.lang['strNoItems']
	});
	config.sm = new Ext.grid.RowSelectionModel();
	config.loadMask = true;

	GO.files.VersionsGrid.superclass.constructor.call(this, config);

	this.on('rowdblclick', function(grid, rowIndex) {
		var record = grid.getStore().getAt(rowIndex);
		window.open(GO.url("files/version/download",{id:record.id}));
	}, this);

};

Ext.extend(GO.files.VersionsGrid, GO.grid.GridPanel, {

	onShow : function() {
		GO.files.VersionsGrid.superclass.onShow.call(this);
		this.store.load();
	},

	setFileID : function(file_id) {
		this.store.baseParams.file_id = file_id
		this.store.loaded = false;
	}

});

/**
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: NewFolderDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
GO.files.NewFolderDialog = function(config){	
	if(!config)
	{
		config={};
	}
	
	this.newFolderNameField = new Ext.form.TextField({	              	
		fieldLabel: GO.lang['strName'],
		name: 'name',
		value: GO.files.lang.newFolder,
		allowBlank:false,
		anchor:'100%',
		validator:function(v){
			return !v.match(/[&\/:\*\?"<>|\\]/);
		}   
	});
	this.newFolderFormPanel = new Ext.form.FormPanel({
			
		baseParams:{
			parent_id:0
		},
		defaultType: 'textfield',
		labelWidth:75,
		autoHeight:true,
		cls:'go-form-panel',
		waitMsgTarget:true,
		items:this.newFolderNameField,
		keys:[{
			key: Ext.EventObject.ENTER,
			fn: function(key, e){
				this.submitForm();
			},
			scope:this
		}]
	});
	
	var focusName = function(){
		this.newFolderNameField.focus(true);		
	};
	config.collapsible=false;
	config.maximizable=false;
	config.modal=false;
	config.resizable=false;
	config.width=500;
	config.items=this.newFolderFormPanel;
	config.autoHeight=true;
	config.closeAction='hide';
	config.focus=focusName.createDelegate(this);
	config.title= GO.files.lang.addFolder;		
	config.buttons= [{
		text: GO.lang['cmdOk'],
		handler: function(){	
			this.submitForm();						
		},
		scope:this
	},
	{
		text: GO.lang['cmdClose'],
		handler: function(){
			this.hide();
		},
		scope: this
	}];
				
	GO.files.NewFolderDialog.superclass.constructor.call(this, config);
	
	this.addEvents({
		save:true
	});
}
Ext.extend(GO.files.NewFolderDialog, Ext.Window,{
	
	submitForm : function(){
		this.newFolderFormPanel.form.submit({
										
			url: GO.url('files/folder/submit'),
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){								
				this.fireEvent('save', action.result);															
				this.hide();
			},
					
			failure: function(form, action) {
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}else
				{
					error = action.result.feedback;
				}
								
				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope:this
							
		});
						
	},
	
	show : function (parent_id) {
		if(!this.rendered)
		{
			this.render(Ext.getBody());
		}
		this.newFolderFormPanel.baseParams.parent_id=parent_id;
		this.newFolderFormPanel.form.reset();
		
		GO.files.NewFolderDialog.superclass.show.call(this);
	}
});


GO.files.SelectFile = Ext.extend(Ext.form.TriggerField,{

	triggerClass : 'fs-form-file-select',

	filesFilter : '',

	root_folder_id : 0,

	files_folder_id : 0,


	onTriggerClick : function(){


		GO.files.createSelectFileBrowser();

		GO.selectFileBrowser.setFileClickHandler(function(r){
			if(r){
				this.setValue(r.data.path);
			}else
			{
				this.setValue(GO.selectFileBrowser.path);
			}

			GO.selectFileBrowserWindow.hide();
		}, this);

		GO.selectFileBrowser.setFilesFilter(this.filesFilter);
		GO.selectFileBrowser.setRootID(this.root_folder_id, this.files_folder_id);
		GO.selectFileBrowserWindow.show();
	}

});

Ext.ComponentMgr.registerType('selectfile', GO.files.SelectFile);

GO.files.SelectFolder = Ext.extend(Ext.form.TriggerField,{

	triggerClass : 'fs-form-file-select',

	onTriggerClick : function(){

		if(!this.folderSelector){
			this.folderSelector = new GO.files.SelectFolderDialog({
				scope:this,
				handler:function(fs, path){
					this.setValue(path);
				}
			});
		}

		this.folderSelector.show();	
	}
});

Ext.ComponentMgr.registerType('selectfolder', GO.files.SelectFolder);




GO.moduleManager.onModuleReady('customfields', function(){
	GO.customfields.nonGridTypes.push('file');
	GO.customfields.dataTypes["GO\\Files\\Customfieldtype\\File"]={
		label : GO.files.lang.file,
		getFormField : function(customfield, config){
			return {
				xtype: 'selectfile',
       	fieldLabel: customfield.name,
        name:customfield.dataname,
        anchor:'-20'
			}
		}
	}

}, this);

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: FilePanel.js 20453 2016-09-22 13:40:32Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

GO.files.FilePanel = Ext.extend(GO.DisplayPanel,{
	model_name : "GO\\Files\\Model\\File",

	noFileBrowser:true,

	stateId : 'fs-file-panel',

	/*
	 *Can be filled by other modules to display extra info
	 */
	extraTemplateProperties : '',

	editGoDialogId : 'file',

	editHandler : function(){

		//browsers don't like loading a json request and download dialog at the same time.'
		if(this.loading)
		{
			this.editHandler.defer(200, this);
		}else
		{	
			//GO.files.openFile({id:this.data.id});
			this.data.handler.call(this);
		}
	},

	createTopToolbar : function(){
		var tbar = GO.files.FilePanel.superclass.createTopToolbar.call(this);
				
		this.editButton.setText(GO.files.lang.open);

		tbar.splice(1,0,this.downloadButton= new Ext.Button({
			iconCls: 'btn-save',
			text: GO.lang.download,
			cls: 'x-btn-text-icon',
			handler: function(){
				GO.files.downloadFile(this.model_id);
			},
			scope: this
		}),this.propertiesBtn = new Ext.Button({
			iconCls: 'btn-settings',
			text: GO.lang.strProperties,
			cls: 'x-btn-text-icon',
			handler: function(){
				GO.files.showFilePropertiesDialog(this.model_id+"");
				//this.addSaveHandler(GO.files.filePropertiesDialog);
			},
			scope: this
		}));

		return tbar;
	},

	reset : function(){
		GO.files.FilePanel.superclass.reset.call(this);
//		this.setTitle('&nbsp;');
	},

	setData : function(data)
	{
		GO.files.FilePanel.superclass.setData.call(this, data);
//		this.setTitle(data.name);		
		this.editButton.setDisabled(data.locked || !this.data.write_permission);	
		
		//custom fields pass path as ID and it will be looked up by the controller. So we must set the actual ID here.
		//see actionDisplay in FileController
		this.model_id=this.data.id;

		this.propertiesBtn.setDisabled(!this.data.write_permission);
	},

	initComponent : function(){
		
		this.on('bodyclick',function(panel,target, e){
			
			target = Ext.get(target);
			
			if(target.hasClass("fs-unlock")){
				GO.request({
					url:'files/file/submit',
					params:{
						id:this.data.id,
						locked_user_id:0
					},
					success:function(action, response, result){
						this.reload();
						var filesModulePanel = GO.mainLayout.getModulePanel('files');
						if(filesModulePanel && filesModulePanel.folder_id==this.data.folder_id)
							filesModulePanel.getActiveGridStore().load();
						if (!GO.util.empty(GO.files.fileBrowser))
							GO.files.fileBrowser.gridStore.load();
						if (!GO.util.empty(GO.selectFileBrowser))
							GO.selectFileBrowser.gridStore.load();
					},
					scope:this
				})
			}
			
			if(target.hasClass("fs-deleteDL")){
				
			var answer = confirm(GO.files.lang.deleteDownloadLink);
			if(answer){
				
					GO.request({
						url:'files/file/submit',
						params:{
							id:this.data.id,
							expire_time:0,
							random_code:null
						},
						success:function(action, response, result){
							this.reload();
							var filesModulePanel = GO.mainLayout.getModulePanel('files');
							if(filesModulePanel && filesModulePanel.folder_id==this.data.folder_id)
								filesModulePanel.getActiveGridStore().load();
						},
						scope:this
					})
				}
			}
			
			
		}, this);
		
		this.loadUrl=('files/file/display');
		
		this.template =

				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0">'+
//					'<tr>'+
//						'<td width="120">'+GO.files.lang.path+':</td>'+
//						'<td>{path}</td>'+
//					'</tr>'+
					'<tr>'+
						'<td colspan="2" class="display-panel-heading">'+GO.files.lang.file+': {path}</td>'+
					'</tr>'+
					
					'<tr>'+
						'<td>ID</td><td>{id}</td>'+
					'</tr>'+
					
					'<tr>'+
						'<td>'+GO.lang.strType+':</td>'+
						'<td colspan=><div class="go-grid-icon filetype filetype-{extension}">{type}</div></td>'+						
					'</tr>'+

					'<tr>'+
						'<td>'+GO.lang.strSize+':</td>'+
						'<td>{size}</td>'+
						
					'</tr>'+

					'<tr>'+
						'<td>'+GO.lang.strCtime+':</td>'+
						'<td>{ctime}</td>'+
						
					'</tr>'+

					'<tr>'+
						'<td>'+GO.lang.strMtime+':</td>'+
						'<td>{mtime}</td>'+						
					'</tr>'+

					'<tr>'+
						'<td>'+GO.lang['strUser']+':</td>'+'<td>{username}</td>'+
					'</tr><tr>'+
						'<td>'+GO.lang['mUser']+':</td>'+'<td>'+
							'<tpl if="muser_id">{musername}</tpl>'+
							'</td>'+
					'</tr>'+
					
					'<tr>'+
						'<td>URL:</td>'+
						'<td><a target="_blank" href="{url}">'+GO.files.lang.rightClickToCopy+'</a></td>'+
					'</tr>'+
										
					'<tpl if="!GO.util.empty(locked_user_name)">'+
						'<tr>'+
            '<td>'+GO.files.lang.lockedBy+':</td>'+
            '<td><div class="go-grid-icon btn-lock">{locked_user_name}'+
						'<tpl if="unlock_allowed">'+
							' <span class="fs-unlock" style="cursor:pointer;text-decoration:underline;">['+GO.files.lang.unlock+']</span>'+
						'</tpl>'+
						'</div></td>'+
						'</tr>'+
          '</tpl>'+
					

          '<tpl if="!GO.util.empty(expire_time)">'+
						'<tr>'+
							'<td colspan="2" class="display-panel-heading">'+GO.files.lang.strDownloadActive+'</td>'+
						'</tr>'+
						'<tr>'+
            '<td style="white-space:nowrap">'+GO.files.lang.downloadExpireTime+':</td>'+
            '<td>{expire_time}</td>'+
						'</tr>'+
						
						'<tr>'+
            '<td>'+GO.files.lang.downloadUrl+':</td>'+
            '<td><a href="{download_link}" target="_blank">'+GO.files.lang.rightClickToCopy+'</a>'+
						//'<tpl if="unlock_allowed">'+
							' <span class="fs-deleteDL" style="cursor:pointer;text-decoration:underline;">['+GO.files.lang.deletedDownloadLink+']</span>'+
						//'</tpl>'+
						'</td>'+
						'</tr>'+
						
						'<tpl if="!GO.util.empty(delete_when_expired)">'+
							'<tr>'+
								'<td colspan="2"><span style="color:red;">'+GO.files.lang['automaticallyDeleted']+'</span></td>'+
							'</tr>'+
						'</tpl>'+
						
          '</tpl>'+
					
					'<tpl if="!GO.util.empty(content_expire_date)">'+
						'<tr>'+
            '<td>'+GO.files.lang.contentExpiresAt+':</td>'+
						
						'<tpl if="GO.files.isContentExpired(content_expire_date) == false">'+
							'<td><span>{content_expire_date}</span></td>'+
						'</tpl>'+
						'<tpl if="GO.files.isContentExpired(content_expire_date)">'+
							'<td><span class="content-expired">{content_expire_date}</span></td>'+
						'</tpl>'+
						'</tr>'+
          '</tpl>'+

					'<tpl if="!GO.util.empty(thumbnail_url)"><tr><td colspan="2">'+
						'<img src="{thumbnail_url}" style="max-width:100px;max-height:100px;" />'+
					'</td></tr></tpl>'+

					this.extraTemplateProperties +

					/*'<tr>'+
						'<td>'+GO.lang.Atime+'</td>'+
						'<td>{atime}</td>'+
					'</tr>'+*/

					'<tpl if="!GO.util.empty(comment)">'+
						'<tr>'+
							'<td colspan="2" class="display-panel-heading">'+GO.files.lang.comments+'</td>'+
						'</tr>'+
						'<tr>'+
							'<td colspan="2">{comment}</td>'+
						'</tr>'+
					'</tpl>'+
				'</table>';


	

		if(GO.customfields)
		{
			this.template +=GO.customfields.displayPanelTemplate;
		}

		if(GO.tasks)
			this.template +=GO.tasks.TaskTemplate;

		if(GO.calendar)
			this.template += GO.calendar.EventTemplate;
		
		if(GO.workflow)
			this.template +=GO.workflow.WorkflowTemplate;

		if(GO.lists)
			this.template += GO.lists.ListTemplate;

		this.template += GO.linksTemplate;
		
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);

		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}

		GO.files.FilePanel.superclass.initComponent.call(this);
	}
});

GO.files.FolderPanel = Ext.extend(GO.DisplayPanel,{
	model_name : "GO\\Files\\Model\\Folder",



	noFileBrowser:true,
	
	editGoDialogId : 'folder',

	editHandler : function(){	
	},

	createTopToolbar : function(){
		var tbar = GO.files.FilePanel.superclass.createTopToolbar.call(this);

		tbar.splice(1,0,{
			iconCls: 'btn-settings',
			text: GO.lang.strProperties,
			cls: 'x-btn-text-icon',
			handler: function(){
				GO.files.showFolderPropertiesDialog(this.link_id+"");
			},
			scope: this
		});

		return tbar;
	},

	setData : function(data)
	{
//		this.setTitle(data.name);
	
		this.topToolbar.items.items[0].setVisible(false);

		GO.files.FolderPanel.superclass.setData.call(this, data);
	},

	initComponent : function(){	
		
		this.loadUrl=('files/folder/display');
		
		this.template =

				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0">'+
					'<tr>'+
						'<td colspan="2" class="display-panel-heading">'+GO.files.lang.folder+': {path}</td>'+
					'</tr>'+
					'<tr>'+
						'<td>'+GO.lang.strType+':</td>'+
						'<td>{type}</td>'+
					'</tr>'+					
					
					'<tr>'+
						'<td>'+GO.lang['strCtime']+':</td>'+'<td>{ctime}</td>'+
					'</tr><tr>'+
						'<td>'+GO.lang['createdBy']+':</td>'+'<td>{username}</td>'+
					'</tr><tr>'+
						'<td>'+GO.lang['strMtime']+':</td>'+'<td>{mtime}</td>'+
					'</tr><tr>'+
						'<td>'+GO.lang['mUser']+':</td>'+'<td>'+
							'<tpl if="muser_id">{musername}</tpl>'+
							'</td>'+
					'</tr>'+
					
					'<tr>'+
						'<td>URL:</td>'+
						'<td><a target="_blank" href="{url}">'+GO.files.lang.rightClickToCopy+'</a></td>'+
					'</tr>'+

					'<tpl if="!GO.util.empty(comment)">'+
						'<tr>'+
							'<td colspan="2" class="display-panel-heading">'+GO.files.lang.comments+'</td>'+
						'</tr>'+
						'<tr>'+
							'<td colspan="2">{comment}</td>'+
						'</tr>'+
					'</tpl>'+
				'</table>';

		if(GO.customfields)
		{
			this.template +=GO.customfields.displayPanelTemplate;
		}

		if(GO.tasks)
			this.template +=GO.tasks.TaskTemplate;

		if(GO.calendar)
			this.template += GO.calendar.EventTemplate;

		if(GO.workflow)
			this.template +=GO.workflow.WorkflowTemplate;
		
		if(GO.lists)
			this.template += GO.lists.ListTemplate;

		this.template += GO.linksTemplate;	
		
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);

		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}

		GO.files.FolderPanel.superclass.initComponent.call(this);
	}
});

GO.files.TreePanel = function (config){
	config = config || {};
	
	
	config.loader =  new GO.base.tree.TreeLoader(
	{
		dataUrl:GO.url('files/folder/tree'),
		baseParams:{
			root_folder_id:0,
			expand_folder_id:0
		},
		preloadChildren:true
		
	});


	config.loader.on('beforeload', function(){
		var el =this.getEl();
		if(el){
			el.mask(GO.lang.waitMsgLoad);
		}
	}, this);

	config.loader.on('load', function(){
		var el =this.getEl();
		if(el){
			el.unmask();
		}		
		this.getLoader().baseParams.expand_folder_id=0;
	}, this);
		
	Ext.applyIf(config, {
		layout:'fit',
		split:true,
		autoScroll:true,
		width: 200,
		animate:true,
		rootVisible:false,
		containerScroll: true,
		selModel:new Ext.tree.MultiSelectionModel()		
	});
		
		
	GO.files.TreePanel.superclass.constructor.call(this, config);
	
	// set the root node
	var rootNode = new Ext.tree.AsyncTreeNode({
		text: '',
		draggable:false,
		id: 'root',
		iconCls : 'folder-default'
	});

	this.setRootNode(rootNode);
}
	
	
Ext.extend(GO.files.TreePanel, Ext.tree.TreePanel,{
	/**
	 * Expand the folder server side
	 */
	setExpandFolderId : function(folder_id){
		this.getLoader().baseParams.expand_folder_id=folder_id;
	}
	
	});
	
	


GO.files.TreeFilePanel = function (config){
    config = config || {};


    config.loader =  new GO.base.tree.TreeLoader(
    {
        dataUrl:GO.url('files/folder/tree'),
        baseParams:{
            root_folder_id:0,
            expand_folder_id:0,
            showFiles: true
        },
        preloadChildren:true
    });

    config.loader.on('beforeload', function(){
        var el =this.getEl();
        if(el){
            el.mask(GO.lang.waitMsgLoad);
        }
    }, this);

    config.loader.on('load', function(){
        var el =this.getEl();
        if(el){
            el.unmask();
        }
    }, this);

    Ext.applyIf(config, {
        layout:'fit',
        split:true,
        autoScroll:true,
        width: 200,
        animate:true,
        rootVisible:false,
        containerScroll: true,
        selModel:new Ext.tree.MultiSelectionModel()
    });


    GO.files.TreeFilePanel.superclass.constructor.call(this, config);

    // set the root node
    var rootNode = new Ext.tree.AsyncTreeNode({
        text: '',
        draggable:false,
        id: 'root',
        iconCls : 'folder-default'
    });

    this.setRootNode(rootNode);
}

Ext.extend(GO.files.TreeFilePanel, Ext.tree.TreePanel,{
});


GO.files.FilesGrid = function(config) {
	
	config = config || {};
	config.layout = 'fit';
	config.split  = true;
	config.paging  = true;
	config.autoExpandColumn = 'name';
	config.sm = new Ext.grid.RowSelectionModel();
	config.loadMask = true;
	config.enableDragDrop = true;
	config.ddGroup = 'FilesDD';
	
	config.viewConfig = {
		getRowClass: function(record, rowIndex, rowParams, store) {

			if(GO.files.isContentExpired(record.json.content_expire_date)){
				return 'content-expired';
			} else {
				return '';
			}
		}
	};
	
//	config.viewConfig = {'forceFit':true};

	GO.files.FilesGrid.superclass.constructor.call(this,config);
};

Ext.extend(GO.files.FilesGrid, GO.grid.GridPanel, {
	applyStoredState : function(state){
		delete state.sort;
		//this.stateful=false;

		GO.files.FilesGrid.superclass.applyState.call(this, state);
		if (this.rendered){
			this.reconfigure(this.store,this.getColumnModel());
			this.getColumnModel().setColumnWidth(0,this.getColumnModel().getColumnWidth(0));
		}

		//this.enableState.defer(500,this);
	}

//	enableState : function(){
//		this.stateful=true;
//	}
});

GO.files.FileBrowserButton = Ext.extend(Ext.Button, {
	
	model_name : "",
	id: 0,
	iconCls: 'btn-files',
	setId : function(id){
		this.id=id;
		this.setDisabled(!id);
	},
	
	initComponent : function(){
		Ext.apply(this, {				
				cls: 'x-btn-text-icon', 
				text: GO.files.lang.files,
				handler: function(){			
					

					GO.request({
						url:'files/folder/checkModelFolder',
						maskEl:this.ownerCt.ownerCt.getEl(),
						params:{								
							mustExist:true,
							model:this.model_name,
							id:this.id
						},
						success:function(response, options, result){														
							GO.files.openFolder(result.files_folder_id);
							
							//reload display panel on close
							if(this.ownerCt.ownerCt.isDisplayPanel)
								GO.files.fileBrowserWin.on('hide', this.ownerCt.ownerCt.reload, this.ownerCt.ownerCt, {single:true});
						},
						scope:this

					});
					
					
				},
				scope: this,
				disabled:true
			});
		
		GO.files.FileBrowserButton.superclass.initComponent.call(this);
	}
	
});


Ext.reg('filebrowserbutton', GO.files.FileBrowserButton);

GO.files.SelectFolderDialog = Ext.extend(GO.Window, {
	
	initComponent : function(){
		
		if(!this.scope)
			this.scope=this;
		
		this.layout='fit';
		this.title=GO.files.lang.selectFolder;
		this.height=500;
		this.width=500;
		this.modal=true;
		this.border=false;
		this.collapsible=true;
		this.maximizable=true;
		this.closeAction='hide';
			
		this.buttons=[
			{
				text: GO.lang.cmdOk,				        						
				handler: function(){
					var sm = this.foldersTree.getSelectionModel();
					var selectedFolderNode = sm.getSelectedNode();
					if(!selectedFolderNode)
						alert('Fout');
					this.handler.call(this.scope, this, selectedFolderNode.attributes.path,selectedFolderNode);
					this.hide();
				}, 
				scope: this 
			},{
				text: GO.lang.cmdClose,				        						
				handler: function(){
					this.hide();
				},
				scope:this
			}				
		];
		
		this.foldersTree = new GO.files.TreePanel({
			border:false,
			loadDelayed:true,
			hideActionButtons:true,
			treeCollapsed:false,
			scope: this,
			selModel: new Ext.tree.DefaultSelectionModel()
		});
		
		this.items=[this.foldersTree];
		
		GO.files.SelectFolderDialog.superclass.initComponent.call(this);
	}
	
});

GO.files.RecentFilesGrid = Ext.extend(GO.grid.GridPanel,{	
	constructor : function(config){
		
		config=config||{};
		
		config.store = new GO.data.JsonStore({
			url:GO.url("files/file/recent"),
			id: 'id',
			fields:["id","path"],
			remoteSort:true
		});
		
		var reader = new Ext.data.JsonReader({
			root: 'results',
			totalProperty: 'total',
			fields:["id","path","weekday","mtime","extension"],
			id: 'id'
		});
		
		config.store = new Ext.data.GroupingStore({
			url: GO.url("files/file/recent"),
			reader: reader,
			groupField: 'weekday',
			remoteGroup:true,
			remoteSort:true
		});
		
		config.viewConfig = {'forceFit':true,'autoFill':true};
		
		config.view=new Ext.grid.GroupingView({
			scrollOffset: 2,
			hideGroupedColumn:true,
			emptyText: GO.lang.noItems
		})
		
		config.autoExpandColumn='name';
		config.columns = [{
			id:'name',
			dataIndex:'path',
			header:GO.lang.strName,
			renderer:function(v, meta, r){
				var cls = 'filetype filetype-'+r.get('extension');
				if(r.get('locked_user_id')>0)
					v = '<div class="fs-grid-locked">'+v+'</div>';

				return '<div class="go-grid-icon '+cls+'" style="float:left;">'+v+'</div>';
			}
		},{
			header:GO.lang.strMtime,
			dataIndex:'mtime',
			width:110
		},
			{
				dataIndex:'weekday',
				header:GO.lang.strDay
			}];
		
		config.listeners={
			render:function(){
				this.store.load();
			},
			rowdblclick:function(grid, rowClicked, e){
				var selectionModel = grid.getSelectionModel();
				var record = selectionModel.getSelected();
				
				GO.linkHandlers["GO\\Files\\Model\\File"].call(this, record.id);
				
			},
			scope:this
		}
		
		config.autoHeight=true;
		
		config.bbar = new Ext.PagingToolbar({
        store: config.store,
				pageSize: parseInt(GO.settings['max_rows_list']),
				displayInfo: true,
				displayMsg: GO.lang['displayingItems'],
				emptyMsg: GO.lang['strNoItems']
//        displayInfo: true,
//        displayMsg: 'Displaying topics {0} - {1} of {2}',
//        emptyMsg: "No topics to display"
    });
		
		GO.files.RecentFilesGrid.superclass.constructor.call(this,config);
	
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: PortletFolderBrowserGrid.js 17837 2014-01-17 14:29:56Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */
GO.files.PortletFolderBrowserGrid = Ext.extend(GO.grid.GridPanel, {
	
	initComponent: function () {

		Ext.applyIf(this, {
			layout: 'fit',
			split: true,
			paging: true,
			autoExpandColumn: 'name',
			sm: new Ext.grid.RowSelectionModel(),
			loadMask: true,
			noDelete: true,
			standardTbar: false,
			store: new GO.data.JsonStore({
				url: GO.url("files/folder/list"),
				baseParams: {
					'folder_id': this.folderId
				},
				id: 'type_id',
				remoteSort: true,
				fields: ['type_id', 'id', 'name', 'type', 'size', 'mtime', 'extension', 'timestamp', 'thumb_url', 'path', 'acl_id', 'locked_user_id', 'locked', 'folder_id', 'permission_level', 'readonly', 'unlock_allowed', 'handler']
			}),
			view: new Ext.grid.GridView({
				emptyText: GO.lang['strNoItems'],
				getRowClass: function (record, rowIndex, rp, ds) {
					return '';
				}
			}),
			border: false,
			cm: new Ext.grid.ColumnModel({
				defaults: {
					sortable: true
				},
				columns: [{
						id: 'name',
						header: GO.lang['strName'],
						dataIndex: 'name',
						renderer: function (v, meta, r) {
							var cls = r.get('acl_id') > 0 && r.get('readonly') == 0 ? 'folder-shared' : 'filetype filetype-' + r.get('extension');
							if (r.get('locked_user_id') > 0)
								v = '<div class="fs-grid-locked">' + v + '</div>';

							return '<div class="go-grid-icon ' + cls + '" style="float:left;">' + v + '</div>';
						}
					}, {
						id: 'type',
						header: GO.lang.strType,
						dataIndex: 'type',
						sortable: true,
						hidden: true,
						width: 100
					}, {
						id: 'size',
						header: GO.lang.strSize,
						dataIndex: 'size',
						renderer: function (v) {
							return  v == '-' ? v : Ext.util.Format.fileSize(v);
						},
						hidden: true,
						width: 100
					}, {
						id: 'mtime',
						header: GO.lang.strMtime,
						dataIndex: 'mtime',
						width: 40
					}]
			}),
			listeners: {
				show: function(){
					this.store.load();
				},
				rowdblclick: function (grid, rowClicked, e) {
					var selectionModel = grid.getSelectionModel();
					var record = selectionModel.getSelected();
					
					if(record.data.extension == 'folder'){
						GO.linkHandlers["GO\\Files\\Model\\Folder"].call(this, record.data.id);
					} else {
						GO.linkHandlers["GO\\Files\\Model\\File"].call(this, record.data.id);
					}
				},
				scope:this
			}
			
		});
		GO.files.PortletFolderBrowserGrid.superclass.initComponent.call(this);
	}
});

GO.files.FolderbrowserTabPanel = Ext.extend(Ext.TabPanel, {
	initComponent: function () {

		Ext.apply(this, {
			folderId: 0,
			activeTab: 0,
			height: 300,
			enableTabScroll: true,
			deferredRender: false,
			border: false,
			anchor: '100% 100%',
			listeners: {
				tabChange: function (tabPanel, tab) {

				},
				scope: this
			},
			items: [
			]
		});

		GO.files.FolderbrowserTabPanel.superclass.initComponent.call(this);
	},
	setFolderId: function (folderId) {
		this.folderId = folderId;
		this.updateTabs();
	},
	updateTabs: function () {

		//Get the folders that are a child of the selected folder.
		GO.request({
			url: 'files/folder/list',
			params: {
				folder_id: this.folderId
			},
			scope: this,
			success: function success(response, options, result) {
				//Make a new tab for each of the subfolders.
				for(var i=0; i<result.results.length;i++){
					if(result.results[i].extension == 'folder'){
						this.addTab(result.results[i]);
					}
				}
				
				this.doLayout();
				this.setActiveTab(0);
			},
			fail: function () {
				// If something fails with listing the folder, then remove the portlet. (Ususally an access denied error.)
				this.ownerCt.removePortlet();
			}
		});
		

		//For each tab, get the underlaying files/folders

	},
	
	addTab : function(folderObj){
		
		var panelConfig = {
			title:folderObj.name,
			name:folderObj.name,
			path: folderObj.path,
			folderId: folderObj.id
		};
		
		this.add(new GO.files.PortletFolderBrowserGrid(panelConfig));
	}

});

GO.mainLayout.onReady(function(){
	if(GO.summary)
	{
		GO.summary.portlets['portlet-folder-browser']={
			multiple:true,
			settings:{
				folderId:0,
				folderPath:''
			},
//			folderBrowserTabPanel:folderBrowserTabPanel,
			portletType: 'portlet-folder-browser',
			title: GO.files.lang.folderBrowserPortlet,
			layout:'fit',
			height:200,
			tools: [{
				id: 'gear',
				handler: function(e, target, panel){
					
					if(!this.selectFolderDialog){
						this.selectFolderDialog = new GO.files.SelectFolderDialog({
							value: panel.settings.folderPath,
							handler:function(fs, path, fullResponse){
								panel.settings.folderPath = path;
								panel.settings.folderId = fullResponse.id;
								panel.mainPanel.saveActivePortlets();
								panel.update(path,fullResponse.id);
							}
						});
					}
					
					this.selectFolderDialog.show();
				}
			},{
				id:'close',
				handler: function(e, target, panel){
					panel.removePortlet();
				}
			}],
			
			update:function(path,id){
								
				if(!this.folderBrowserTabPanel){
					this.folderBrowserTabPanel = new GO.files.FolderbrowserTabPanel();
					this.add(this.folderBrowserTabPanel);
				}
				
				// Remove all panels from the tabs
				this.folderBrowserTabPanel.removeAll();
				
				this.setTitle(GO.files.lang.folder +': '+path);
				this.folderBrowserTabPanel.setFolderId(id);
			},
			
			listeners:{
				render:function(){
					this.update(this.settings.folderPath, this.settings.folderId);
				}
			},
			autoHeight:true			
		};
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: PortletExpiredFilesGrid.js 17837 2014-01-17 14:29:56Z wsmits $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */
GO.files.PortletExpiredFilesGrid = Ext.extend(GO.grid.GridPanel, {
	
	initComponent: function () {

		Ext.apply(this, {
			layout: 'fit',
			height: 300,
			paging: true,
			autoExpandColumn: 'name',
			sm: new Ext.grid.RowSelectionModel(),
			loadMask: true,
			noDelete: true,
			standardTbar: false,
			store: new GO.data.JsonStore({
				root: 'results',
				totalProperty:'total',
				remoteSort: true,
				url: GO.url("files/file/expiredList"),
				id: 'id',
				fields: ['type_id', 'id', 'name', 'type', 'size', 'mtime', 'extension', 'timestamp', 'thumb_url', 'path', 'acl_id', 'locked_user_id', 'locked', 'folder_id', 'permission_level', 'readonly', 'unlock_allowed', 'handler', 'content_expire_date']
			}),
			view: new Ext.grid.GridView({
				emptyText: GO.lang['strNoItems'],
				getRowClass: function (record, rowIndex, rp, ds) {
					return '';
				}
			}),
			border: false,
			cm: new Ext.grid.ColumnModel({
				defaults: {
					sortable: true
				},
				columns: [{
						id: 'name',
						header: GO.lang['strName'],
						dataIndex: 'name',
						renderer: function (v, meta, r) {
							var cls = r.get('acl_id') > 0 && r.get('readonly') == 0 ? 'folder-shared' : 'filetype filetype-' + r.get('extension');
							if (r.get('locked_user_id') > 0)
								v = '<div class="fs-grid-locked">' + v + '</div>';

							return '<div class="go-grid-icon ' + cls + '" style="float:left;">' + v + '</div>';
						}
					}, {
						id: 'type',
						header: GO.lang.strType,
						dataIndex: 'type',
						sortable: true,
						hidden: true,
						width: 100
					}, {
						id: 'size',
						header: GO.lang.strSize,
						dataIndex: 'size',
						renderer: function (v) {
							return  v == '-' ? v : Ext.util.Format.fileSize(v);
						},
						hidden: true,
						width: 100
					}, {
						id: 'mtime',
						header: GO.lang.strMtime,
						dataIndex: 'mtime',
						hidden: true,
						width: 110
					},{
						id: 'content_expire_date',
						header: GO.files.lang.contentExpiresAt,
						dataIndex: 'content_expire_date',
						width: 130
					}]
			}),
			listeners: {
				render: function(){
					this.store.load();
				},
				rowdblclick: function (grid, rowClicked, e) {
					var selectionModel = grid.getSelectionModel();
					var record = selectionModel.getSelected();
					
					if(record.data.extension == 'folder'){
						GO.linkHandlers["GO\\Files\\Model\\Folder"].call(this, record.data.id);
					} else {
						GO.linkHandlers["GO\\Files\\Model\\File"].call(this, record.data.id);
					}
				},
				scope:this
			}
			
		});
		GO.files.PortletExpiredFilesGrid.superclass.initComponent.call(this);
	}
});

GO.mainLayout.onReady(function(){
	if(GO.summary)
	{
		GO.summary.portlets['portlet-expired-files']={
			multiple:true,
			portletType: 'portlet-expired-files',
			title: GO.files.lang.expiredFilesPortlet,
			layout:'fit',
			tools: [{
//				id: 'gear',
//				handler: function(e, target, panel){
////					console.log(panel.mainPanel);
//					console.log(panel.settings);
////					
////					if(!panel.settings){
////						panel.settings = {};
////					} 
////					panel.settings.test1 = 'TESTJE';
////					panel.mainPanel.saveActivePortlets();
//				}
//			},{
				id:'close',
				handler: function(e, target, panel){
					panel.removePortlet();
				}
			}],
			items: [],
			autoHeight:true			,
			listeners:{
				render:function(){
					
					if(!this.portletExpiredFilesGrid){
						this.portletExpiredFilesGrid = new GO.files.PortletExpiredFilesGrid();
						this.add(this.portletExpiredFilesGrid);
					}

				}
			}
		};
	}
});

GO.mainLayout.onReady(function(){
	if(GO.summary)
	{
		var recentFilesGrid = new GO.files.RecentFilesGrid();

		GO.summary.portlets['portlet-files']=new GO.summary.Portlet({
			id: 'portlet-files',
			title: GO.files.lang.recentFiles,
			layout:'fit',
			tools: [{
				id:'close',
				handler: function(e, target, panel){
					panel.removePortlet();
				}
			}],
			items: recentFilesGrid,
			autoHeight:true
		});
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: FileBrowser.js 21003 2017-03-28 11:41:27Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */


Ext.namespace("GO.files");

//GO.files.FileRecord = Ext.data.Record.create([
//{
//	name: 'type_id',
//	type: 'string'
//},
//{
//	name: 'id',
//	type: 'string'
//},
//{email_files
//	name: 'name',
//	type: 'string'
//},
//{
//	name: 'type',
//	type: 'string'
//},
//{
//	name: 'mtime'
//},
//{
//	name: 'extension'
//},
//{
//	name: 'timestamp'
//},
//{
//	name: 'thumb_url',
//	type: 'string'
//}
//]);

/*
 *
 * if config.treeRootVisible == false (default) then the tree will load automatically!
 *
 */

GO.files.FileBrowser = function(config){

	if(!config)
	{
		config = {};
	}
	if(!config.id)
		config.id=Ext.id();

	this.westPanel = new Ext.Panel({
		region: 'west',
		layout: 'border',
		width: 200,
		split: true,
		id: 'fs-tree-bookmarks-panel-'+config.id,
		items : [
			this.treePanel = new GO.files.TreePanel({
				region:'center',
				split:true,
				width: 200,
				collapsed: config.treeCollapsed,
				collapsible:true,
				collapseMode:'mini',
				header:false,
				ddAppendOnly: true,
				ddGroup : 'FilesDD',
				enableDD:true
			}),
			this.bookmarksGrid = new GO.files.BookmarksGrid({
				region: 'south'
			})
		]
	});
	
	//select the first inbox to be displayed in the messages grid
	
	this.treePanel.getRootNode().on('load', function(node)
	{
		//var grid_id = !this.treePanel.rootVisible && node.childNodes[0] ? node.childNodes[0].id : node.id;
		if(!this.folder_id)
		{
			this.folder_id=node.childNodes[0].id;
		}
		this.setFolderID(this.folder_id);
		
		this.ready=true;
		this.fireEvent('filebrowserready', this);
	}, this, {single:true});
	
	
	this.treePanel.getLoader().on('load', function()
	{		
		
		
		if(!this.folder_id)
		{
			this.folder_id=this.treePanel.getRootNode().childNodes[0].id;
		}
		this.setFolderID(this.folder_id);
		
	}, this);
	

	this.treePanel.on('click', function(node)	{
		this.setFolderID(node.id, true);
	}, this);

	this.treePanel.on('contextmenu', function(node, e){
		e.stopEvent();

		var selModel = this.treePanel.getSelectionModel();

		if(!selModel.isSelected(node))
		{
			selModel.clearSelections();
			selModel.select(node);
		}

		var records = this.getSelectedTreeRecords();

		var coords = e.getXY();
		this.filesContextMenu.showAt(coords, records, 'tree');
	}, this);

	this.treePanel.on('beforenodedrop', function(e){

		if(e.data.selections)
		{
			var selections = e.data.selections;
		}else
		{
			var record = {};
			record.data={};
			record.data['extension']='folder';
			record.data['id']=e.data.node.id;
			record.data['type_id']='d:'+e.data.node.id;
			var selections = [record];
		}

		this.paste('cut', e.target.id, selections);
	},
	this);

	this.treePanel.on('nodedragover', function(dragEvent){

		if(!dragEvent.dropNode)
		{

			//comes from grid, don't allow it to paste it into a child
			for(var i=0;i<dragEvent.data.selections.length;i++)
			{
				if(dragEvent.data.selections[i].data.extension=='folder')
				{
					var moveid = dragEvent.data.selections[i].data.id;
					var parentid = dragEvent.data.selections[i].data.parent_id;
					var targetid = dragEvent.target.id;

					if(moveid==targetid || parentid==targetid)
					{
						return false;
					}

					var dragNode = this.treePanel.getNodeById(moveid);
					if(dragNode.parentNode.id == targetid || dragEvent.target.isAncestor(dragNode))
					{
						return false;
					}
					return true;
				}
			}
		}else
		{
			var parentId = this.treePanel.getNodeById(dragEvent.dropNode.id).parentNode.id;
			if(parentId == dragEvent.target.id)
			{
				return false
			}
			return true;
		}
	}, this);


	var fields ={
		fields:['type_id', 'id','name','type', 'size', 'mtime', 'extension', 'timestamp', 'thumb_url','path','acl_id','locked_user_id','locked','folder_id','permission_level','readonly','unlock_allowed','handler', 'content_expire_date'],
		columns:[{
			id:'name',
			header:GO.lang['strName'],
			dataIndex: 'name',
			renderer:function(v, meta, r){
				var cls = r.get('acl_id')>0 && r.get('readonly')==0 ? 'folder-shared' : 'filetype filetype-'+r.get('extension');
				if(r.get('locked_user_id')>0)
					v = '<div class="fs-grid-locked">'+v+'</div>';

				return '<div class="go-grid-icon '+cls+'" style="float:left;">'+v+'</div>';
			}
		},{
			id:'type',
			header:GO.lang.strType,
			dataIndex: 'type',
			sortable:true,
			hidden:true,
			width:100
		},{
			id:'size',
			header:GO.lang.strSize,
			dataIndex: 'size',
			renderer: function(v){
				return  v=='-' ? v : Ext.util.Format.fileSize(v);
			},
			hidden:true,
			width:100
		},{
			id:'mtime',
			header:GO.lang.strMtime,
			dataIndex: 'mtime',
			width:110
		}]
	};

	if(GO.customfields)
	{
		GO.customfields.addColumns("GO\\Files\\Model\\File", fields);
	}

	this.gridStore = new GO.data.JsonStore({
//		url: GO.settings.modules.files.url+'json.php',
//		baseParams: {
//			'task': 'grid'
//		},
//		root: 'results',
//		totalProperty: 'total',
		url:GO.url("files/folder/list"),
		baseParams: {
			'query' : ''
		},
		id: 'type_id',
		fields:fields.fields,
		remoteSort:true
	});

	this.gridStore.on('load', this.onStoreLoad, this);
	
	
	
	
	
	
	if(config.filesFilter)
	{
		this.setFilesFilter(config.filesFilter);
	}

	this.gridPanel = new GO.files.FilesGrid({
		id:config.id+'-fs-grid',
		store: this.gridStore,
		deleteConfig: {
			scope:this,
			success:function(){
				var activeNode = this.treePanel.getNodeById(this.folder_id);
				if(activeNode)
				{
					activeNode.reload();
				}
			}
		},
		cm:new Ext.grid.ColumnModel({
			defaults:{
				sortable:true
			},
			columns:fields.columns
		})
	});

	this.gridPanel.on('delayedrowselect', function (grid, rowIndex, r){
		this.fireEvent('fileselected', this, r);
	}, this);


	this.gridPanel.on('render', function(){
		//enable row sorting
		var DDtarget = new Ext.dd.DropTarget(this.gridPanel.getView().mainBody,
		{
			ddGroup : 'FilesDD',
			copy:false,
			notifyOver : this.onGridNotifyOver,
			notifyDrop : this.onGridNotifyDrop.createDelegate(this)
		});
	}, this);

	this.gridPanel.on('rowdblclick', this.onGridDoubleClick, this);

	/*
	 * Handles saving of locked state by the admin of the folder.
	 **/
	this.gridPanel.on('beforestatesave',function(grid, state){
		if(this.gridStore.reader.jsonData.lock_state){

			if (this.gridStore.reader.jsonData.may_apply_state)
				this.saveCMState(state);

			//cancel regular state save
			return false;
		}
	},this);


this.filesContextMenu = new GO.files.FilesContextMenu();

	this.filesContextMenu.on('properties', function(menu, records){
		this.showPropertiesDialog(records[0]);
	}, this);

	this.filesContextMenu.on('cut', function(menu, records){
		this.onCutCopy('cut', records);
	}, this);

	this.filesContextMenu.on('copy', function(menu, records){
		this.onCutCopy('copy', records);
	}, this);

	this.filesContextMenu.on('delete', function(menu, records, clickedAt){
		this.onDelete(clickedAt);
	}, this);

	this.filesContextMenu.on('compress', function(menu, records, clickedAt){
		this.onCompress(records);
	}, this);

	this.filesContextMenu.on('decompress', function(menu, records){
		this.onDecompress(records);
	}, this);

	this.filesContextMenu.on('download_link', function(menu, records, clickedAt, email){
		this.onDownloadLink(records,email);
	}, this);


	this.filesContextMenu.on('email_files', function(menu, records){
		this.emailFiles(records);
	}, this);
	
	this.filesContextMenu.on('addBookmark', function(menu, folderId){
		this.bookmarksGrid.store.load();
	}, this);

	this.filesContextMenu.on('download_selected', function(menu, records, clickedAt){
		
		this.onDownloadSelected(records);
	}, this);
	this.filesContextMenu.on('batchEdit', function(menu, records, clickedAt){
		var ids = [];
		Ext.each(records, function (selected) {
			
			if(selected.get('locked')) {
				// error
				Ext.MessageBox.alert(GO.lang['strError'], GO.files.lang.fileIsLocked + " :: " + selected.get('name'));
				return false;
			} else if(selected.get('type') == 'Folder') {
				// error
				Ext.MessageBox.alert(GO.lang['strError'], GO.files.lang.dontEditFolder + " :: " + selected.get('name'));
				return false;
			} else {
				ids.push(selected.get('id'));
			}
		});
		
		if(ids.length > 0) {
			
			
			GO.base.model.showBatchEditModelDialog('GO\\Files\\Model\\File', ids, 'id',{}, 'id,folder_id,type_id,type,size,unlock_allowed,timestamp,thumb_url,readonly,permission_level,path,mtime,locked_user_id,locked,handler,extension,acl_id,name,status_id,muser_id,user_id,expire_time,random_code,delete_when_expired' ,GO.files.lang.editSelection);
		}

	}, this);

//	this.filesContextMenu= this.filesContextMenu;

	this.gridPanel.on('rowcontextmenu', this.onGridRowContextMenu, this);


	this.newMenu = new Ext.menu.Menu({
		//id: 'new-menu',
		items: []
	});

	this.newButton = new Ext.Button({
		text:GO.lang.cmdNew,
		iconCls: 'btn-add',
		menu: this.newMenu
	});

        var quotaPercentage = (GO.settings.disk_quota && GO.settings.disk_quota>0) ? GO.settings.disk_usage/GO.settings.disk_quota : 0;

	this.locationPanel = new Ext.Panel({
		region:'north',
		border:false,
		baseCls:'x-plain',
		height:32,
		labelWidth:75,
		plain:true,
                layout: 'form',
//		cls:'go-files-location-panel',
		resizable:false,
                split:true,
		minSize:40,
		maxSize:40,
//		height:40,
		forceLayout:true,
                padding: '5px',
		items: [{
				xtype: 'compositefield',
				border: false,
				anchor: '100%',
				fieldLabel:GO.lang.strLocation,
				items: [
					this.locationTextField = new Ext.form.TextField({
						name:'files-location',
						flex : 1
					}),
					this.quotaBar = new Ext.ProgressBar({
						width: 200,
						value: quotaPercentage
					}),
					this.searchField = new GO.form.SearchField({
						store: this.gridStore,
						width: 230,
						listeners: {
							scope : this,
							search : function() {
								this.fireEvent('search');
							},
							reset : function() {
								this.fireEvent('refresh');
							}
						}
					})
				]
			}]
	});
        
        //if(!GO.settings.disk_quota)
          //  this.quotaBar.hidden = true;

	this.upButton = new Ext.Button({
		iconCls: 'btn-up',
		text: GO.lang.up,
		cls: 'x-btn-text-icon',
		handler: function(){
			if (GO.util.empty(this.gridStore.baseParams['query'])){
					this.setFolderID(this.parentID);
					this.updateLocation();
			}else{
					Ext.MessageBox.alert('',GO.files.lang['notInSearchMode']);
			}
		},
		scope: this,
		disabled:true
	});

	this.pasteButton = new Ext.Button({
		iconCls: 'btn-paste',
		text: GO.lang.paste,
		cls: 'x-btn-text-icon',
		handler: this.onPaste,
		scope: this,
		disabled:true
	});

	this.deleteButton = new Ext.Button({
		iconCls: 'btn-delete',
		text: GO.lang.cmdDelete,
		cls: 'x-btn-text-icon',
		handler: function(){
			this.onDelete('grid');
		},
		scope: this
	});

	this.cutButton= new Ext.Button({
		iconCls: 'btn-cut',
		text: GO.lang.cut,
		cls: 'x-btn-text-icon',
		handler: function(){
			var records = this.getSelectedGridRecords();
			this.onCutCopy('cut', records);
		},
		scope: this
	});
	this.copyButton = new Ext.Button({
		iconCls: 'btn-copy',
		text: GO.lang.copy,
		cls: 'x-btn-text-icon',
		handler: function(){
			var records = this.getSelectedGridRecords();
			this.onCutCopy('copy', records);
		},
		scope: this
	});
	this.emptyListButton = new Ext.Button({
		iconCls: 'btn-refresh',
		text: GO.files.lang.emptyList,
		cls: 'x-btn-text-icon',
		hidden:true,
		handler: function(){
			this.gridStore.baseParams.empty_new_files=true;
			this.gridStore.load();
			delete this.gridStore.baseParams.empty_new_files;
		},
		scope: this
	});

	var tbar = [{
	      	 	xtype:'htmlcomponent',
			html:GO.files.lang.name,
			cls:'go-module-title-tbar'
		}];

	tbar.push(this.newButton);

	this.uploadItem = new GO.base.upload.PluploadMenuItem({
		text: GO.files.lang.files,
		upload_config: {
			listeners: {
				scope:this,
				beforestart: function(uploadpanel) {
					//uploadpanel.uploader.settings.url = '/path/to/upload/handler?_runtime=' + uploadpanel.runtime;
					
					
				},
				uploadstarted: function(uploadpanel) {
					this.setDisabled(true);
				},
				uploadcomplete: function(uploadpanel, success, failures) {
					this.setDisabled(false);
					if ( success.length ) {
						this.sendOverwrite({
							upload:true

						});
						if(!failures.length){
							uploadpanel.onDeleteAll();
							
							if(GO.settings.upload_quickselect !== false)
								uploadpanel.ownerCt.hide();
						}
					}
				}
			}
		}
	});

	this.jUploadItem = new Ext.menu.Item({
		iconCls: 'btn-upload',
		text : GO.lang.folderUpload,
		handler : function() {
			if ( GO.util.empty(this.gridStore.baseParams['query']) ) {
				GO.currentFilesStore=this.gridStore;
				
				window.open(GO.url('files/jupload/renderJupload'));				
				
				Ext.MessageBox.confirm("Uploader", "Please open the upload program and upload your files. Click 'Yes' when the upload is done.",function(btn) {
					
					if(btn == 'yes') {
						this.sendOverwrite({upload:true});
					}
				}, this);

			} else {
				Ext.MessageBox.alert('',GO.files.lang['notInSearchMode']);
			}
		},
		scope : this
	});

	this.uploadMenu = new Ext.menu.Menu({
		items: [
			this.uploadItem,
			this.jUploadItem
		]
	});

	this.uploadButton = new Ext.Button({
		text:GO.lang.upload,
		iconCls: 'btn-upload',
		menu: this.uploadMenu
	});

	if(!config.hideActionButtons)
	{
		tbar.push(this.uploadButton);
		tbar.push('-');
	}


	tbar.push(this.upButton);
	tbar.push({
		iconCls: "btn-refresh",
		text:GO.lang.cmdRefresh,
		handler: function(){
                    
			this.refresh(true);
		},
		scope:this
	});

	if(!config.hideActionButtons)
	{
		tbar.push('-');
		tbar.push(this.copyButton);
		tbar.push(this.cutButton);
		tbar.push(this.pasteButton);
		tbar.push('-');
		tbar.push(this.deleteButton);
		tbar.push('-');
	}

	tbar.push(this.thumbsToggle = new Ext.Button({
		text: GO.files.lang.thumbnails,
		iconCls: 'btn-thumbnails',
		enableToggle: true,
		toggleHandler: function(item, pressed){
			if(pressed)
			{
				//this.thumbsPanel.setStore(this.gridStore);
				this.cardPanel.getLayout().setActiveItem(1);
			}else
			{
				//this.thumbsPanel.setStore(false);
				this.cardPanel.getLayout().setActiveItem(0);
			}

			var thumbs = this.gridStore.reader.jsonData.thumbs=='1';
			if(thumbs!=pressed)
				GO.request({
					url:'files/folderPreference/submit',
					params: {
						folder_id: this.folder_id,
						thumbs: pressed ? '1' : '0'
					}
				});
		},
		scope:this
	}));

	if(!config.hideActionButtons)
	{
		tbar.push('-');
		tbar.push(this.emptyListButton);

	}

	tbar.push(this.stateLockedButton = new Ext.Button({
		iconCls: 'btn-settings',
		text: GO.files.lang.stateLocked,
		cls: 'x-btn-text-icon',
		hidden: true,
		disabled: true,
		scope: this
	}));

	config.keys=[{
		ctrl:true,
		key: Ext.EventObject.C,
		fn:function(){
			var records = this.getSelectedGridRecords();
			this.onCutCopy('copy', records);
		},
		scope:this
	},{
		ctrl:true,
		key: Ext.EventObject.X,
		fn:function(){
			var records = this.getSelectedGridRecords();
			this.onCutCopy('cut', records);
		},
		scope:this
	},{
		ctrl:true,
		key: Ext.EventObject.V,
		fn:function(){
			this.onPaste();
		},
		scope:this
	}];


	config['layout']='border';
	config['tbar']=new Ext.Toolbar({
		cls:'go-head-tb',
		items: tbar
	});

	this.thumbsPanel = new GO.files.ThumbsPanel({
		store:this.gridStore
	});

	this.thumbsPanel.view.on('click', function(view, index,node,e){
		var record = view.store.getAt(index);
		this.fireEvent('fileselected', this, record);
	}, this);

	this.thumbsPanel.view.on('dblclick', function(view, index, node, e){

		var record = view.store.getAt(index);

		this.fireEvent('filedblclicked', this, record);

		if(record.data.extension=='folder')
		{
			this.setFolderID(record.data.id, true);
		}else
		{
			if(this.fileClickHandler)
			{
				this.fileClickHandler.call(this.scope, record);
			}else
			{
				//GO.files.openFile({id:record.data.id});
				record.data.handler.call(this);
			}
		}
	}, this);

	this.thumbsPanel.view.on('contextmenu', function(view, index, node, e){

		if(!view.isSelected(index))
		{
			view.clearSelections();
			view.selectRange(index, index);
		}
		var records = view.getSelectedRecords();

		e.stopEvent();
		this.contextTreeID = node.id;

		var coords = e.getXY();
		this.filesContextMenu.showAt(coords, records);

	}, this);

	this.thumbsPanel.on('drop', function(targetID, dragRecords){
		this.paste('cut', targetID, dragRecords);
	}, this);

	this.cardPanel =new Ext.Panel({
		region:'center',
		layout:'card',
		id:config.id+'-card-panel',
		activeItem:0,
		deferredRender:false,
		border:false,
		anchor:'100% 100%',
		items:[this.gridPanel, this.thumbsPanel]
	});




	this.eastPanel = new Ext.Panel({
		region:'east',
		layout:'card',
		activeItem: 0,
		//items:[this.filePanel, this.folderPanel],
		collapsed:config.filePanelCollapsed,
		width:450,
		collapseMode:'mini',
		collapsible:true,
		hideCollapseTool:true,
		split:true,
		border:false,
		id: config.id+'fs-east-panel'
	});


	this.filePanel = new GO.files.FilePanel({
		id:config.id+'-file-panel',
		expandListenObject:this.eastPanel
	});
	this.eastPanel.add(this.filePanel);

	this.folderPanel = new GO.files.FolderPanel({
		id:config.id+'-folder-panel',
		hidden:true,
		expandListenObject:this.eastPanel
	});
	this.eastPanel.add(this.folderPanel);


	config['items']=[this.locationPanel, this.westPanel,this.cardPanel,this.eastPanel];

	GO.files.FileBrowser.superclass.constructor.call(this, config);

	

	this.addEvents({
		fileselected : true,
		filedblclicked : true,
                refresh : true,
                folderIdSet : true,
                rootIdSet : true,
                search : true
	});

	this.on('fileselected',function(grid, r){
		if(r.data.extension!='folder'){
//			this.folderPanel.setVisible(false);
//			this.filePanel.show()
			this.eastPanel.getLayout().setActiveItem(this.filePanel);

			this.filePanel.load(r.id.substr(2));
		}else
		{
//			this.filePanel.setVisible(false);
//			this.folderPanel.show();
			this.eastPanel.getLayout().setActiveItem(this.folderPanel);

			this.folderPanel.load(r.id.substr(2));
		}

	}, this);

	this.bookmarksGrid.on('bookmarkClicked', function(bookmarksGrid,bookmarkRecord){
		this.setFolderID(bookmarkRecord.data['folder_id']);
	},this);
        
    this.on('beforeFolderIdSet',function(){

      this.searchField.setValue('');
      delete this.gridStore.baseParams['query'];

      // turn on buttons
      if (!GO.util.empty(this.gridStore.reader.jsonData))
        this.setWritePermission(this.gridStore.reader.jsonData.permission_level);
      this._enableFilesContextMenuButtons(true);
    },this);

    this.on('folderIdSet',function(){

      this.searchField.setValue('');
      delete this.gridStore.baseParams['query'];

      // turn on buttons
      if (!GO.util.empty(this.gridStore.reader.jsonData))
        this.setWritePermission(this.gridStore.reader.jsonData.permission_level);
      this._enableFilesContextMenuButtons(true);
    },this);

    this.on('refresh',function(){

      this.searchField.setValue('');
      delete this.gridStore.baseParams['query'];

      // turn on buttons
      if (!GO.util.empty(this.gridStore.reader.jsonData))
        this.setWritePermission(this.gridStore.reader.jsonData.permission_level);
      this._enableFilesContextMenuButtons(true);
    },this);

    this.on('search',function(){

      // turn off buttons
	  this.filesContextMenu.compressButton.setDisabled(true);
      this.filesContextMenu.decompressButton.setDisabled(true);
      //this._enableFilesContextMenuButtons(false);
      this.setWritePermission(0);

    },this);

}

Ext.extend(GO.files.FileBrowser, Ext.Panel,{
	ready:false,
	cls: 'fs-filebrowser',

	fileClickHandler : false,
	scope : this,
//	pasteSelections : Array(),
	/*
	 * cut or copy
	 */
//	pasteMode : 'cut',

	path : '',

        _enableFilesContextMenuButtons : function(enable) {
            this.filesContextMenu.cutButton.setDisabled(!enable);
            this.filesContextMenu.copyButton.setDisabled(!enable);
            this.filesContextMenu.compressButton.setDisabled(!enable);
            this.filesContextMenu.decompressButton.setDisabled(!enable);
            this.filesContextMenu.createDownloadLinkButton.setDisabled(!enable);
            
            if (!GO.util.empty(this.filesContextMenu.gotaButton))
                this.filesContextMenu.gotaButton.setDisabled(!enable);
            
            if (!GO.util.empty(this.filesContextMenu.downloadLinkButton))
                this.filesContextMenu.downloadLinkButton.setDisabled(!enable);
            
            if (!GO.util.empty(this.filesContextMenu.emailFilesButton))
                this.filesContextMenu.emailFilesButton.setDisabled(!enable);
							
			this.filesContextMenu.downloadSelectedFilesButton.setDisabled(!enable);
        },

	saveCMState: function(state) {
		GO.request({
			url: "files/folder/submit",
			params : {
				'id' : this.folder_id,
				'cm_state' : Ext.encode(state)
			},
			scope: this
		})
	},

	onStoreLoad : function(store){
		var state;

		if (store.reader.jsonData.lock_state && store.reader.jsonData.cm_state!='') {
			state = Ext.decode(store.reader.jsonData.cm_state);
		}else
		{
			state = Ext.state.Manager.get(this.gridPanel.id);
		}
		
		
		

		if (store.reader.jsonData.disk_usage!==null ) {
			GO.settings.disk_usage = store.reader.jsonData.disk_usage;
		} else {
			delete GO.settings.disk_usage;
		}
		
		if(store.reader.jsonData.disk_quota !== null) {
			GO.settings.disk_quota = store.reader.jsonData.disk_quota;
		} else {
			delete GO.settings.disk_quota;
		}
		
		if(typeof GO.settings.disk_usage!='undefined') {
			this.quotaBar.removeClass('warning');
			this.quotaBar.removeClass('error');
			
			var quotaPercentage = (GO.settings.disk_quota && GO.settings.disk_quota>0) ? GO.settings.disk_usage/GO.settings.disk_quota : 0;
			
			
			var text ='';
			text = '('+GO.settings.disk_usage+'MB) ';
			
			
			if(typeof GO.settings.disk_quota!='undefined') {
				
				if(quotaPercentage==0 && GO.settings.disk_quota==0)
					quotaPercentage=1;
					
					text = Math.round(quotaPercentage*100)+'% ('+ GO.settings.disk_usage+' of '+GO.settings.disk_quota+'MB)';
					this.quotaBar.updateProgress(quotaPercentage, text);
//				}
				
				
					if(quotaPercentage*100 > 99) {
						this.quotaBar.addClass('error');
					} else if(quotaPercentage*100 > 75) {
						this.quotaBar.addClass('warning');
					}
				} else if(GO.settings.disk_usage) {
					this.quotaBar.updateProgress(100, text);
				} else {
					this.quotaBar.updateProgress(0, text);
				}
				
				//Tell plupload the maximun filesize is the disk quota
				
				if(typeof GO.settings.disk_quota != ' undefined') {
					var remainingDiskSpace = Math.ceil((GO.settings.disk_quota-GO.settings.disk_usage)*1024*1024);
				} else {
					var remainingDiskSpace = 0
				}
				this.uploadItem.lowerMaxFileSize(remainingDiskSpace);
			}
			
		//state.sort=store.sortInfo;

		if(state){
			this.gridPanel.applyStoredState(state);

			if(store.reader.jsonData.lock_state && store.reader.jsonData.cm_state==''){
				//locked state is not stored yet do it now
				this.saveCMState(state);
			}
		}


		this.stateLockedButton.setVisible(store.reader.jsonData.lock_state);

		if(!GO.util.empty(store.reader.jsonData.feedback))
		{
			alert(store.reader.jsonData.feedback);
		}

		this.path = store.reader.jsonData.path;

		this.setWritePermission(store.reader.jsonData.permission_level);

		this.thumbsToggle.toggle(store.reader.jsonData.thumbs=='1');

		if(this.folder_id=='new')
		{
			var num_files = store.reader.jsonData.num_files;
			var activeNode = this.treePanel.getNodeById('new');
			if(activeNode)
				activeNode.setText(GO.files.lang.newFiles + " (" + num_files + ")");
		}

		this.emptyListButton.setVisible(this.folder_id=='new' && num_files > 0);

		if(store.reader.jsonData.refreshed)
		{
			var activeNode = this.treePanel.getNodeById(this.folder_id);
			if(activeNode)
			{
				delete activeNode.attributes.children;
				activeNode.reload();
			}
		}

		this.parentID = store.reader.jsonData.parent_id;
		var folderId = store.baseParams.folder_id;
		
		if(!this.initTreeFromGrid && this.parentID && !this.treePanel.getNodeById(folderId)) {
			
			//prevent infite loop when tree doesn't load node because of 500 node limit.
			this.initTreeFromGrid = true;
			
			this.treePanel.getLoader().on('load', function(){
//				this.upButton.setDisabled((!this.parentID || !this.treePanel.getNodeById(this.parentID)));







			}, this);
			this.treePanel.setExpandFolderId(folderId);
			this.treePanel.getRootNode().reload();
		}
		
		if(!this.parentID || !this.treePanel.getNodeById(this.parentID))
		{
			this.upButton.setDisabled(true);
		}else
		{
			this.upButton.setDisabled(false);
		}

		if(this.filePanel.model_id>0 && !store.getById('f:'+this.filePanel.model_id)){
			this.filePanel.reset();
		}

		if(this.folderPanel.model_id>0 && !store.getById('d:'+this.folderPanel.model_id)){
			this.folderPanel.reset();
		}

	},

	/*onShow : function(){

		GO.files.FileBrowser.superclass.onShow.call(this);

		if(!this.loaded)
		{
			this.loadFiles();
		}

	},*/

	setFileClickHandler : function(handler, scope)
	{
		this.fileClickHandler = handler;
		this.scope = scope;
	},

	/**
	 * The filter parameter needs to be a comma separated string of file extensions.
	 * Example: 'jpg,png,xls,xlsx,pdf'
	 * 
	 */
	setFilesFilter : function(filter)
	{
		var old_filter = this.gridStore.baseParams['files_filter'];
		this.gridStore.baseParams['files_filter']=filter;

		if((old_filter != undefined) && old_filter != filter)
		{
			this.gridStore.reload();
		}
	},


	afterRender : function(){
		GO.files.FileBrowser.superclass.afterRender.call(this);

		GO.files.filePropertiesDialogListeners={
			scope:this,
			save:function(dlg, file_id, folder_id){
				if(this.folder_id==folder_id)
				{
					this.getActiveGridStore().load();
				}
			}
		}

		GO.files.folderPropertiesDialogListeners={
			scope:this,
//			save:function(dlg, folder_id){
//				this.setFolderID(folder_id, true);
//			},
			save:function(dlg, folder_id, parent_id){
				if(parent_id==this.folder_id)
				{
					this.setFolderID(parent_id);
				}
				//console.log(parent_id);
				var node = this.treePanel.getNodeById(parent_id);
				if(node)
				{
					delete node.attributes.children;
					node.reload();
				}
			}
		}
		
		if(!this.treePanel.getLoader().baseParams.root_folder_id)
			this.bookmarksGrid.store.load();
		
		this.buildNewMenu();
	},


	setRootID : function(rootID, folder_id)
	{
		
		rootID ? this.searchField.hide() : this.searchField.show();
		rootID ? this.bookmarksGrid.hide() : this.bookmarksGrid.show();
		
		this.doLayout();		
		
		if(this.treePanel.getLoader().baseParams.root_folder_id!=rootID || (folder_id>0 && this.folder_id!=folder_id)){
				
				this.folder_id=folder_id;
				this.treePanel.getLoader().baseParams.root_folder_id=rootID;
				this.treePanel.getRootNode().reload();
				
				this.treePanel.setExpandFolderId(folder_id);
				
//				if(folder_id || folder_id==0)
//					this.setFolderID(this.folder_id);
					//this.refresh();
		}
                
//    this.fireEvent('folderIdSet');
	},

	buildNewMenu : function(){

		this.newMenu.removeAll();

		GO.request({
			url: 'files/template/store',
			success: function(response, options, result)
			{

				this.newMenu.add( {
					iconCls: 'btn-add-folder',
					text: GO.lang.folder,
					cls: 'x-btn-text-icon',
					handler: this.promptNewFolder,
					scope: this
				});

				if(result.results.length)
				{
					this.newMenu.add('-');
					for(var i=0;i<result.results.length;i++)
					{
						var template = result.results[i];

						var menuItem = new Ext.menu.Item({
							iconCls:'filetype filetype-'+template.extension,
							text: template.name,
							template_id:template.id,
							handler: function(item){

								this.createFileFromTemplate(item.template_id);
							},
							scope:this
						});

						this.newMenu.add(menuItem);
					}
				}

				if(GO.settings.modules.files.write_permission)
				{
					this.newMenu.add('-');

					this.newMenu.add({
						iconCls: 'btn-templates',
						text: GO.files.lang.manageTemplates,
						cls: 'x-btn-text-icon',
						handler: function(){
							if(!this.templatesWindow)
							{
								this.templatesWindow = new GO.files.TemplateWindow();
								this.templatesWindow.gridStore.on('datachanged', function(){
									if(!this.templatesWindow.firstLoad)
									{
										this.buildNewMenu();
									}
								}, this);
							}
							this.templatesWindow.show();
						},
						scope: this
					});
				}

			},
			scope: this
		});
	},

	createFileFromTemplate : function(template_id, filename){

		if(!filename || filename == '')
		{
			Ext.Msg.prompt(GO.files.lang.enterName, GO.files.lang.pleaseEnterName,
				function(id, filename){
					if(id=='cancel')
						return false;
					else
						this.createFileFromTemplate(template_id, filename);
				},this);
		}else
		{
			var store = this.getActiveGridStore();

			GO.request({
				url: 'files/template/createFile',
				params:{
					template_id:template_id,
					folder_id:this.folder_id,
					filename: filename
				},
				success: function(response, options, result)
				{
					store.load({
						callback: function(){
							if(result.id)
							{
								GO.files.openFile({id: result.id});
							}
						},
						scope: this
					});
				},
				scope:this
			});
		}
	},

	onDecompress : function(records){

            if (GO.util.empty(this.gridStore.baseParams['query'])) {

		var decompress_sources = [];
		for(var i=0;i<records.length;i++)
		{
			decompress_sources.push(records[i].data.path);
		}

		if(decompress_sources.length)
		{
			var store = this.getActiveGridStore();
			var params = {};
			params['decompress_sources']=Ext.encode(decompress_sources);
			params.working_folder_id=this.folder_id;

			GO.request({
				timeout:300000,
				maskEl:this.getEl(),
				url:'files/folder/decompress',
				params:params,
				success:function(){
					store.load();
				}
			});
		}
               
            } else {
                Ext.MessageBox.alert('', GO.files.lang['notInSearchMode']);
            }
	},

	onCompress : function(records, filename, utf8)
	{

    if (GO.util.empty(this.gridStore.baseParams['query'])) {

			var params = {
				compress_sources: [],
				working_folder_id:this.folder_id,
				destination_folder_id:this.folder_id
			};

			for(var i=0;i<records.length;i++)
			{
				if(records[i].data.parent_id)//for tree
					params.working_folder_id=records[i].data.parent_id;

				params.compress_sources.push(records[i].data.path);
			}
			

			if(!filename || filename == '')
			{
				this.compressRecords = records;
				
				if(!this.compressDialog){
					this.compressDialog = new GO.files.CompressDialog ({
						scope:this,
						handler:function(win, filename, utf8){
							this.onCompress(this.compressRecords, filename, utf8);
						}
					});
				}

				this.compressDialog.show();

			}else
			{
				params.archive_name=filename;
				params.utf8=utf8 ? '1' : '0';
				params.compress_sources=Ext.encode(params.compress_sources);
				var store = this.getActiveGridStore();

				GO.request({
					timeout:300000,
					maskEl:this.getEl(),
					url:'files/folder/compress',
					params:params,
					success:function(){
						store.load();
					}
				});
			}

		} else {
				Ext.MessageBox.alert('', GO.files.lang['notInSearchMode']);
		}

	},
	
	onDownloadSelected : function(records, filename, utf8)	{

		var params = {
			sources: []
		};

		for(var i=0;i<records.length;i++){
			params.sources.push(records[i].data.path);
		}

		if(!filename || filename == ''){
			
			this.compressRecords = records;

			if(!this.compressDialog){
				this.compressDialog = new GO.files.CompressDialog ({
					scope:this,
					handler:function(win, filename, utf8){
						this.onDownloadSelected(this.compressRecords, filename, utf8);
					}
				});
			}

			this.compressDialog.show();
			
		} else {
			
			params.archive_name=filename;
			params.utf8=utf8 ? '1' : '0';
			params.sources=Ext.encode(params.sources);
			
			GO.request({
				timeout:300000,
				maskEl:this.getEl(),
				url:'files/folder/compressAndDownload',
				params:params,
				success:function(response, options, result){
					
					if(!GO.util.empty(result.archive)){
						window.open(GO.url("core/downloadTempFile",{path:result.archive}));
					} else {
						GO.message.alert('No archive build','error');
					}

				}
			});
		}
	},

	getSelectedTreeRecords : function(){
		var sm = this.treePanel.getSelectionModel();
		var nodes = sm.getSelectedNodes();
		var records=[];

		for(var i=0;i<nodes.length;i++)
		{
			records.push({
				data: {
					type_id:'d:'+nodes[i].id,
					id: nodes[i].id,
					extension:'folder',
					path: nodes[i].attributes.path
				}
			});
		}
		return records;
	},

	getSelectedGridRecords : function(){
		//detect grid on selModel. thumbs doesn't have that
		if(this.cardPanel.getLayout().activeItem.selModel)
		{
			var selModel = this.gridPanel.getSelectionModel();
			return selModel.getSelections();
		}else
		{
			return this.thumbsPanel.view.getSelectedRecords();
		}
	},

	getActiveGridStore : function(){
		return this.gridStore;
	},

	onCutCopy : function(pasteMode, records){
		GO.files.pasteSelections=records;
		GO.files.pasteMode=pasteMode;
		if(GO.files.pasteSelections.length)
		{
			this.pasteButton.setDisabled(false);
		}
	},

	onPaste : function(){
            if (GO.util.empty(this.gridStore.baseParams['query']))
		this.paste(GO.files.pasteMode, this.folder_id, GO.files.pasteSelections);
            else
                Ext.MessageBox.alert('', GO.files.lang['notInSearchMode']);
							
		GO.files.pasteSelections = Array();
	},

	onDelete : function(clickedAt){
		if(clickedAt=='tree')
		{
			var records = this.getSelectedTreeRecords();
			GO.deleteItems({
				url:GO.url('files/folder/delete'),
				params:{
					id: records[0].data.id
				},
				count:1,
				callback:function(responseParams){

					if(responseParams.success)
					{
						var treeNode = this.treePanel.getNodeById(records[0].data.id);
						if(treeNode)
						{
							//parentNode is destroyed after remove so keep it for later use
							var parentNodeId = treeNode.parentNode.id;
							treeNode.remove();

							var activeTreenode = this.treePanel.getNodeById(this.folder_id);
							if(!activeTreenode){
								//current folder must have been removed. Let's go up.
								this.setFolderID(parentNodeId);
							}
						}
					}
				},
				scope:this
			});
		}else
		{
			//detect grid on selModel. thumbs doesn't have that
			if(this.cardPanel.getLayout().activeItem.id == this.gridPanel.id)
			{
				this.gridPanel.deleteSelected({
					callback:function(){
						var treeNode = this.treePanel.getNodeById(this.folder_id);
						if(treeNode)
						{
							delete treeNode.attributes.children;
							treeNode.reload();
						}
					},
					scope:this
				});
			}else
			{
				this.thumbsPanel.deleteSelected({
					callback:function(){
						var treeNode = this.treePanel.getNodeById(this.folder_id);
						if(treeNode)
						{
							delete treeNode.attributes.children;
							treeNode.reload();
						}
					},
					scope:this
				});
			}
		}
	},

	emailFiles: function(records) {
		var files = new Array();
		Ext.each(records, function(record) {
			var folderId = record.data.folder_id;
			var id = record.data.id;

			if (!Ext.isEmpty(folderId)) {
				files.push(record.data.path);
			} else {
				GO.email.openFolderTree(id);
			}
		});
		GO.email.emailFiles(files);
	},

	onDownloadLink : function(records,email){
		GO.files.createDownloadLink(records,email);
	},

	onGridNotifyOver : function(dd, e, data){
		var dragData = dd.getDragData(e);
		if(data.grid)
		{
			var dropRecord = data.grid.store.data.items[dragData.rowIndex];
			if(dropRecord)
			{
				if(dropRecord.data.extension=='folder')
				{
					for(var i=0;i<data.selections.length;i++)
					{
						if(data.selections[i].data.id==dropRecord.data.id)
						{
							return false;
						}
					}
					return this.dropAllowed;
				}
			}
		}
		return false;
	},

	onGridNotifyDrop : function(dd, e, data)
	{
		if(data.grid)
		{
			var sm=data.grid.getSelectionModel();
			var rows=sm.getSelections();
			var dragData = dd.getDragData(e);

			var dropRecord = data.grid.store.data.items[dragData.rowIndex];

			if(dropRecord.data.extension=='folder')
			{
				for(var i=0;i<data.selections.length;i++)
				{
					if(data.selections[i].data.id==dropRecord.data.id)
					{
						return false;
					}
				}
				this.paste('cut', dropRecord.data.id, data.selections);
			}
		}else
		{
			return false;
		}
	},

	onGridRowContextMenu : function(grid, rowIndex, e) {
		var selections = grid.getSelectionModel().getSelections();

		var coords = e.getXY();
		this.filesContextMenu.showAt(coords, selections, 'grid');
	},

	paste : function(pasteMode, destination, records)
	{
		var paste_sources = Array();
		//var folderSelected = false;
		for(var i=0;i<records.length;i++)
		{
			paste_sources.push(records[i].data['type_id']);
		/*if(records[i].data['extension']=='folder')
			{
				folderSelected = true;
			}*/
		}

		var params = {
			ids : Ext.encode(paste_sources),
			destination_folder_id : destination,
			paste_mode : pasteMode,
			id : this.folder_id
		};

		this.sendOverwrite(params);

	},


	refresh : function(syncFilesystemWithDatabase){
		
		this.treePanel.setExpandFolderId(this.folder_id);
		
		if(syncFilesystemWithDatabase)
			this.treePanel.getLoader().baseParams.sync_folder_id=this.folder_id;

		
		this.treePanel.getRootNode().reload();
		
		this.setFolderID(this.folder_id);

		if(syncFilesystemWithDatabase)
			delete this.treePanel.getLoader().baseParams.sync_folder_id;

		this.searchField.setValue('');
		delete this.gridStore.baseParams['query'];

		this.filePanel.reload();
                
		this.fireEvent('refresh');
	},

	sendOverwrite : function(params){

		if(!params.command)
			params.command='ask';

		if(!params.destination_folder_id)
			params.destination_folder_id=this.folder_id;

		this.overwriteParams = params;

		this.getEl().mask(GO.lang.waitMsgSave);

		var url = params.upload ? GO.url('files/folder/processUploadQueue') : GO.url('files/folder/paste');

		Ext.Ajax.request({
			url: url,
			params:this.overwriteParams,
			callback: function(options, success, response){

				this.getEl().unmask();

				var pasteSources = Ext.decode(this.overwriteParams.ids);
				var pasteDestination = this.overwriteParams.destination_folder_id;


				//delete params.paste_sources;
				//delete params.paste_destination;

				if(!success)
				{
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strRequestError']);
				}else
				{

					var responseParams = Ext.decode(response.responseText);

					if(!responseParams.success && !responseParams.fileExists)
					{
						if(this.overwriteDialog)
						{
							this.overwriteDialog.hide();
						}
						Ext.MessageBox.alert(GO.lang['strError'], responseParams.feedback);
						this.refresh();
					}else
					{
						if(responseParams.fileExists)
						{
							if(!this.overwriteDialog)
							{

								this.overwriteDialog = new Ext.Window({
									width:500,
									autoHeight:true,
									closeable:false,
									closeAction:'hide',
									plain:true,
									border: false,
									title:GO.lang.fileExists,
									modal:false,
									buttons: [
									{
										text: GO.lang.cmdYes,
										handler: function(){
											this.overwriteParams.overwrite='yes';
											this.sendOverwrite(this.overwriteParams);
										},
										scope: this
									},{
										text: GO.lang.cmdYesToAll,
										handler: function(){
											this.overwriteParams.overwrite='yestoall';
											this.sendOverwrite(this.overwriteParams);
										},
										scope: this
									},{
										text: GO.lang.cmdNo,
										handler: function(){
											this.overwriteParams.overwrite='no';
											this.sendOverwrite(this.overwriteParams);
										},
										scope: this
									},{
										text: GO.lang.cmdNoToAll,
										handler: function(){
											this.overwriteParams.overwrite='notoall';
											this.sendOverwrite(this.overwriteParams);
										},
										scope: this
									},{
										text: GO.lang.cmdCancel,
										handler: function(){
											this.getActiveGridStore().reload();
											this.overwriteDialog.hide();
										},
										scope: this
									}]

								});
								this.overwriteDialog.render(Ext.getBody());
							}

							var t = new Ext.Template(GO.lang.overwriteFile);
							t.overwrite(this.overwriteDialog.body, {
								file: responseParams.fileExists
							});
							this.overwriteDialog.show();
						}else
						{
							//this.getActiveGridStore().reload();
							var store = this.getActiveGridStore();
							if(!pasteDestination || pasteDestination==this.folder_id)
							{
								store.reload();
							}else if(pasteSources)
							{
								for(var i=0;i<pasteSources.length;i++)
								{
									var record = store.getById(pasteSources[i]);
									if(record)
									{
										store.reload();
										break;
									}
								}
							}

							var destinationNode = this.treePanel.getNodeById(pasteDestination);
							if(destinationNode)
							{
								delete destinationNode.attributes.children;
								destinationNode.reload();
							}

							if(pasteSources && params.paste_mode=="cut")
							{
								//remove moved nodes if we cut and paste
								for(var i=0;i<pasteSources.length;i++)
								{
									var arr = pasteSources[i].split(':');
									var node = this.treePanel.getNodeById(arr[1]);
									if(node)
										node.remove();
								}
							}

							if(this.overwriteDialog)
								this.overwriteDialog.hide();
						}
					}
				}
			},
			scope: this
		});

	},

	promptNewFolder : function(){

		if (GO.util.empty(this.gridStore.baseParams['query'])) {
	
			if(!this.newFolderWindow)
			{
				this.newFolderWindow = new GO.files.NewFolderDialog();
				this.newFolderWindow.on('save', function(){
					this.getActiveGridStore().load();

					// problem if folder didn't have a subfolder yet
					// fixed by reloading parent
					var activeNode = this.treePanel.getNodeById(this.folder_id);
					if(activeNode)
					{
						// delete preloaded children otherwise no
						// request will be sent
						delete activeNode.attributes.children;
						activeNode.reload();
					}
				},this);
			}
			this.newFolderWindow.show(this.folder_id);
            	
		} else {
			Ext.MessageBox.alert('', GO.files.lang['notInSearchMode']);
		}
	},

	onGridDoubleClick : function(grid, rowClicked, e){
		var selectionModel = grid.getSelectionModel();
		var record = selectionModel.getSelected();

		this.fireEvent('filedblclicked', this, record);

		if(record.data.extension=='folder')
		{
			this.setFolderID(record.data.id, true);
		}else
		{
			if(this.fileClickHandler)
			{
				this.fileClickHandler.call(this.scope, record);
			}else
			{
				//browsers don't like loading a json request and download dialog at the same time.'
//				if(this.filePanel.loading)
//				{
//					this.onGridDoubleClick.defer(200, this, [grid, rowClicked, e]);
//				}else
//				{
//					GO.files.openFile({id:record.data.id});
					record.data.handler.call(this);
//				}
			}
		}
	},

	setWritePermission : function(permissionLevel)
	{
		var writePermission=permissionLevel>=GO.permissionLevels.write;
		var deletePermission=permissionLevel>=GO.permissionLevels.writeAndDelete;
		var createPermission=permissionLevel>=GO.permissionLevels.create;

		this.newButton.setDisabled(!createPermission);
		this.deleteButton.setDisabled(!deletePermission);
		this.uploadButton.setDisabled(!createPermission);
		this.cutButton.setDisabled(!deletePermission);
                
                this.copyButton.setDisabled(permissionLevel<=0);
                
		this.pasteButton.setDisabled(!writePermission || !GO.files.pasteSelections.length);

	//this.filesContextMenu.deleteButton.setDisabled(!writePermission);
	},

	setFolderID : function(id, expand)
	{
    this.expandTree=expand;
    this.fireEvent('beforeFolderIdSet');
      
		this.folder_id = id;
		//this.gridStore.baseParams['id']=this.thumbsStore.baseParams['id']=id;
		this.getActiveGridStore().baseParams['folder_id']=id;

		this.getActiveGridStore().load({
			callback:function(){
			
				if(this.expandTree)
				{
					var activeNode = this.treePanel.getNodeById(id);
						
					if(activeNode){
						activeNode.expand();
						this.updateLocation();
					}else{						
						this.treePanel.setExpandFolderId(id);
						this.treePanel.getRootNode().reload();	
					}
				}
				this.updateLocation();
				this.focus();
			},
			scope:this
		});
		
	},
	
	updateLocation : function(){
		var activeNode = this.treePanel.getNodeById(this.folder_id);
		
		this.locationTextField.setValue(this.gridStore.reader.jsonData.path);
		
		if(this.treePanel.getRootNode().findChild('id',this.gridStore.baseParams.folder_id)) {
			this.upButton.setDisabled(true);
		} else {
			this.upButton.setDisabled(false);
		}
		
	},

	showGridPropertiesDialog  : function(){
		var selModel = this.gridPanel.getSelectionModel();
		var selections = selModel.getSelections();

		if(selections.length==0)
		{
			GO.errorDialog.show(GO.lang['noItemSelected']);
		}else if(selections.length>1)
		{
			GO.errorDialog.show(GO.files.lang.errorOneItem);
		}else
		{
			this.showPropertiesDialog(selections[0]);
		}
	},

	showPropertiesDialog : function(record)
	{
		if(record.data.extension=='folder')
		{
			GO.files.showFolderPropertiesDialog(record.data.id);
		}else
		{
			GO.files.showFilePropertiesDialog(record.data.id);
		}
	},
	
	onReady : function(fn, scope){
		if(this.ready){
			fn.call(scope, this);
		}else
		{
			this.on('filebrowserready', fn, scope);
		}
	}
});


GO.files.createDownloadLink = function(records,email){

	if(!GO.files.expireDateDialog){
		GO.files.expireDateDialog = new GO.files.ExpireDateDialog();
	}
	
	GO.files.expireDateDialog.show(records,email);
},

GO.files.showFilePropertiesDialog = function(file_id){

	if(!GO.files.filePropertiesDialog)
		GO.files.filePropertiesDialog = new GO.files.FilePropertiesDialog();

	if(GO.files.filePropertiesDialogListeners){

		GO.files.filePropertiesDialog.on(GO.files.filePropertiesDialogListeners);
		delete GO.files.filePropertiesDialogListeners;
	}

	GO.files.filePropertiesDialog.show(file_id);
}

GO.files.showFolderPropertiesDialog = function(folder_id){

	if(!GO.files.folderPropertiesDialog)
		GO.files.folderPropertiesDialog = new GO.files.FolderPropertiesDialog();

	if(GO.files.folderPropertiesDialogListeners){
		GO.files.folderPropertiesDialog.on(GO.files.folderPropertiesDialogListeners);
		delete GO.files.folderPropertiesDialogListeners;
	}

	GO.files.folderPropertiesDialog.show(folder_id);
}



GO.mainLayout.onReady(function(){

//	if(GO.workflowLinkHandlers)
//	{
//		GO.workflowLinkHandlers[6]=function(id, process_file_id){
//			GO.files.showFilePropertiesDialog(id+"", {
//				loadParams:{
//					process_file_id:process_file_id
//				}
//			});
//			GO.files.filePropertiesDialog.tabPanel.setActiveTab(3);
//		}
//	}

	GO.checker.registerRequest("files/notification/unsent",{},function(checker, data){});
});


GO.files.FilesObservable = function(){
	GO.files.FilesObservable.superclass.constructor.call(this);

	this.addEvents({
		'beforeopenfile':true
	})
}
Ext.extend(GO.files.FilesObservable, Ext.util.Observable);

GO.files.filesObservable = new GO.files.FilesObservable();

GO.files.showImageViewer = function(imagesParams){
	if(!this.imageViewer)
	{
		this.imageViewer = new GO.files.ImageViewer({
			closeAction:'hide'
		});
	}
	
	imagesParams["thumbParams"]=Ext.encode({lw:this.imageViewer.width-20,ph:this.imageViewer.height-100});

GO.request({
		url:"files/folder/images",
		params:imagesParams,
		maskEl:Ext.getBody(),
		success:function(response, options, result){
			this.imageViewer.show(result.images, result.index);
		},
		scope:this
	});
}

GO.files.openFile = function(config)
{		
	if(!GO.files.openFileWindow){
		GO.files.openFileWindow =  new GO.files.OpenFileWindow();
	}
	GO.files.openFileWindow.show(config);
}


GO.files.downloadFile = function (fileId){
	window.open(GO.url("files/file/download",{id:fileId,inline:false}));
}

//GO.files.editFile = function (fileId){
//
//	if(GO.settings.modules.gota && GO.settings.modules.gota.read_permission && !GO.util.isAndroid())
//	{
//		if(!deployJava.isWebStartInstalled('1.6.0'))
//		{
//			Ext.MessageBox.alert(GO.lang.strError, GO.lang.noJava);
//		}else
//		{
//			document.location.href=GO.url('gota/file/edit&id='+fileId);
//			return;
//		}
//	}
//	GO.files.downloadFile(fileId);
//}

//for external links
GO.files.showFolder = function(folder_id){

	var fb = GO.mainLayout.openModule("files");
	
	fb.onReady(function(){
		//fb.setRootID(folder_id);
		fb.setFolderID(folder_id, true);
	}, this);
}

GO.files.openFolder = function(id, folder_id)
{
	if(!GO.files.fileBrowser)
	{
		GO.files.fileBrowser=new GO.files.FileBrowser({
			id:'popupfb',
			border:false,
			filePanelCollapsed:true
		});
		GO.files.fileBrowserWin = new GO.Window({
			title: GO.files.lang.fileBrowser,
			height:500,
			width:900,
			layout:'fit',
			border:false,
			maximizable:true,
			collapsible:true,
			closeAction:'hide',
			items: GO.files.fileBrowser
		});
	}
	
	if(!folder_id)
		folder_id=id;
	
	GO.files.fileBrowser.setRootID(id, folder_id);
	GO.files.fileBrowserWin.show();

	return GO.files.fileBrowser;
}

GO.files.createSelectFileBrowser = function(){
	if(!GO.selectFileBrowser)
	{
		GO.selectFileBrowser= new GO.files.FileBrowser({
			border:false,
			filePanelCollapsed:true,
			treeCollapsed:false
		});

		GO.selectFileBrowserWindow = new GO.Window({
			title: GO.lang.strSelectFiles,
			height:500,
			width:750,
			modal:true,
			layout:'fit',
			border:false,
			collapsible:true,
			maximizable:true,
			closeAction:'hide',
			items: GO.selectFileBrowser,
			buttons:[
			{
				text: GO.lang.cmdOk,
				handler: function(){
					var records = GO.selectFileBrowser.getSelectedGridRecords();
					GO.selectFileBrowser.fileClickHandler.call(GO.selectFileBrowser.scope, records[0]);
				},
				scope: this
			},{
				text: GO.lang.cmdClose,
				handler: function(){
					GO.selectFileBrowserWindow.hide();
				},
				scope:this
			}
			]

		});
	}
}

GO.files.isContentExpired = function(contentExpireDateString){
	
	if(GO.util.empty(contentExpireDateString)){
		return false;
	}
	
	var contentExpireDate = Date.parseDate(contentExpireDateString,GO.settings.date_format);

	if(Date.now() >= contentExpireDate.getTime()){
		return true;
	} else {
		return false;
	}
};

GO.linkHandlers["GO\\Files\\Model\\File"]=function(id, record){
	//GO.files.showFilePropertiesDialog(id+"");
	if(!GO.files.linkFileWindow){
		var filePanel = new GO.files.FilePanel();
		GO.files.linkFileWindow= new GO.LinkViewWindow({
			title: GO.files.lang.file,
			items: filePanel,
			filePanel: filePanel,
			closeAction:"hide"
		});
	}
	GO.files.linkFileWindow.filePanel.load(id);
	GO.files.linkFileWindow.show();
	return GO.files.linkFileWindow;
}
GO.linkPreviewPanels["GO\\Files\\Model\\File"]=function(config){
	config = config || {};
	return new GO.files.FilePanel(config);
}


GO.linkHandlers["GO\\Files\\Model\\Folder"]=function(id, record){
	//GO.files.showFilePropertiesDialog(id+"");
	if(!GO.files.linkFolderWindow){
		var filePanel = new GO.files.FolderPanel();
		GO.files.linkFolderWindow= new GO.LinkViewWindow({
			title: GO.files.lang.folder,
			items: filePanel,
			filePanel: filePanel,
			closeAction:"hide"
		});
	}
	GO.files.linkFolderWindow.filePanel.load(id);
	GO.files.linkFolderWindow.show();
	return GO.files.linkFolderWindow;
}
GO.linkPreviewPanels["GO\\Files\\Model\\Folder"]=function(config){
	config = config || {};
	return new GO.files.FolderPanel(config);
}



GO.moduleManager.addModule('files', GO.files.FileBrowser, {
	title : GO.files.lang.files,
	iconCls : 'go-tab-icon-files'
});

GO.files.pasteSelections = new Array();
GO.files.pasteMode = 'copy';

GO.files.BookmarksGrid = function(config) {
	
	var config = config || {};
	
	config.title = GO.files.lang['bookmarks'];
	config.collapsible=true;
	config.stateId='fs-bookmarks';
	config.layout = 'fit';
	config.split = true;
	config.paging = false;
	config.height = 200;
	config.store = new GO.data.JsonStore({
		url:GO.url("files/bookmark/store"),
		id: 'folder_id',
		fields:["folder_id","name"],
		remoteSort:true
	});
	config.columns = [{
		header:GO.lang['strName'],
		dataIndex: 'name',
//					renderer:function(v, metaData,record){
//						return '<div class="go-grid-icon filetype filetype-'+record.get("extension")+'">'+v+'</div>';
//					},
		sortable:true
	}];
	config.view = new  Ext.grid.GridView({
		autoFill:true,
		forceFit:true
	});
	config.sm = new Ext.grid.RowSelectionModel();
	config.loadMask = true;
	
	config.bbar = new GO.SmallPagingToolbar({
//			items:[this.searchField = new GO.form.SearchField({
//				store: config.store,
//				width:120,
//				emptyText: GO.lang.strSearch
//			})],
			store:config.store,
			pageSize:GO.settings.config.nav_page_size
		})
	
	GO.files.BookmarksGrid.superclass.constructor.call(this,config);
	
	this.addEvents({
		'bookmarkClicked' : true,
		'delete' : true
	});
	
	this.on('rowcontextmenu',function(grid,rowIndex,event){		
		this._clickedBookmarkRecord = grid.getStore().getAt(rowIndex);
		if (GO.util.empty(this._contextMenu))
			this._createContextMenu();
		this._contextMenu.showAt(event.getXY());
	},this);
	
	this.on('rowclick',function(grid,rowIndex,event){
		this.fireEvent('bookmarkClicked', this, grid.getStore().getAt(rowIndex));
	},this);
	
};

Ext.extend(GO.files.BookmarksGrid,GO.grid.GridPanel,{
	
	_clickedBookmarkRecord : false,
	
	_createContextMenu : function() {
		this._contextMenu = new Ext.menu.Menu({
			shadow : 'frame',
			minWidth : 180,
			items : [{
				iconCls: 'btn-delete',
				text: GO.lang.cmdDelete,
				cls: 'x-btn-text-icon',
				handler: function(){
					this._promptDelete(this._clickedBookmarkRecord);
				},
				scope: this
			}]
		});
	},
	
	_promptDelete : function(bookmarkRecord) {
		GO.deleteItems({
			url:GO.url('files/bookmark/delete'),
			params:{
				folder_id: bookmarkRecord.data['folder_id']
			},
			count:1,
			callback:function(responseParams){
				if(responseParams.success) {
					this.store.load();
					this.fireEvent('delete', this, bookmarkRecord );
				}
				this._clickedBookmarkRecord = false;
			},
			scope:this
		});
	}
	
});

GO.files.OpenFileWindow = Ext.extend(GO.Window, {
	initComponent : function(){
		this.title=GO.files.lang.selectApplication;
		
		this.list = new GO.grid.SimpleSelectList({
			store: new GO.data.JsonStore({
				url:GO.url('files/file/handlers'),
				fields:['name','cls','handler','iconCls','extension']
			}),
			tpl:new Ext.XTemplate( '<tpl for=".">'+
			'<div id="{dom_id}" class="go-item-wrap fs-handler-icon {iconCls}">{name}</div>'+
			'</tpl>')
		});
		
		this.list.on('click', function(dataview, index){			
				
			var record = dataview.store.getAt(index);			
			eval(record.data.handler);
			
			
			if(this.rememberCB.getValue()){
				GO.request({
					url:'files/file/saveHandler',
					params:{
						cls:record.data.cls,
						extension:record.data.extension
					}
				});
			}
			
			this.list.clearSelections();
			this.hide();
				
		}, this);
		
		this.layout='border';
		this.modal=true;
		this.height=400;			
		this.width=400;
		this.closable=true;
		this.closeAction='hide';	
		
		this.items= [this.panel = new Ext.Panel({
			region:'center',
			autoScroll:true,
			items: this.list,
			cls: 'go-form-panel'
		}),{
			region:'south',
			xtype:'form',
			height:40,
			cls:'go-form-panel',
			items:[this.rememberCB = new Ext.form.Checkbox({
				xtype:'checkbox',
				hideLabel:true,
				boxLabel:GO.files.lang.rememberFileHandler
			})]
		}];
		this.buttons=[{
				text: GO.lang['cmdClose'],
				handler: function(){
					this.hide();
				},
				scope:this
			}];
		
		GO.files.OpenFileWindow.superclass.initComponent.call(this);
	},
	show : function(config){	
		

		Ext.getBody().mask(GO.lang.waitMsgLoad);
		this.list.store.load({
			params:{
				id:config.id,
				path:config.path,
				all:config.all
			},
			callback:function(){
				Ext.getBody().unmask();
				if(this.list.store.getCount()==1)
				{
					var record = this.list.store.getAt(0);			
					eval(record.data.handler);

				}else{				
					GO.files.OpenFileWindow.superclass.show.call(this);
					this.rememberCB.setValue(false);
					
					this.returnedHandler=true;
				}
			},
			scope:this
		});	

	}	
});

GO.files.CompressDialog = Ext.extend(GO.Window,{
	width: 300,
	height:120,
	layout:'fit',
	title:GO.lang.compress,
	focus:function(){
		this.formPanel.form.reset();
		this.formPanel.form.findField('name').focus(true);
	},
	initComponent: function(){
		this.formPanel = new Ext.FormPanel({
			cls:'go-form-panel',
			items:[{
				fieldLabel: GO.files.lang.enterName,
				anchor:'100%',
				xtype:'textfield',
				name: 'name',
				allowBlank:false
			}
//			{
//				xtype:'checkbox',
//				name:'utf8',
//				boxLabel:'Encode filenames for Linux'
//			}
		]
		});
		
		
		this.items=[this.formPanel];
		
		this.buttons=[{
			text:GO.lang.cmdOk,
			handler:function(){
				var f = this.formPanel.form;
				if(f.isValid()){
					this.handler.call(this.scope, this, f.findField('name').getValue());
					this.close();
				}

			},
			scope:this
		}];
	
		GO.files.CompressDialog.superclass.initComponent.call(this);
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: CategoryDialog.js 17533 2014-05-23 11:31:24Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.notes.CategoryDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	jsonPost: true,
	
	initComponent : function(){
		
		Ext.apply(this, {
			titleField:'name',
			title:GO.notes.lang.category,
			formControllerUrl: 'notes/category',
			height:600
		});
		
		GO.notes.CategoryDialog.superclass.initComponent.call(this);	
	},
	buildForm : function () {

		this.propertiesPanel = new Ext.Panel({
			border: false,
			baseParams: {task: 'category'},			
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',waitMsgTarget:true,			
			layout:'form',
			autoScroll:true,
			items:[{
				xtype: 'textfield',
			  name: 'category.name',
				anchor: '100%',
			  allowBlank:false,
			  fieldLabel: GO.lang.strName
			},this.selectUser = new GO.form.SelectUser({
				hiddenName:'category.user_id',
				fieldLabel: GO.lang['strUser'],
				disabled : !GO.settings.has_admin_permission,
				value: GO.settings.user_id,
				anchor: '100%'
			})]
				
		});

		this.addPanel(this.propertiesPanel);	
 
    this.addPermissionsPanel(new GO.grid.PermissionsPanel({fieldName:"category.acl_id"}));    
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: NotesGrid.js 20553 2016-10-25 09:57:14Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.notes.NotesGrid = function(config){
	
	if(!config)
	{
		config = {};
	}



	
	config.title = GO.notes.lang.notes;
	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.store = new GO.data.JsonStore({
		url: GO.url('notes/note/store'),		
		root: 'results',
		id: 'id',
		totalProperty:'total',
		fields: ['id','category_id','user_name',{name:'mtime'},{name:'ctime'},'name','content'],
		remoteSort: true,
		model:"GO\\Notes\\Model\\Note"
	});

	config.store.on('load', function()
	{
		if(config.store.reader.jsonData.feedback)
		{
			alert(config.store.reader.jsonData.feedback);
		}
	},this);

	config.paging=true;

	
	config.columns=[
		{
			header: GO.lang.strName,
			dataIndex: 'name',
			sortable: true
		},
		{
			header: GO.lang.strOwner,
			dataIndex: 'user_name',
			sortable: false,
			hidden:true
		},		{
			header: GO.lang.strCtime,
			dataIndex: 'ctime',
			format: GO.settings.date_format+" "+GO.settings.time_format,			
			hidden:true,
			sortable: true,
			width:110
		},		{
			header: GO.lang.strMtime,
			dataIndex: 'mtime',
			sortable: true,
			width:110
		}
		];
	
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']		
	});
	
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	
	this.searchField = new GO.form.SearchField({
		store: config.store,
		width:320
	});
		    	
	config.tbar = [GO.lang['strSearch'] + ':', this.searchField];
	
	GO.notes.NotesGrid.superclass.constructor.call(this, config);
};


Ext.extend(GO.notes.NotesGrid, GO.grid.GridPanel,{
	

	});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: NoteDialog.js 18911 2015-03-16 14:31:21Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 * @author WilmarVB <wilmar@intermesh.nl>
 */
 
GO.notes.NoteDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	
	customFieldType : "GO\\Notes\\Model\\Note",
	
	modelName : "GO\\Notes\\Model\\Note",
	enableComments: true,
	
//	_passwordChangePermission : true,
	_userInputPassword : false,
	
	jsonPost: true,
	
	initComponent : function(){
		
		Ext.apply(this, {
			titleField:'name',
			goDialogId:'note',
			title:GO.notes.lang.note,
			height: 560,
			formControllerUrl: 'notes/note'
		});
		
		GO.notes.NoteDialog.superclass.initComponent.call(this);	
	},
	
	beforeLoad : function(remoteModelId,config) {
		this._userPermissionPassword = false; //
//		this._passwordChangePermission = true; // before loading is initiated, e.g., with a new note, the user can change the encryption password
		delete this.formPanel.form.baseParams['note.encrypted'];
		delete this.formPanel.form.baseParams['note.userInputPassword1'];
		delete this.formPanel.form.baseParams['note.userInputPassword2'];
		this._userInputPassword = '';
		this.uiPassword1Field.setValue('');
		this.uiPassword2Field.setValue('');
		this.encryptCheckbox.setValue(false);
	},
	
	jsonLoad : function(remoteModelId, config) {
				
		delete this.formPanel.form.baseParams['note.currentPassword'];
		delete this.formPanel.form.baseParams['note.encrypted'];
		delete this.formPanel.form.baseParams['note.userInputPassword1'];
		delete this.formPanel.form.baseParams['note.userInputPassword2'];
		this._userInputPassword = '';
		this.uiPassword1Field.setValue('');
		this.uiPassword2Field.setValue('');
		this.encryptCheckbox.setValue(false);
		
		GO.notes.NoteDialog.superclass.jsonLoad.call(this,remoteModelId,config);
		
	},
	
	afterShowAndLoad : function (remoteModelId, config, responseData){
		
		
//		this._passwordChangePermission = responseData.data.passwordChangePermission;
		
		delete this.formPanel.form.baseParams['note.currentPassword'];
		
		this.contentField.setDisabled(responseData.data.note.attributes.encrypted);
		this._toggleNewPasswordFields(false);
		this.buttonOk.setDisabled(responseData.data.note.attributes.encrypted);
		this.buttonApply.setDisabled(responseData.data.note.attributes.encrypted);
		
		
		if (responseData.data.note.attributes.decrypted) {
				this._toggleNewPasswordFields(true);
				this.encryptCheckbox.setValue(true);
				this._userInputPassword = this.unlockPasswordField.getValue(); // this is the only place this should be set, it is remembered so that users are able to edit the note without re-entering the password
				this.uiPassword1Field.allowBlank = true; this.uiPassword1Field.validate(); // hack to toggle allowBlank dynamically
				this.uiPassword2Field.allowBlank = true; this.uiPassword2Field.validate();
				this.contentField.setDisabled(false); // password entered correctly: allow editing
				this.buttonOk.setDisabled(false);
				this.buttonApply.setDisabled(false);
				this.unlockDialog.hide();
		}
		
		
		if (responseData.data.note.attributes.encrypted) {
			if (GO.util.empty(this.unlockDialog)) {
				this.unlockDialog = new GO.Window({
					modal:true,					
					title: GO.lang.decryptContent,
					width: 320,
					height: 120,
					layout: 'fit',
					keys:[{
							key: Ext.EventObject.ENTER,
							fn : this._loadWithPassword,
							scope : this
					}],
					items: [new Ext.form.FormPanel({
						cls:'go-form-panel',
						layout: 'form',
						items: [this.unlockPasswordField = new Ext.form.TextField({
							name: 'note.userInputPassword',
							fieldLabel: GO.lang['password'],
							inputType: 'password'
						})],
						buttons: [{
							text: GO.lang['cmdOk'],
							handler: this._loadWithPassword,
							scope: this
						},
						{
							text: GO.lang['cmdCancel'],
							handler: function()
							{
								this.hide();
								this.unlockDialog.hide();
							},
							scope: this
						}]
					})]
				});
//				this.unlockDialog.on('hide',function(){
//					this._passwordChangePermission = undefined;
//				},this);
				this.unlockDialog.on('show',function(){
					this.unlockPasswordField.setValue('');
					this.unlockPasswordField.focus(false,100);
				},this);
			}
			this.unlockDialog.show();
		}
	},
	
	beforeSubmit : function(params) {
		if (!GO.util.empty(this._userInputPassword))
			this.formPanel.form.baseParams['note.currentPassword'] = this._userInputPassword;
		else
			delete this.formPanel.form.baseParams['note.currentPassword'];
	},
	
	afterSubmit : function(action) {
		var responseData = Ext.decode(action.response.responseText);		
		if (responseData.encrypted) {
			this.contentField.setValue(GO.lang['contentEncrypted']);
			this._toggleNewPasswordFields(false); // if the note is encrypted after succesful form submission, there is no need for the password fields
			this.buttonOk.setDisabled(true); // editing is prohibited unless the user entered the password using this.unlockDialog and this._loadWithPassword()
			this.buttonApply.setDisabled(true);
		}
		this.contentField.setDisabled(responseData.encrypted); // disable the content field to underline the fact that editing an encrypted field is prohibited
		
		delete this.formPanel.form.baseParams['note.currentPassword'];
	},
	
	buildForm : function () {
		
		this.selectLinkField = new GO.form.SelectLink({
			anchor:'100%'
		});

		this.propertiesPanel = new Ext.Panel({
			title:GO.lang['strProperties'],
			cls:'go-form-panel',
			layout:'form',
			labelWidth:160,
			items:[{
				xtype: 'textfield',
				name: 'note.name',
				width:300,
				anchor: '100%',
				maxLength: 100,
				allowBlank:false,
				fieldLabel: GO.lang.strName
			},this.selectCategory = new GO.form.ComboBox({
				fieldLabel: GO.notes.lang.category_id,
				hiddenName:'note.category_id',
				anchor:'100%',
				emptyText:GO.lang.strPleaseSelect,
				store: GO.notes.writableCategoriesStore,
				pageSize: parseInt(GO.settings.max_rows_list),
				valueField:'id',
				displayField:'name',
				mode: 'remote',
				triggerAction: 'all',
				editable: true,
				selectOnFocus:true,
				forceSelection: true,
				allowBlank: false
			}),
			this.selectLinkField,
			this.encryptCheckbox = new Ext.form.Checkbox({
				boxLabel: GO.lang.encryptContent,
				labelSeparator: '',
				name: 'note.encrypted',
				allowBlank: true,
				hideLabel:true,
				checked: false,
				disabled:false
			}),
			this.uiPassword1Field = new Ext.form.TextField({
				fieldLabel : GO.lang.password,
				inputType: 'password',
				name: 'note.userInputPassword1',
				value: '',
				allowBlank: false,
				disabled: true,
				hidden: true
			}),this.uiPassword2Field = new Ext.form.TextField({
				fieldLabel : GO.lang.passwordConfirm,
				xtype: 'textfield',
				inputType: 'password',
				name: 'note.userInputPassword2',
				value: '',
				allowBlank: false,
				disabled: true,
				hidden: true
			}),
			this.contentField = new Ext.form.TextArea({
				name: 'note.content',
				anchor: '100%',
				height: 280,
				hideLabel:true
			})]				
		});

		this.encryptCheckbox.on('check', function(cb,checked){
//			if (this._encrypted) {
				this._toggleNewPasswordFields(checked);
//			} else {
//				this.encryptCheckbox.setValue(true);
//				this._toggleNewPasswordFields(false);
//			}
		},this);

		this.addPanel(this.propertiesPanel);
	},
	
	_loadWithPassword : function() {
		
		this.jsonLoad(this.remoteModelId, {
			loadParams:{
				'password' : this.unlockPasswordField.getValue()
			}
		});
		
//		this.formPanel.form.load({
//			url: GO.url('notes/note/update'),
//			params: {
//				'userInputPassword' : this.unlockPasswordField.getValue()
//			},
//			success: function(form, action) {
////				this._passwordChangePermission = true;// password entered correctly: allow changing it
//				this._toggleNewPasswordFields(true);
//				this.encryptCheckbox.setValue(true);
//				this._userInputPassword = this.unlockPasswordField.getValue(); // this is the only place this should be set, it is remembered so that users are able to edit the note without re-entering the password
//				this.uiPassword1Field.allowBlank = true; this.uiPassword1Field.validate(); // hack to toggle allowBlank dynamically
//				this.uiPassword2Field.allowBlank = true; this.uiPassword2Field.validate();
//				this.contentField.setDisabled(false); // password entered correctly: allow editing
//				this.buttonOk.setDisabled(false);
//				this.buttonApply.setDisabled(false);
//				this.unlockDialog.hide();
//			},
//			failure: function(form, action) {
//				this._userInputPassword = false;
//				this.encryptCheckbox.setValue(true);
//				this._toggleNewPasswordFields(false); // user mustn't be able to change the password if he entered it incorrectly
//				if (action.failureType == 'client') {					
//					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
//				} else {
//					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
//				}
//			},
//			scope: this
//		})
	},
	
	_toggleNewPasswordFields : function(on) {
		this.uiPassword1Field.setDisabled(!on);
		this.uiPassword1Field.setVisible(on);
		this.uiPassword2Field.setDisabled(!on);
		this.uiPassword2Field.setVisible(on);
		
		this.uiPassword1Field.allowBlank = !on; this.uiPassword1Field.validate();
		this.uiPassword2Field.allowBlank = !on; this.uiPassword2Field.validate();
		
		if (on) {
			this.uiPassword1Field.setValue('');
			this.uiPassword2Field.setValue('');
		}
	}
	
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: NotePanel.js 16947 2014-02-28 14:04:55Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.notes.NotePanel = Ext.extend(GO.DisplayPanel,{
	model_name : "GO\\Notes\\Model\\Note",
	
	stateId : 'no-note-panel',

	//deprecated. tabbedformdialog refreshes active displaypanel automatically.
	editGoDialogId : 'note',
	
	editHandler : function(){
		GO.notes.showNoteDialog(this.model_id);		
	},	
		
	initComponent : function(){	
		
		this.loadUrl=('notes/note/display');
		
		this.encryptId=Ext.id();
		
		this.template = 

				'<table class="display-panel" cellpadding="0" cellspacing="0" border="0">'+
					'<tr>'+
						'<td colspan="2" class="display-panel-heading">'+GO.notes.lang.note+': {name}</td>'+
					'</tr>'+
					'<tr>'+
						'<td>ID:</td>'+
						'<td>{id}</td>'+
					'</tr>'+
					'<tr>'+
						'<tpl if="GO.util.empty(encrypted)">'+
							'<td colspan="2">{content}</td>'+
						'</tpl>'+
						'<tpl if="!GO.util.empty(encrypted)">'+
							'<td colspan="2"><div id="encryptedNoteDisplaySecure'+this.encryptId+'"></div></td>'+
						'</tpl>'+
					'</tr>'+									
				'</table>';																		
				
		if(GO.customfields)
		{
			this.template +=GO.customfields.displayPanelTemplate;
		}

		if(GO.tasks)
			this.template +=GO.tasks.TaskTemplate;

		if(GO.calendar)
			this.template += GO.calendar.EventTemplate;
		
		if(GO.workflow)
			this.template +=GO.workflow.WorkflowTemplate;

		this.template += GO.linksTemplate;	
				
		if(GO.files)
		{
			Ext.apply(this.templateConfig, GO.files.filesTemplateConfig);
			this.template += GO.files.filesTemplate;
		}
		Ext.apply(this.templateConfig, GO.linksTemplateConfig);
		
		if(GO.comments)
		{
			this.template += GO.comments.displayPanelTemplate;
		}		
		
		if(GO.lists)
			this.template += GO.lists.ListTemplate;

		this.template += GO.createModifyTemplate;

		GO.notes.NotePanel.superclass.initComponent.call(this);
	},
	
	afterLoad : function(result) {
		if(this.data.encrypted){
			if (!this.passwordPanel){
				this.passwordPanel = new Ext.form.CompositeField({			
					renderTo: 'encryptedNoteDisplaySecure'+this.encryptId,
					
					items: [
						this.passwordField = new Ext.form.TextField({
							name: 'password',
							inputType: 'password',
							flex:2,
							listeners: {
                specialkey: function(field, e){
									// e.HOME, e.END, e.PAGE_UP, e.PAGE_DOWN,
									// e.TAB, e.ESC, arrow keys: e.LEFT, e.RIGHT, e.UP, e.DOWN
									if (e.getKey() == e.ENTER) {
										this._loadWithPassword();
									}
								},
								scope : this
							}
							
						}),
						this.passwordButton = new Ext.Button({
								flex:1,
								text: GO.lang['decryptContent'],
								handler: function(){
									this._loadWithPassword();									
								},
								scope: this
							})
					]
				});
			}else
			{
				var el = Ext.get('encryptedNoteDisplaySecure'+this.encryptId);
				//console.log(el);
				el.appendChild(this.passwordPanel.getEl());
			}
		}
	},
	
	_loadWithPassword : function() {
		
		var pass = this.passwordField.getValue();
		this.passwordField.setValue("");
		
		GO.request({
			url: 'notes/note/display',
			params: {
				'id' : this.model_id,
				'userInputPassword' : pass
			},
			success: function(options, response, result) {
				if (!GO.util.empty(result.feedback))
					Ext.MessageBox.alert('', result.feedback);
				if (GO.util.empty(result.data.encrypted)) {
					document.getElementById('encryptedNoteDisplaySecure'+this.encryptId).innerHTML = result.data.content;
				}
			},
			scope: this
		});
	}
});			

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: ManageCategoriesGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 

GO.notes.ManageCategoriesGrid = Ext.extend(GO.grid.GridPanel,{
	changed : false,
	
	initComponent : function(){
		
		Ext.apply(this,{
			standardTbar:true,
			standardTbarDisabled:!GO.settings.modules.notes.write_permission,
			store: GO.notes.writableAdminCategoriesStore,
			border: false,
			paging:true,
			view:new Ext.grid.GridView({
				autoFill: true,
				forceFit: true,
				emptyText: GO.lang['strNoItems']		
			}),
			cm:new Ext.grid.ColumnModel({
				defaults:{
					sortable:true
				},
				columns:[
				{
					header: GO.lang.strName, 
					dataIndex: 'name'
				},{
					header: GO.lang.strOwner, 
					dataIndex: 'user_name',
					sortable: false
				}		
				]
			})
		});
		
		GO.notes.ManageCategoriesGrid.superclass.initComponent.call(this);
		
		GO.notes.writableAdminCategoriesStore.load();	
	},
	
	dblClick : function(grid, record, rowIndex){
		this.showCategoryDialog(record.id);
	},
	
	btnAdd : function(){				
		this.showCategoryDialog();	  	
	},
	showCategoryDialog : function(id){
		if(!this.categoryDialog){
			this.categoryDialog = new GO.notes.CategoryDialog();

			this.categoryDialog.on('save', function(){   
				this.store.load();
				this.changed=true;	    			    			
			}, this);	
		}
		this.categoryDialog.show(id);	  
	},
	deleteSelected : function(){
		GO.notes.ManageCategoriesGrid.superclass.deleteSelected.call(this);
		this.changed=true;
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: ManageCategoryDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.notes.ManageCategoriesDialog = function(config){
	
	
	if(!config)
	{
		config={};
	}
		
	this.categoriesGrid = new GO.notes.ManageCategoriesGrid();

	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=true;
	config.width=600;
	config.height=400;
	config.closeAction='hide';
	config.title= GO.notes.lang.manageCategories;					
	config.items= this.categoriesGrid;
	config.buttons=[{
			text: GO.lang['cmdClose'],
			handler: function(){				
				this.hide();				
			},
			scope:this
		}					
	];
	
	GO.notes.ManageCategoriesDialog.superclass.constructor.call(this, config);

	this.on('hide', function(){
		if(this.categoriesGrid.changed)
		{
			this.fireEvent('change');
			this.categoriesGrid.changed=false;
		}
	}, this);
	
	this.addEvents({'change':true});
}

Ext.extend(GO.notes.ManageCategoriesDialog, GO.Window,{

});

GO.notes.writableCategoriesStore = new GO.data.JsonStore({
	url: GO.url('notes/category/store'),
	baseParams: {
		permissionLevel:GO.permissionLevels.write
	},	
	fields: ['id', 'name', 'user_name']	
});

GO.notes.writableAdminCategoriesStore = new GO.data.JsonStore({
	url: GO.url('notes/category/store'),
	baseParams: {
		permissionLevel:GO.permissionLevels.write
	},	
	fields: ['id', 'name', 'user_name']
});


GO.notes.readableCategoriesStore = new GO.data.JsonStore({
	url: GO.url('notes/category/store'),
	baseParams: {
		limit:GO.settings.config.nav_page_size
	},
	fields: ['id','user_name','acl_id','name','checked']
});


/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: MainPanel.js 19225 2015-06-22 15:07:34Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */

 
GO.notes.MainPanel = function(config){
	
	if(!config)
	{
		config = {};
	}

	this.centerPanel = new GO.notes.NotesGrid({
		region:'center',
		id:'no-center-panel',
		border:true
	});
	
	this.westPanel= new GO.grid.MultiSelectGrid({
		region:'west',
		id:'no-multiselect',
		title:GO.notes.lang.categories,
		loadMask:true,
		store: GO.notes.readableCategoriesStore,
		width: 230,
		split:true,
		allowNoSelection:true,
		collapsible:true,
		collapseMode:'mini',
		bbar: new GO.SmallPagingToolbar({
			items:[this.searchField = new GO.form.SearchField({
				store: GO.notes.readableCategoriesStore,
				width:120,
				emptyText: GO.lang.strSearch
			})],
			store:GO.notes.readableCategoriesStore,
			pageSize:GO.settings.config.nav_page_size
		}),
		relatedStore: this.centerPanel.store
	});

//	this.westPanel.on('change', function(grid, categories, records)
//	{
//		if(records.length){
//			this.centerPanel.store.baseParams.notes_categories_filter = Ext.encode(categories);
//			this.centerPanel.store.reload();
//			//delete this.centerPanel.store.baseParams.notes_categories_filter;
//		}
//	}, this);
//	
//	this.westPanel.store.on('load', function()
//	{
//		this.centerPanel.store.baseParams.notes_categories_filter = Ext.encode(this.westPanel.getSelected());
//		this.centerPanel.store.load();		
//	}, this);

	
	
	this.centerPanel.on("delayedrowselect",function(grid, rowIndex, r){
		this.eastPanel.load(r.data.id);		
	}, this);

	this.centerPanel.on('rowdblclick', function(grid, rowIndex){
		this.eastPanel.editHandler();
	}, this);
	
	this.eastPanel = new GO.notes.NotePanel({
		region:'east',
		id:'no-east-panel',
		width:440,
		collapsible:true,
		collapseMode:'mini',
		border:true
	});
	
	config.tbar=new Ext.Toolbar({
		cls:'go-head-tb',
		items: [
			{
	      xtype:'htmlcomponent',
				html:GO.notes.lang.name,
				cls:'go-module-title-tbar'
			},{
				grid: this.centerPanel,
				xtype:'addbutton',
				handler: function(b){
					this.eastPanel.reset();

					GO.notes.showNoteDialog(0, {
							loadParams:{
								category_id: b.buttonParams.id						
							}
					});
				},
				scope: this
			},{
				xtype:'deletebutton',
				grid:this.centerPanel,
				handler: function(){
					this.centerPanel.deleteSelected({
						callback : this.eastPanel.gridDeleteCallback,
						scope: this.eastPanel
					});
				},
				scope: this
			},{
				iconCls: 'no-btn-categories',
				text: GO.notes.lang.manageCategories,
				cls: 'x-btn-text-icon',
				handler: function(){
					if(!this.categoriesDialog)
					{
						this.categoriesDialog = new GO.notes.ManageCategoriesDialog();
						this.categoriesDialog.on('change', function(){
							this.westPanel.store.reload();
							GO.notes.writableCategoriesStore.reload();
						}, this);
					}
					this.categoriesDialog.show();
				},
				scope: this

			},
			this.exportMenu = new GO.base.ExportMenu({className:'GO\\Notes\\Export\\CurrentGrid'})
		]
	});

	this.exportMenu.setColumnModel(this.centerPanel.getColumnModel());

	config.items=[
	this.westPanel,
	this.centerPanel,
	this.eastPanel
	];	
	
	config.layout='border';
	GO.notes.MainPanel.superclass.constructor.call(this, config);	
};


Ext.extend(GO.notes.MainPanel, Ext.Panel, {
	afterRender : function()
	{
		GO.dialogListeners.add('note',{
			scope:this,
			save:function(){
				this.centerPanel.store.reload();
			}
		});

		GO.notes.readableCategoriesStore.load();
		
		GO.notes.MainPanel.superclass.afterRender.call(this);
	}
});

GO.notes.showNoteDialog = function(note_id, config){

	if(!GO.notes.noteDialog)
		GO.notes.noteDialog = new GO.notes.NoteDialog();
	
	GO.notes.noteDialog.show(note_id, config);
}


/*
 * This will add the module to the main tabpanel filled with all the modules
 */
 
GO.moduleManager.addModule('notes', GO.notes.MainPanel, {
	title : GO.notes.lang.notes,
	iconCls : 'go-tab-icon-notes'
});
/*
 * If your module has a linkable item, you should add a link handler like this. 
 * The index (no. 1 in this case) should be a unique identifier of your item.
 * See classes/base/links.class.inc for an overview.
 * 
 * Basically this function opens a project window when a user clicks on it from a 
 * panel with links. 
 */

GO.linkHandlers["GO\\Notes\\Model\\Note"]=function(id){
	if(!GO.notes.linkWindow){
		var notePanel = new GO.notes.NotePanel();
		GO.notes.linkWindow= new GO.LinkViewWindow({
			title: GO.notes.lang.note,
			items: notePanel,
			notePanel: notePanel,
			closeAction:"hide"
		});
	}
	GO.notes.linkWindow.notePanel.load(id);
	GO.notes.linkWindow.show();
	return GO.notes.linkWindow;
}

GO.linkPreviewPanels["GO\\Notes\\Model\\Note"]=function(config){
	config = config || {};
	return new GO.notes.NotePanel(config);
}


/* {LINKHANDLERS} */


GO.newMenuItems.push({
	text: GO.notes.lang.note,
	iconCls: 'go-model-icon-GO_Notes_Model_Note',
	handler:function(item, e){		
		GO.notes.showNoteDialog(0, {
			link_config: item.parentMenu.link_config			
		});
	}
});
/* {NEWMENUITEMS} */




Ext.ux.IFrameComponent = Ext.extend(Ext.BoxComponent, {
	onRender : function(ct, position){
		this.el = ct.createChild({
			tag: 'iframe', 
			id: 'iframe-'+ this.id, 
			frameBorder: 0, 
			src: this.url
			});
	}
});


GO.tools.MainPanel = function(config){
	
	if(!config)
	{
		config = {};
	}
	
	this.runPanel = new Ext.ux.IFrameComponent();
	this.runWindow = new Ext.Window({
		title:GO.tools.lang.scriptOutput,
		width:500,
		height:500,
		maximizable:true,
		closeAction:'hide',
		items:this.runPanel,
		layout:'fit'
	});

//	this.cls='tools-panel';
	
	config.tbar = new Ext.Toolbar({		
		cls:'go-head-tb',
		items: [{
			xtype:'htmlcomponent',
			html:GO.tools.lang.tools,
			cls:'go-module-title-tbar'
		}]
	});
	
		
	this.store = new GO.data.JsonStore({
		url:GO.url('tools/tools/store'),
		root: 'results',
		id: 'id',
		totalProperty:'total',
		fields: ['name','description','script'],
		remoteSort: true
	});
	
	var scriptList = new GO.grid.SimpleSelectList({
//		title: GO.tools.lang.scripts, 
		cls: 'simple-list',
		tpl:'<tpl for=".">'+
			'<div id="{dom_id}" class="go-item-wrap">{name}<span>{description}</span></div>'+
			'</tpl>',
		store: this.store
		});
		
	scriptList.on('click', function(dataview, index){
		/*this.runWindow.show();
				this.runPanel.el.set({'src' : dataview.store.data.items[index].data.script});*/
		window.open(dataview.store.data.items[index].data.script);				
	}, this);
		
	this.items=[
	scriptList
	];
	
	GO.tools.MainPanel.superclass.constructor.call(this, config);
	
}
 
Ext.extend(GO.tools.MainPanel, Ext.Panel,{
	afterRender: function(){
		this.store.load();
		GO.tools.MainPanel.superclass.afterRender.call(this);
	}	
});


/*
 * This will add the module to the main tabpanel filled with all the modules
 */
 
GO.moduleManager.addModule('tools', GO.tools.MainPanel, {
	title : GO.tools.lang.tools,
	iconCls : 'go-tab-icon-tools',
	admin :true
});


GO.bookmarks.BookmarkContextMenu = function(config)
{
	if(!config)
	{
		config = {};
	}
	config['shadow']='frame';
	config['minWidth']=180;
	

				
	this.deleteButton = new Ext.menu.Item({
		iconCls: 'btn-delete',
		text: GO.lang.cmdDelete,
		cls: 'x-btn-text-icon',
		handler: function(){
			GO.bookmarks.removeBookmark(this.record);						
		},
		scope:this
	});
	
	this.editButton = new Ext.menu.Item({
		iconCls: 'btn-edit',
		text: GO.lang.cmdEdit,
		cls: 'x-btn-text-icon',
		handler: function(){

			GO.bookmarks.showBookmarksDialog({
				record:this.record,
				edit:1
			})
					
		},
		scope:this
	});
				

				
	config.items=[this.deleteButton,
	this.editButton];
	


	GO.bookmarks.BookmarkContextMenu.superclass.constructor.call(this, config);	
}

Ext.extend(GO.bookmarks.BookmarkContextMenu, Ext.menu.Menu,{

	setRecord : function (record){
		this.record = record;
		
		this.editButton.setDisabled(record.data.permissionLevel<GO.permissionLevels.write);
		this.deleteButton.setDisabled(record.data.permissionLevel<GO.permissionLevels.writeAndDelete);
	}
	
			
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: DevicesGrid.js 16399 2013-07-23 13:55:30Z mschering $
 * @copyright Copyright Intermesh
 * @author Wesley Smits <wsmits@intermesh.nl>
 */

GO.bookmarks.BookmarkColumnView = Ext.extend(Ext.DataView,{

	initComponent : function(){
		
		Ext.applyIf(this,{
			autoScroll: true,
			store: GO.bookmarks.groupingStore,
			tpl: new Ext.XTemplate(
				'<tpl for=".">',
					'<tpl if="this.is_new_category(values.category_name)">', // Show category name column (Only when category changes)
						'<tpl if="xindex &gt; 1"><br/><br/></div></tpl>', // Close previous category column (Don't do this the first time)
						'<div class="bookmark-column">',
							'<span class="title">{category_name}</span>',
					'</tpl>',
						
					'<span class="link" id="{id}" href="{content}" target="_blank">',
						'<span class="thumb" style="background-image:url({thumb})">{name}</span>',
					'</span>',
        '</tpl>',
				'<br/><br/></div>',
				{
					is_new_category : function(category_name){

						if(!this.lastcategory || category_name!=this.lastcategory){
							this.lastcategory=category_name;
							return true;
						}else
						{
							return false;
						}
					}
					
				}
			),
			autoHeight:true,
      multiSelect: false,
			singleSelect:false,
			simpleSelect:false,
			trackOver:true,
			overClass:'x-view-over',
			itemSelector:'.link',
			emptyText: GO.bookmarks.lang.noEmployeesToDisplay
			,
			listeners: {
				contextmenu: function(dv, index, node, e){
					e.preventDefault();

					var XY = new Array(e.getPageX(),e.getPageY());

					if (!GO.bookmarks.bookmarkContextMenu) {
						GO.bookmarks.bookmarkContextMenu = new GO.bookmarks.BookmarkContextMenu();
					}

					// Very Important !! to get the record and the XY data of the mouse
					var record = this.getRecord(node);
					GO.bookmarks.bookmarkContextMenu.setRecord(record);
					GO.bookmarks.bookmarkContextMenu.showAt(XY);
				},
				render:function(){
					this.store.load();
					this.refresh();
				},
				click: function( DdvV, index, node, e) {
					var record = this.getRecord(node); // waar hebben we op geklikt?
					GO.bookmarks.openBookmark(record);
				}
			}
		});
		
		GO.bookmarks.BookmarkColumnView .superclass.initComponent.call(this);
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: MainPanel.js 18927 2015-03-23 08:53:45Z wsmits $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */

Ext.namespace('GO.bookmarks');

GO.bookmarks.getThumbUrl= function(logo, pub){
	
	if(GO.util.empty(pub)){
		return GO.url('core/thumb', {src:logo, h:16,w:16,pub:0});
	}else
	{
		return GO.settings.modules.bookmarks.url+logo;
	}

}

GO.bookmarks.MainPanel = function(config){

	if(!config)
	{
		config = {};
	}

	this.selectCategory = new GO.form.ComboBoxReset({
		fieldLabel: 'Category',
		hiddenName:'category_id',
		store: GO.bookmarks.comboCategoriesStore,
		displayField:'name',
		valueField:'id',
		triggerAction: 'all',
		editable: true,
		width:200,
		emptyText:GO.bookmarks.lang.showAll,
		selectOnFocus :false,
		listeners:{
			clear:function(){
				GO.bookmarks.groupingStore.baseParams['category']=0;
				GO.bookmarks.groupingStore.load();
			},
			select: function(combo,record) {
				GO.bookmarks.groupingStore.baseParams['category']=record.data.id;
				GO.bookmarks.groupingStore.load();
			//this.setValue(record.data[this.displayField]);
			}
		}
	});

	this.searchField = new GO.form.SearchField({
		store: GO.bookmarks.groupingStore ,
		width:220
	});

	this.bookmarkColumnView = new GO.bookmarks.BookmarkColumnView({store:GO.bookmarks.groupingStore});
	
	this.bmColumn = new Ext.Panel({
		autoScroll: true,
		region:'center',
		id:'bookmarks-center-column-panel',
		border:false,
    items:this.bookmarkColumnView,
	});

	this.bmView=new GO.bookmarks.BookmarksView({store:GO.bookmarks.groupingStore});

	this.cardPanel = new Ext.Panel({
		region : 'center',
		layout:'card',
		border:false,
		activeItem: 0,
		tbar: [GO.bookmarks.lang.category+':',this.selectCategory,'-',GO.lang.strSearch+':',this.searchField],
		layoutConfig: {
			deferredRender: true
		},
		items: [
			this.bmView,
			this.bmColumn
		]
	});

	config.tbar=new Ext.Toolbar({
		cls:'go-head-tb',
		items: [{
			xtype:'htmlcomponent',
			html:GO.bookmarks.lang.name,
			cls:'go-module-title-tbar'
		},{
			iconCls: 'btn-add',
			text: GO.lang['cmdAdd'],
			cls: 'x-btn-text-icon',
			handler: function(){
				GO.bookmarks.showBookmarksDialog({edit:0});
			},
			scope:this
//		},{
//			itemId:'refresh',
//			iconCls: 'btn-refresh',
//			text: GO.lang['cmdRefresh'],
//			cls: 'x-btn-text-icon',
//			handler: function(){
//				GO.bookmarks.groupingStore.reload();
//				this.bookmarkColumnView.refresh();
//				this.bmView.DV.refresh();
//			},
//			scope: this
		},{ 
			text: GO.bookmarks.lang.toggle,
			iconCls: 'btn-refresh',
			cls: 'x-btn-text-icon',
			handler: function(){
				this.nextLayout();
			},
			scope:this
		},{
			iconCls: 'no-btn-categories',
			text: GO.bookmarks.lang.administrateCategories,
			cls: 'x-btn-text-icon',
			hidden: !GO.settings.modules.bookmarks.write_permission,
			handler: function(){
				if(!this.categoriesDialog)
				{
					this.categoriesDialog = new GO.bookmarks.ManageCategoriesDialog({
						listeners:{
							close:function(){
							},
							scope:this
						}
					});
					this.categoriesDialog.on('change', function(){
						}, this);
				}
				this.categoriesDialog.show();
			},
			scope: this
		}]
	});
 
	config.layout='fit';
	config.items=this.cardPanel;

	GO.bookmarks.MainPanel.superclass.constructor.call(this, config);
	
	this.init();
}

//-----------------------------------------------------------------------------


Ext.extend(GO.bookmarks.MainPanel, Ext.Panel, {
		
	init : function(){
		this.activeItemIndex = Ext.state.Manager.get('bookmark-active-panel');
		
		if(GO.util.empty(this.activeItemIndex))
			this.activeItemIndex = 0;
		
		this.cardPanel.activeItem = this.activeItemIndex;
	},

	// Walk through the available layouts
	nextLayout : function()
	{
		var itemCount = this.cardPanel.items.length; // Get the total number of items in the cardPanel
		var currentItemIndex = this.cardPanel.items.indexOf(this.cardPanel.getLayout().activeItem); // Get current index
		
		var nextItemIndex = 0;
		// If currentIndex is smaller then the total itemcount minus 1 (array indexes start at 0) then add +1 else go to 0
		if(currentItemIndex < (itemCount-1)){
			nextItemIndex = currentItemIndex+1;
		}

		this.cardPanel.layout.setActiveItem(nextItemIndex);
		this.activeItemIndex = nextItemIndex;
		this.saveState();
	},
	saveState : function(){
		Ext.state.Manager.getProvider().set('bookmark-active-panel', this.activeItemIndex);
	}
});

//----------------------------------------------------------------------------

//
// GLOBAL
//

// Bookmarks toevoegen of editten
GO.bookmarks.showBookmarksDialog = function(config){
	
	if(!this.bookmarksDialog){

		this.bookmarksDialog = new GO.bookmarks.BookmarksDialog({
			edit:config.edit, // leeg of bestaand record?
			listeners:{
				save:function(){
					GO.bookmarks.groupingStore.load();
				},
				scope:this
			}
		});
	}
	this.bookmarksDialog.show(config);
}

// Bookmark hyperlink openen, in GO tab of in browser tab
GO.bookmarks.openBookmark = function(record)
{
	if(record.data.behave_as_module == '1')
	{
		var panel = GO.mainLayout.openModule('bookmarks-id-'+record.id);
		if(panel)
		{
			return true;
		}
	}

	if(record.data.open_extern==0){
		var websiteTab = new GO.panel.IFrameComponent( {
			title : record.data.name,
			url:    record.data.content,
			border:false,
			closable:true
		})

		GO.mainLayout.tabPanel.add(websiteTab) // open nieuwe tab in group-office
		websiteTab.show();
	}
	else{
		window.open(record.data.content) // open in nieuw browser tab
	}
	
}

// bookmark verwijderen
GO.bookmarks.removeBookmark = function(record)
{
	if(confirm(GO.bookmarks.lang.confirmDelete))
	{

		GO.request({
			url : 'bookmarks/bookmark/delete', 
			params: {
				id: record.data.id
			},
			scope:this,

			callback: function(options, success, response){
				var responseParams = Ext.decode(response.responseText);
				if(!responseParams.success)
				{
					Ext.MessageBox.alert(GO.lang['strError'],responseParams.feedback);
				}
				else
				{
					GO.bookmarks.groupingStore.remove(record);
					GO.bookmarks.groupingStore.load();
				}
			}
		})
	}
}

// bookmark module toevoegen aan modulemanager
GO.moduleManager.addModule('bookmarks', GO.bookmarks.MainPanel, {
	title : GO.bookmarks.lang.bookmarks,
	iconCls : 'go-tab-icon-bookmarks'
});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: BookmarksView.js 18890 2015-03-11 13:50:01Z wsmits $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */

GO.bookmarks.BookmarksView = function(config){

	config = config || {};
	config.autoScroll=true;


	Ext.QuickTips.init();
 
	/* 
	 * De template die de bookmarks per categorie indeelt (left float)
	 * zonder (!index) laat ie geen categorienaam zien als er maar 1 categorie is
	 *
	 */
	
	this.bookmarkthumbs  = new Ext.XTemplate(
		'<tpl for=".">',
		'<tpl if="this.is_new_category(category_name)">', 
		'<h1 class="categorie">{category_name}</h1>',
		'</tpl>',
		'<div class="thumb-wrap"  >',
		'<div class="thumb">',
		'<div class="thumb-name" style="background-image:url({thumb})"><h1>{name}</h1>{[Ext.util.Format.nl2br(values.description)]}</div>',
		'</div>',	'</div>',	'</tpl>',
		'<div style="clear:both"></div>',
		{
			// switchen van categorie
			is_new_category : function(category_name){
				if(!this.lastcategory || category_name!=this.lastcategory){
					this.lastcategory=category_name;
					return true;
				}else
				{
					return false;
				}
			}
		}
		);

	/*
   * Dataview met bovenstaande template
   */

	this.DV = new Ext.DataView({
		store: config.store,
		tpl: this.bookmarkthumbs,
		cls: 'thumbnails',
		itemSelector:'div.thumb',
		multiSelect: false,
		singleSelect: false,
		trackOver:true
		
	});

	/*
   * Close-button om node in Dataview te verwijderen
   */

	//	if (!this.closeButton)
	//	{
	//		this.closeButton = new GO.bookmarks.CloseButton({
	//			autoEl: {
	//				tag: 'img',
	//				src: 'modules/bookmarks/themes/Default/images/close.gif',
	//				cls: 'closebutton'
	//			}
	//		});
	//	}
	//	this.closeButton.hide();
	//	this.closeButton.on('remove_bookmark', GO.bookmarks.removeBookmark, this);


	/*
   *  linkermuisknop, roept globale functie openBookmark aan
	 *  link wordt in GO tab of in browsertab getoond (open_extern)
   */

	this.DV.on('click',function( DV, index, node, e) {
		var record = this.DV.getRecord(node); // waar hebben we op geklikt?
		GO.bookmarks.openBookmark(record);
	},this)

	/*
	 * rechtermuisknop, edit bookmark
	 */

	
	this.DV.on('contextmenu',function( DV, index, node, e) {
		e.preventDefault();

		var XY = new Array(e.getPageX(),e.getPageY());

		if (!GO.bookmarks.bookmarkContextMenu) {
			GO.bookmarks.bookmarkContextMenu = new GO.bookmarks.BookmarkContextMenu();
		}
		
		// Verry Important !! to get the record and the XY data of the mouse
		var record = this.DV.getRecord(node);
		GO.bookmarks.bookmarkContextMenu.setRecord(record);
		GO.bookmarks.bookmarkContextMenu.showAt(XY);
		
				

	//	if (this.DV.getRecord(node).data.permissionLevel>=GO.permissionLevels.write) // users kunnen niet rechts klikken op public bookmarks
	//{
	//	GO.bookmarks.showBookmarksDialog({
	//		record:record,
	//		edit:1
	///);
	//}
 
	}, this);

	/*
  * Mouseover
  */
	
	this.DV.on('mouseenter',function( DV, index, node, e) {
		this.mouseOver=true;
	},this);

	this.DV.on('mouseenter',function( DV, index, node, e) {
		
		//		if((this.mouseOver)&&(this.DV.getRecord(node)!=undefined)){
		//			if (this.DV.getRecord(node).data.permissionLevel>GO.permissionLevels.write) // users zien geen kruisje bij een public bookmark
		//			{
		//				this.closeButton.show();
		//				this.closeButton.record=this.DV.getRecord(node);
		//				this.closeButton.getEl().alignTo(node, 'tr', [-21,6]);
		//			}
		//		}
		}, this, {
			delay:600,
			buffer:200
		})

	//	this.DV.on('mouseleave',function( DV, index, node, e) {
	//		this.mouseOver=false;
	//		this.closeButton.hideIfNotOver.defer(100, this.closeButton);
	//	}, this);

	Ext.apply(config, {
		listeners:{
			render:function(){
				config.store.load();
			}
		},
		items: [this.DV]
	});

	GO.bookmarks.BookmarksView.superclass.constructor.call(this, config);
}

Ext.extend(GO.bookmarks.BookmarksView, Ext.Panel,{

});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: Stores.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */


GO.bookmarks.groupingStore = new Ext.data.GroupingStore({
		reader: new Ext.data.JsonReader({
			totalProperty: "total",
			root: "results",
			id: "id",
		fields: ['id','category_id','category_name','user_id','name','content','description','logo','open_extern','permissionLevel','public_icon','thumb','behave_as_module']
		}),
		url : GO.url('bookmarks/bookmark/store'),
		baseParams: {
			limit:0
		},
		groupField:'category_name',
		sortInfo: {
			field: 'name',
			direction: 'ASC'
		},
		remoteGroup:true,
		remoteSort:true
	});



// laat categorieen zien
GO.bookmarks.writableCategoriesStore = new GO.data.JsonStore({
	url : GO.url('bookmarks/category/store'),
	baseParams: {
		permissionLevel:GO.permissionLevels.write
	},
	root: 'results',
	id: 'id',
	totalProperty:'total',
	fields: ['id', 'name', 'user_name'],
	remoteSort: true
});

// comboCategoriesStore, zelfde als writableCategoriesStore PLUS extra veldje met 'show all'

GO.bookmarks.comboCategoriesStore = new GO.data.JsonStore({
	    url : GO.url('bookmarks/category/store'),
	    baseParams: {
				limit:0
	    	},
	    fields: ['id','user_name','acl_id','name'],
	    remoteSort: true
	});


// store voor public icons, bestandsnamen
	GO.bookmarks.thumbstore = new GO.data.JsonStore(
	{
		url: GO.url('bookmarks/bookmark/thumbs'),
		fields: ['filename']
	});




	

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: CloseButton.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */

GO.bookmarks.CloseButton = function(config){
   
	  config=config||{}
    config.style='cursor:pointer;'; 
	  config.mouseOver=false;
		
		config.listeners={
			render:function(){
				
				var el = this.getEl();
				
				el.on({

					click:function(){
						this.hide();
						this.fireEvent('remove_bookmark', this.record);
					},
						mouseover:function(){
						this.mouseOver=true;
					},
						mouseout:function(){
						this.mouseOver=false;
						this.hide();
					},
					scope:this
				});
			}
		},
    
		config.hideIfNotOver = function(){
			if(!this.mouseOver){
				this.hide();
			}
		}

GO.bookmarks.CloseButton.superclass.constructor.call(this,config);
this.addEvents({'remove_bookmark' : true});
}

Ext.extend(GO.bookmarks.CloseButton, Ext.BoxComponent,{

});


/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: BookmarksDialog.js 19244 2015-07-27 07:17:02Z wsmits $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */

GO.bookmarks.BookmarksDialog = function(config){
	
	if(!config)
	{
		config={};
	}

	this.buildForm(config);
	
	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=500;
	config.height=350;
	config.closeAction='hide';
	config.items= this.formPanel;
	config.title=GO.bookmarks.lang.bookmark;
	config.buttons=[{
		text: GO.lang['cmdOk'],
		handler: function(){
			this.submitForm(true);
		},
		scope: this
	},{
		text: GO.lang['cmdClose'],
		handler: function(){
			this.hide();
		},
		scope:this
	}];

	GO.bookmarks.BookmarksDialog.superclass.constructor.call(this, config);
	
	this.addEvents({
		'save' : true
	});
}

Ext.extend(GO.bookmarks.BookmarksDialog, Ext.Window,{

	focus : function(){
		this.formPanel.form.findField('content').focus();
	},

	show : function (config) {		

		if(!this.selectCategory.store.loaded){
			return this.selectCategory.store.load({
				callback:function(){
					this.show(config);
				},
				scope:this
			});			
		}

		if(!this.rendered)
			this.render(Ext.getBody());
		
		

		var logo='icons/bookmark.png';
		this.formPanel.baseParams.public_icon='1';
  
		if (config.edit==1) // edit bookmark
		{
			// vul form met gegevens van aangeklikte bookmark
			this.formPanel.form.setValues(config.record.data);
			//this.selectCategory.setRemoteText(config.record.category_name);
			this.formPanel.baseParams.id=config.record.data.id;
			// thumb voorbeeld

			logo = config.record.data.logo;
			this.formPanel.baseParams.public_icon = config.record.data.public_icon;
			
		}
		else // add bookmark
		{
			// lege velden in form
			this.formPanel.baseParams.id=0;
			this.formPanel.form.reset();
			this.selectCategory.selectFirst();
		// leeg voorbeeld
		}

		this.setIcon(logo, this.formPanel.baseParams.public_icon);

		GO.bookmarks.BookmarksDialog.superclass.show.call(this);
	},
	

	submitForm : function(hide){
		
		this.formPanel.form.submit(
		{
			url : GO.url('bookmarks/bookmark/submit'),
			waitMsg:GO.lang['waitMsgSave'],
			success:function(form, action){
				if(action.result.bookmark_id){
					this.formPanel.baseParams['id']=action.result.bookmark_id;
				}
				if(hide)
				{
					this.hide();
				}
				this.fireEvent('save', this);
			},
			failure: function(form, action) {
				if(action.failureType == 'client')
				{					
					Ext.MessageBox.alert(GO.lang['strError'], GO.lang['strErrorsInForm']);			
				} else {
					Ext.MessageBox.alert(GO.lang['strError'], action.result.feedback);
				}
			},
			scope: this
		});
	},

	setIcon : function(icon, pub){

		var now = new Date();
		var url = GO.bookmarks.getThumbUrl(icon, pub);
		if(pub==0){
			url += '&amp;time='+now.format('U');
		}

		this.formPanel.baseParams.public_icon=pub;

		this.thumbExample.getEl().update(GO.bookmarks.thumbTpl.apply({
			logo:url,
			title:GO.bookmarks.lang.title,
			description:GO.bookmarks.lang.description
		}));
	},

	buildForm : function (config) {
	
		this.bookmarkPanel = new Ext.Panel({
			layout:'form',
			border: false,
			cls:'go-form-panel',
			waitMsgTarget:true,
			items: [ // de invoervelden
			this.selectCategory = new GO.form.ComboBox({
				fieldLabel: GO.bookmarks.lang.category,
				hiddenName:'category_id',
				anchor:'100%',
				store: GO.bookmarks.writableCategoriesStore,
				displayField:'name',
				valueField:'id',
				triggerAction: 'all',
				editable: false,
				allowBlank: false,
				selectOnFocus:true,
				forceSelection: true,
				mode:'local'
			}),{
				name: 'content',
				xtype: 'textfield',
				fieldLabel: 'URL',
				anchor: '100%',
//				vtype: 'url',
				value:'http://',
				allowBlank: false,
				validator: function(value) {
					// The following allows also URLs like 'https://wiki:username@wiki.mydomain.org'
//					var urlRegexp = /(((^https?)|(^ftp)):\/\/(([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)|([\-\w]+\:)+([\-\w]+\@)+([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
					// The following also accepts: http://intranet/foo/bar
					var urlRegexp = /(((^https?)|(^ftp)):\/\/(\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)|([\-\w]+\:)+([\-\w]+\@)+([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
					
					return urlRegexp.test(value);
				},
				listeners:{
					change:function(combo){
						this.el.mask(GO.lang.waitMsgLoad);
						Ext.Ajax.request({
							url : GO.url('bookmarks/bookmark/description'),
							params:{
								
								url: combo.getValue()
							},
							callback:function(options, success, response){
								var result = Ext.decode(response.responseText);
								if(!GO.util.empty(result.description))
									this.formPanel.form.findField('description').setValue(result.description);

								if(!GO.util.empty(result.title))
									this.formPanel.form.findField('name').setValue(result.title);

								if(result.logo){
									this.setIcon(result.logo);
									this.selectFile.setValue(result.logo);
								}

								this.el.unmask();
							},
							scope:this
						});
					},
					scope:this
				}

			},{
				name: 'name',
				xtype: 'textfield',
				fieldLabel: GO.bookmarks.lang.title, 
				anchor: '100%',
				allowBlank: false
			},this.externCheck = new Ext.ux.form.XCheckbox({
				name: 'open_extern',
				xtype: 'checkbox',
				boxLabel: GO.bookmarks.lang.extern,
				hideLabel:true,
				anchor: '100%',
				checked:true
			}),this.moduleCheck = new Ext.ux.form.XCheckbox({
				name: 'behave_as_module',
				xtype: 'checkbox',
				boxLabel: GO.bookmarks.lang.behaveAsModule,
				hideLabel:true,
				anchor: '100%'
			}),
			{
				name: 'description',
				xtype: 'textarea',
				fieldLabel: GO.bookmarks.lang.description,
				anchor: '100%',
				height:65
			},
			this.selectFile = new GO.bookmarks.SelectFile({
				fieldLabel: GO.bookmarks.lang.logo, 
				name: 'logo',
				anchor: '100%',
				value:'icons/bookmark.png',
				dialog: this
			}),
			
			this.thumbExample = new Ext.Component({
				style: {
					marginLeft: '100px'
				}})
			]
		});
		

		

		this.moduleCheck.on('check', function(cb, checked)
		{
			this.externCheck.setValue(0);
			this.externCheck.setDisabled(checked);

		},this)
                
		this.items = [this.bookmarkPanel];
		this.formPanel = new Ext.form.FormPanel({
			baseParams : {
				id: 0
			},
			items: this.items
		});
	}
});

/** 
 * Copyright Intermesh
 * 
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 * 
 * If you have questions write an e-mail to info@intermesh.nl
 * 
 * @version $Id: CategoryDialog.js 19024 2015-04-23 11:24:40Z wsmits $
 * @copyright Copyright Intermesh
 * @author Merijn Schering <mschering@intermesh.nl>
 */
 
GO.bookmarks.CategoryDialog = Ext.extend(GO.dialog.TabbedFormDialog , {
	initComponent : function(){
		
		Ext.apply(this, {
			titleField:'name',
			title:GO.bookmarks.lang.category,
			formControllerUrl: 'bookmarks/category',
			height:600,
			width:500
		});
		
		GO.bookmarks.CategoryDialog.superclass.initComponent.call(this);	
	},
	buildForm : function () {

		this.showInStartMenuCheck = new Ext.ux.form.XCheckbox({
			hideLabel: true,
			boxLabel: GO.bookmarks.lang.showCategoryInStartMenu,
			name: 'show_in_startmenu'
		});

		this.emptyLine = new GO.form.PlainField({
			value: '&nbsp;'
		});
		
		this.propertiesPanel = new Ext.Panel({
			border: false,
			baseParams: {task: 'category'},			
			title:GO.lang['strProperties'],			
			cls:'go-form-panel',waitMsgTarget:true,			
			layout:'form',
			autoScroll:true,
			items:[{
				xtype: 'textfield',
			  name: 'name',
				anchor: '100%',
			  allowBlank:false,
			  fieldLabel: GO.lang.strName
			},
			this.emptyLine,
			this.showInStartMenuCheck
//			,this.selectUser = new GO.form.SelectUser({
//				fieldLabel: GO.lang['strUser'],
//				disabled : !GO.settings.has_admin_permission,
//				value: GO.settings.user_id,
//				anchor: '100%'
//			})
		]
				
		});

		this.addPanel(this.propertiesPanel);	
 
    this.addPermissionsPanel(new GO.grid.PermissionsPanel());    
	}
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ManageCategoriesGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */

GO.bookmarks.ManageCategoriesGrid = function(config){
	
	if(!config)
	{
		config = {};
	}
	
	config.store = GO.bookmarks.writableCategoriesStore; // de categorieen

	config.layout='fit';
	config.autoScroll=true;
	config.split=true;
	config.border=false;	
	config.paging=true;

	var columnModel =  new Ext.grid.ColumnModel({
		defaults:{
			sortable:true
		},
		columns:[
		{
			header: GO.lang.strName, 
			dataIndex: 'name'
		},{
			header: GO.lang.strOwner, 
			dataIndex: 'user_name',
			sortable: false
		}		
		]
	});
	
	config.cm=columnModel;
	
	config.view=new Ext.grid.GridView({
		autoFill: true,
		forceFit: true,
		emptyText: GO.lang['strNoItems']		
	});
	
	config.sm=new Ext.grid.RowSelectionModel();
	config.loadMask=true;
	
	
	this.categoryDialog = new GO.bookmarks.CategoryDialog();
	this.categoryDialog.on('save', function(){   
		this.store.load();
		this.changed=true;
	}, this);
	
	
	config.tbar=[{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function(){				
			this.categoryDialog.show();
		},
		scope: this
	},{
		iconCls: 'btn-delete',
		text: GO.lang['cmdDelete'],
		cls: 'x-btn-text-icon',
		handler: function(){
			this.deleteSelected();
			this.changed=true;
		},
		scope: this
	}];
	
	// Constructor
	GO.bookmarks.ManageCategoriesGrid.superclass.constructor.call(this, config);
	
	this.on('rowdblclick', function(grid, rowIndex){
		var record = grid.getStore().getAt(rowIndex);
		this.categoryDialog.show(record.data.id);
	}, this);

	GO.bookmarks.writableCategoriesStore.load();
	
};


Ext.extend(GO.bookmarks.ManageCategoriesGrid, GO.grid.GridPanel,{
	changed : false
});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ManageCategoryDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */


GO.bookmarks.ManageCategoriesDialog = function(config){
		
	if(!config)
	{
		config={};
	}
		
	this.categoriesGrid = new GO.bookmarks.ManageCategoriesGrid();

	config.maximizable=true;
	config.layout='fit';
	config.modal=false;
	config.resizable=false;
	config.width=500;
	config.height=300;
	config.closeAction='hide';
	config.title= GO.bookmarks.lang.administrateCategories;
	config.items= this.categoriesGrid; // grid in window
	config.buttons=[{
		text: GO.lang['cmdClose'],
		handler: function(){
			this.fireEvent('close', this);
			this.hide();
		},
		scope:this
	}
	];
		
	//constructor
	GO.bookmarks.ManageCategoriesDialog.superclass.constructor.call(this, config);

	this.on('hide', function(){
		if(this.categoriesGrid.changed)
		{
			this.fireEvent('change');
			this.categoriesGrid.changed=false;

			if(GO.bookmarks.comboCategoriesStore.loaded)
				GO.bookmarks.comboCategoriesStore.reload();
		}
	}, this);
	
	this.addEvents({
		'change':true
	});
}

Ext.extend(GO.bookmarks.ManageCategoriesDialog, Ext.Window,{

	});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: BookmarksGrid.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */


GO.bookmarks.BookmarksGrid = function(config){

	config = config || {};
	config.hideHeaders=true;
	config.hideMode='offsets'; // hack
	config.autoScroll=true;

	// de kolommen in de Grid
	config.cm = new Ext.grid.ColumnModel([{
		id: 'name',
		header: GO.bookmarks.lang.title,
		dataIndex: 'name',
		width: 175
	}, {

		header: "URL",
		dataIndex: 'content',
		width: 250,
		renderer:  this.urlrenderer // om url in cel klikbaar te maken
	}, {
		header: GO.bookmarks.lang.category,
		dataIndex: 'category_name',
		width: 125
	}, {
		header: GO.bookmarks.lang.description,
		dataIndex: 'description',
		id:'description'
	}
	]);

	config.sm= new Ext.grid.RowSelectionModel({
		
	});
	
	config.autoExpandColumn='description';


	// GroupingView 
	config.view=  new Ext.grid.GroupingView({
		scrollOffset: 2,
		hideGroupedColumn:true,
		groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "'+GO.lang.items+'" : "'+GO.lang.item+'"]})',
		showGroupName:false,
		forceFit:false

	});


	Ext.apply(config, {
		listeners:{
			render:function(){
				config.store.load();
			}
		}
	});


	GO.bookmarks.BookmarksGrid.superclass.constructor.call(this, config);

	

	// rechtermuisknop, edit bookmark ** show context menu with edit delete 
	//this.on('rowcontextmenu', function(grid, rowIndex){
		//var rec = grid.getStore().getAt(rowIndex).data;
		//GO.bookmarks.showBookmarksDialog({
		//	record:rec,
		//	edit:1
		//});
		
		
	//},this)


	// dubbelklik, edit bookmark
	this.on('rowdblclick', function(grid, rowIndex){
		var rec = grid.getStore().getAt(rowIndex).data;
		GO.bookmarks.showBookmarksDialog({
			record:rec,
			edit:1
		});
	},this)


}


Ext.extend(GO.bookmarks.BookmarksGrid, Ext.grid.GridPanel,{

	// Cel met url roept functie in MainPanel aan hoe
	// een bookmark geopend moet worden, intern of extern (javascript:GO.bookmarks.openBookmark)

	urlrenderer: function(value, css, record, row, column,ds) {
                return ('<a class=normal-link href="#" onclick="GO.bookmarks.openBookmark(\''+ record +'\');" target="">' + value + "</a>") ;
	}


})

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: SelectFile.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */


GO.bookmarks.SelectFile = Ext.extend(Ext.form.TriggerField,{

	triggerClass : 'fs-form-file-select',
	filesFilter : '',
	root_folder_id : 0,
	files_folder_id : 0,
	dialog : false,

	onTriggerClick : function(){

		var thumb_id = this.dialog.formPanel.form.baseParams.id;
		if (!thumb_id) thumbtitle='Example';
		if(!this.thumbsDialog){
			this.thumbsDialog = new GO.bookmarks.ThumbsDialog({
				thumb_id:thumb_id,
				iconfield:this,
				pubicon:this.dialog.formPanel.baseParams.public_icon,
				dialog:this.dialog
			});
		}
		this.thumbsDialog.thumb_id=thumb_id;
		this.thumbsDialog.is_publiclogo=this.dialog.formPanel.baseParams.public_icon;		
		this.thumbsDialog.show();
		this.thumbsDialog.setIcon(this.getValue(), this.thumbsDialog.is_publiclogo);
	}

});

/**
 * Copyright Intermesh
 *
 * This file is part of Group-Office. You should have received a copy of the
 * Group-Office license along with Group-Office. See the file /LICENSE.TXT
 *
 * If you have questions write an e-mail to info@intermesh.nl
 *
 * @version $Id: ThumbsDialog.js 14816 2013-05-21 08:31:20Z mschering $
 * @copyright Copyright Intermesh
 * @author Twan Verhofstad
 */

GO.bookmarks.thumbTpl = new Ext.XTemplate('<div class="thumb-wrap" >'+
		'<div class="thumb">'+
		'<div id="dialog_thumb" class="thumb-name"'+
		' style="background-image:url({logo})"><h1>{title}</h1>{description}</div></div>'
		+'</div>');


GO.bookmarks.ThumbsDialog = function(config){

	this.chosenlogo="";													// pad naar gekozen logo
	
	if(!config)
	{
		config = {};
	}

	config.closeAction='hide';
	config.height=350;
	config.width=800;
	config.layout='border';
	config.title=GO.bookmarks.lang.chooseIcon;
	config.buttons=[{
		text: GO.lang['cmdOk'],
		handler: function(){
			
			this.iconfield.setValue(this.chosenlogo); // pad naar logo
			
			//config.dialog.formPanel.baseParams.public_icon=this.is_publiclogo; // public logo
			config.dialog.setIcon(this.chosenlogo, this.is_publiclogo);
			this.hide();
		},
		scope: this
	}
	,{
		text: GO.lang['cmdClose'],
		handler: function(){
			this.hide();
		},
		scope:this
	}	
	];

 	// laat alle public logo's op deze manier zien, in centerPanel van de dialog
	
	this.logolist  = new Ext.XTemplate(
		'<tpl for=".">',
		'<div class="icons">', '<img src="'+BaseHref+'modules/bookmarks/icons/{filename}"/> </div>',
		'</tpl>',
		'<div style="clear:both"></div>');
	
	this.publiclogoView = new Ext.DataView({
		store: GO.bookmarks.thumbstore,
		tpl: this.logolist,
		cls: 'thumbnails',
		itemSelector:'div.icons',
		multiSelect: false,
		singleSelect: false,
		//trackOver:true,
		border: false,
		style: {
			marginLeft: '13px',
			marginTop: '13px',
			marginRight: '6px'
		}
	});
	
	// verander voorbeeld thumb als er een logo in centerPanel word aangeklikt.

	this.publiclogoView.on('click',function(DV, index, node, e) {
		var record = this.publiclogoView.getRecord(node); // waar hebben we op geklikt?
		this.is_publiclogo=1;
		this.chosenlogo="icons/" + record.data.filename;
		this.setIcon(this.chosenlogo, this.is_publiclogo);		
	},this)

	// voorbeeld thumb, in westPanel
	
	this.thumbExample = new Ext.Component({
		style: {
			marginLeft:'13px'
		}
	});

	// upload logo button in westPanel

	this.uploadFile = new GO.form.UploadFile({ // aangepast met fileAdded event.
		style: {
			marginTop: '6px'
		},
		border: false,
		inputName : 'attachments',
		addText : GO.bookmarks.lang.uploadLogo,
		max: 1		// maar 1 tegelijk, overwrite event word meteen ge-fired.
	});


	// knoppen in een form, voor upload submit
	this.uploadForm = new Ext.form.FormPanel({
		border: false,
		cls : 'go-form-panel',
		fileUpload : true,
		waitMsgTarget : true,
		autoScroll:true,
		baseParams: {
		},
		items : [this.uploadFile]
	});


	// knoppen + voorbeeld in westPanel
	this.westPanel= new Ext.Panel({
		region: 'west',
		//layout: 'form',
		border: true,
		header:false,
		width: 215,
		items: [this.uploadForm,this.thumbExample]
	})

	
	// public logo's in centerPanel'
	this.centerPanel= new Ext.Panel({
		region: 'center',
		autoScroll: true,
		items: [this.publiclogoView]
	})

	Ext.apply(config, {
		listeners:{
			render:function(){
				GO.bookmarks.thumbstore.load();
			}
		}
	});

	// uploadknop fired upload event
	this.uploadFile.on('fileAdded',function(){
		this.is_publiclogo=0; // ge-uploade logo's zijn niet public
		this.uploadHandler(); // fired upload event
	},this )


	config.items=[this.centerPanel,this.westPanel];
	GO.bookmarks.ThumbsDialog.superclass.constructor.call(this, config);
	

	this.addEvents({
		'upload' : true
	 });
}

Ext.extend(GO.bookmarks.ThumbsDialog, Ext.Window, {
	setIcon : function(icon, pub){

		var now = new Date();
		var url = GO.bookmarks.getThumbUrl(icon, pub);
		if(pub==0){
			url += '&amp;time='+now.format('U');
		}

		this.thumbExample.getEl().update(GO.bookmarks.thumbTpl.apply({
				logo:url,
				title:GO.bookmarks.lang.title,
				description:GO.bookmarks.lang.description
			}));
	},

  // kopie / aanpassing uit Files module
	uploadHandler : function(){
		this.uploadForm.form.submit({
			url:GO.url("bookmarks/bookmark/upload"),
			waitMsg : GO.lang.waitMsgUpload,
			params:{
				thumb_id:   this.thumb_id,
				folder_id : this.folder_id
			},
			success:function(form, action){
				this.uploadFile.clearQueue();
				this.fireEvent('upload', action);
				
				this.chosenlogo=action.result.logo;
				this.is_publiclogo=0;

				this.setIcon(this.chosenlogo, this.is_publiclogo);
			},
			failure:function(form, action)
			{
				var error = '';
				if(action.failureType=='client')
				{
					error = GO.lang['strErrorsInForm'];
				}else
				{
					error = action.result.feedback;
				}

				Ext.MessageBox.alert(GO.lang['strError'], error);
			},
			scope: this
		});
	}
});